// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Extensions;

    /// <summary>NetApp account properties</summary>
    public partial class AccountProperties :
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountProperties,
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountPropertiesInternal
    {

        /// <summary>Backing field for <see cref="ActiveDirectory" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IActiveDirectory[] _activeDirectory;

        /// <summary>Active Directories</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IActiveDirectory[] ActiveDirectory { get => this._activeDirectory; set => this._activeDirectory = value; }

        /// <summary>Backing field for <see cref="DisableShowmount" /> property.</summary>
        private bool? _disableShowmount;

        /// <summary>
        /// Shows the status of disableShowmount for all volumes under the subscription, null equals false
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public bool? DisableShowmount { get => this._disableShowmount; }

        /// <summary>Backing field for <see cref="Encryption" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountEncryption _encryption;

        /// <summary>Encryption settings</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountEncryption Encryption { get => (this._encryption = this._encryption ?? new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.AccountEncryption()); set => this._encryption = value; }

        /// <summary>
        /// The encryption keySource (provider). Possible values (case-insensitive): Microsoft.NetApp, Microsoft.KeyVault
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.NetApp.Support.KeySource? EncryptionKeySource { get => ((Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountEncryptionInternal)Encryption).KeySource; set => ((Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountEncryptionInternal)Encryption).KeySource = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.NetApp.Support.KeySource)""); }

        /// <summary>
        /// The principal ID (object ID) of the identity used to authenticate with key vault. Read-only.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Inlined)]
        public string IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountEncryptionInternal)Encryption).IdentityPrincipalId; }

        /// <summary>
        /// The ARM resource identifier of the user assigned identity used to authenticate with key vault. Applicable if identity.type
        /// has 'UserAssigned'. It should match key of identity.userAssignedIdentities.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Inlined)]
        public string IdentityUserAssignedIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountEncryptionInternal)Encryption).IdentityUserAssignedIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountEncryptionInternal)Encryption).IdentityUserAssignedIdentity = value ?? null; }

        /// <summary>Backing field for <see cref="IsMultiAdEnabled" /> property.</summary>
        private bool? _isMultiAdEnabled;

        /// <summary>This will have true value only if account is Multiple AD enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public bool? IsMultiAdEnabled { get => this._isMultiAdEnabled; }

        /// <summary>The name of KeyVault key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Inlined)]
        public string KeyVaultPropertyKeyName { get => ((Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountEncryptionInternal)Encryption).KeyVaultPropertyKeyName; set => ((Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountEncryptionInternal)Encryption).KeyVaultPropertyKeyName = value ?? null; }

        /// <summary>UUID v4 used to identify the Azure Key Vault configuration</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Inlined)]
        public string KeyVaultPropertyKeyVaultId { get => ((Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountEncryptionInternal)Encryption).KeyVaultPropertyKeyVaultId; }

        /// <summary>The resource ID of KeyVault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Inlined)]
        public string KeyVaultPropertyKeyVaultResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountEncryptionInternal)Encryption).KeyVaultPropertyKeyVaultResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountEncryptionInternal)Encryption).KeyVaultPropertyKeyVaultResourceId = value ?? null; }

        /// <summary>The Uri of KeyVault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Inlined)]
        public string KeyVaultPropertyKeyVaultUri { get => ((Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountEncryptionInternal)Encryption).KeyVaultPropertyKeyVaultUri; set => ((Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountEncryptionInternal)Encryption).KeyVaultPropertyKeyVaultUri = value ?? null; }

        /// <summary>Status of the KeyVault connection.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.NetApp.Support.KeyVaultStatus? KeyVaultPropertyStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountEncryptionInternal)Encryption).KeyVaultPropertyStatus; }

        /// <summary>Internal Acessors for DisableShowmount</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountPropertiesInternal.DisableShowmount { get => this._disableShowmount; set { {_disableShowmount = value;} } }

        /// <summary>Internal Acessors for Encryption</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountEncryption Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountPropertiesInternal.Encryption { get => (this._encryption = this._encryption ?? new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.AccountEncryption()); set { {_encryption = value;} } }

        /// <summary>Internal Acessors for EncryptionIdentity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IEncryptionIdentity Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountPropertiesInternal.EncryptionIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountEncryptionInternal)Encryption).Identity; set => ((Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountEncryptionInternal)Encryption).Identity = value; }

        /// <summary>Internal Acessors for EncryptionKeyVaultProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IKeyVaultProperties Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountPropertiesInternal.EncryptionKeyVaultProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountEncryptionInternal)Encryption).KeyVaultProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountEncryptionInternal)Encryption).KeyVaultProperty = value; }

        /// <summary>Internal Acessors for IdentityPrincipalId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountPropertiesInternal.IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountEncryptionInternal)Encryption).IdentityPrincipalId; set => ((Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountEncryptionInternal)Encryption).IdentityPrincipalId = value; }

        /// <summary>Internal Acessors for IsMultiAdEnabled</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountPropertiesInternal.IsMultiAdEnabled { get => this._isMultiAdEnabled; set { {_isMultiAdEnabled = value;} } }

        /// <summary>Internal Acessors for KeyVaultPropertyKeyVaultId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountPropertiesInternal.KeyVaultPropertyKeyVaultId { get => ((Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountEncryptionInternal)Encryption).KeyVaultPropertyKeyVaultId; set => ((Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountEncryptionInternal)Encryption).KeyVaultPropertyKeyVaultId = value; }

        /// <summary>Internal Acessors for KeyVaultPropertyStatus</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Support.KeyVaultStatus? Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountPropertiesInternal.KeyVaultPropertyStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountEncryptionInternal)Encryption).KeyVaultPropertyStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountEncryptionInternal)Encryption).KeyVaultPropertyStatus = value; }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountPropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Backing field for <see cref="NfsV4IdDomain" /> property.</summary>
        private string _nfsV4IdDomain;

        /// <summary>
        /// Domain for NFSv4 user ID mapping. This property will be set for all NetApp accounts in the subscription and region and
        /// only affect non ldap NFSv4 volumes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public string NfsV4IdDomain { get => this._nfsV4IdDomain; set => this._nfsV4IdDomain = value; }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private string _provisioningState;

        /// <summary>Azure lifecycle management</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public string ProvisioningState { get => this._provisioningState; }

        /// <summary>Creates an new <see cref="AccountProperties" /> instance.</summary>
        public AccountProperties()
        {

        }
    }
    /// NetApp account properties
    public partial interface IAccountProperties :
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.IJsonSerializable
    {
        /// <summary>Active Directories</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Active Directories",
        SerializedName = @"activeDirectories",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IActiveDirectory) })]
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IActiveDirectory[] ActiveDirectory { get; set; }
        /// <summary>
        /// Shows the status of disableShowmount for all volumes under the subscription, null equals false
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Shows the status of disableShowmount for all volumes under the subscription, null equals false",
        SerializedName = @"disableShowmount",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DisableShowmount { get;  }
        /// <summary>
        /// The encryption keySource (provider). Possible values (case-insensitive): Microsoft.NetApp, Microsoft.KeyVault
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.NetApp, Microsoft.KeyVault",
        SerializedName = @"keySource",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Support.KeySource) })]
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Support.KeySource? EncryptionKeySource { get; set; }
        /// <summary>
        /// The principal ID (object ID) of the identity used to authenticate with key vault. Read-only.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The principal ID (object ID) of the identity used to authenticate with key vault. Read-only.",
        SerializedName = @"principalId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityPrincipalId { get;  }
        /// <summary>
        /// The ARM resource identifier of the user assigned identity used to authenticate with key vault. Applicable if identity.type
        /// has 'UserAssigned'. It should match key of identity.userAssignedIdentities.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ARM resource identifier of the user assigned identity used to authenticate with key vault. Applicable if identity.type has 'UserAssigned'. It should match key of identity.userAssignedIdentities.",
        SerializedName = @"userAssignedIdentity",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityUserAssignedIdentity { get; set; }
        /// <summary>This will have true value only if account is Multiple AD enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"This will have true value only if account is Multiple AD enabled.",
        SerializedName = @"isMultiAdEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsMultiAdEnabled { get;  }
        /// <summary>The name of KeyVault key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of KeyVault key.",
        SerializedName = @"keyName",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultPropertyKeyName { get; set; }
        /// <summary>UUID v4 used to identify the Azure Key Vault configuration</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"UUID v4 used to identify the Azure Key Vault configuration",
        SerializedName = @"keyVaultId",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultPropertyKeyVaultId { get;  }
        /// <summary>The resource ID of KeyVault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource ID of KeyVault.",
        SerializedName = @"keyVaultResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultPropertyKeyVaultResourceId { get; set; }
        /// <summary>The Uri of KeyVault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Uri of KeyVault.",
        SerializedName = @"keyVaultUri",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultPropertyKeyVaultUri { get; set; }
        /// <summary>Status of the KeyVault connection.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Status of the KeyVault connection.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Support.KeyVaultStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Support.KeyVaultStatus? KeyVaultPropertyStatus { get;  }
        /// <summary>
        /// Domain for NFSv4 user ID mapping. This property will be set for all NetApp accounts in the subscription and region and
        /// only affect non ldap NFSv4 volumes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Domain for NFSv4 user ID mapping. This property will be set for all NetApp accounts in the subscription and region and only affect non ldap NFSv4 volumes.",
        SerializedName = @"nfsV4IDDomain",
        PossibleTypes = new [] { typeof(string) })]
        string NfsV4IdDomain { get; set; }
        /// <summary>Azure lifecycle management</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Azure lifecycle management",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        string ProvisioningState { get;  }

    }
    /// NetApp account properties
    internal partial interface IAccountPropertiesInternal

    {
        /// <summary>Active Directories</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IActiveDirectory[] ActiveDirectory { get; set; }
        /// <summary>
        /// Shows the status of disableShowmount for all volumes under the subscription, null equals false
        /// </summary>
        bool? DisableShowmount { get; set; }
        /// <summary>Encryption settings</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IAccountEncryption Encryption { get; set; }
        /// <summary>
        /// Identity used to authenticate to KeyVault. Applicable if keySource is 'Microsoft.KeyVault'.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IEncryptionIdentity EncryptionIdentity { get; set; }
        /// <summary>
        /// The encryption keySource (provider). Possible values (case-insensitive): Microsoft.NetApp, Microsoft.KeyVault
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Support.KeySource? EncryptionKeySource { get; set; }
        /// <summary>
        /// Properties provided by KeVault. Applicable if keySource is 'Microsoft.KeyVault'.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IKeyVaultProperties EncryptionKeyVaultProperty { get; set; }
        /// <summary>
        /// The principal ID (object ID) of the identity used to authenticate with key vault. Read-only.
        /// </summary>
        string IdentityPrincipalId { get; set; }
        /// <summary>
        /// The ARM resource identifier of the user assigned identity used to authenticate with key vault. Applicable if identity.type
        /// has 'UserAssigned'. It should match key of identity.userAssignedIdentities.
        /// </summary>
        string IdentityUserAssignedIdentity { get; set; }
        /// <summary>This will have true value only if account is Multiple AD enabled.</summary>
        bool? IsMultiAdEnabled { get; set; }
        /// <summary>The name of KeyVault key.</summary>
        string KeyVaultPropertyKeyName { get; set; }
        /// <summary>UUID v4 used to identify the Azure Key Vault configuration</summary>
        string KeyVaultPropertyKeyVaultId { get; set; }
        /// <summary>The resource ID of KeyVault.</summary>
        string KeyVaultPropertyKeyVaultResourceId { get; set; }
        /// <summary>The Uri of KeyVault.</summary>
        string KeyVaultPropertyKeyVaultUri { get; set; }
        /// <summary>Status of the KeyVault connection.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Support.KeyVaultStatus? KeyVaultPropertyStatus { get; set; }
        /// <summary>
        /// Domain for NFSv4 user ID mapping. This property will be set for all NetApp accounts in the subscription and region and
        /// only affect non ldap NFSv4 volumes.
        /// </summary>
        string NfsV4IdDomain { get; set; }
        /// <summary>Azure lifecycle management</summary>
        string ProvisioningState { get; set; }

    }
}