// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Extensions;

    /// <summary>Pool properties</summary>
    public partial class PoolProperties :
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IPoolProperties,
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IPoolPropertiesInternal
    {

        /// <summary>Backing field for <see cref="CoolAccess" /> property.</summary>
        private bool? _coolAccess;

        /// <summary>If enabled (true) the pool can contain cool Access enabled volumes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public bool? CoolAccess { get => this._coolAccess; set => this._coolAccess = value; }

        /// <summary>Backing field for <see cref="EncryptionType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.NetApp.Support.EncryptionType? _encryptionType;

        /// <summary>
        /// Encryption type of the capacity pool, set encryption type for data at rest for this pool and all volumes in it. This value
        /// can only be set when creating new pool.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.NetApp.Support.EncryptionType? EncryptionType { get => this._encryptionType; set => this._encryptionType = value; }

        /// <summary>Internal Acessors for PoolId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IPoolPropertiesInternal.PoolId { get => this._poolId; set { {_poolId = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IPoolPropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Internal Acessors for TotalThroughputMibp</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IPoolPropertiesInternal.TotalThroughputMibp { get => this._totalThroughputMibp; set { {_totalThroughputMibp = value;} } }

        /// <summary>Internal Acessors for UtilizedThroughputMibp</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IPoolPropertiesInternal.UtilizedThroughputMibp { get => this._utilizedThroughputMibp; set { {_utilizedThroughputMibp = value;} } }

        /// <summary>Backing field for <see cref="PoolId" /> property.</summary>
        private string _poolId;

        /// <summary>UUID v4 used to identify the Pool</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public string PoolId { get => this._poolId; }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private string _provisioningState;

        /// <summary>Azure lifecycle management</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public string ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="QosType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.NetApp.Support.QosType? _qosType;

        /// <summary>The qos type of the pool</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.NetApp.Support.QosType? QosType { get => this._qosType; set => this._qosType = value; }

        /// <summary>Backing field for <see cref="ServiceLevel" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.NetApp.Support.ServiceLevel _serviceLevel;

        /// <summary>The service level of the file system</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.NetApp.Support.ServiceLevel ServiceLevel { get => this._serviceLevel; set => this._serviceLevel = value; }

        /// <summary>Backing field for <see cref="Size" /> property.</summary>
        private long _size;

        /// <summary>
        /// Provisioned size of the pool (in bytes). Allowed values are in 1TiB chunks (value must be multiply of 4398046511104).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public long Size { get => this._size; set => this._size = value; }

        /// <summary>Backing field for <see cref="TotalThroughputMibp" /> property.</summary>
        private float? _totalThroughputMibp;

        /// <summary>Total throughput of pool in MiB/s</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public float? TotalThroughputMibp { get => this._totalThroughputMibp; }

        /// <summary>Backing field for <see cref="UtilizedThroughputMibp" /> property.</summary>
        private float? _utilizedThroughputMibp;

        /// <summary>Utilized throughput of pool in MiB/s</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public float? UtilizedThroughputMibp { get => this._utilizedThroughputMibp; }

        /// <summary>Creates an new <see cref="PoolProperties" /> instance.</summary>
        public PoolProperties()
        {

        }
    }
    /// Pool properties
    public partial interface IPoolProperties :
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.IJsonSerializable
    {
        /// <summary>If enabled (true) the pool can contain cool Access enabled volumes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If enabled (true) the pool can contain cool Access enabled volumes.",
        SerializedName = @"coolAccess",
        PossibleTypes = new [] { typeof(bool) })]
        bool? CoolAccess { get; set; }
        /// <summary>
        /// Encryption type of the capacity pool, set encryption type for data at rest for this pool and all volumes in it. This value
        /// can only be set when creating new pool.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Encryption type of the capacity pool, set encryption type for data at rest for this pool and all volumes in it. This value can only be set when creating new pool.",
        SerializedName = @"encryptionType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Support.EncryptionType) })]
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Support.EncryptionType? EncryptionType { get; set; }
        /// <summary>UUID v4 used to identify the Pool</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"UUID v4 used to identify the Pool",
        SerializedName = @"poolId",
        PossibleTypes = new [] { typeof(string) })]
        string PoolId { get;  }
        /// <summary>Azure lifecycle management</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Azure lifecycle management",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        string ProvisioningState { get;  }
        /// <summary>The qos type of the pool</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The qos type of the pool",
        SerializedName = @"qosType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Support.QosType) })]
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Support.QosType? QosType { get; set; }
        /// <summary>The service level of the file system</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The service level of the file system",
        SerializedName = @"serviceLevel",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Support.ServiceLevel) })]
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Support.ServiceLevel ServiceLevel { get; set; }
        /// <summary>
        /// Provisioned size of the pool (in bytes). Allowed values are in 1TiB chunks (value must be multiply of 4398046511104).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Provisioned size of the pool (in bytes). Allowed values are in 1TiB chunks (value must be multiply of 4398046511104).",
        SerializedName = @"size",
        PossibleTypes = new [] { typeof(long) })]
        long Size { get; set; }
        /// <summary>Total throughput of pool in MiB/s</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Total throughput of pool in MiB/s",
        SerializedName = @"totalThroughputMibps",
        PossibleTypes = new [] { typeof(float) })]
        float? TotalThroughputMibp { get;  }
        /// <summary>Utilized throughput of pool in MiB/s</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Utilized throughput of pool in MiB/s",
        SerializedName = @"utilizedThroughputMibps",
        PossibleTypes = new [] { typeof(float) })]
        float? UtilizedThroughputMibp { get;  }

    }
    /// Pool properties
    internal partial interface IPoolPropertiesInternal

    {
        /// <summary>If enabled (true) the pool can contain cool Access enabled volumes.</summary>
        bool? CoolAccess { get; set; }
        /// <summary>
        /// Encryption type of the capacity pool, set encryption type for data at rest for this pool and all volumes in it. This value
        /// can only be set when creating new pool.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Support.EncryptionType? EncryptionType { get; set; }
        /// <summary>UUID v4 used to identify the Pool</summary>
        string PoolId { get; set; }
        /// <summary>Azure lifecycle management</summary>
        string ProvisioningState { get; set; }
        /// <summary>The qos type of the pool</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Support.QosType? QosType { get; set; }
        /// <summary>The service level of the file system</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Support.ServiceLevel ServiceLevel { get; set; }
        /// <summary>
        /// Provisioned size of the pool (in bytes). Allowed values are in 1TiB chunks (value must be multiply of 4398046511104).
        /// </summary>
        long Size { get; set; }
        /// <summary>Total throughput of pool in MiB/s</summary>
        float? TotalThroughputMibp { get; set; }
        /// <summary>Utilized throughput of pool in MiB/s</summary>
        float? UtilizedThroughputMibp { get; set; }

    }
}