// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Extensions;

    /// <summary>Active Directory</summary>
    public partial class ActiveDirectory :
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IActiveDirectory,
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IActiveDirectoryInternal
    {

        /// <summary>Backing field for <see cref="AdName" /> property.</summary>
        private string _adName;

        /// <summary>
        /// Name of the active directory machine. This optional parameter is used only while creating kerberos volume
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public string AdName { get => this._adName; set => this._adName = value; }

        /// <summary>Backing field for <see cref="Administrator" /> property.</summary>
        private string[] _administrator;

        /// <summary>
        /// Users to be added to the Built-in Administrators active directory group. A list of unique usernames without domain specifier
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public string[] Administrator { get => this._administrator; set => this._administrator = value; }

        /// <summary>Backing field for <see cref="AesEncryption" /> property.</summary>
        private bool? _aesEncryption;

        /// <summary>If enabled, AES encryption will be enabled for SMB communication.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public bool? AesEncryption { get => this._aesEncryption; set => this._aesEncryption = value; }

        /// <summary>Backing field for <see cref="AllowLocalNfsUsersWithLdap" /> property.</summary>
        private bool? _allowLocalNfsUsersWithLdap;

        /// <summary>
        /// If enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public bool? AllowLocalNfsUsersWithLdap { get => this._allowLocalNfsUsersWithLdap; set => this._allowLocalNfsUsersWithLdap = value; }

        /// <summary>Backing field for <see cref="BackupOperator" /> property.</summary>
        private string[] _backupOperator;

        /// <summary>
        /// Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public string[] BackupOperator { get => this._backupOperator; set => this._backupOperator = value; }

        /// <summary>Backing field for <see cref="Dns" /> property.</summary>
        private string _dns;

        /// <summary>
        /// Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public string Dns { get => this._dns; set => this._dns = value; }

        /// <summary>Backing field for <see cref="Domain" /> property.</summary>
        private string _domain;

        /// <summary>Name of the Active Directory domain</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public string Domain { get => this._domain; set => this._domain = value; }

        /// <summary>Backing field for <see cref="EncryptDcConnection" /> property.</summary>
        private bool? _encryptDcConnection;

        /// <summary>
        /// If enabled, Traffic between the SMB server to Domain Controller (DC) will be encrypted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public bool? EncryptDcConnection { get => this._encryptDcConnection; set => this._encryptDcConnection = value; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private string _id;

        /// <summary>Id of the Active Directory</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public string Id { get => this._id; set => this._id = value; }

        /// <summary>Backing field for <see cref="KdcIP" /> property.</summary>
        private string _kdcIP;

        /// <summary>
        /// kdc server IP addresses for the active directory machine. This optional parameter is used only while creating kerberos
        /// volume.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public string KdcIP { get => this._kdcIP; set => this._kdcIP = value; }

        /// <summary>Backing field for <see cref="LdapOverTl" /> property.</summary>
        private bool? _ldapOverTl;

        /// <summary>Specifies whether or not the LDAP traffic needs to be secured via TLS.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public bool? LdapOverTl { get => this._ldapOverTl; set => this._ldapOverTl = value; }

        /// <summary>Backing field for <see cref="LdapSearchScope" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.ILdapSearchScopeOpt _ldapSearchScope;

        /// <summary>LDAP Search scope options</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.ILdapSearchScopeOpt LdapSearchScope { get => (this._ldapSearchScope = this._ldapSearchScope ?? new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.LdapSearchScopeOpt()); set => this._ldapSearchScope = value; }

        /// <summary>This specifies the group DN, which overrides the base DN for group lookups.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Inlined)]
        public string LdapSearchScopeGroupDn { get => ((Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.ILdapSearchScopeOptInternal)LdapSearchScope).GroupDn; set => ((Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.ILdapSearchScopeOptInternal)LdapSearchScope).GroupDn = value ?? null; }

        /// <summary>
        /// This specifies the custom LDAP search filter to be used when looking up group membership from LDAP server.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Inlined)]
        public string LdapSearchScopeGroupMembershipFilter { get => ((Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.ILdapSearchScopeOptInternal)LdapSearchScope).GroupMembershipFilter; set => ((Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.ILdapSearchScopeOptInternal)LdapSearchScope).GroupMembershipFilter = value ?? null; }

        /// <summary>This specifies the user DN, which overrides the base DN for user lookups.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Inlined)]
        public string LdapSearchScopeUserDn { get => ((Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.ILdapSearchScopeOptInternal)LdapSearchScope).UserDn; set => ((Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.ILdapSearchScopeOptInternal)LdapSearchScope).UserDn = value ?? null; }

        /// <summary>Backing field for <see cref="LdapSigning" /> property.</summary>
        private bool? _ldapSigning;

        /// <summary>Specifies whether or not the LDAP traffic needs to be signed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public bool? LdapSigning { get => this._ldapSigning; set => this._ldapSigning = value; }

        /// <summary>Internal Acessors for LdapSearchScope</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.ILdapSearchScopeOpt Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IActiveDirectoryInternal.LdapSearchScope { get => (this._ldapSearchScope = this._ldapSearchScope ?? new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.LdapSearchScopeOpt()); set { {_ldapSearchScope = value;} } }

        /// <summary>Internal Acessors for Status</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Support.ActiveDirectoryStatus? Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IActiveDirectoryInternal.Status { get => this._status; set { {_status = value;} } }

        /// <summary>Internal Acessors for StatusDetail</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IActiveDirectoryInternal.StatusDetail { get => this._statusDetail; set { {_statusDetail = value;} } }

        /// <summary>Backing field for <see cref="OrganizationalUnit" /> property.</summary>
        private string _organizationalUnit;

        /// <summary>The Organizational Unit (OU) within the Windows Active Directory</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public string OrganizationalUnit { get => this._organizationalUnit; set => this._organizationalUnit = value; }

        /// <summary>Backing field for <see cref="Password" /> property.</summary>
        private string _password;

        /// <summary>
        /// Plain text password of Active Directory domain administrator, value is masked in the response
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public string Password { get => this._password; set => this._password = value; }

        /// <summary>Backing field for <see cref="PreferredServersForLdapClient" /> property.</summary>
        private string _preferredServersForLdapClient;

        /// <summary>
        /// Comma separated list of IPv4 addresses of preferred servers for LDAP client. At most two comma separated IPv4 addresses
        /// can be passed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public string PreferredServersForLdapClient { get => this._preferredServersForLdapClient; set => this._preferredServersForLdapClient = value; }

        /// <summary>Backing field for <see cref="SecurityOperator" /> property.</summary>
        private string[] _securityOperator;

        /// <summary>
        /// Domain Users in the Active directory to be given SeSecurityPrivilege privilege (Needed for SMB Continuously available
        /// shares for SQL). A list of unique usernames without domain specifier
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public string[] SecurityOperator { get => this._securityOperator; set => this._securityOperator = value; }

        /// <summary>Backing field for <see cref="ServerRootCaCertificate" /> property.</summary>
        private string _serverRootCaCertificate;

        /// <summary>
        /// When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's
        /// self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public string ServerRootCaCertificate { get => this._serverRootCaCertificate; set => this._serverRootCaCertificate = value; }

        /// <summary>Backing field for <see cref="Site" /> property.</summary>
        private string _site;

        /// <summary>The Active Directory site the service will limit Domain Controller discovery to</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public string Site { get => this._site; set => this._site = value; }

        /// <summary>Backing field for <see cref="SmbServerName" /> property.</summary>
        private string _smbServerName;

        /// <summary>
        /// NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public string SmbServerName { get => this._smbServerName; set => this._smbServerName = value; }

        /// <summary>Backing field for <see cref="Status" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.NetApp.Support.ActiveDirectoryStatus? _status;

        /// <summary>Status of the Active Directory</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.NetApp.Support.ActiveDirectoryStatus? Status { get => this._status; }

        /// <summary>Backing field for <see cref="StatusDetail" /> property.</summary>
        private string _statusDetail;

        /// <summary>Any details in regards to the Status of the Active Directory</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public string StatusDetail { get => this._statusDetail; }

        /// <summary>Backing field for <see cref="Username" /> property.</summary>
        private string _username;

        /// <summary>A domain user account with permission to create machine accounts</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public string Username { get => this._username; set => this._username = value; }

        /// <summary>Creates an new <see cref="ActiveDirectory" /> instance.</summary>
        public ActiveDirectory()
        {

        }
    }
    /// Active Directory
    public partial interface IActiveDirectory :
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Name of the active directory machine. This optional parameter is used only while creating kerberos volume
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the active directory machine. This optional parameter is used only while creating kerberos volume",
        SerializedName = @"adName",
        PossibleTypes = new [] { typeof(string) })]
        string AdName { get; set; }
        /// <summary>
        /// Users to be added to the Built-in Administrators active directory group. A list of unique usernames without domain specifier
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Users to be added to the Built-in Administrators active directory group. A list of unique usernames without domain specifier",
        SerializedName = @"administrators",
        PossibleTypes = new [] { typeof(string) })]
        string[] Administrator { get; set; }
        /// <summary>If enabled, AES encryption will be enabled for SMB communication.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If enabled, AES encryption will be enabled for SMB communication.",
        SerializedName = @"aesEncryption",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AesEncryption { get; set; }
        /// <summary>
        /// If enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @" If enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes.",
        SerializedName = @"allowLocalNfsUsersWithLdap",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AllowLocalNfsUsersWithLdap { get; set; }
        /// <summary>
        /// Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier",
        SerializedName = @"backupOperators",
        PossibleTypes = new [] { typeof(string) })]
        string[] BackupOperator { get; set; }
        /// <summary>
        /// Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain",
        SerializedName = @"dns",
        PossibleTypes = new [] { typeof(string) })]
        string Dns { get; set; }
        /// <summary>Name of the Active Directory domain</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the Active Directory domain",
        SerializedName = @"domain",
        PossibleTypes = new [] { typeof(string) })]
        string Domain { get; set; }
        /// <summary>
        /// If enabled, Traffic between the SMB server to Domain Controller (DC) will be encrypted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If enabled, Traffic between the SMB server to Domain Controller (DC) will be encrypted.",
        SerializedName = @"encryptDCConnections",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EncryptDcConnection { get; set; }
        /// <summary>Id of the Active Directory</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Id of the Active Directory",
        SerializedName = @"activeDirectoryId",
        PossibleTypes = new [] { typeof(string) })]
        string Id { get; set; }
        /// <summary>
        /// kdc server IP addresses for the active directory machine. This optional parameter is used only while creating kerberos
        /// volume.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"kdc server IP addresses for the active directory machine. This optional parameter is used only while creating kerberos volume.",
        SerializedName = @"kdcIP",
        PossibleTypes = new [] { typeof(string) })]
        string KdcIP { get; set; }
        /// <summary>Specifies whether or not the LDAP traffic needs to be secured via TLS.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether or not the LDAP traffic needs to be secured via TLS.",
        SerializedName = @"ldapOverTLS",
        PossibleTypes = new [] { typeof(bool) })]
        bool? LdapOverTl { get; set; }
        /// <summary>This specifies the group DN, which overrides the base DN for group lookups.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This specifies the group DN, which overrides the base DN for group lookups.",
        SerializedName = @"groupDN",
        PossibleTypes = new [] { typeof(string) })]
        string LdapSearchScopeGroupDn { get; set; }
        /// <summary>
        /// This specifies the custom LDAP search filter to be used when looking up group membership from LDAP server.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This specifies the custom LDAP search filter to be used when looking up group membership from LDAP server.",
        SerializedName = @"groupMembershipFilter",
        PossibleTypes = new [] { typeof(string) })]
        string LdapSearchScopeGroupMembershipFilter { get; set; }
        /// <summary>This specifies the user DN, which overrides the base DN for user lookups.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This specifies the user DN, which overrides the base DN for user lookups.",
        SerializedName = @"userDN",
        PossibleTypes = new [] { typeof(string) })]
        string LdapSearchScopeUserDn { get; set; }
        /// <summary>Specifies whether or not the LDAP traffic needs to be signed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether or not the LDAP traffic needs to be signed.",
        SerializedName = @"ldapSigning",
        PossibleTypes = new [] { typeof(bool) })]
        bool? LdapSigning { get; set; }
        /// <summary>The Organizational Unit (OU) within the Windows Active Directory</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Organizational Unit (OU) within the Windows Active Directory",
        SerializedName = @"organizationalUnit",
        PossibleTypes = new [] { typeof(string) })]
        string OrganizationalUnit { get; set; }
        /// <summary>
        /// Plain text password of Active Directory domain administrator, value is masked in the response
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Plain text password of Active Directory domain administrator, value is masked in the response",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(string) })]
        string Password { get; set; }
        /// <summary>
        /// Comma separated list of IPv4 addresses of preferred servers for LDAP client. At most two comma separated IPv4 addresses
        /// can be passed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Comma separated list of IPv4 addresses of preferred servers for LDAP client. At most two comma separated IPv4 addresses can be passed.",
        SerializedName = @"preferredServersForLdapClient",
        PossibleTypes = new [] { typeof(string) })]
        string PreferredServersForLdapClient { get; set; }
        /// <summary>
        /// Domain Users in the Active directory to be given SeSecurityPrivilege privilege (Needed for SMB Continuously available
        /// shares for SQL). A list of unique usernames without domain specifier
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Domain Users in the Active directory to be given SeSecurityPrivilege privilege (Needed for SMB Continuously available shares for SQL). A list of unique usernames without domain specifier",
        SerializedName = @"securityOperators",
        PossibleTypes = new [] { typeof(string) })]
        string[] SecurityOperator { get; set; }
        /// <summary>
        /// When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's
        /// self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.",
        SerializedName = @"serverRootCACertificate",
        PossibleTypes = new [] { typeof(string) })]
        string ServerRootCaCertificate { get; set; }
        /// <summary>The Active Directory site the service will limit Domain Controller discovery to</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Active Directory site the service will limit Domain Controller discovery to",
        SerializedName = @"site",
        PossibleTypes = new [] { typeof(string) })]
        string Site { get; set; }
        /// <summary>
        /// NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes",
        SerializedName = @"smbServerName",
        PossibleTypes = new [] { typeof(string) })]
        string SmbServerName { get; set; }
        /// <summary>Status of the Active Directory</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Status of the Active Directory",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Support.ActiveDirectoryStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Support.ActiveDirectoryStatus? Status { get;  }
        /// <summary>Any details in regards to the Status of the Active Directory</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Any details in regards to the Status of the Active Directory",
        SerializedName = @"statusDetails",
        PossibleTypes = new [] { typeof(string) })]
        string StatusDetail { get;  }
        /// <summary>A domain user account with permission to create machine accounts</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A domain user account with permission to create machine accounts",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string Username { get; set; }

    }
    /// Active Directory
    internal partial interface IActiveDirectoryInternal

    {
        /// <summary>
        /// Name of the active directory machine. This optional parameter is used only while creating kerberos volume
        /// </summary>
        string AdName { get; set; }
        /// <summary>
        /// Users to be added to the Built-in Administrators active directory group. A list of unique usernames without domain specifier
        /// </summary>
        string[] Administrator { get; set; }
        /// <summary>If enabled, AES encryption will be enabled for SMB communication.</summary>
        bool? AesEncryption { get; set; }
        /// <summary>
        /// If enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes.
        /// </summary>
        bool? AllowLocalNfsUsersWithLdap { get; set; }
        /// <summary>
        /// Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier
        /// </summary>
        string[] BackupOperator { get; set; }
        /// <summary>
        /// Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain
        /// </summary>
        string Dns { get; set; }
        /// <summary>Name of the Active Directory domain</summary>
        string Domain { get; set; }
        /// <summary>
        /// If enabled, Traffic between the SMB server to Domain Controller (DC) will be encrypted.
        /// </summary>
        bool? EncryptDcConnection { get; set; }
        /// <summary>Id of the Active Directory</summary>
        string Id { get; set; }
        /// <summary>
        /// kdc server IP addresses for the active directory machine. This optional parameter is used only while creating kerberos
        /// volume.
        /// </summary>
        string KdcIP { get; set; }
        /// <summary>Specifies whether or not the LDAP traffic needs to be secured via TLS.</summary>
        bool? LdapOverTl { get; set; }
        /// <summary>LDAP Search scope options</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.ILdapSearchScopeOpt LdapSearchScope { get; set; }
        /// <summary>This specifies the group DN, which overrides the base DN for group lookups.</summary>
        string LdapSearchScopeGroupDn { get; set; }
        /// <summary>
        /// This specifies the custom LDAP search filter to be used when looking up group membership from LDAP server.
        /// </summary>
        string LdapSearchScopeGroupMembershipFilter { get; set; }
        /// <summary>This specifies the user DN, which overrides the base DN for user lookups.</summary>
        string LdapSearchScopeUserDn { get; set; }
        /// <summary>Specifies whether or not the LDAP traffic needs to be signed.</summary>
        bool? LdapSigning { get; set; }
        /// <summary>The Organizational Unit (OU) within the Windows Active Directory</summary>
        string OrganizationalUnit { get; set; }
        /// <summary>
        /// Plain text password of Active Directory domain administrator, value is masked in the response
        /// </summary>
        string Password { get; set; }
        /// <summary>
        /// Comma separated list of IPv4 addresses of preferred servers for LDAP client. At most two comma separated IPv4 addresses
        /// can be passed.
        /// </summary>
        string PreferredServersForLdapClient { get; set; }
        /// <summary>
        /// Domain Users in the Active directory to be given SeSecurityPrivilege privilege (Needed for SMB Continuously available
        /// shares for SQL). A list of unique usernames without domain specifier
        /// </summary>
        string[] SecurityOperator { get; set; }
        /// <summary>
        /// When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's
        /// self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.
        /// </summary>
        string ServerRootCaCertificate { get; set; }
        /// <summary>The Active Directory site the service will limit Domain Controller discovery to</summary>
        string Site { get; set; }
        /// <summary>
        /// NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes
        /// </summary>
        string SmbServerName { get; set; }
        /// <summary>Status of the Active Directory</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Support.ActiveDirectoryStatus? Status { get; set; }
        /// <summary>Any details in regards to the Status of the Active Directory</summary>
        string StatusDetail { get; set; }
        /// <summary>A domain user account with permission to create machine accounts</summary>
        string Username { get; set; }

    }
}