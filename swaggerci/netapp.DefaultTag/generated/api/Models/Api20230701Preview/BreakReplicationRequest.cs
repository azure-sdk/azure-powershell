// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Extensions;

    /// <summary>Break replication request</summary>
    public partial class BreakReplicationRequest :
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IBreakReplicationRequest,
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IBreakReplicationRequestInternal
    {

        /// <summary>Backing field for <see cref="ForceBreakReplication" /> property.</summary>
        private bool? _forceBreakReplication;

        /// <summary>
        /// If replication is in status transferring and you want to force break the replication, set to true
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetApp.PropertyOrigin.Owned)]
        public bool? ForceBreakReplication { get => this._forceBreakReplication; set => this._forceBreakReplication = value; }

        /// <summary>Creates an new <see cref="BreakReplicationRequest" /> instance.</summary>
        public BreakReplicationRequest()
        {

        }
    }
    /// Break replication request
    public partial interface IBreakReplicationRequest :
        Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.IJsonSerializable
    {
        /// <summary>
        /// If replication is in status transferring and you want to force break the replication, set to true
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If replication is in status transferring and you want to force break the replication, set to true",
        SerializedName = @"forceBreakReplication",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ForceBreakReplication { get; set; }

    }
    /// Break replication request
    internal partial interface IBreakReplicationRequestInternal

    {
        /// <summary>
        /// If replication is in status transferring and you want to force break the replication, set to true
        /// </summary>
        bool? ForceBreakReplication { get; set; }

    }
}