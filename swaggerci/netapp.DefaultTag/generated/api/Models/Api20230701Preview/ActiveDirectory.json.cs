// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Extensions;

    /// <summary>Active Directory</summary>
    public partial class ActiveDirectory
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json serialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name= "returnNow" />
        /// output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonObject into a new instance of <see cref="ActiveDirectory" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal ActiveDirectory(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_ldapSearchScope = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonObject>("ldapSearchScope"), out var __jsonLdapSearchScope) ? Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.LdapSearchScopeOpt.FromJson(__jsonLdapSearchScope) : LdapSearchScope;}
            {_id = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("activeDirectoryId"), out var __jsonActiveDirectoryId) ? (string)__jsonActiveDirectoryId : (string)Id;}
            {_username = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("username"), out var __jsonUsername) ? (string)__jsonUsername : (string)Username;}
            {_password = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("password"), out var __jsonPassword) ? (string)__jsonPassword : (string)Password;}
            {_domain = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("domain"), out var __jsonDomain) ? (string)__jsonDomain : (string)Domain;}
            {_dns = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("dns"), out var __jsonDns) ? (string)__jsonDns : (string)Dns;}
            {_status = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("status"), out var __jsonStatus) ? (string)__jsonStatus : (string)Status;}
            {_statusDetail = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("statusDetails"), out var __jsonStatusDetails) ? (string)__jsonStatusDetails : (string)StatusDetail;}
            {_smbServerName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("smbServerName"), out var __jsonSmbServerName) ? (string)__jsonSmbServerName : (string)SmbServerName;}
            {_organizationalUnit = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("organizationalUnit"), out var __jsonOrganizationalUnit) ? (string)__jsonOrganizationalUnit : (string)OrganizationalUnit;}
            {_site = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("site"), out var __jsonSite) ? (string)__jsonSite : (string)Site;}
            {_backupOperator = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonArray>("backupOperators"), out var __jsonBackupOperators) ? If( __jsonBackupOperators as Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonArray, out var __v) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__v, (__u)=>(string) (__u is Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString __t ? (string)(__t.ToString()) : null)) ))() : null : BackupOperator;}
            {_administrator = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonArray>("administrators"), out var __jsonAdministrators) ? If( __jsonAdministrators as Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonArray, out var __q) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__q, (__p)=>(string) (__p is Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString __o ? (string)(__o.ToString()) : null)) ))() : null : Administrator;}
            {_kdcIP = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("kdcIP"), out var __jsonKdcIP) ? (string)__jsonKdcIP : (string)KdcIP;}
            {_adName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("adName"), out var __jsonAdName) ? (string)__jsonAdName : (string)AdName;}
            {_serverRootCaCertificate = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("serverRootCACertificate"), out var __jsonServerRootCaCertificate) ? (string)__jsonServerRootCaCertificate : (string)ServerRootCaCertificate;}
            {_aesEncryption = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonBoolean>("aesEncryption"), out var __jsonAesEncryption) ? (bool?)__jsonAesEncryption : AesEncryption;}
            {_ldapSigning = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonBoolean>("ldapSigning"), out var __jsonLdapSigning) ? (bool?)__jsonLdapSigning : LdapSigning;}
            {_securityOperator = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonArray>("securityOperators"), out var __jsonSecurityOperators) ? If( __jsonSecurityOperators as Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonArray, out var __l) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__l, (__k)=>(string) (__k is Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString __j ? (string)(__j.ToString()) : null)) ))() : null : SecurityOperator;}
            {_ldapOverTl = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonBoolean>("ldapOverTLS"), out var __jsonLdapOverTls) ? (bool?)__jsonLdapOverTls : LdapOverTl;}
            {_allowLocalNfsUsersWithLdap = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonBoolean>("allowLocalNfsUsersWithLdap"), out var __jsonAllowLocalNfsUsersWithLdap) ? (bool?)__jsonAllowLocalNfsUsersWithLdap : AllowLocalNfsUsersWithLdap;}
            {_encryptDcConnection = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonBoolean>("encryptDCConnections"), out var __jsonEncryptDcConnections) ? (bool?)__jsonEncryptDcConnections : EncryptDcConnection;}
            {_preferredServersForLdapClient = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("preferredServersForLdapClient"), out var __jsonPreferredServersForLdapClient) ? (string)__jsonPreferredServersForLdapClient : (string)PreferredServersForLdapClient;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IActiveDirectory.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IActiveDirectory.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IActiveDirectory FromJson(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode node)
        {
            return node is Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonObject json ? new ActiveDirectory(json) : null;
        }

        /// <summary>
        /// Serializes this instance of <see cref="ActiveDirectory" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="ActiveDirectory" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode" />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            AddIf( null != this._ldapSearchScope ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) this._ldapSearchScope.ToJson(null,serializationMode) : null, "ldapSearchScope" ,container.Add );
            AddIf( null != (((object)this._id)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._id.ToString()) : null, "activeDirectoryId" ,container.Add );
            AddIf( null != (((object)this._username)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._username.ToString()) : null, "username" ,container.Add );
            AddIf( null != (((object)this._password)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._password.ToString()) : null, "password" ,container.Add );
            AddIf( null != (((object)this._domain)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._domain.ToString()) : null, "domain" ,container.Add );
            AddIf( null != (((object)this._dns)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._dns.ToString()) : null, "dns" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._status)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._status.ToString()) : null, "status" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._statusDetail)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._statusDetail.ToString()) : null, "statusDetails" ,container.Add );
            }
            AddIf( null != (((object)this._smbServerName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._smbServerName.ToString()) : null, "smbServerName" ,container.Add );
            AddIf( null != (((object)this._organizationalUnit)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._organizationalUnit.ToString()) : null, "organizationalUnit" ,container.Add );
            AddIf( null != (((object)this._site)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._site.ToString()) : null, "site" ,container.Add );
            if (null != this._backupOperator)
            {
                var __w = new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.XNodeArray();
                foreach( var __x in this._backupOperator )
                {
                    AddIf(null != (((object)__x)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(__x.ToString()) : null ,__w.Add);
                }
                container.Add("backupOperators",__w);
            }
            if (null != this._administrator)
            {
                var __r = new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.XNodeArray();
                foreach( var __s in this._administrator )
                {
                    AddIf(null != (((object)__s)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(__s.ToString()) : null ,__r.Add);
                }
                container.Add("administrators",__r);
            }
            AddIf( null != (((object)this._kdcIP)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._kdcIP.ToString()) : null, "kdcIP" ,container.Add );
            AddIf( null != (((object)this._adName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._adName.ToString()) : null, "adName" ,container.Add );
            AddIf( null != (((object)this._serverRootCaCertificate)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._serverRootCaCertificate.ToString()) : null, "serverRootCACertificate" ,container.Add );
            AddIf( null != this._aesEncryption ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonBoolean((bool)this._aesEncryption) : null, "aesEncryption" ,container.Add );
            AddIf( null != this._ldapSigning ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonBoolean((bool)this._ldapSigning) : null, "ldapSigning" ,container.Add );
            if (null != this._securityOperator)
            {
                var __m = new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.XNodeArray();
                foreach( var __n in this._securityOperator )
                {
                    AddIf(null != (((object)__n)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(__n.ToString()) : null ,__m.Add);
                }
                container.Add("securityOperators",__m);
            }
            AddIf( null != this._ldapOverTl ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonBoolean((bool)this._ldapOverTl) : null, "ldapOverTLS" ,container.Add );
            AddIf( null != this._allowLocalNfsUsersWithLdap ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonBoolean((bool)this._allowLocalNfsUsersWithLdap) : null, "allowLocalNfsUsersWithLdap" ,container.Add );
            AddIf( null != this._encryptDcConnection ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonBoolean((bool)this._encryptDcConnection) : null, "encryptDCConnections" ,container.Add );
            AddIf( null != (((object)this._preferredServersForLdapClient)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._preferredServersForLdapClient.ToString()) : null, "preferredServersForLdapClient" ,container.Add );
            AfterToJson(ref container);
            return container;
        }
    }
}