// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Extensions;

    /// <summary>Volume properties</summary>
    public partial class VolumeProperties
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json serialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name= "returnNow" />
        /// output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IVolumeProperties.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IVolumeProperties.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IVolumeProperties FromJson(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode node)
        {
            return node is Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonObject json ? new VolumeProperties(json) : null;
        }

        /// <summary>
        /// Serializes this instance of <see cref="VolumeProperties" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="VolumeProperties" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode" />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            AddIf( null != this._exportPolicy ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) this._exportPolicy.ToJson(null,serializationMode) : null, "exportPolicy" ,container.Add );
            AddIf( null != this._dataProtection ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) this._dataProtection.ToJson(null,serializationMode) : null, "dataProtection" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._fileSystemId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._fileSystemId.ToString()) : null, "fileSystemId" ,container.Add );
            }
            AddIf( null != (((object)this._creationToken)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._creationToken.ToString()) : null, "creationToken" ,container.Add );
            AddIf( null != (((object)this._serviceLevel)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._serviceLevel.ToString()) : null, "serviceLevel" ,container.Add );
            AddIf( (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNumber(this._usageThreshold), "usageThreshold" ,container.Add );
            if (null != this._protocolType)
            {
                var __w = new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.XNodeArray();
                foreach( var __x in this._protocolType )
                {
                    AddIf(null != (((object)__x)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(__x.ToString()) : null ,__w.Add);
                }
                container.Add("protocolTypes",__w);
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._provisioningState)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._provisioningState.ToString()) : null, "provisioningState" ,container.Add );
            }
            AddIf( null != (((object)this._snapshotId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._snapshotId.ToString()) : null, "snapshotId" ,container.Add );
            AddIf( null != this._deleteBaseSnapshot ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonBoolean((bool)this._deleteBaseSnapshot) : null, "deleteBaseSnapshot" ,container.Add );
            AddIf( null != (((object)this._backupId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._backupId.ToString()) : null, "backupId" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._baremetalTenantId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._baremetalTenantId.ToString()) : null, "baremetalTenantId" ,container.Add );
            }
            AddIf( null != (((object)this._subnetId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._subnetId.ToString()) : null, "subnetId" ,container.Add );
            AddIf( null != (((object)this._networkFeature)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._networkFeature.ToString()) : null, "networkFeatures" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._networkSiblingSetId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._networkSiblingSetId.ToString()) : null, "networkSiblingSetId" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._storageToNetworkProximity)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._storageToNetworkProximity.ToString()) : null, "storageToNetworkProximity" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.SerializationMode.IncludeReadOnly))
            {
                if (null != this._mountTarget)
                {
                    var __r = new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.XNodeArray();
                    foreach( var __s in this._mountTarget )
                    {
                        AddIf(__s?.ToJson(null, serializationMode) ,__r.Add);
                    }
                    container.Add("mountTargets",__r);
                }
            }
            AddIf( null != (((object)this._volumeType)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._volumeType.ToString()) : null, "volumeType" ,container.Add );
            AddIf( null != this._isRestoring ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonBoolean((bool)this._isRestoring) : null, "isRestoring" ,container.Add );
            AddIf( null != this._snapshotDirectoryVisible ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonBoolean((bool)this._snapshotDirectoryVisible) : null, "snapshotDirectoryVisible" ,container.Add );
            AddIf( null != this._kerberosEnabled ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonBoolean((bool)this._kerberosEnabled) : null, "kerberosEnabled" ,container.Add );
            AddIf( null != (((object)this._securityStyle)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._securityStyle.ToString()) : null, "securityStyle" ,container.Add );
            AddIf( null != this._smbEncryption ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonBoolean((bool)this._smbEncryption) : null, "smbEncryption" ,container.Add );
            AddIf( null != (((object)this._smbAccessBasedEnumeration)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._smbAccessBasedEnumeration.ToString()) : null, "smbAccessBasedEnumeration" ,container.Add );
            AddIf( null != (((object)this._smbNonBrowsable)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._smbNonBrowsable.ToString()) : null, "smbNonBrowsable" ,container.Add );
            AddIf( null != this._smbContinuouslyAvailable ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonBoolean((bool)this._smbContinuouslyAvailable) : null, "smbContinuouslyAvailable" ,container.Add );
            AddIf( null != this._throughputMibp ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNumber((float)this._throughputMibp) : null, "throughputMibps" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._actualThroughputMibp ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNumber((float)this._actualThroughputMibp) : null, "actualThroughputMibps" ,container.Add );
            }
            AddIf( null != (((object)this._encryptionKeySource)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._encryptionKeySource.ToString()) : null, "encryptionKeySource" ,container.Add );
            AddIf( null != (((object)this._keyVaultPrivateEndpointResourceId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._keyVaultPrivateEndpointResourceId.ToString()) : null, "keyVaultPrivateEndpointResourceId" ,container.Add );
            AddIf( null != this._ldapEnabled ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonBoolean((bool)this._ldapEnabled) : null, "ldapEnabled" ,container.Add );
            AddIf( null != this._coolAccess ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonBoolean((bool)this._coolAccess) : null, "coolAccess" ,container.Add );
            AddIf( null != this._coolnessPeriod ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNumber((int)this._coolnessPeriod) : null, "coolnessPeriod" ,container.Add );
            AddIf( null != (((object)this._coolAccessRetrievalPolicy)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._coolAccessRetrievalPolicy.ToString()) : null, "coolAccessRetrievalPolicy" ,container.Add );
            AddIf( null != (((object)this._unixPermission)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._unixPermission.ToString()) : null, "unixPermissions" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._cloneProgress ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNumber((int)this._cloneProgress) : null, "cloneProgress" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._fileAccessLog)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._fileAccessLog.ToString()) : null, "fileAccessLogs" ,container.Add );
            }
            AddIf( null != (((object)this._avsDataStore)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._avsDataStore.ToString()) : null, "avsDataStore" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.SerializationMode.IncludeReadOnly))
            {
                if (null != this._dataStoreResourceId)
                {
                    var __m = new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.XNodeArray();
                    foreach( var __n in this._dataStoreResourceId )
                    {
                        AddIf(null != (((object)__n)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(__n.ToString()) : null ,__m.Add);
                    }
                    container.Add("dataStoreResourceId",__m);
                }
            }
            AddIf( null != this._isDefaultQuotaEnabled ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonBoolean((bool)this._isDefaultQuotaEnabled) : null, "isDefaultQuotaEnabled" ,container.Add );
            AddIf( null != this._defaultUserQuotaInKiB ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNumber((long)this._defaultUserQuotaInKiB) : null, "defaultUserQuotaInKiBs" ,container.Add );
            AddIf( null != this._defaultGroupQuotaInKiB ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNumber((long)this._defaultGroupQuotaInKiB) : null, "defaultGroupQuotaInKiBs" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._maximumNumberOfFile ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNumber((long)this._maximumNumberOfFile) : null, "maximumNumberOfFiles" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._volumeGroupName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._volumeGroupName.ToString()) : null, "volumeGroupName" ,container.Add );
            }
            AddIf( null != (((object)this._capacityPoolResourceId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._capacityPoolResourceId.ToString()) : null, "capacityPoolResourceId" ,container.Add );
            AddIf( null != (((object)this._proximityPlacementGroup)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._proximityPlacementGroup.ToString()) : null, "proximityPlacementGroup" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._t2Network)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._t2Network.ToString()) : null, "t2Network" ,container.Add );
            }
            AddIf( null != (((object)this._volumeSpecName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._volumeSpecName.ToString()) : null, "volumeSpecName" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._encrypted ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonBoolean((bool)this._encrypted) : null, "encrypted" ,container.Add );
            }
            if (null != this._placementRule)
            {
                var __h = new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.XNodeArray();
                foreach( var __i in this._placementRule )
                {
                    AddIf(__i?.ToJson(null, serializationMode) ,__h.Add);
                }
                container.Add("placementRules",__h);
            }
            AddIf( null != (((object)this._enableSubvolume)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._enableSubvolume.ToString()) : null, "enableSubvolumes" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._provisionedAvailabilityZone)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._provisionedAvailabilityZone.ToString()) : null, "provisionedAvailabilityZone" ,container.Add );
            }
            AddIf( null != this._isLargeVolume ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonBoolean((bool)this._isLargeVolume) : null, "isLargeVolume" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._originatingResourceId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString(this._originatingResourceId.ToString()) : null, "originatingResourceId" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._inheritedSizeInByte ? (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNumber((long)this._inheritedSizeInByte) : null, "inheritedSizeInBytes" ,container.Add );
            }
            AfterToJson(ref container);
            return container;
        }

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonObject into a new instance of <see cref="VolumeProperties" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal VolumeProperties(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_exportPolicy = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonObject>("exportPolicy"), out var __jsonExportPolicy) ? Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.VolumePropertiesExportPolicy.FromJson(__jsonExportPolicy) : ExportPolicy;}
            {_dataProtection = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonObject>("dataProtection"), out var __jsonDataProtection) ? Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.VolumePropertiesDataProtection.FromJson(__jsonDataProtection) : DataProtection;}
            {_fileSystemId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("fileSystemId"), out var __jsonFileSystemId) ? (string)__jsonFileSystemId : (string)FileSystemId;}
            {_creationToken = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("creationToken"), out var __jsonCreationToken) ? (string)__jsonCreationToken : (string)CreationToken;}
            {_serviceLevel = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("serviceLevel"), out var __jsonServiceLevel) ? (string)__jsonServiceLevel : (string)ServiceLevel;}
            {_usageThreshold = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNumber>("usageThreshold"), out var __jsonUsageThreshold) ? (long)__jsonUsageThreshold : UsageThreshold;}
            {_protocolType = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonArray>("protocolTypes"), out var __jsonProtocolTypes) ? If( __jsonProtocolTypes as Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonArray, out var __v) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__v, (__u)=>(string) (__u is Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString __t ? (string)(__t.ToString()) : null)) ))() : null : ProtocolType;}
            {_provisioningState = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("provisioningState"), out var __jsonProvisioningState) ? (string)__jsonProvisioningState : (string)ProvisioningState;}
            {_snapshotId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("snapshotId"), out var __jsonSnapshotId) ? (string)__jsonSnapshotId : (string)SnapshotId;}
            {_deleteBaseSnapshot = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonBoolean>("deleteBaseSnapshot"), out var __jsonDeleteBaseSnapshot) ? (bool?)__jsonDeleteBaseSnapshot : DeleteBaseSnapshot;}
            {_backupId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("backupId"), out var __jsonBackupId) ? (string)__jsonBackupId : (string)BackupId;}
            {_baremetalTenantId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("baremetalTenantId"), out var __jsonBaremetalTenantId) ? (string)__jsonBaremetalTenantId : (string)BaremetalTenantId;}
            {_subnetId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("subnetId"), out var __jsonSubnetId) ? (string)__jsonSubnetId : (string)SubnetId;}
            {_networkFeature = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("networkFeatures"), out var __jsonNetworkFeatures) ? (string)__jsonNetworkFeatures : (string)NetworkFeature;}
            {_networkSiblingSetId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("networkSiblingSetId"), out var __jsonNetworkSiblingSetId) ? (string)__jsonNetworkSiblingSetId : (string)NetworkSiblingSetId;}
            {_storageToNetworkProximity = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("storageToNetworkProximity"), out var __jsonStorageToNetworkProximity) ? (string)__jsonStorageToNetworkProximity : (string)StorageToNetworkProximity;}
            {_mountTarget = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonArray>("mountTargets"), out var __jsonMountTargets) ? If( __jsonMountTargets as Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonArray, out var __q) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IMountTargetProperties[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__q, (__p)=>(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IMountTargetProperties) (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.MountTargetProperties.FromJson(__p) )) ))() : null : MountTarget;}
            {_volumeType = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("volumeType"), out var __jsonVolumeType) ? (string)__jsonVolumeType : (string)VolumeType;}
            {_isRestoring = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonBoolean>("isRestoring"), out var __jsonIsRestoring) ? (bool?)__jsonIsRestoring : IsRestoring;}
            {_snapshotDirectoryVisible = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonBoolean>("snapshotDirectoryVisible"), out var __jsonSnapshotDirectoryVisible) ? (bool?)__jsonSnapshotDirectoryVisible : SnapshotDirectoryVisible;}
            {_kerberosEnabled = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonBoolean>("kerberosEnabled"), out var __jsonKerberosEnabled) ? (bool?)__jsonKerberosEnabled : KerberosEnabled;}
            {_securityStyle = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("securityStyle"), out var __jsonSecurityStyle) ? (string)__jsonSecurityStyle : (string)SecurityStyle;}
            {_smbEncryption = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonBoolean>("smbEncryption"), out var __jsonSmbEncryption) ? (bool?)__jsonSmbEncryption : SmbEncryption;}
            {_smbAccessBasedEnumeration = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("smbAccessBasedEnumeration"), out var __jsonSmbAccessBasedEnumeration) ? (string)__jsonSmbAccessBasedEnumeration : (string)SmbAccessBasedEnumeration;}
            {_smbNonBrowsable = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("smbNonBrowsable"), out var __jsonSmbNonBrowsable) ? (string)__jsonSmbNonBrowsable : (string)SmbNonBrowsable;}
            {_smbContinuouslyAvailable = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonBoolean>("smbContinuouslyAvailable"), out var __jsonSmbContinuouslyAvailable) ? (bool?)__jsonSmbContinuouslyAvailable : SmbContinuouslyAvailable;}
            {_throughputMibp = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNumber>("throughputMibps"), out var __jsonThroughputMibps) ? (float?)__jsonThroughputMibps : ThroughputMibp;}
            {_actualThroughputMibp = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNumber>("actualThroughputMibps"), out var __jsonActualThroughputMibps) ? (float?)__jsonActualThroughputMibps : ActualThroughputMibp;}
            {_encryptionKeySource = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("encryptionKeySource"), out var __jsonEncryptionKeySource) ? (string)__jsonEncryptionKeySource : (string)EncryptionKeySource;}
            {_keyVaultPrivateEndpointResourceId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("keyVaultPrivateEndpointResourceId"), out var __jsonKeyVaultPrivateEndpointResourceId) ? (string)__jsonKeyVaultPrivateEndpointResourceId : (string)KeyVaultPrivateEndpointResourceId;}
            {_ldapEnabled = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonBoolean>("ldapEnabled"), out var __jsonLdapEnabled) ? (bool?)__jsonLdapEnabled : LdapEnabled;}
            {_coolAccess = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonBoolean>("coolAccess"), out var __jsonCoolAccess) ? (bool?)__jsonCoolAccess : CoolAccess;}
            {_coolnessPeriod = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNumber>("coolnessPeriod"), out var __jsonCoolnessPeriod) ? (int?)__jsonCoolnessPeriod : CoolnessPeriod;}
            {_coolAccessRetrievalPolicy = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("coolAccessRetrievalPolicy"), out var __jsonCoolAccessRetrievalPolicy) ? (string)__jsonCoolAccessRetrievalPolicy : (string)CoolAccessRetrievalPolicy;}
            {_unixPermission = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("unixPermissions"), out var __jsonUnixPermissions) ? (string)__jsonUnixPermissions : (string)UnixPermission;}
            {_cloneProgress = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNumber>("cloneProgress"), out var __jsonCloneProgress) ? (int?)__jsonCloneProgress : CloneProgress;}
            {_fileAccessLog = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("fileAccessLogs"), out var __jsonFileAccessLogs) ? (string)__jsonFileAccessLogs : (string)FileAccessLog;}
            {_avsDataStore = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("avsDataStore"), out var __jsonAvsDataStore) ? (string)__jsonAvsDataStore : (string)AvsDataStore;}
            {_dataStoreResourceId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonArray>("dataStoreResourceId"), out var __jsonDataStoreResourceId) ? If( __jsonDataStoreResourceId as Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonArray, out var __l) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__l, (__k)=>(string) (__k is Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString __j ? (string)(__j.ToString()) : null)) ))() : null : DataStoreResourceId;}
            {_isDefaultQuotaEnabled = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonBoolean>("isDefaultQuotaEnabled"), out var __jsonIsDefaultQuotaEnabled) ? (bool?)__jsonIsDefaultQuotaEnabled : IsDefaultQuotaEnabled;}
            {_defaultUserQuotaInKiB = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNumber>("defaultUserQuotaInKiBs"), out var __jsonDefaultUserQuotaInKiBs) ? (long?)__jsonDefaultUserQuotaInKiBs : DefaultUserQuotaInKiB;}
            {_defaultGroupQuotaInKiB = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNumber>("defaultGroupQuotaInKiBs"), out var __jsonDefaultGroupQuotaInKiBs) ? (long?)__jsonDefaultGroupQuotaInKiBs : DefaultGroupQuotaInKiB;}
            {_maximumNumberOfFile = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNumber>("maximumNumberOfFiles"), out var __jsonMaximumNumberOfFiles) ? (long?)__jsonMaximumNumberOfFiles : MaximumNumberOfFile;}
            {_volumeGroupName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("volumeGroupName"), out var __jsonVolumeGroupName) ? (string)__jsonVolumeGroupName : (string)VolumeGroupName;}
            {_capacityPoolResourceId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("capacityPoolResourceId"), out var __jsonCapacityPoolResourceId) ? (string)__jsonCapacityPoolResourceId : (string)CapacityPoolResourceId;}
            {_proximityPlacementGroup = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("proximityPlacementGroup"), out var __jsonProximityPlacementGroup) ? (string)__jsonProximityPlacementGroup : (string)ProximityPlacementGroup;}
            {_t2Network = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("t2Network"), out var __jsonT2Network) ? (string)__jsonT2Network : (string)T2Network;}
            {_volumeSpecName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("volumeSpecName"), out var __jsonVolumeSpecName) ? (string)__jsonVolumeSpecName : (string)VolumeSpecName;}
            {_encrypted = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonBoolean>("encrypted"), out var __jsonEncrypted) ? (bool?)__jsonEncrypted : Encrypted;}
            {_placementRule = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonArray>("placementRules"), out var __jsonPlacementRules) ? If( __jsonPlacementRules as Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonArray, out var __g) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IPlacementKeyValuePairs[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__g, (__f)=>(Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.IPlacementKeyValuePairs) (Microsoft.Azure.PowerShell.Cmdlets.NetApp.Models.Api20230701Preview.PlacementKeyValuePairs.FromJson(__f) )) ))() : null : PlacementRule;}
            {_enableSubvolume = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("enableSubvolumes"), out var __jsonEnableSubvolumes) ? (string)__jsonEnableSubvolumes : (string)EnableSubvolume;}
            {_provisionedAvailabilityZone = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("provisionedAvailabilityZone"), out var __jsonProvisionedAvailabilityZone) ? (string)__jsonProvisionedAvailabilityZone : (string)ProvisionedAvailabilityZone;}
            {_isLargeVolume = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonBoolean>("isLargeVolume"), out var __jsonIsLargeVolume) ? (bool?)__jsonIsLargeVolume : IsLargeVolume;}
            {_originatingResourceId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonString>("originatingResourceId"), out var __jsonOriginatingResourceId) ? (string)__jsonOriginatingResourceId : (string)OriginatingResourceId;}
            {_inheritedSizeInByte = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.NetApp.Runtime.Json.JsonNumber>("inheritedSizeInBytes"), out var __jsonInheritedSizeInBytes) ? (long?)__jsonInheritedSizeInBytes : InheritedSizeInByte;}
            AfterFromJson(json);
        }
    }
}