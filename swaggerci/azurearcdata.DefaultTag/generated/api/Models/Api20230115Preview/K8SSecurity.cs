// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Extensions;

    /// <summary>The kubernetes security information.</summary>
    public partial class K8SSecurity :
        Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8SSecurity,
        Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8SSecurityInternal
    {

        /// <summary>Backing field for <see cref="ActiveDirectory" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8SActiveDirectory _activeDirectory;

        /// <summary>The kubernetes active directory information.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Origin(Microsoft.Azure.PowerShell.Cmdlets.Arc.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8SActiveDirectory ActiveDirectory { get => (this._activeDirectory = this._activeDirectory ?? new Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.K8SActiveDirectory()); set => this._activeDirectory = value; }

        /// <summary>Account name for AAD</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Origin(Microsoft.Azure.PowerShell.Cmdlets.Arc.PropertyOrigin.Inlined)]
        public string ActiveDirectoryAccountName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8SActiveDirectoryInternal)ActiveDirectory).AccountName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8SActiveDirectoryInternal)ActiveDirectory).AccountName = value ?? null; }

        /// <summary>An array of encryption types</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Origin(Microsoft.Azure.PowerShell.Cmdlets.Arc.PropertyOrigin.Inlined)]
        public string[] ActiveDirectoryEncryptionType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8SActiveDirectoryInternal)ActiveDirectory).EncryptionType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8SActiveDirectoryInternal)ActiveDirectory).EncryptionType = value ?? null /* arrayOf */; }

        /// <summary>Keytab secret used to authenticate with Active Directory.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Origin(Microsoft.Azure.PowerShell.Cmdlets.Arc.PropertyOrigin.Inlined)]
        public string ActiveDirectoryKeytabSecret { get => ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8SActiveDirectoryInternal)ActiveDirectory).KeytabSecret; set => ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8SActiveDirectoryInternal)ActiveDirectory).KeytabSecret = value ?? null; }

        /// <summary>Backing field for <see cref="AdminLoginSecret" /> property.</summary>
        private string _adminLoginSecret;

        /// <summary>Admin login secret key</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Origin(Microsoft.Azure.PowerShell.Cmdlets.Arc.PropertyOrigin.Owned)]
        public string AdminLoginSecret { get => this._adminLoginSecret; set => this._adminLoginSecret = value; }

        /// <summary>Name of the connector</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Origin(Microsoft.Azure.PowerShell.Cmdlets.Arc.PropertyOrigin.Inlined)]
        public string ConnectorName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8SActiveDirectoryInternal)ActiveDirectory).ConnectorName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8SActiveDirectoryInternal)ActiveDirectory).ConnectorName = value ?? null; }

        /// <summary>Name space of the connector</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Origin(Microsoft.Azure.PowerShell.Cmdlets.Arc.PropertyOrigin.Inlined)]
        public string ConnectorNamespace { get => ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8SActiveDirectoryInternal)ActiveDirectory).ConnectorNamespace; set => ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8SActiveDirectoryInternal)ActiveDirectory).ConnectorNamespace = value ?? null; }

        /// <summary>Internal Acessors for ActiveDirectory</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8SActiveDirectory Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8SSecurityInternal.ActiveDirectory { get => (this._activeDirectory = this._activeDirectory ?? new Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.K8SActiveDirectory()); set { {_activeDirectory = value;} } }

        /// <summary>Internal Acessors for ActiveDirectoryConnector</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8SActiveDirectoryConnector Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8SSecurityInternal.ActiveDirectoryConnector { get => ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8SActiveDirectoryInternal)ActiveDirectory).Connector; set => ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8SActiveDirectoryInternal)ActiveDirectory).Connector = value; }

        /// <summary>Internal Acessors for TransparentDataEncryption</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8StransparentDataEncryption Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8SSecurityInternal.TransparentDataEncryption { get => (this._transparentDataEncryption = this._transparentDataEncryption ?? new Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.K8StransparentDataEncryption()); set { {_transparentDataEncryption = value;} } }

        /// <summary>Backing field for <see cref="ServiceCertificateSecret" /> property.</summary>
        private string _serviceCertificateSecret;

        /// <summary>Service certificate secret used</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Origin(Microsoft.Azure.PowerShell.Cmdlets.Arc.PropertyOrigin.Owned)]
        public string ServiceCertificateSecret { get => this._serviceCertificateSecret; set => this._serviceCertificateSecret = value; }

        /// <summary>Backing field for <see cref="TransparentDataEncryption" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8StransparentDataEncryption _transparentDataEncryption;

        /// <summary>Transparent data encryption information.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Origin(Microsoft.Azure.PowerShell.Cmdlets.Arc.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8StransparentDataEncryption TransparentDataEncryption { get => (this._transparentDataEncryption = this._transparentDataEncryption ?? new Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.K8StransparentDataEncryption()); set => this._transparentDataEncryption = value; }

        /// <summary>
        /// Transparent data encryption mode. Can be Service Managed, Customer managed or disabled
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Origin(Microsoft.Azure.PowerShell.Cmdlets.Arc.PropertyOrigin.Inlined)]
        public string TransparentDataEncryptionMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8StransparentDataEncryptionInternal)TransparentDataEncryption).Mode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8StransparentDataEncryptionInternal)TransparentDataEncryption).Mode = value ?? null; }

        /// <summary>Protector secret for customer managed Transparent data encryption mode</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Origin(Microsoft.Azure.PowerShell.Cmdlets.Arc.PropertyOrigin.Inlined)]
        public string TransparentDataEncryptionProtectorSecret { get => ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8StransparentDataEncryptionInternal)TransparentDataEncryption).ProtectorSecret; set => ((Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8StransparentDataEncryptionInternal)TransparentDataEncryption).ProtectorSecret = value ?? null; }

        /// <summary>Creates an new <see cref="K8SSecurity" /> instance.</summary>
        public K8SSecurity()
        {

        }
    }
    /// The kubernetes security information.
    public partial interface IK8SSecurity :
        Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.IAssociativeArray<global::System.Object>
    {
        /// <summary>Account name for AAD</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Account name for AAD",
        SerializedName = @"accountName",
        PossibleTypes = new [] { typeof(string) })]
        string ActiveDirectoryAccountName { get; set; }
        /// <summary>An array of encryption types</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An array of encryption types",
        SerializedName = @"encryptionTypes",
        PossibleTypes = new [] { typeof(string) })]
        string[] ActiveDirectoryEncryptionType { get; set; }
        /// <summary>Keytab secret used to authenticate with Active Directory.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Keytab secret used to authenticate with Active Directory.",
        SerializedName = @"keytabSecret",
        PossibleTypes = new [] { typeof(string) })]
        string ActiveDirectoryKeytabSecret { get; set; }
        /// <summary>Admin login secret key</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Admin login secret key",
        SerializedName = @"adminLoginSecret",
        PossibleTypes = new [] { typeof(string) })]
        string AdminLoginSecret { get; set; }
        /// <summary>Name of the connector</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the connector",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string ConnectorName { get; set; }
        /// <summary>Name space of the connector</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name space of the connector",
        SerializedName = @"namespace",
        PossibleTypes = new [] { typeof(string) })]
        string ConnectorNamespace { get; set; }
        /// <summary>Service certificate secret used</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Service certificate secret used",
        SerializedName = @"serviceCertificateSecret",
        PossibleTypes = new [] { typeof(string) })]
        string ServiceCertificateSecret { get; set; }
        /// <summary>
        /// Transparent data encryption mode. Can be Service Managed, Customer managed or disabled
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Transparent data encryption mode. Can be Service Managed, Customer managed or disabled",
        SerializedName = @"mode",
        PossibleTypes = new [] { typeof(string) })]
        string TransparentDataEncryptionMode { get; set; }
        /// <summary>Protector secret for customer managed Transparent data encryption mode</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Protector secret for customer managed Transparent data encryption mode",
        SerializedName = @"protectorSecret",
        PossibleTypes = new [] { typeof(string) })]
        string TransparentDataEncryptionProtectorSecret { get; set; }

    }
    /// The kubernetes security information.
    internal partial interface IK8SSecurityInternal

    {
        /// <summary>The kubernetes active directory information.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8SActiveDirectory ActiveDirectory { get; set; }
        /// <summary>Account name for AAD</summary>
        string ActiveDirectoryAccountName { get; set; }

        Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8SActiveDirectoryConnector ActiveDirectoryConnector { get; set; }
        /// <summary>An array of encryption types</summary>
        string[] ActiveDirectoryEncryptionType { get; set; }
        /// <summary>Keytab secret used to authenticate with Active Directory.</summary>
        string ActiveDirectoryKeytabSecret { get; set; }
        /// <summary>Admin login secret key</summary>
        string AdminLoginSecret { get; set; }
        /// <summary>Name of the connector</summary>
        string ConnectorName { get; set; }
        /// <summary>Name space of the connector</summary>
        string ConnectorNamespace { get; set; }
        /// <summary>Service certificate secret used</summary>
        string ServiceCertificateSecret { get; set; }
        /// <summary>Transparent data encryption information.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8StransparentDataEncryption TransparentDataEncryption { get; set; }
        /// <summary>
        /// Transparent data encryption mode. Can be Service Managed, Customer managed or disabled
        /// </summary>
        string TransparentDataEncryptionMode { get; set; }
        /// <summary>Protector secret for customer managed Transparent data encryption mode</summary>
        string TransparentDataEncryptionProtectorSecret { get; set; }

    }
}