// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Extensions;

    /// <summary>The kubernetes network settings information.</summary>
    public partial class K8SNetworkSettings :
        Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8SNetworkSettings,
        Microsoft.Azure.PowerShell.Cmdlets.Arc.Models.Api20230115Preview.IK8SNetworkSettingsInternal
    {

        /// <summary>Backing field for <see cref="Forceencryption" /> property.</summary>
        private int? _forceencryption;

        /// <summary>
        /// If 1, then SQL Server forces all connections to be encrypted. By default, this option is 0
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Origin(Microsoft.Azure.PowerShell.Cmdlets.Arc.PropertyOrigin.Owned)]
        public int? Forceencryption { get => this._forceencryption; set => this._forceencryption = value; }

        /// <summary>Backing field for <see cref="Tlscipher" /> property.</summary>
        private string _tlscipher;

        /// <summary>Specifies which ciphers are allowed by SQL Server for TLS</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Origin(Microsoft.Azure.PowerShell.Cmdlets.Arc.PropertyOrigin.Owned)]
        public string Tlscipher { get => this._tlscipher; set => this._tlscipher = value; }

        /// <summary>Backing field for <see cref="Tlsprotocol" /> property.</summary>
        private string _tlsprotocol;

        /// <summary>A comma-separated list of which TLS protocols are allowed by SQL Server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Origin(Microsoft.Azure.PowerShell.Cmdlets.Arc.PropertyOrigin.Owned)]
        public string Tlsprotocol { get => this._tlsprotocol; set => this._tlsprotocol = value; }

        /// <summary>Creates an new <see cref="K8SNetworkSettings" /> instance.</summary>
        public K8SNetworkSettings()
        {

        }
    }
    /// The kubernetes network settings information.
    public partial interface IK8SNetworkSettings :
        Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.IJsonSerializable
    {
        /// <summary>
        /// If 1, then SQL Server forces all connections to be encrypted. By default, this option is 0
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If 1, then SQL Server forces all connections to be encrypted. By default, this option is 0",
        SerializedName = @"forceencryption",
        PossibleTypes = new [] { typeof(int) })]
        int? Forceencryption { get; set; }
        /// <summary>Specifies which ciphers are allowed by SQL Server for TLS</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies which ciphers are allowed by SQL Server for TLS",
        SerializedName = @"tlsciphers",
        PossibleTypes = new [] { typeof(string) })]
        string Tlscipher { get; set; }
        /// <summary>A comma-separated list of which TLS protocols are allowed by SQL Server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Arc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A comma-separated list of which TLS protocols are allowed by SQL Server",
        SerializedName = @"tlsprotocols",
        PossibleTypes = new [] { typeof(string) })]
        string Tlsprotocol { get; set; }

    }
    /// The kubernetes network settings information.
    internal partial interface IK8SNetworkSettingsInternal

    {
        /// <summary>
        /// If 1, then SQL Server forces all connections to be encrypted. By default, this option is 0
        /// </summary>
        int? Forceencryption { get; set; }
        /// <summary>Specifies which ciphers are allowed by SQL Server for TLS</summary>
        string Tlscipher { get; set; }
        /// <summary>A comma-separated list of which TLS protocols are allowed by SQL Server</summary>
        string Tlsprotocol { get; set; }

    }
}