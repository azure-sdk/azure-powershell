// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Extensions;

    /// <summary>
    /// A Cache instance. Follows Azure Resource Manager standards: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/resource-api-reference.md
    /// </summary>
    public partial class Cache :
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICache,
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheInternal
    {

        /// <summary>Specifies Directory Services settings of the cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheDirectorySettings DirectoryServicesSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).DirectoryServicesSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).DirectoryServicesSetting = value ?? null /* model class */; }

        /// <summary>
        /// Specifies whether the service will automatically rotate to the newest version of the key in the Key Vault.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public bool? EncryptionSettingRotationToLatestKeyVersionEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).EncryptionSettingRotationToLatestKeyVersionEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).EncryptionSettingRotationToLatestKeyVersionEnabled = value ?? default(bool); }

        /// <summary>Outstanding conditions that need to be investigated and resolved.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICondition[] HealthCondition { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).HealthCondition; }

        /// <summary>List of Cache health states.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.HealthStateType? HealthState { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).HealthState; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).HealthState = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.HealthStateType)""); }

        /// <summary>Describes explanation of state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string HealthStatusDescription { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).HealthStatusDescription; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).HealthStatusDescription = value ?? null; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private string _id;

        /// <summary>Resource ID of the Cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public string Id { get => this._id; }

        /// <summary>Backing field for <see cref="Identity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheIdentity _identity;

        /// <summary>The identity of the cache, if configured.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheIdentity Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.CacheIdentity()); set => this._identity = value; }

        /// <summary>The principal ID for the system-assigned identity of the cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheIdentityInternal)Identity).PrincipalId; }

        /// <summary>The tenant ID associated with the cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string IdentityTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheIdentityInternal)Identity).TenantId; }

        /// <summary>The type of identity used for the cache</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.CacheIdentityType? IdentityType { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheIdentityInternal)Identity).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheIdentityInternal)Identity).Type = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.CacheIdentityType)""); }

        /// <summary>
        /// A dictionary where each key is a user assigned identity resource ID, and each key's value is an empty dictionary.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheIdentityUserAssignedIdentities IdentityUserAssignedIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheIdentityInternal)Identity).UserAssignedIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheIdentityInternal)Identity).UserAssignedIdentity = value ?? null /* model class */; }

        /// <summary>The URL referencing a key encryption key in Key Vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string KeyEncryptionKeyUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).KeyEncryptionKeyUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).KeyEncryptionKeyUrl = value ?? null; }

        /// <summary>Backing field for <see cref="Location" /> property.</summary>
        private string _location;

        /// <summary>Region name string.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public string Location { get => this._location; set => this._location = value; }

        /// <summary>Internal Acessors for EncryptionSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheEncryptionSettings Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheInternal.EncryptionSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).EncryptionSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).EncryptionSetting = value; }

        /// <summary>Internal Acessors for EncryptionSettingKeyEncryptionKey</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.IKeyVaultKeyReference Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheInternal.EncryptionSettingKeyEncryptionKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).EncryptionSettingKeyEncryptionKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).EncryptionSettingKeyEncryptionKey = value; }

        /// <summary>Internal Acessors for Health</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheHealth Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheInternal.Health { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).Health; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).Health = value; }

        /// <summary>Internal Acessors for HealthCondition</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICondition[] Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheInternal.HealthCondition { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).HealthCondition; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).HealthCondition = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheInternal.Id { get => this._id; set { {_id = value;} } }

        /// <summary>Internal Acessors for Identity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheIdentity Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheInternal.Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.CacheIdentity()); set { {_identity = value;} } }

        /// <summary>Internal Acessors for IdentityPrincipalId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheInternal.IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheIdentityInternal)Identity).PrincipalId; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheIdentityInternal)Identity).PrincipalId = value; }

        /// <summary>Internal Acessors for IdentityTenantId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheInternal.IdentityTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheIdentityInternal)Identity).TenantId; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheIdentityInternal)Identity).TenantId = value; }

        /// <summary>Internal Acessors for KeyEncryptionKeySourceVault</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.IKeyVaultKeyReferenceSourceVault Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheInternal.KeyEncryptionKeySourceVault { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).KeyEncryptionKeySourceVault; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).KeyEncryptionKeySourceVault = value; }

        /// <summary>Internal Acessors for MountAddress</summary>
        string[] Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheInternal.MountAddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).MountAddress; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).MountAddress = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheInternal.Name { get => this._name; set { {_name = value;} } }

        /// <summary>Internal Acessors for NetworkSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheNetworkSettings Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheInternal.NetworkSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).NetworkSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).NetworkSetting = value; }

        /// <summary>Internal Acessors for NetworkSettingUtilityAddress</summary>
        string[] Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheInternal.NetworkSettingUtilityAddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).NetworkSettingUtilityAddress; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).NetworkSettingUtilityAddress = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheProperties Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.CacheProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.ProvisioningStateType? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).ProvisioningState = value; }

        /// <summary>Internal Acessors for SecuritySetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheSecuritySettings Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheInternal.SecuritySetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).SecuritySetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).SecuritySetting = value; }

        /// <summary>Internal Acessors for Sku</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheSku Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheInternal.Sku { get => (this._sku = this._sku ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.CacheSku()); set { {_sku = value;} } }

        /// <summary>Internal Acessors for SystemData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20.ISystemData Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheInternal.SystemData { get => (this._systemData = this._systemData ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20.SystemData()); set { {_systemData = value;} } }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheInternal.Type { get => this._type; set { {_type = value;} } }

        /// <summary>Internal Acessors for UpgradeStatus</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheUpgradeStatus Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheInternal.UpgradeStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).UpgradeStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).UpgradeStatus = value; }

        /// <summary>Internal Acessors for UpgradeStatusCurrentFirmwareVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheInternal.UpgradeStatusCurrentFirmwareVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).UpgradeStatusCurrentFirmwareVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).UpgradeStatusCurrentFirmwareVersion = value; }

        /// <summary>Internal Acessors for UpgradeStatusFirmwareUpdateDeadline</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheInternal.UpgradeStatusFirmwareUpdateDeadline { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).UpgradeStatusFirmwareUpdateDeadline; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).UpgradeStatusFirmwareUpdateDeadline = value; }

        /// <summary>Internal Acessors for UpgradeStatusFirmwareUpdateStatus</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.FirmwareStatusType? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheInternal.UpgradeStatusFirmwareUpdateStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).UpgradeStatusFirmwareUpdateStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).UpgradeStatusFirmwareUpdateStatus = value; }

        /// <summary>Internal Acessors for UpgradeStatusLastFirmwareUpdate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheInternal.UpgradeStatusLastFirmwareUpdate { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).UpgradeStatusLastFirmwareUpdate; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).UpgradeStatusLastFirmwareUpdate = value; }

        /// <summary>Internal Acessors for UpgradeStatusPendingFirmwareVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheInternal.UpgradeStatusPendingFirmwareVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).UpgradeStatusPendingFirmwareVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).UpgradeStatusPendingFirmwareVersion = value; }

        /// <summary>Array of IP addresses that can be used by clients mounting this Cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string[] MountAddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).MountAddress; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>Name of Cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public string Name { get => this._name; }

        /// <summary>DNS search domain</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string NetworkSettingDnsSearchDomain { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).NetworkSettingDnsSearchDomain; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).NetworkSettingDnsSearchDomain = value ?? null; }

        /// <summary>
        /// DNS servers for the cache to use. It will be set from the network configuration if no value is provided.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string[] NetworkSettingDnsServer { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).NetworkSettingDnsServer; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).NetworkSettingDnsServer = value ?? null /* arrayOf */; }

        /// <summary>The IPv4 maximum transmission unit configured for the subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public int? NetworkSettingMtu { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).NetworkSettingMtu; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).NetworkSettingMtu = value ?? default(int); }

        /// <summary>
        /// NTP server IP Address or FQDN for the cache to use. The default is time.windows.com.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string NetworkSettingNtpServer { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).NetworkSettingNtpServer; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).NetworkSettingNtpServer = value ?? null; }

        /// <summary>Array of additional IP addresses used by this Cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string[] NetworkSettingUtilityAddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).NetworkSettingUtilityAddress; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheProperties _property;

        /// <summary>Properties of the Cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.CacheProperties()); set => this._property = value; }

        /// <summary>
        /// ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.ProvisioningStateType? ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).ProvisioningState; }

        /// <summary>NFS access policies defined for this cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.INfsAccessPolicy[] SecuritySettingAccessPolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).SecuritySettingAccessPolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).SecuritySettingAccessPolicy = value ?? null /* arrayOf */; }

        /// <summary>The size of this Cache, in GB.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public int? SizeGb { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).CacheSizeGb; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).CacheSizeGb = value ?? default(int); }

        /// <summary>Backing field for <see cref="Sku" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheSku _sku;

        /// <summary>SKU for the Cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheSku Sku { get => (this._sku = this._sku ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.CacheSku()); set => this._sku = value; }

        /// <summary>SKU name for this Cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string SkuName { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheSkuInternal)Sku).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheSkuInternal)Sku).Name = value ?? null; }

        /// <summary>Resource Id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string SourceVaultId { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).SourceVaultId; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).SourceVaultId = value ?? null; }

        /// <summary>Subnet used for the Cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string Subnet { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).Subnet; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).Subnet = value ?? null; }

        /// <summary>Backing field for <see cref="SystemData" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20.ISystemData _systemData;

        /// <summary>The system meta data relating to this resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20.ISystemData SystemData { get => (this._systemData = this._systemData ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20.SystemData()); }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public global::System.DateTime? SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20.ISystemDataInternal)SystemData).CreatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20.ISystemDataInternal)SystemData).CreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20.ISystemDataInternal)SystemData).CreatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20.ISystemDataInternal)SystemData).CreatedBy = value ?? null; }

        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.CreatedByType? SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20.ISystemDataInternal)SystemData).CreatedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20.ISystemDataInternal)SystemData).CreatedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.CreatedByType)""); }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20.ISystemDataInternal)SystemData).LastModifiedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20.ISystemDataInternal)SystemData).LastModifiedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20.ISystemDataInternal)SystemData).LastModifiedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20.ISystemDataInternal)SystemData).LastModifiedBy = value ?? null; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.CreatedByType? SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20.ISystemDataInternal)SystemData).LastModifiedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20.ISystemDataInternal)SystemData).LastModifiedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.CreatedByType)""); }

        /// <summary>Backing field for <see cref="Tag" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheTags _tag;

        /// <summary>Resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheTags Tag { get => (this._tag = this._tag ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.CacheTags()); set => this._tag = value; }

        /// <summary>Backing field for <see cref="Type" /> property.</summary>
        private string _type;

        /// <summary>Type of the Cache; Microsoft.StorageCache/Cache</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public string Type { get => this._type; }

        /// <summary>Version string of the firmware currently installed on this Cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string UpgradeStatusCurrentFirmwareVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).UpgradeStatusCurrentFirmwareVersion; }

        /// <summary>
        /// Time at which the pending firmware update will automatically be installed on the Cache.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public global::System.DateTime? UpgradeStatusFirmwareUpdateDeadline { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).UpgradeStatusFirmwareUpdateDeadline; }

        /// <summary>
        /// True if there is a firmware update ready to install on this Cache. The firmware will automatically be installed after
        /// firmwareUpdateDeadline if not triggered earlier via the upgrade operation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.FirmwareStatusType? UpgradeStatusFirmwareUpdateStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).UpgradeStatusFirmwareUpdateStatus; }

        /// <summary>Time of the last successful firmware update.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public global::System.DateTime? UpgradeStatusLastFirmwareUpdate { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).UpgradeStatusLastFirmwareUpdate; }

        /// <summary>
        /// When firmwareUpdateAvailable is true, this field holds the version string for the update.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string UpgradeStatusPendingFirmwareVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).UpgradeStatusPendingFirmwareVersion; }

        /// <summary>
        /// Availability zones for resources. This field should only contain a single element in the array.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string[] Zone { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).Zone; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICachePropertiesInternal)Property).Zone = value ?? null /* arrayOf */; }

        /// <summary>Creates an new <see cref="Cache" /> instance.</summary>
        public Cache()
        {

        }
    }
    /// A Cache instance. Follows Azure Resource Manager standards: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/resource-api-reference.md
    public partial interface ICache :
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.IJsonSerializable
    {
        /// <summary>Specifies Directory Services settings of the cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies Directory Services settings of the cache.",
        SerializedName = @"directoryServicesSettings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheDirectorySettings) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheDirectorySettings DirectoryServicesSetting { get; set; }
        /// <summary>
        /// Specifies whether the service will automatically rotate to the newest version of the key in the Key Vault.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether the service will automatically rotate to the newest version of the key in the Key Vault.",
        SerializedName = @"rotationToLatestKeyVersionEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EncryptionSettingRotationToLatestKeyVersionEnabled { get; set; }
        /// <summary>Outstanding conditions that need to be investigated and resolved.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Outstanding conditions that need to be investigated and resolved.",
        SerializedName = @"conditions",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICondition) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICondition[] HealthCondition { get;  }
        /// <summary>List of Cache health states.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of Cache health states.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.HealthStateType) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.HealthStateType? HealthState { get; set; }
        /// <summary>Describes explanation of state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Describes explanation of state.",
        SerializedName = @"statusDescription",
        PossibleTypes = new [] { typeof(string) })]
        string HealthStatusDescription { get; set; }
        /// <summary>Resource ID of the Cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Resource ID of the Cache.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string Id { get;  }
        /// <summary>The principal ID for the system-assigned identity of the cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The principal ID for the system-assigned identity of the cache.",
        SerializedName = @"principalId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityPrincipalId { get;  }
        /// <summary>The tenant ID associated with the cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The tenant ID associated with the cache.",
        SerializedName = @"tenantId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityTenantId { get;  }
        /// <summary>The type of identity used for the cache</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of identity used for the cache",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.CacheIdentityType) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.CacheIdentityType? IdentityType { get; set; }
        /// <summary>
        /// A dictionary where each key is a user assigned identity resource ID, and each key's value is an empty dictionary.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A dictionary where each key is a user assigned identity resource ID, and each key's value is an empty dictionary.",
        SerializedName = @"userAssignedIdentities",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheIdentityUserAssignedIdentities) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheIdentityUserAssignedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>The URL referencing a key encryption key in Key Vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The URL referencing a key encryption key in Key Vault.",
        SerializedName = @"keyUrl",
        PossibleTypes = new [] { typeof(string) })]
        string KeyEncryptionKeyUrl { get; set; }
        /// <summary>Region name string.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Region name string.",
        SerializedName = @"location",
        PossibleTypes = new [] { typeof(string) })]
        string Location { get; set; }
        /// <summary>Array of IP addresses that can be used by clients mounting this Cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Array of IP addresses that can be used by clients mounting this Cache.",
        SerializedName = @"mountAddresses",
        PossibleTypes = new [] { typeof(string) })]
        string[] MountAddress { get;  }
        /// <summary>Name of Cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Name of Cache.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get;  }
        /// <summary>DNS search domain</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"DNS search domain",
        SerializedName = @"dnsSearchDomain",
        PossibleTypes = new [] { typeof(string) })]
        string NetworkSettingDnsSearchDomain { get; set; }
        /// <summary>
        /// DNS servers for the cache to use. It will be set from the network configuration if no value is provided.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"DNS servers for the cache to use.  It will be set from the network configuration if no value is provided.",
        SerializedName = @"dnsServers",
        PossibleTypes = new [] { typeof(string) })]
        string[] NetworkSettingDnsServer { get; set; }
        /// <summary>The IPv4 maximum transmission unit configured for the subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The IPv4 maximum transmission unit configured for the subnet.",
        SerializedName = @"mtu",
        PossibleTypes = new [] { typeof(int) })]
        int? NetworkSettingMtu { get; set; }
        /// <summary>
        /// NTP server IP Address or FQDN for the cache to use. The default is time.windows.com.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"NTP server IP Address or FQDN for the cache to use. The default is time.windows.com.",
        SerializedName = @"ntpServer",
        PossibleTypes = new [] { typeof(string) })]
        string NetworkSettingNtpServer { get; set; }
        /// <summary>Array of additional IP addresses used by this Cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Array of additional IP addresses used by this Cache.",
        SerializedName = @"utilityAddresses",
        PossibleTypes = new [] { typeof(string) })]
        string[] NetworkSettingUtilityAddress { get;  }
        /// <summary>
        /// ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.ProvisioningStateType) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.ProvisioningStateType? ProvisioningState { get;  }
        /// <summary>NFS access policies defined for this cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"NFS access policies defined for this cache.",
        SerializedName = @"accessPolicies",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.INfsAccessPolicy) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.INfsAccessPolicy[] SecuritySettingAccessPolicy { get; set; }
        /// <summary>The size of this Cache, in GB.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The size of this Cache, in GB.",
        SerializedName = @"cacheSizeGB",
        PossibleTypes = new [] { typeof(int) })]
        int? SizeGb { get; set; }
        /// <summary>SKU name for this Cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SKU name for this Cache.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string SkuName { get; set; }
        /// <summary>Resource Id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource Id.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string SourceVaultId { get; set; }
        /// <summary>Subnet used for the Cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Subnet used for the Cache.",
        SerializedName = @"subnet",
        PossibleTypes = new [] { typeof(string) })]
        string Subnet { get; set; }
        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The timestamp of resource creation (UTC).",
        SerializedName = @"createdAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? SystemDataCreatedAt { get; set; }
        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The identity that created the resource.",
        SerializedName = @"createdBy",
        PossibleTypes = new [] { typeof(string) })]
        string SystemDataCreatedBy { get; set; }
        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of identity that created the resource.",
        SerializedName = @"createdByType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.CreatedByType) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.CreatedByType? SystemDataCreatedByType { get; set; }
        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The timestamp of resource last modification (UTC)",
        SerializedName = @"lastModifiedAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? SystemDataLastModifiedAt { get; set; }
        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The identity that last modified the resource.",
        SerializedName = @"lastModifiedBy",
        PossibleTypes = new [] { typeof(string) })]
        string SystemDataLastModifiedBy { get; set; }
        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of identity that last modified the resource.",
        SerializedName = @"lastModifiedByType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.CreatedByType) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.CreatedByType? SystemDataLastModifiedByType { get; set; }
        /// <summary>Resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource tags.",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheTags) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheTags Tag { get; set; }
        /// <summary>Type of the Cache; Microsoft.StorageCache/Cache</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Type of the Cache; Microsoft.StorageCache/Cache",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string Type { get;  }
        /// <summary>Version string of the firmware currently installed on this Cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Version string of the firmware currently installed on this Cache.",
        SerializedName = @"currentFirmwareVersion",
        PossibleTypes = new [] { typeof(string) })]
        string UpgradeStatusCurrentFirmwareVersion { get;  }
        /// <summary>
        /// Time at which the pending firmware update will automatically be installed on the Cache.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Time at which the pending firmware update will automatically be installed on the Cache.",
        SerializedName = @"firmwareUpdateDeadline",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? UpgradeStatusFirmwareUpdateDeadline { get;  }
        /// <summary>
        /// True if there is a firmware update ready to install on this Cache. The firmware will automatically be installed after
        /// firmwareUpdateDeadline if not triggered earlier via the upgrade operation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"True if there is a firmware update ready to install on this Cache. The firmware will automatically be installed after firmwareUpdateDeadline if not triggered earlier via the upgrade operation.",
        SerializedName = @"firmwareUpdateStatus",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.FirmwareStatusType) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.FirmwareStatusType? UpgradeStatusFirmwareUpdateStatus { get;  }
        /// <summary>Time of the last successful firmware update.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Time of the last successful firmware update.",
        SerializedName = @"lastFirmwareUpdate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? UpgradeStatusLastFirmwareUpdate { get;  }
        /// <summary>
        /// When firmwareUpdateAvailable is true, this field holds the version string for the update.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"When firmwareUpdateAvailable is true, this field holds the version string for the update.",
        SerializedName = @"pendingFirmwareVersion",
        PossibleTypes = new [] { typeof(string) })]
        string UpgradeStatusPendingFirmwareVersion { get;  }
        /// <summary>
        /// Availability zones for resources. This field should only contain a single element in the array.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Availability zones for resources. This field should only contain a single element in the array.",
        SerializedName = @"zones",
        PossibleTypes = new [] { typeof(string) })]
        string[] Zone { get; set; }

    }
    /// A Cache instance. Follows Azure Resource Manager standards: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/resource-api-reference.md
    internal partial interface ICacheInternal

    {
        /// <summary>Specifies Directory Services settings of the cache.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheDirectorySettings DirectoryServicesSetting { get; set; }
        /// <summary>Specifies encryption settings of the cache.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheEncryptionSettings EncryptionSetting { get; set; }
        /// <summary>Specifies the location of the key encryption key in Key Vault.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.IKeyVaultKeyReference EncryptionSettingKeyEncryptionKey { get; set; }
        /// <summary>
        /// Specifies whether the service will automatically rotate to the newest version of the key in the Key Vault.
        /// </summary>
        bool? EncryptionSettingRotationToLatestKeyVersionEnabled { get; set; }
        /// <summary>Health of the Cache.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheHealth Health { get; set; }
        /// <summary>Outstanding conditions that need to be investigated and resolved.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICondition[] HealthCondition { get; set; }
        /// <summary>List of Cache health states.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.HealthStateType? HealthState { get; set; }
        /// <summary>Describes explanation of state.</summary>
        string HealthStatusDescription { get; set; }
        /// <summary>Resource ID of the Cache.</summary>
        string Id { get; set; }
        /// <summary>The identity of the cache, if configured.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheIdentity Identity { get; set; }
        /// <summary>The principal ID for the system-assigned identity of the cache.</summary>
        string IdentityPrincipalId { get; set; }
        /// <summary>The tenant ID associated with the cache.</summary>
        string IdentityTenantId { get; set; }
        /// <summary>The type of identity used for the cache</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.CacheIdentityType? IdentityType { get; set; }
        /// <summary>
        /// A dictionary where each key is a user assigned identity resource ID, and each key's value is an empty dictionary.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheIdentityUserAssignedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>Describes a resource Id to source Key Vault.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.IKeyVaultKeyReferenceSourceVault KeyEncryptionKeySourceVault { get; set; }
        /// <summary>The URL referencing a key encryption key in Key Vault.</summary>
        string KeyEncryptionKeyUrl { get; set; }
        /// <summary>Region name string.</summary>
        string Location { get; set; }
        /// <summary>Array of IP addresses that can be used by clients mounting this Cache.</summary>
        string[] MountAddress { get; set; }
        /// <summary>Name of Cache.</summary>
        string Name { get; set; }
        /// <summary>Specifies network settings of the cache.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheNetworkSettings NetworkSetting { get; set; }
        /// <summary>DNS search domain</summary>
        string NetworkSettingDnsSearchDomain { get; set; }
        /// <summary>
        /// DNS servers for the cache to use. It will be set from the network configuration if no value is provided.
        /// </summary>
        string[] NetworkSettingDnsServer { get; set; }
        /// <summary>The IPv4 maximum transmission unit configured for the subnet.</summary>
        int? NetworkSettingMtu { get; set; }
        /// <summary>
        /// NTP server IP Address or FQDN for the cache to use. The default is time.windows.com.
        /// </summary>
        string NetworkSettingNtpServer { get; set; }
        /// <summary>Array of additional IP addresses used by this Cache.</summary>
        string[] NetworkSettingUtilityAddress { get; set; }
        /// <summary>Properties of the Cache.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheProperties Property { get; set; }
        /// <summary>
        /// ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.ProvisioningStateType? ProvisioningState { get; set; }
        /// <summary>Specifies security settings of the cache.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheSecuritySettings SecuritySetting { get; set; }
        /// <summary>NFS access policies defined for this cache.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.INfsAccessPolicy[] SecuritySettingAccessPolicy { get; set; }
        /// <summary>The size of this Cache, in GB.</summary>
        int? SizeGb { get; set; }
        /// <summary>SKU for the Cache.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheSku Sku { get; set; }
        /// <summary>SKU name for this Cache.</summary>
        string SkuName { get; set; }
        /// <summary>Resource Id.</summary>
        string SourceVaultId { get; set; }
        /// <summary>Subnet used for the Cache.</summary>
        string Subnet { get; set; }
        /// <summary>The system meta data relating to this resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20.ISystemData SystemData { get; set; }
        /// <summary>The timestamp of resource creation (UTC).</summary>
        global::System.DateTime? SystemDataCreatedAt { get; set; }
        /// <summary>The identity that created the resource.</summary>
        string SystemDataCreatedBy { get; set; }
        /// <summary>The type of identity that created the resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.CreatedByType? SystemDataCreatedByType { get; set; }
        /// <summary>The timestamp of resource last modification (UTC)</summary>
        global::System.DateTime? SystemDataLastModifiedAt { get; set; }
        /// <summary>The identity that last modified the resource.</summary>
        string SystemDataLastModifiedBy { get; set; }
        /// <summary>The type of identity that last modified the resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.CreatedByType? SystemDataLastModifiedByType { get; set; }
        /// <summary>Resource tags.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheTags Tag { get; set; }
        /// <summary>Type of the Cache; Microsoft.StorageCache/Cache</summary>
        string Type { get; set; }
        /// <summary>Upgrade status of the Cache.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheUpgradeStatus UpgradeStatus { get; set; }
        /// <summary>Version string of the firmware currently installed on this Cache.</summary>
        string UpgradeStatusCurrentFirmwareVersion { get; set; }
        /// <summary>
        /// Time at which the pending firmware update will automatically be installed on the Cache.
        /// </summary>
        global::System.DateTime? UpgradeStatusFirmwareUpdateDeadline { get; set; }
        /// <summary>
        /// True if there is a firmware update ready to install on this Cache. The firmware will automatically be installed after
        /// firmwareUpdateDeadline if not triggered earlier via the upgrade operation.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.FirmwareStatusType? UpgradeStatusFirmwareUpdateStatus { get; set; }
        /// <summary>Time of the last successful firmware update.</summary>
        global::System.DateTime? UpgradeStatusLastFirmwareUpdate { get; set; }
        /// <summary>
        /// When firmwareUpdateAvailable is true, this field holds the version string for the update.
        /// </summary>
        string UpgradeStatusPendingFirmwareVersion { get; set; }
        /// <summary>
        /// Availability zones for resources. This field should only contain a single element in the array.
        /// </summary>
        string[] Zone { get; set; }

    }
}