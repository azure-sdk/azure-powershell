// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Extensions;

    /// <summary>Properties of the Cache.</summary>
    public partial class CacheProperties
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json erialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <see "returnNow" /> output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <see "returnNow" /> output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonObject into a new instance of <see cref="CacheProperties" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal CacheProperties(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_health = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonObject>("health"), out var __jsonHealth) ? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.CacheHealth.FromJson(__jsonHealth) : Health;}
            {_upgradeStatus = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonObject>("upgradeStatus"), out var __jsonUpgradeStatus) ? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.CacheUpgradeStatus.FromJson(__jsonUpgradeStatus) : UpgradeStatus;}
            {_networkSetting = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonObject>("networkSettings"), out var __jsonNetworkSettings) ? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.CacheNetworkSettings.FromJson(__jsonNetworkSettings) : NetworkSetting;}
            {_encryptionSetting = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonObject>("encryptionSettings"), out var __jsonEncryptionSettings) ? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.CacheEncryptionSettings.FromJson(__jsonEncryptionSettings) : EncryptionSetting;}
            {_securitySetting = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonObject>("securitySettings"), out var __jsonSecuritySettings) ? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.CacheSecuritySettings.FromJson(__jsonSecuritySettings) : SecuritySetting;}
            {_cacheSizeGb = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNumber>("cacheSizeGB"), out var __jsonCacheSizeGb) ? (int?)__jsonCacheSizeGb : CacheSizeGb;}
            {_mountAddress = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonArray>("mountAddresses"), out var __jsonMountAddresses) ? If( __jsonMountAddresses as Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonArray, out var __v) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__v, (__u)=>(string) (__u is Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonString __t ? (string)(__t.ToString()) : null)) ))() : null : MountAddress;}
            {_provisioningState = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonString>("provisioningState"), out var __jsonProvisioningState) ? (string)__jsonProvisioningState : (string)ProvisioningState;}
            {_subnet = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonString>("subnet"), out var __jsonSubnet) ? (string)__jsonSubnet : (string)Subnet;}
            {_zone = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonArray>("zones"), out var __jsonZones) ? If( __jsonZones as Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonArray, out var __q) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__q, (__p)=>(string) (__p is Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonString __o ? (string)(__o.ToString()) : null)) ))() : null : Zone;}
            {_directoryServicesSetting = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonObject>("directoryServicesSettings"), out var __jsonDirectoryServicesSettings) ? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.CacheDirectorySettings.FromJson(__jsonDirectoryServicesSettings) : DirectoryServicesSetting;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheProperties.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheProperties.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api202201.ICacheProperties FromJson(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode node)
        {
            return node is Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonObject json ? new CacheProperties(json) : null;
        }

        /// <summary>
        /// Serializes this instance of <see cref="CacheProperties" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="CacheProperties" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode" />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._health ? (Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode) this._health.ToJson(null,serializationMode) : null, "health" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._upgradeStatus ? (Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode) this._upgradeStatus.ToJson(null,serializationMode) : null, "upgradeStatus" ,container.Add );
            }
            AddIf( null != this._networkSetting ? (Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode) this._networkSetting.ToJson(null,serializationMode) : null, "networkSettings" ,container.Add );
            AddIf( null != this._encryptionSetting ? (Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode) this._encryptionSetting.ToJson(null,serializationMode) : null, "encryptionSettings" ,container.Add );
            AddIf( null != this._securitySetting ? (Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode) this._securitySetting.ToJson(null,serializationMode) : null, "securitySettings" ,container.Add );
            AddIf( null != this._cacheSizeGb ? (Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNumber((int)this._cacheSizeGb) : null, "cacheSizeGB" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.SerializationMode.IncludeReadOnly))
            {
                if (null != this._mountAddress)
                {
                    var __w = new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.XNodeArray();
                    foreach( var __x in this._mountAddress )
                    {
                        AddIf(null != (((object)__x)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonString(__x.ToString()) : null ,__w.Add);
                    }
                    container.Add("mountAddresses",__w);
                }
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._provisioningState)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonString(this._provisioningState.ToString()) : null, "provisioningState" ,container.Add );
            }
            AddIf( null != (((object)this._subnet)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonString(this._subnet.ToString()) : null, "subnet" ,container.Add );
            if (null != this._zone)
            {
                var __r = new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.XNodeArray();
                foreach( var __s in this._zone )
                {
                    AddIf(null != (((object)__s)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonString(__s.ToString()) : null ,__r.Add);
                }
                container.Add("zones",__r);
            }
            AddIf( null != this._directoryServicesSetting ? (Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode) this._directoryServicesSetting.ToJson(null,serializationMode) : null, "directoryServicesSettings" ,container.Add );
            AfterToJson(ref container);
            return container;
        }
    }
}