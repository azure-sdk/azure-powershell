// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20230302Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Extensions;

    /// <summary>The properties used to update a cluster.</summary>
    public partial class ClusterPropertiesForUpdate :
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20230302Preview.IClusterPropertiesForUpdate,
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20230302Preview.IClusterPropertiesForUpdateInternal
    {

        /// <summary>Backing field for <see cref="AdministratorLoginPassword" /> property.</summary>
        private System.Security.SecureString _administratorLoginPassword;

        /// <summary>
        /// The password of the administrator login. Each cluster is created with pre-defined administrative role called ‘citus’.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Owned)]
        public System.Security.SecureString AdministratorLoginPassword { get => this._administratorLoginPassword; set => this._administratorLoginPassword = value; }

        /// <summary>Backing field for <see cref="CitusVersion" /> property.</summary>
        private string _citusVersion;

        /// <summary>The Citus extension version on all cluster servers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Owned)]
        public string CitusVersion { get => this._citusVersion; set => this._citusVersion = value; }

        /// <summary>Backing field for <see cref="CoordinatorEnablePublicIPAccess" /> property.</summary>
        private bool? _coordinatorEnablePublicIPAccess;

        /// <summary>If public access is enabled on coordinator.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Owned)]
        public bool? CoordinatorEnablePublicIPAccess { get => this._coordinatorEnablePublicIPAccess; set => this._coordinatorEnablePublicIPAccess = value; }

        /// <summary>Backing field for <see cref="CoordinatorServerEdition" /> property.</summary>
        private string _coordinatorServerEdition;

        /// <summary>The edition of the coordinator (default: GeneralPurpose).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Owned)]
        public string CoordinatorServerEdition { get => this._coordinatorServerEdition; set => this._coordinatorServerEdition = value; }

        /// <summary>Backing field for <see cref="CoordinatorStorageQuotaInMb" /> property.</summary>
        private int? _coordinatorStorageQuotaInMb;

        /// <summary>The storage of the coordinator in MB.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Owned)]
        public int? CoordinatorStorageQuotaInMb { get => this._coordinatorStorageQuotaInMb; set => this._coordinatorStorageQuotaInMb = value; }

        /// <summary>Backing field for <see cref="CoordinatorVCore" /> property.</summary>
        private int? _coordinatorVCore;

        /// <summary>The vCores count of the coordinator (max: 96).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Owned)]
        public int? CoordinatorVCore { get => this._coordinatorVCore; set => this._coordinatorVCore = value; }

        /// <summary>Backing field for <see cref="EnableHa" /> property.</summary>
        private bool? _enableHa;

        /// <summary>If high availability (HA) is enabled or not for the cluster.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Owned)]
        public bool? EnableHa { get => this._enableHa; set => this._enableHa = value; }

        /// <summary>Backing field for <see cref="EnableShardsOnCoordinator" /> property.</summary>
        private bool? _enableShardsOnCoordinator;

        /// <summary>
        /// If distributed tables are placed on coordinator or not. Should be set to 'true' on single node clusters. Requires shard
        /// rebalancing after value is changed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Owned)]
        public bool? EnableShardsOnCoordinator { get => this._enableShardsOnCoordinator; set => this._enableShardsOnCoordinator = value; }

        /// <summary>Backing field for <see cref="MaintenanceWindow" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20230302Preview.IMaintenanceWindow _maintenanceWindow;

        /// <summary>Maintenance window of a cluster.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20230302Preview.IMaintenanceWindow MaintenanceWindow { get => (this._maintenanceWindow = this._maintenanceWindow ?? new Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20230302Preview.MaintenanceWindow()); set => this._maintenanceWindow = value; }

        /// <summary>Indicates whether custom maintenance window is enabled or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Inlined)]
        public string MaintenanceWindowCustomWindow { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20230302Preview.IMaintenanceWindowInternal)MaintenanceWindow).CustomWindow; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20230302Preview.IMaintenanceWindowInternal)MaintenanceWindow).CustomWindow = value ?? null; }

        /// <summary>Preferred day of the week for maintenance window.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Inlined)]
        public int? MaintenanceWindowDayOfWeek { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20230302Preview.IMaintenanceWindowInternal)MaintenanceWindow).DayOfWeek; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20230302Preview.IMaintenanceWindowInternal)MaintenanceWindow).DayOfWeek = value ?? default(int); }

        /// <summary>Start hour within preferred day of the week for maintenance window.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Inlined)]
        public int? MaintenanceWindowStartHour { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20230302Preview.IMaintenanceWindowInternal)MaintenanceWindow).StartHour; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20230302Preview.IMaintenanceWindowInternal)MaintenanceWindow).StartHour = value ?? default(int); }

        /// <summary>Start minute within the start hour for maintenance window.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Inlined)]
        public int? MaintenanceWindowStartMinute { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20230302Preview.IMaintenanceWindowInternal)MaintenanceWindow).StartMinute; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20230302Preview.IMaintenanceWindowInternal)MaintenanceWindow).StartMinute = value ?? default(int); }

        /// <summary>Internal Acessors for MaintenanceWindow</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20230302Preview.IMaintenanceWindow Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20230302Preview.IClusterPropertiesForUpdateInternal.MaintenanceWindow { get => (this._maintenanceWindow = this._maintenanceWindow ?? new Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20230302Preview.MaintenanceWindow()); set { {_maintenanceWindow = value;} } }

        /// <summary>Internal Acessors for NodeEnablePublicIPAccess</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20230302Preview.IClusterPropertiesForUpdateInternal.NodeEnablePublicIPAccess { get => this._nodeEnablePublicIPAccess; set { {_nodeEnablePublicIPAccess = value;} } }

        /// <summary>Backing field for <see cref="NodeCount" /> property.</summary>
        private int? _nodeCount;

        /// <summary>
        /// Worker node count of the cluster. When node count is 0, it represents a single node configuration with the ability to
        /// create distributed tables on that node. 2 or more worker nodes represent multi-node configuration. Node count value cannot
        /// be 1.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Owned)]
        public int? NodeCount { get => this._nodeCount; set => this._nodeCount = value; }

        /// <summary>Backing field for <see cref="NodeEnablePublicIPAccess" /> property.</summary>
        private bool? _nodeEnablePublicIPAccess;

        /// <summary>If public access is enabled on worker nodes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Owned)]
        public bool? NodeEnablePublicIPAccess { get => this._nodeEnablePublicIPAccess; }

        /// <summary>Backing field for <see cref="NodeServerEdition" /> property.</summary>
        private string _nodeServerEdition;

        /// <summary>The edition of a node (default: MemoryOptimized).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Owned)]
        public string NodeServerEdition { get => this._nodeServerEdition; set => this._nodeServerEdition = value; }

        /// <summary>Backing field for <see cref="NodeStorageQuotaInMb" /> property.</summary>
        private int? _nodeStorageQuotaInMb;

        /// <summary>The storage in MB on each worker node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Owned)]
        public int? NodeStorageQuotaInMb { get => this._nodeStorageQuotaInMb; set => this._nodeStorageQuotaInMb = value; }

        /// <summary>Backing field for <see cref="NodeVCore" /> property.</summary>
        private int? _nodeVCore;

        /// <summary>The compute in vCores on each worker node (max: 104).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Owned)]
        public int? NodeVCore { get => this._nodeVCore; set => this._nodeVCore = value; }

        /// <summary>Backing field for <see cref="PostgresqlVersion" /> property.</summary>
        private string _postgresqlVersion;

        /// <summary>The major PostgreSQL version on all cluster servers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Owned)]
        public string PostgresqlVersion { get => this._postgresqlVersion; set => this._postgresqlVersion = value; }

        /// <summary>Backing field for <see cref="PreferredPrimaryZone" /> property.</summary>
        private string _preferredPrimaryZone;

        /// <summary>Preferred primary availability zone (AZ) for all cluster servers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Owned)]
        public string PreferredPrimaryZone { get => this._preferredPrimaryZone; set => this._preferredPrimaryZone = value; }

        /// <summary>Creates an new <see cref="ClusterPropertiesForUpdate" /> instance.</summary>
        public ClusterPropertiesForUpdate()
        {

        }
    }
    /// The properties used to update a cluster.
    public partial interface IClusterPropertiesForUpdate :
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The password of the administrator login. Each cluster is created with pre-defined administrative role called ‘citus’.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The password of the administrator login. Each cluster is created with pre-defined administrative role called ‘citus’. ",
        SerializedName = @"administratorLoginPassword",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString AdministratorLoginPassword { get; set; }
        /// <summary>The Citus extension version on all cluster servers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Citus extension version on all cluster servers.",
        SerializedName = @"citusVersion",
        PossibleTypes = new [] { typeof(string) })]
        string CitusVersion { get; set; }
        /// <summary>If public access is enabled on coordinator.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If public access is enabled on coordinator.",
        SerializedName = @"coordinatorEnablePublicIpAccess",
        PossibleTypes = new [] { typeof(bool) })]
        bool? CoordinatorEnablePublicIPAccess { get; set; }
        /// <summary>The edition of the coordinator (default: GeneralPurpose).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The edition of the coordinator (default: GeneralPurpose).",
        SerializedName = @"coordinatorServerEdition",
        PossibleTypes = new [] { typeof(string) })]
        string CoordinatorServerEdition { get; set; }
        /// <summary>The storage of the coordinator in MB.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The storage of the coordinator in MB.",
        SerializedName = @"coordinatorStorageQuotaInMb",
        PossibleTypes = new [] { typeof(int) })]
        int? CoordinatorStorageQuotaInMb { get; set; }
        /// <summary>The vCores count of the coordinator (max: 96).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The vCores count of the coordinator (max: 96).",
        SerializedName = @"coordinatorVCores",
        PossibleTypes = new [] { typeof(int) })]
        int? CoordinatorVCore { get; set; }
        /// <summary>If high availability (HA) is enabled or not for the cluster.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If high availability (HA) is enabled or not for the cluster.",
        SerializedName = @"enableHa",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnableHa { get; set; }
        /// <summary>
        /// If distributed tables are placed on coordinator or not. Should be set to 'true' on single node clusters. Requires shard
        /// rebalancing after value is changed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If distributed tables are placed on coordinator or not. Should be set to 'true' on single node clusters. Requires shard rebalancing after value is changed.",
        SerializedName = @"enableShardsOnCoordinator",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnableShardsOnCoordinator { get; set; }
        /// <summary>Indicates whether custom maintenance window is enabled or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether custom maintenance window is enabled or not.",
        SerializedName = @"customWindow",
        PossibleTypes = new [] { typeof(string) })]
        string MaintenanceWindowCustomWindow { get; set; }
        /// <summary>Preferred day of the week for maintenance window.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Preferred day of the week for maintenance window.",
        SerializedName = @"dayOfWeek",
        PossibleTypes = new [] { typeof(int) })]
        int? MaintenanceWindowDayOfWeek { get; set; }
        /// <summary>Start hour within preferred day of the week for maintenance window.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Start hour within preferred day of the week for maintenance window.",
        SerializedName = @"startHour",
        PossibleTypes = new [] { typeof(int) })]
        int? MaintenanceWindowStartHour { get; set; }
        /// <summary>Start minute within the start hour for maintenance window.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Start minute within the start hour for maintenance window.",
        SerializedName = @"startMinute",
        PossibleTypes = new [] { typeof(int) })]
        int? MaintenanceWindowStartMinute { get; set; }
        /// <summary>
        /// Worker node count of the cluster. When node count is 0, it represents a single node configuration with the ability to
        /// create distributed tables on that node. 2 or more worker nodes represent multi-node configuration. Node count value cannot
        /// be 1.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Worker node count of the cluster. When node count is 0, it represents a single node configuration with the ability to create distributed tables on that node. 2 or more worker nodes represent multi-node configuration. Node count value cannot be 1.",
        SerializedName = @"nodeCount",
        PossibleTypes = new [] { typeof(int) })]
        int? NodeCount { get; set; }
        /// <summary>If public access is enabled on worker nodes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"If public access is enabled on worker nodes.",
        SerializedName = @"nodeEnablePublicIpAccess",
        PossibleTypes = new [] { typeof(bool) })]
        bool? NodeEnablePublicIPAccess { get;  }
        /// <summary>The edition of a node (default: MemoryOptimized).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The edition of a node (default: MemoryOptimized).",
        SerializedName = @"nodeServerEdition",
        PossibleTypes = new [] { typeof(string) })]
        string NodeServerEdition { get; set; }
        /// <summary>The storage in MB on each worker node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The storage in MB on each worker node.",
        SerializedName = @"nodeStorageQuotaInMb",
        PossibleTypes = new [] { typeof(int) })]
        int? NodeStorageQuotaInMb { get; set; }
        /// <summary>The compute in vCores on each worker node (max: 104).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The compute in vCores on each worker node (max: 104).",
        SerializedName = @"nodeVCores",
        PossibleTypes = new [] { typeof(int) })]
        int? NodeVCore { get; set; }
        /// <summary>The major PostgreSQL version on all cluster servers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The major PostgreSQL version on all cluster servers.",
        SerializedName = @"postgresqlVersion",
        PossibleTypes = new [] { typeof(string) })]
        string PostgresqlVersion { get; set; }
        /// <summary>Preferred primary availability zone (AZ) for all cluster servers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Preferred primary availability zone (AZ) for all cluster servers.",
        SerializedName = @"preferredPrimaryZone",
        PossibleTypes = new [] { typeof(string) })]
        string PreferredPrimaryZone { get; set; }

    }
    /// The properties used to update a cluster.
    internal partial interface IClusterPropertiesForUpdateInternal

    {
        /// <summary>
        /// The password of the administrator login. Each cluster is created with pre-defined administrative role called ‘citus’.
        /// </summary>
        System.Security.SecureString AdministratorLoginPassword { get; set; }
        /// <summary>The Citus extension version on all cluster servers.</summary>
        string CitusVersion { get; set; }
        /// <summary>If public access is enabled on coordinator.</summary>
        bool? CoordinatorEnablePublicIPAccess { get; set; }
        /// <summary>The edition of the coordinator (default: GeneralPurpose).</summary>
        string CoordinatorServerEdition { get; set; }
        /// <summary>The storage of the coordinator in MB.</summary>
        int? CoordinatorStorageQuotaInMb { get; set; }
        /// <summary>The vCores count of the coordinator (max: 96).</summary>
        int? CoordinatorVCore { get; set; }
        /// <summary>If high availability (HA) is enabled or not for the cluster.</summary>
        bool? EnableHa { get; set; }
        /// <summary>
        /// If distributed tables are placed on coordinator or not. Should be set to 'true' on single node clusters. Requires shard
        /// rebalancing after value is changed.
        /// </summary>
        bool? EnableShardsOnCoordinator { get; set; }
        /// <summary>Maintenance window of a cluster.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20230302Preview.IMaintenanceWindow MaintenanceWindow { get; set; }
        /// <summary>Indicates whether custom maintenance window is enabled or not.</summary>
        string MaintenanceWindowCustomWindow { get; set; }
        /// <summary>Preferred day of the week for maintenance window.</summary>
        int? MaintenanceWindowDayOfWeek { get; set; }
        /// <summary>Start hour within preferred day of the week for maintenance window.</summary>
        int? MaintenanceWindowStartHour { get; set; }
        /// <summary>Start minute within the start hour for maintenance window.</summary>
        int? MaintenanceWindowStartMinute { get; set; }
        /// <summary>
        /// Worker node count of the cluster. When node count is 0, it represents a single node configuration with the ability to
        /// create distributed tables on that node. 2 or more worker nodes represent multi-node configuration. Node count value cannot
        /// be 1.
        /// </summary>
        int? NodeCount { get; set; }
        /// <summary>If public access is enabled on worker nodes.</summary>
        bool? NodeEnablePublicIPAccess { get; set; }
        /// <summary>The edition of a node (default: MemoryOptimized).</summary>
        string NodeServerEdition { get; set; }
        /// <summary>The storage in MB on each worker node.</summary>
        int? NodeStorageQuotaInMb { get; set; }
        /// <summary>The compute in vCores on each worker node (max: 104).</summary>
        int? NodeVCore { get; set; }
        /// <summary>The major PostgreSQL version on all cluster servers.</summary>
        string PostgresqlVersion { get; set; }
        /// <summary>Preferred primary availability zone (AZ) for all cluster servers.</summary>
        string PreferredPrimaryZone { get; set; }

    }
}