
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Creates a new cluster with servers.
.Description
Creates a new cluster with servers.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20230302Preview.ICluster
.Link
https://learn.microsoft.com/powershell/module/az.cosmosdbforpostgresql/new-azcosmosdbforpostgresqlcluster
#>
function New-AzCosmosDbForPostgreSqlCluster {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20230302Preview.ICluster])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Alias('ClusterName')]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Path')]
    [System.String]
    # The name of the cluster.
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    # The value must be an UUID.
    ${SubscriptionId},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.String]
    # The geo-location where the resource lives
    ${Location},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.Security.SecureString]
    # The password of the administrator login.
    # Required for creation.
    ${AdministratorLoginPassword},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Support.ActiveDirectoryAuth])]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Support.ActiveDirectoryAuth]
    # .
    ${AuthConfigActiveDirectoryAuth},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Support.PasswordAuth])]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Support.PasswordAuth]
    # .
    ${AuthConfigPasswordAuth},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.String]
    # The Citus extension version on all cluster servers.
    ${CitusVersion},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # If public access is enabled on coordinator.
    ${CoordinatorEnablePublicIPAccess},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.String]
    # The edition of a coordinator server (default: GeneralPurpose).
    # Required for creation.
    ${CoordinatorServerEdition},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.Int32]
    # The storage of a server in MB.
    # Required for creation.
    # See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information.
    ${CoordinatorStorageQuotaInMb},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.Int32]
    # The vCores count of a server (max: 96).
    # Required for creation.
    # See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information.
    ${CoordinatorVCore},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.String]
    # URI for the key in keyvault for data encryption of the primary server.
    ${DataEncryptionPrimaryKeyUri},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.String]
    # Resource Id for the User assigned identity to be used for data encryption of the primary server.
    ${DataEncryptionPrimaryUserAssignedIdentityId},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Support.DataEncryptionType])]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Support.DataEncryptionType]
    # .
    ${DataEncryptionType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.String]
    # The database name of the cluster.
    # Only one database per cluster is supported.
    ${DatabaseName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # If cluster backup is stored in another Azure region in addition to the copy of the backup stored in the cluster's region.
    # Enabled only at the time of cluster creation.
    ${EnableGeoBackup},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # If high availability (HA) is enabled or not for the cluster.
    ${EnableHa},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # If distributed tables are placed on coordinator or not.
    # Should be set to 'true' on single node clusters.
    # Requires shard rebalancing after value is changed.
    ${EnableShardsOnCoordinator},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Support.IdentityType])]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Support.IdentityType]
    # .
    ${IdentityType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api50.IUserAssignedIdentities]))]
    [System.Collections.Hashtable]
    # The set of user assigned identities associated with the resource.
    # The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
    # The dictionary values can be empty objects ({}) in requests.
    ${IdentityUserAssignedIdentity},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.String]
    # Indicates whether custom maintenance window is enabled or not.
    ${MaintenanceWindowCustomWindow},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.Int32]
    # Preferred day of the week for maintenance window.
    ${MaintenanceWindowDayOfWeek},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.Int32]
    # Start hour within preferred day of the week for maintenance window.
    ${MaintenanceWindowStartHour},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.Int32]
    # Start minute within the start hour for maintenance window.
    ${MaintenanceWindowStartMinute},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.Int32]
    # Worker node count of the cluster.
    # When node count is 0, it represents a single node configuration with the ability to create distributed tables on that node.
    # 2 or more worker nodes represent multi-node configuration.
    # Node count value cannot be 1.
    # Required for creation.
    ${NodeCount},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # If public access is enabled on worker nodes.
    ${NodeEnablePublicIPAccess},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.String]
    # The edition of a node server (default: MemoryOptimized).
    ${NodeServerEdition},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.Int32]
    # The storage in MB on each worker node.
    # See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information.
    ${NodeStorageQuotaInMb},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.Int32]
    # The compute in vCores on each worker node (max: 104).
    # See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information.
    ${NodeVCore},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.DateTime]
    # Date and time in UTC (ISO8601 format) for cluster restore.
    ${PointInTimeUtc},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.String]
    # The major PostgreSQL version on all cluster servers.
    ${PostgresqlVersion},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.String]
    # Preferred primary availability zone (AZ) for all cluster servers.
    ${PreferredPrimaryZone},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.String]
    # The Azure region of source cluster for read replica clusters.
    ${SourceLocation},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [System.String]
    # The resource id of source cluster for read replica clusters.
    ${SourceResourceId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api40.ITrackedResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.CosmosDbForPostgreSql.private\New-AzCosmosDbForPostgreSqlCluster_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $testPlayback = $false
            $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
