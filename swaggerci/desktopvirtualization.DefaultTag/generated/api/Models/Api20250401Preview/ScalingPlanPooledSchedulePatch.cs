// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Runtime.Extensions;

    /// <summary>ScalingPlanPooledSchedule properties that can be patched.</summary>
    public partial class ScalingPlanPooledSchedulePatch :
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatch,
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchInternal,
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.IResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.IResource __resource = new Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.Resource();

        /// <summary>
        /// Maximum number of session hosts that may be created by the Scaling Service. This requires the assigned hostpool to have
        /// a session host config property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inlined)]
        public int? CreateDeleteRampDownMaximumHostPoolSize { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).CreateDeleteRampDownMaximumHostPoolSize; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).CreateDeleteRampDownMaximumHostPoolSize = value ?? default(int); }

        /// <summary>
        /// Minimum number of session hosts that will be be created by the Scaling Service. Scaling will not delete any hosts when
        /// this limit is met. This requires the assigned hostpool to have a session host config property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inlined)]
        public int? CreateDeleteRampDownMinimumHostPoolSize { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).CreateDeleteRampDownMinimumHostPoolSize; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).CreateDeleteRampDownMinimumHostPoolSize = value ?? default(int); }

        /// <summary>
        /// Maximum number of session hosts that may be created by the Scaling Service. This requires the assigned hostpool to have
        /// a session host config property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inlined)]
        public int? CreateDeleteRampUpMaximumHostPoolSize { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).CreateDeleteRampUpMaximumHostPoolSize; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).CreateDeleteRampUpMaximumHostPoolSize = value ?? default(int); }

        /// <summary>
        /// Minimum number of session hosts that will be be created by the Scaling Service. Scaling will not delete any hosts when
        /// this limit is met. This requires the assigned hostpool to have a session host config property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inlined)]
        public int? CreateDeleteRampUpMinimumHostPoolSize { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).CreateDeleteRampUpMinimumHostPoolSize; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).CreateDeleteRampUpMinimumHostPoolSize = value ?? default(int); }

        /// <summary>Set of days of the week on which this schedule is active.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.DayOfWeek[] DaysOfWeek { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).DaysOfWeek; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).DaysOfWeek = value ?? null /* arrayOf */; }

        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.IResourceInternal)__resource).Id; }

        /// <summary>Internal Acessors for CreateDelete</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.ICreateDeleteProperties Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchInternal.CreateDelete { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).CreateDelete; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).CreateDelete = value; }

        /// <summary>Internal Acessors for OffPeakStartTime</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.ITime Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchInternal.OffPeakStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).OffPeakStartTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).OffPeakStartTime = value; }

        /// <summary>Internal Acessors for PeakStartTime</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.ITime Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchInternal.PeakStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).PeakStartTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).PeakStartTime = value; }

        /// <summary>Internal Acessors for PropertiesName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchInternal.PropertiesName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).Name = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchProperties Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.ScalingPlanPooledSchedulePatchProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for RampDownStartTime</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.ITime Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchInternal.RampDownStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).RampDownStartTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).RampDownStartTime = value; }

        /// <summary>Internal Acessors for RampUpStartTime</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.ITime Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchInternal.RampUpStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).RampUpStartTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).RampUpStartTime = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.IResourceInternal)__resource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.IResourceInternal)__resource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.IResourceInternal)__resource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.IResourceInternal)__resource).Name = value; }

        /// <summary>Internal Acessors for SystemData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.ISystemData Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.IResourceInternal.SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.IResourceInternal)__resource).SystemData; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.IResourceInternal)__resource).SystemData = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.IResourceInternal)__resource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.IResourceInternal)__resource).Type = value; }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.IResourceInternal)__resource).Name; }

        /// <summary>Load balancing algorithm for off-peak period.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.SessionHostLoadBalancingAlgorithm? OffPeakLoadBalancingAlgorithm { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).OffPeakLoadBalancingAlgorithm; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).OffPeakLoadBalancingAlgorithm = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.SessionHostLoadBalancingAlgorithm)""); }

        /// <summary>The hour.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inlined)]
        public int? OffPeakStartTimeHour { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).OffPeakStartTimeHour; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).OffPeakStartTimeHour = value ?? default(int); }

        /// <summary>The minute.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inlined)]
        public int? OffPeakStartTimeMinute { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).OffPeakStartTimeMinute; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).OffPeakStartTimeMinute = value ?? default(int); }

        /// <summary>Load balancing algorithm for peak period.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.SessionHostLoadBalancingAlgorithm? PeakLoadBalancingAlgorithm { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).PeakLoadBalancingAlgorithm; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).PeakLoadBalancingAlgorithm = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.SessionHostLoadBalancingAlgorithm)""); }

        /// <summary>The hour.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inlined)]
        public int? PeakStartTimeHour { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).PeakStartTimeHour; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).PeakStartTimeHour = value ?? default(int); }

        /// <summary>The minute.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inlined)]
        public int? PeakStartTimeMinute { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).PeakStartTimeMinute; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).PeakStartTimeMinute = value ?? default(int); }

        /// <summary>Name of the ScalingPlanPooledSchedule</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inlined)]
        public string PropertiesName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).Name; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchProperties _property;

        /// <summary>Detailed properties for ScalingPlanPooledSchedule</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.ScalingPlanPooledSchedulePatchProperties()); set => this._property = value; }

        /// <summary>Capacity threshold for ramp down period.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inlined)]
        public int? RampDownCapacityThresholdPct { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).RampDownCapacityThresholdPct; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).RampDownCapacityThresholdPct = value ?? default(int); }

        /// <summary>Should users be logged off forcefully from hosts.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inlined)]
        public bool? RampDownForceLogoffUser { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).RampDownForceLogoffUser; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).RampDownForceLogoffUser = value ?? default(bool); }

        /// <summary>Load balancing algorithm for ramp down period.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.SessionHostLoadBalancingAlgorithm? RampDownLoadBalancingAlgorithm { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).RampDownLoadBalancingAlgorithm; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).RampDownLoadBalancingAlgorithm = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.SessionHostLoadBalancingAlgorithm)""); }

        /// <summary>Minimum host percentage for ramp down period.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inlined)]
        public int? RampDownMinimumHostsPct { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).RampDownMinimumHostsPct; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).RampDownMinimumHostsPct = value ?? default(int); }

        /// <summary>Notification message for users during ramp down period.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inlined)]
        public string RampDownNotificationMessage { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).RampDownNotificationMessage; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).RampDownNotificationMessage = value ?? null; }

        /// <summary>The hour.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inlined)]
        public int? RampDownStartTimeHour { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).RampDownStartTimeHour; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).RampDownStartTimeHour = value ?? default(int); }

        /// <summary>The minute.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inlined)]
        public int? RampDownStartTimeMinute { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).RampDownStartTimeMinute; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).RampDownStartTimeMinute = value ?? default(int); }

        /// <summary>Specifies when to stop hosts during ramp down period.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.StopHostsWhen? RampDownStopHostsWhen { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).RampDownStopHostsWhen; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).RampDownStopHostsWhen = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.StopHostsWhen)""); }

        /// <summary>Number of minutes to wait to stop hosts during ramp down period.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inlined)]
        public int? RampDownWaitTimeMinute { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).RampDownWaitTimeMinute; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).RampDownWaitTimeMinute = value ?? default(int); }

        /// <summary>Capacity threshold for ramp up period.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inlined)]
        public int? RampUpCapacityThresholdPct { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).RampUpCapacityThresholdPct; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).RampUpCapacityThresholdPct = value ?? default(int); }

        /// <summary>Load balancing algorithm for ramp up period.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.SessionHostLoadBalancingAlgorithm? RampUpLoadBalancingAlgorithm { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).RampUpLoadBalancingAlgorithm; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).RampUpLoadBalancingAlgorithm = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.SessionHostLoadBalancingAlgorithm)""); }

        /// <summary>Minimum host percentage for ramp up period.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inlined)]
        public int? RampUpMinimumHostsPct { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).RampUpMinimumHostsPct; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).RampUpMinimumHostsPct = value ?? default(int); }

        /// <summary>The hour.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inlined)]
        public int? RampUpStartTimeHour { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).RampUpStartTimeHour; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).RampUpStartTimeHour = value ?? default(int); }

        /// <summary>The minute.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inlined)]
        public int? RampUpStartTimeMinute { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).RampUpStartTimeMinute; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).RampUpStartTimeMinute = value ?? default(int); }

        /// <summary>
        /// The desired scaling method to be used to scale the hosts in the assigned host pool.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.ScalingMethodType? ScalingMethod { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).ScalingMethod; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchPropertiesInternal)Property).ScalingMethod = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.ScalingMethodType)""); }

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.ISystemData SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.IResourceInternal)__resource).SystemData; }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.IResourceInternal)__resource).SystemDataCreatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.IResourceInternal)__resource).SystemDataCreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inherited)]
        public string SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.IResourceInternal)__resource).SystemDataCreatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.IResourceInternal)__resource).SystemDataCreatedBy = value ?? null; }

        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.CreatedByType? SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.IResourceInternal)__resource).SystemDataCreatedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.IResourceInternal)__resource).SystemDataCreatedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.CreatedByType)""); }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.IResourceInternal)__resource).SystemDataLastModifiedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.IResourceInternal)__resource).SystemDataLastModifiedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inherited)]
        public string SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.IResourceInternal)__resource).SystemDataLastModifiedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.IResourceInternal)__resource).SystemDataLastModifiedBy = value ?? null; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.CreatedByType? SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.IResourceInternal)__resource).SystemDataLastModifiedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.IResourceInternal)__resource).SystemDataLastModifiedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.CreatedByType)""); }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.IResourceInternal)__resource).Type; }

        /// <summary>Creates an new <see cref="ScalingPlanPooledSchedulePatch" /> instance.</summary>
        public ScalingPlanPooledSchedulePatch()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__resource), __resource);
            await eventListener.AssertObjectIsValid(nameof(__resource), __resource);
        }
    }
    /// ScalingPlanPooledSchedule properties that can be patched.
    public partial interface IScalingPlanPooledSchedulePatch :
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.IResource
    {
        /// <summary>
        /// Maximum number of session hosts that may be created by the Scaling Service. This requires the assigned hostpool to have
        /// a session host config property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Maximum number of session hosts that may be created by the Scaling Service. This requires the assigned hostpool to have a session host config property.",
        SerializedName = @"rampDownMaximumHostPoolSize",
        PossibleTypes = new [] { typeof(int) })]
        int? CreateDeleteRampDownMaximumHostPoolSize { get; set; }
        /// <summary>
        /// Minimum number of session hosts that will be be created by the Scaling Service. Scaling will not delete any hosts when
        /// this limit is met. This requires the assigned hostpool to have a session host config property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Minimum number of session hosts that will be be created by the Scaling Service. Scaling will not delete any hosts when this limit is met. This requires the assigned hostpool to have a session host config property.",
        SerializedName = @"rampDownMinimumHostPoolSize",
        PossibleTypes = new [] { typeof(int) })]
        int? CreateDeleteRampDownMinimumHostPoolSize { get; set; }
        /// <summary>
        /// Maximum number of session hosts that may be created by the Scaling Service. This requires the assigned hostpool to have
        /// a session host config property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Maximum number of session hosts that may be created by the Scaling Service. This requires the assigned hostpool to have a session host config property.",
        SerializedName = @"rampUpMaximumHostPoolSize",
        PossibleTypes = new [] { typeof(int) })]
        int? CreateDeleteRampUpMaximumHostPoolSize { get; set; }
        /// <summary>
        /// Minimum number of session hosts that will be be created by the Scaling Service. Scaling will not delete any hosts when
        /// this limit is met. This requires the assigned hostpool to have a session host config property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Minimum number of session hosts that will be be created by the Scaling Service. Scaling will not delete any hosts when this limit is met. This requires the assigned hostpool to have a session host config property.",
        SerializedName = @"rampUpMinimumHostPoolSize",
        PossibleTypes = new [] { typeof(int) })]
        int? CreateDeleteRampUpMinimumHostPoolSize { get; set; }
        /// <summary>Set of days of the week on which this schedule is active.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Set of days of the week on which this schedule is active.",
        SerializedName = @"daysOfWeek",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.DayOfWeek) })]
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.DayOfWeek[] DaysOfWeek { get; set; }
        /// <summary>Load balancing algorithm for off-peak period.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Load balancing algorithm for off-peak period.",
        SerializedName = @"offPeakLoadBalancingAlgorithm",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.SessionHostLoadBalancingAlgorithm) })]
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.SessionHostLoadBalancingAlgorithm? OffPeakLoadBalancingAlgorithm { get; set; }
        /// <summary>The hour.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The hour.",
        SerializedName = @"hour",
        PossibleTypes = new [] { typeof(int) })]
        int? OffPeakStartTimeHour { get; set; }
        /// <summary>The minute.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The minute.",
        SerializedName = @"minute",
        PossibleTypes = new [] { typeof(int) })]
        int? OffPeakStartTimeMinute { get; set; }
        /// <summary>Load balancing algorithm for peak period.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Load balancing algorithm for peak period.",
        SerializedName = @"peakLoadBalancingAlgorithm",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.SessionHostLoadBalancingAlgorithm) })]
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.SessionHostLoadBalancingAlgorithm? PeakLoadBalancingAlgorithm { get; set; }
        /// <summary>The hour.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The hour.",
        SerializedName = @"hour",
        PossibleTypes = new [] { typeof(int) })]
        int? PeakStartTimeHour { get; set; }
        /// <summary>The minute.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The minute.",
        SerializedName = @"minute",
        PossibleTypes = new [] { typeof(int) })]
        int? PeakStartTimeMinute { get; set; }
        /// <summary>Name of the ScalingPlanPooledSchedule</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Name of the ScalingPlanPooledSchedule",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string PropertiesName { get;  }
        /// <summary>Capacity threshold for ramp down period.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Capacity threshold for ramp down period.",
        SerializedName = @"rampDownCapacityThresholdPct",
        PossibleTypes = new [] { typeof(int) })]
        int? RampDownCapacityThresholdPct { get; set; }
        /// <summary>Should users be logged off forcefully from hosts.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Should users be logged off forcefully from hosts.",
        SerializedName = @"rampDownForceLogoffUsers",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RampDownForceLogoffUser { get; set; }
        /// <summary>Load balancing algorithm for ramp down period.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Load balancing algorithm for ramp down period.",
        SerializedName = @"rampDownLoadBalancingAlgorithm",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.SessionHostLoadBalancingAlgorithm) })]
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.SessionHostLoadBalancingAlgorithm? RampDownLoadBalancingAlgorithm { get; set; }
        /// <summary>Minimum host percentage for ramp down period.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Minimum host percentage for ramp down period.",
        SerializedName = @"rampDownMinimumHostsPct",
        PossibleTypes = new [] { typeof(int) })]
        int? RampDownMinimumHostsPct { get; set; }
        /// <summary>Notification message for users during ramp down period.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Notification message for users during ramp down period.",
        SerializedName = @"rampDownNotificationMessage",
        PossibleTypes = new [] { typeof(string) })]
        string RampDownNotificationMessage { get; set; }
        /// <summary>The hour.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The hour.",
        SerializedName = @"hour",
        PossibleTypes = new [] { typeof(int) })]
        int? RampDownStartTimeHour { get; set; }
        /// <summary>The minute.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The minute.",
        SerializedName = @"minute",
        PossibleTypes = new [] { typeof(int) })]
        int? RampDownStartTimeMinute { get; set; }
        /// <summary>Specifies when to stop hosts during ramp down period.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies when to stop hosts during ramp down period.",
        SerializedName = @"rampDownStopHostsWhen",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.StopHostsWhen) })]
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.StopHostsWhen? RampDownStopHostsWhen { get; set; }
        /// <summary>Number of minutes to wait to stop hosts during ramp down period.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of minutes to wait to stop hosts during ramp down period.",
        SerializedName = @"rampDownWaitTimeMinutes",
        PossibleTypes = new [] { typeof(int) })]
        int? RampDownWaitTimeMinute { get; set; }
        /// <summary>Capacity threshold for ramp up period.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Capacity threshold for ramp up period.",
        SerializedName = @"rampUpCapacityThresholdPct",
        PossibleTypes = new [] { typeof(int) })]
        int? RampUpCapacityThresholdPct { get; set; }
        /// <summary>Load balancing algorithm for ramp up period.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Load balancing algorithm for ramp up period.",
        SerializedName = @"rampUpLoadBalancingAlgorithm",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.SessionHostLoadBalancingAlgorithm) })]
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.SessionHostLoadBalancingAlgorithm? RampUpLoadBalancingAlgorithm { get; set; }
        /// <summary>Minimum host percentage for ramp up period.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Minimum host percentage for ramp up period.",
        SerializedName = @"rampUpMinimumHostsPct",
        PossibleTypes = new [] { typeof(int) })]
        int? RampUpMinimumHostsPct { get; set; }
        /// <summary>The hour.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The hour.",
        SerializedName = @"hour",
        PossibleTypes = new [] { typeof(int) })]
        int? RampUpStartTimeHour { get; set; }
        /// <summary>The minute.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The minute.",
        SerializedName = @"minute",
        PossibleTypes = new [] { typeof(int) })]
        int? RampUpStartTimeMinute { get; set; }
        /// <summary>
        /// The desired scaling method to be used to scale the hosts in the assigned host pool.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The desired scaling method to be used to scale the hosts in the assigned host pool.",
        SerializedName = @"scalingMethod",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.ScalingMethodType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.ScalingMethodType? ScalingMethod { get; set; }

    }
    /// ScalingPlanPooledSchedule properties that can be patched.
    internal partial interface IScalingPlanPooledSchedulePatchInternal :
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api60.IResourceInternal
    {
        /// <summary>
        /// The properties that control how Scaling will manage the size of the hostpool by creating and deleting hosts.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.ICreateDeleteProperties CreateDelete { get; set; }
        /// <summary>
        /// Maximum number of session hosts that may be created by the Scaling Service. This requires the assigned hostpool to have
        /// a session host config property.
        /// </summary>
        int? CreateDeleteRampDownMaximumHostPoolSize { get; set; }
        /// <summary>
        /// Minimum number of session hosts that will be be created by the Scaling Service. Scaling will not delete any hosts when
        /// this limit is met. This requires the assigned hostpool to have a session host config property.
        /// </summary>
        int? CreateDeleteRampDownMinimumHostPoolSize { get; set; }
        /// <summary>
        /// Maximum number of session hosts that may be created by the Scaling Service. This requires the assigned hostpool to have
        /// a session host config property.
        /// </summary>
        int? CreateDeleteRampUpMaximumHostPoolSize { get; set; }
        /// <summary>
        /// Minimum number of session hosts that will be be created by the Scaling Service. Scaling will not delete any hosts when
        /// this limit is met. This requires the assigned hostpool to have a session host config property.
        /// </summary>
        int? CreateDeleteRampUpMinimumHostPoolSize { get; set; }
        /// <summary>Set of days of the week on which this schedule is active.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.DayOfWeek[] DaysOfWeek { get; set; }
        /// <summary>Load balancing algorithm for off-peak period.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.SessionHostLoadBalancingAlgorithm? OffPeakLoadBalancingAlgorithm { get; set; }
        /// <summary>Starting time for off-peak period.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.ITime OffPeakStartTime { get; set; }
        /// <summary>The hour.</summary>
        int? OffPeakStartTimeHour { get; set; }
        /// <summary>The minute.</summary>
        int? OffPeakStartTimeMinute { get; set; }
        /// <summary>Load balancing algorithm for peak period.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.SessionHostLoadBalancingAlgorithm? PeakLoadBalancingAlgorithm { get; set; }
        /// <summary>Starting time for peak period.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.ITime PeakStartTime { get; set; }
        /// <summary>The hour.</summary>
        int? PeakStartTimeHour { get; set; }
        /// <summary>The minute.</summary>
        int? PeakStartTimeMinute { get; set; }
        /// <summary>Name of the ScalingPlanPooledSchedule</summary>
        string PropertiesName { get; set; }
        /// <summary>Detailed properties for ScalingPlanPooledSchedule</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.IScalingPlanPooledSchedulePatchProperties Property { get; set; }
        /// <summary>Capacity threshold for ramp down period.</summary>
        int? RampDownCapacityThresholdPct { get; set; }
        /// <summary>Should users be logged off forcefully from hosts.</summary>
        bool? RampDownForceLogoffUser { get; set; }
        /// <summary>Load balancing algorithm for ramp down period.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.SessionHostLoadBalancingAlgorithm? RampDownLoadBalancingAlgorithm { get; set; }
        /// <summary>Minimum host percentage for ramp down period.</summary>
        int? RampDownMinimumHostsPct { get; set; }
        /// <summary>Notification message for users during ramp down period.</summary>
        string RampDownNotificationMessage { get; set; }
        /// <summary>Starting time for ramp down period.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.ITime RampDownStartTime { get; set; }
        /// <summary>The hour.</summary>
        int? RampDownStartTimeHour { get; set; }
        /// <summary>The minute.</summary>
        int? RampDownStartTimeMinute { get; set; }
        /// <summary>Specifies when to stop hosts during ramp down period.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.StopHostsWhen? RampDownStopHostsWhen { get; set; }
        /// <summary>Number of minutes to wait to stop hosts during ramp down period.</summary>
        int? RampDownWaitTimeMinute { get; set; }
        /// <summary>Capacity threshold for ramp up period.</summary>
        int? RampUpCapacityThresholdPct { get; set; }
        /// <summary>Load balancing algorithm for ramp up period.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.SessionHostLoadBalancingAlgorithm? RampUpLoadBalancingAlgorithm { get; set; }
        /// <summary>Minimum host percentage for ramp up period.</summary>
        int? RampUpMinimumHostsPct { get; set; }
        /// <summary>Starting time for ramp up period.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Models.Api20250401Preview.ITime RampUpStartTime { get; set; }
        /// <summary>The hour.</summary>
        int? RampUpStartTimeHour { get; set; }
        /// <summary>The minute.</summary>
        int? RampUpStartTimeMinute { get; set; }
        /// <summary>
        /// The desired scaling method to be used to scale the hosts in the assigned host pool.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualizationApi.Support.ScalingMethodType? ScalingMethod { get; set; }

    }
}