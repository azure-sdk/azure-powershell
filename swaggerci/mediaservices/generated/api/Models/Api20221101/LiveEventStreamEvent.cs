// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Extensions;

    /// <summary>The live event stream event.</summary>
    public partial class LiveEventStreamEvent :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventStreamEvent,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventStreamEventInternal
    {

        /// <summary>Backing field for <see cref="Data" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventStreamEventData _data;

        /// <summary>Event data based on event type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventStreamEventData Data { get => (this._data = this._data ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.LiveEventStreamEventData()); set => this._data = value; }

        /// <summary>Backing field for <see cref="EventLevel" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventStreamEventLevel? _eventLevel;

        /// <summary>Event level.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventStreamEventLevel? EventLevel { get => this._eventLevel; set => this._eventLevel = value; }

        /// <summary>Backing field for <see cref="EventTime" /> property.</summary>
        private global::System.DateTime? _eventTime;

        /// <summary>The time event raised.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public global::System.DateTime? EventTime { get => this._eventTime; set => this._eventTime = value; }

        /// <summary>Backing field for <see cref="EventType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventStreamEventType? _eventType;

        /// <summary>The type of the stream event. Format: StreamEvent/{eventType}</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventStreamEventType? EventType { get => this._eventType; set => this._eventType = value; }

        /// <summary>Creates an new <see cref="LiveEventStreamEvent" /> instance.</summary>
        public LiveEventStreamEvent()
        {

        }
    }
    /// The live event stream event.
    public partial interface ILiveEventStreamEvent :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IJsonSerializable
    {
        /// <summary>Event data based on event type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Event data based on event type.",
        SerializedName = @"data",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventStreamEventData) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventStreamEventData Data { get; set; }
        /// <summary>Event level.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Event level.",
        SerializedName = @"eventLevel",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventStreamEventLevel) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventStreamEventLevel? EventLevel { get; set; }
        /// <summary>The time event raised.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The time event raised.",
        SerializedName = @"eventTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? EventTime { get; set; }
        /// <summary>The type of the stream event. Format: StreamEvent/{eventType}</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of the stream event. Format: StreamEvent/{eventType}",
        SerializedName = @"eventType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventStreamEventType) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventStreamEventType? EventType { get; set; }

    }
    /// The live event stream event.
    internal partial interface ILiveEventStreamEventInternal

    {
        /// <summary>Event data based on event type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventStreamEventData Data { get; set; }
        /// <summary>Event level.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventStreamEventLevel? EventLevel { get; set; }
        /// <summary>The time event raised.</summary>
        global::System.DateTime? EventTime { get; set; }
        /// <summary>The type of the stream event. Format: StreamEvent/{eventType}</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventStreamEventType? EventType { get; set; }

    }
}