// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220301
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Extensions;

    /// <summary>
    /// Describes the settings to be used when encoding the input video into a desired output bitrate layer with the AV1 video
    /// codec.
    /// </summary>
    public partial class Av1Layer :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220301.IAv1Layer,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220301.IAv1LayerInternal,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220301.IAv1VideoLayer"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220301.IAv1VideoLayer __av1VideoLayer = new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220301.Av1VideoLayer();

        /// <summary>
        /// The average bitrate in bits per second at which to encode the input video when generating this layer. For example: a target
        /// bitrate of 3000Kbps or 3Mbps means this value should be 3000000 This is a required field.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public int Bitrate { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220301.IAv1VideoLayerInternal)__av1VideoLayer).Bitrate; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220301.IAv1VideoLayerInternal)__av1VideoLayer).Bitrate = value ; }

        /// <summary>Backing field for <see cref="BufferWindow" /> property.</summary>
        private global::System.TimeSpan? _bufferWindow;

        /// <summary>
        /// The VBV buffer window length. The value should be in ISO 8601 format. The value should be in the range [0.1-100] seconds.
        /// The default is 5 seconds (for example, PT5S).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public global::System.TimeSpan? BufferWindow { get => this._bufferWindow; set => this._bufferWindow = value; }

        /// <summary>Backing field for <see cref="Crf" /> property.</summary>
        private float? _crf;

        /// <summary>
        /// The value of CRF to be used when encoding this layer. This setting takes effect when RateControlMode of video codec is
        /// set at CRF mode. The range of CRF value is between 0 and 63, where lower values would result in better quality, at the
        /// expense of higher file sizes. Higher values mean more compression, but at some point quality degradation will be noticed.
        /// Default value is 32.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public float? Crf { get => this._crf; set => this._crf = value; }

        /// <summary>
        /// The frame rate (in frames per second) at which to encode this layer. The value can be in the form of M/N where M and N
        /// are integers (For example, 30000/1001), or in the form of a number (For example, 30, or 29.97). The encoder enforces constraints
        /// on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate
        /// as the input video.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public string FrameRate { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220301.IAv1VideoLayerInternal)__av1VideoLayer).FrameRate; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220301.IAv1VideoLayerInternal)__av1VideoLayer).FrameRate = value ?? null; }

        /// <summary>
        /// The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For
        /// example 50% means the output video has half as many pixels in height as the input.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public string Height { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220301.ILayerInternal)__av1VideoLayer).Height; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220301.ILayerInternal)__av1VideoLayer).Height = value ?? null; }

        /// <summary>
        /// The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming
        /// the output file.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public string Label { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220301.ILayerInternal)__av1VideoLayer).Label; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220301.ILayerInternal)__av1VideoLayer).Label = value ?? null; }

        /// <summary>Backing field for <see cref="Level" /> property.</summary>
        private string _level;

        /// <summary>
        /// We currently support Level up to 6.3. The value can be Auto, or a number that matches the AV1 profile. If not specified,
        /// the default is Auto, which lets the encoder choose the Level that is appropriate for this layer.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string Level { get => this._level; set => this._level = value; }

        /// <summary>
        /// The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults
        /// to the same value as bitrate.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public int? MaxBitrate { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220301.IAv1VideoLayerInternal)__av1VideoLayer).MaxBitrate; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220301.IAv1VideoLayerInternal)__av1VideoLayer).MaxBitrate = value ?? default(int); }

        /// <summary>Backing field for <see cref="Profile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.Av1VideoProfile? _profile;

        /// <summary>We currently support Main. Default is Auto.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.Av1VideoProfile? Profile { get => this._profile; set => this._profile = value; }

        /// <summary>
        /// The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example
        /// 50% means the output video has half as many pixels in width as the input.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public string Width { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220301.ILayerInternal)__av1VideoLayer).Width; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220301.ILayerInternal)__av1VideoLayer).Width = value ?? null; }

        /// <summary>Creates an new <see cref="Av1Layer" /> instance.</summary>
        public Av1Layer()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__av1VideoLayer), __av1VideoLayer);
            await eventListener.AssertObjectIsValid(nameof(__av1VideoLayer), __av1VideoLayer);
        }
    }
    /// Describes the settings to be used when encoding the input video into a desired output bitrate layer with the AV1 video
    /// codec.
    public partial interface IAv1Layer :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220301.IAv1VideoLayer
    {
        /// <summary>
        /// The VBV buffer window length. The value should be in ISO 8601 format. The value should be in the range [0.1-100] seconds.
        /// The default is 5 seconds (for example, PT5S).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The VBV buffer window length. The value should be in ISO 8601 format. The value should be in the range [0.1-100] seconds. The default is 5 seconds (for example, PT5S).",
        SerializedName = @"bufferWindow",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? BufferWindow { get; set; }
        /// <summary>
        /// The value of CRF to be used when encoding this layer. This setting takes effect when RateControlMode of video codec is
        /// set at CRF mode. The range of CRF value is between 0 and 63, where lower values would result in better quality, at the
        /// expense of higher file sizes. Higher values mean more compression, but at some point quality degradation will be noticed.
        /// Default value is 32.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The value of CRF to be used when encoding this layer. This setting takes effect when RateControlMode of video codec is set at CRF mode. The range of CRF value is between 0 and 63, where lower values would result in better quality, at the expense of higher file sizes. Higher values mean more compression, but at some point quality degradation will be noticed. Default value is 32.",
        SerializedName = @"crf",
        PossibleTypes = new [] { typeof(float) })]
        float? Crf { get; set; }
        /// <summary>
        /// We currently support Level up to 6.3. The value can be Auto, or a number that matches the AV1 profile. If not specified,
        /// the default is Auto, which lets the encoder choose the Level that is appropriate for this layer.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"We currently support Level up to 6.3. The value can be Auto, or a number that matches the AV1 profile. If not specified, the default is Auto, which lets the encoder choose the Level that is appropriate for this layer.",
        SerializedName = @"level",
        PossibleTypes = new [] { typeof(string) })]
        string Level { get; set; }
        /// <summary>We currently support Main. Default is Auto.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"We currently support Main. Default is Auto.",
        SerializedName = @"profile",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.Av1VideoProfile) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.Av1VideoProfile? Profile { get; set; }

    }
    /// Describes the settings to be used when encoding the input video into a desired output bitrate layer with the AV1 video
    /// codec.
    internal partial interface IAv1LayerInternal :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220301.IAv1VideoLayerInternal
    {
        /// <summary>
        /// The VBV buffer window length. The value should be in ISO 8601 format. The value should be in the range [0.1-100] seconds.
        /// The default is 5 seconds (for example, PT5S).
        /// </summary>
        global::System.TimeSpan? BufferWindow { get; set; }
        /// <summary>
        /// The value of CRF to be used when encoding this layer. This setting takes effect when RateControlMode of video codec is
        /// set at CRF mode. The range of CRF value is between 0 and 63, where lower values would result in better quality, at the
        /// expense of higher file sizes. Higher values mean more compression, but at some point quality degradation will be noticed.
        /// Default value is 32.
        /// </summary>
        float? Crf { get; set; }
        /// <summary>
        /// We currently support Level up to 6.3. The value can be Auto, or a number that matches the AV1 profile. If not specified,
        /// the default is Auto, which lets the encoder choose the Level that is appropriate for this layer.
        /// </summary>
        string Level { get; set; }
        /// <summary>We currently support Main. Default is Auto.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.Av1VideoProfile? Profile { get; set; }

    }
}