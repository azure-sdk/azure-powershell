// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Extensions;
    using System;

    /// <summary>Create a Streaming Policy in the Media Services account</summary>
    /// <remarks>
    /// [OpenAPI] Create=>PUT:"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingPolicies/{streamingPolicyName}"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsCommon.New, @"AzMediaServicesStreamingPolicy_CreateExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicy))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Description(@"Create a Streaming Policy in the Media Services account")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Generated]
    public partial class NewAzMediaServicesStreamingPolicy_CreateExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>Backing field for <see cref="AccountName" /> property.</summary>
        private string _accountName;

        /// <summary>The Media Services account name.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The Media Services account name.")]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The Media Services account name.",
        SerializedName = @"accountName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Path)]
        public string AccountName { get => this._accountName; set => this._accountName = value; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.AzureMediaServices Client => Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Module.Instance.ClientAPI;

        /// <summary>Representing which tracks should not be encrypted</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Representing which tracks should not be encrypted")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Representing which tracks should not be encrypted",
        SerializedName = @"clearTracks",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ITrackSelection) })]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ITrackSelection[] CommonEncryptionCbcClearTrack { get => ParametersBody.CommonEncryptionCbcClearTrack ?? null /* arrayOf */; set => ParametersBody.CommonEncryptionCbcClearTrack = value; }

        /// <summary>Label can be used to specify Content Key when creating a Streaming Locator</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Label can be used to specify Content Key when creating a Streaming Locator")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Label can be used to specify Content Key when creating a Streaming Locator",
        SerializedName = @"label",
        PossibleTypes = new [] { typeof(string) })]
        public string CommonEncryptionCbcsContentKeysDefaultKeyLabel { get => ParametersBody.CommonEncryptionCbcsContentKeysDefaultKeyLabel ?? null; set => ParametersBody.CommonEncryptionCbcsContentKeysDefaultKeyLabel = value; }

        /// <summary>Policy used by Default Key</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Policy used by Default Key")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Policy used by Default Key",
        SerializedName = @"policyName",
        PossibleTypes = new [] { typeof(string) })]
        public string CommonEncryptionCbcsContentKeysDefaultKeyPolicyName { get => ParametersBody.CommonEncryptionCbcsContentKeysDefaultKeyPolicyName ?? null; set => ParametersBody.CommonEncryptionCbcsContentKeysDefaultKeyPolicyName = value; }

        /// <summary>Representing tracks needs separate content key</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Representing tracks needs separate content key")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Representing tracks needs separate content key",
        SerializedName = @"keyToTrackMappings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicyContentKey) })]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicyContentKey[] CommonEncryptionCbcsContentKeysKeyToTrackMapping { get => ParametersBody.CommonEncryptionCbcsContentKeysKeyToTrackMapping ?? null /* arrayOf */; set => ParametersBody.CommonEncryptionCbcsContentKeysKeyToTrackMapping = value; }

        /// <summary>Custom attributes for PlayReady</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Custom attributes for PlayReady")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Custom attributes for PlayReady",
        SerializedName = @"playReadyCustomAttributes",
        PossibleTypes = new [] { typeof(string) })]
        public string CommonEncryptionCbcsDrmPlayReadyCustomAttribute { get => ParametersBody.CommonEncryptionCbcsDrmPlayReadyCustomAttribute ?? null; set => ParametersBody.CommonEncryptionCbcsDrmPlayReadyCustomAttribute = value; }

        /// <summary>
        /// Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media
        /// Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the
        /// value specific to the request. The currently supported token values are {AlternativeMediaId}, which is replaced with the
        /// value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of
        /// the key being requested.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.",
        SerializedName = @"customLicenseAcquisitionUrlTemplate",
        PossibleTypes = new [] { typeof(string) })]
        public string CommonEncryptionCbcsDrmPlayReadyCustomLicenseAcquisitionUrlTemplate { get => ParametersBody.CommonEncryptionCbcsDrmPlayReadyCustomLicenseAcquisitionUrlTemplate ?? null; set => ParametersBody.CommonEncryptionCbcsDrmPlayReadyCustomLicenseAcquisitionUrlTemplate = value; }

        /// <summary>
        /// Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media
        /// Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the
        /// value specific to the request. The currently supported token values are {AlternativeMediaId}, which is replaced with the
        /// value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of
        /// the key being requested.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.",
        SerializedName = @"customLicenseAcquisitionUrlTemplate",
        PossibleTypes = new [] { typeof(string) })]
        public string CommonEncryptionCbcsDrmWidevineCustomLicenseAcquisitionUrlTemplate { get => ParametersBody.CommonEncryptionCbcsDrmWidevineCustomLicenseAcquisitionUrlTemplate ?? null; set => ParametersBody.CommonEncryptionCbcsDrmWidevineCustomLicenseAcquisitionUrlTemplate = value; }

        /// <summary>Enable DASH protocol or not</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Enable DASH protocol or not")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable DASH protocol or not",
        SerializedName = @"dash",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter CommonEncryptionCbcsEnabledProtocolsDash { get => ParametersBody.CommonEncryptionCbcsEnabledProtocolsDash ?? default(global::System.Management.Automation.SwitchParameter); set => ParametersBody.CommonEncryptionCbcsEnabledProtocolsDash = value; }

        /// <summary>Enable Download protocol or not</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Enable Download protocol or not")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable Download protocol or not",
        SerializedName = @"download",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter CommonEncryptionCbcsEnabledProtocolsDownload { get => ParametersBody.CommonEncryptionCbcsEnabledProtocolsDownload ?? default(global::System.Management.Automation.SwitchParameter); set => ParametersBody.CommonEncryptionCbcsEnabledProtocolsDownload = value; }

        /// <summary>Enable HLS protocol or not</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Enable HLS protocol or not")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable HLS protocol or not",
        SerializedName = @"hls",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter CommonEncryptionCbcsEnabledProtocolsHl { get => ParametersBody.CommonEncryptionCbcsEnabledProtocolsHl ?? default(global::System.Management.Automation.SwitchParameter); set => ParametersBody.CommonEncryptionCbcsEnabledProtocolsHl = value; }

        /// <summary>Enable SmoothStreaming protocol or not</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Enable SmoothStreaming protocol or not")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable SmoothStreaming protocol or not",
        SerializedName = @"smoothStreaming",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter CommonEncryptionCbcsEnabledProtocolsSmoothStreaming { get => ParametersBody.CommonEncryptionCbcsEnabledProtocolsSmoothStreaming ?? default(global::System.Management.Automation.SwitchParameter); set => ParametersBody.CommonEncryptionCbcsEnabledProtocolsSmoothStreaming = value; }

        /// <summary>Representing which tracks should not be encrypted</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Representing which tracks should not be encrypted")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Representing which tracks should not be encrypted",
        SerializedName = @"clearTracks",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ITrackSelection) })]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ITrackSelection[] CommonEncryptionCencClearTrack { get => ParametersBody.CommonEncryptionCencClearTrack ?? null /* arrayOf */; set => ParametersBody.CommonEncryptionCencClearTrack = value; }

        /// <summary>Label can be used to specify Content Key when creating a Streaming Locator</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Label can be used to specify Content Key when creating a Streaming Locator")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Label can be used to specify Content Key when creating a Streaming Locator",
        SerializedName = @"label",
        PossibleTypes = new [] { typeof(string) })]
        public string CommonEncryptionCencContentKeysDefaultKeyLabel { get => ParametersBody.CommonEncryptionCencContentKeysDefaultKeyLabel ?? null; set => ParametersBody.CommonEncryptionCencContentKeysDefaultKeyLabel = value; }

        /// <summary>Policy used by Default Key</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Policy used by Default Key")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Policy used by Default Key",
        SerializedName = @"policyName",
        PossibleTypes = new [] { typeof(string) })]
        public string CommonEncryptionCencContentKeysDefaultKeyPolicyName { get => ParametersBody.CommonEncryptionCencContentKeysDefaultKeyPolicyName ?? null; set => ParametersBody.CommonEncryptionCencContentKeysDefaultKeyPolicyName = value; }

        /// <summary>Representing tracks needs separate content key</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Representing tracks needs separate content key")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Representing tracks needs separate content key",
        SerializedName = @"keyToTrackMappings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicyContentKey) })]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicyContentKey[] CommonEncryptionCencContentKeysKeyToTrackMapping { get => ParametersBody.CommonEncryptionCencContentKeysKeyToTrackMapping ?? null /* arrayOf */; set => ParametersBody.CommonEncryptionCencContentKeysKeyToTrackMapping = value; }

        /// <summary>Custom attributes for PlayReady</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Custom attributes for PlayReady")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Custom attributes for PlayReady",
        SerializedName = @"playReadyCustomAttributes",
        PossibleTypes = new [] { typeof(string) })]
        public string CommonEncryptionCencDrmPlayReadyCustomAttribute { get => ParametersBody.CommonEncryptionCencDrmPlayReadyCustomAttribute ?? null; set => ParametersBody.CommonEncryptionCencDrmPlayReadyCustomAttribute = value; }

        /// <summary>
        /// Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media
        /// Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the
        /// value specific to the request. The currently supported token values are {AlternativeMediaId}, which is replaced with the
        /// value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of
        /// the key being requested.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.",
        SerializedName = @"customLicenseAcquisitionUrlTemplate",
        PossibleTypes = new [] { typeof(string) })]
        public string CommonEncryptionCencDrmPlayReadyCustomLicenseAcquisitionUrlTemplate { get => ParametersBody.CommonEncryptionCencDrmPlayReadyCustomLicenseAcquisitionUrlTemplate ?? null; set => ParametersBody.CommonEncryptionCencDrmPlayReadyCustomLicenseAcquisitionUrlTemplate = value; }

        /// <summary>
        /// Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media
        /// Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the
        /// value specific to the request. The currently supported token values are {AlternativeMediaId}, which is replaced with the
        /// value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of
        /// the key being requested.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.",
        SerializedName = @"customLicenseAcquisitionUrlTemplate",
        PossibleTypes = new [] { typeof(string) })]
        public string CommonEncryptionCencDrmWidevineCustomLicenseAcquisitionUrlTemplate { get => ParametersBody.CommonEncryptionCencDrmWidevineCustomLicenseAcquisitionUrlTemplate ?? null; set => ParametersBody.CommonEncryptionCencDrmWidevineCustomLicenseAcquisitionUrlTemplate = value; }

        /// <summary>Enable DASH protocol or not</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Enable DASH protocol or not")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable DASH protocol or not",
        SerializedName = @"dash",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter CommonEncryptionCencEnabledProtocolsDash { get => ParametersBody.CommonEncryptionCencEnabledProtocolsDash ?? default(global::System.Management.Automation.SwitchParameter); set => ParametersBody.CommonEncryptionCencEnabledProtocolsDash = value; }

        /// <summary>Enable Download protocol or not</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Enable Download protocol or not")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable Download protocol or not",
        SerializedName = @"download",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter CommonEncryptionCencEnabledProtocolsDownload { get => ParametersBody.CommonEncryptionCencEnabledProtocolsDownload ?? default(global::System.Management.Automation.SwitchParameter); set => ParametersBody.CommonEncryptionCencEnabledProtocolsDownload = value; }

        /// <summary>Enable HLS protocol or not</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Enable HLS protocol or not")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable HLS protocol or not",
        SerializedName = @"hls",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter CommonEncryptionCencEnabledProtocolsHl { get => ParametersBody.CommonEncryptionCencEnabledProtocolsHl ?? default(global::System.Management.Automation.SwitchParameter); set => ParametersBody.CommonEncryptionCencEnabledProtocolsHl = value; }

        /// <summary>Enable SmoothStreaming protocol or not</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Enable SmoothStreaming protocol or not")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable SmoothStreaming protocol or not",
        SerializedName = @"smoothStreaming",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter CommonEncryptionCencEnabledProtocolsSmoothStreaming { get => ParametersBody.CommonEncryptionCencEnabledProtocolsSmoothStreaming ?? default(global::System.Management.Automation.SwitchParameter); set => ParametersBody.CommonEncryptionCencEnabledProtocolsSmoothStreaming = value; }

        /// <summary>Default ContentKey used by current Streaming Policy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Default ContentKey used by current Streaming Policy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Default ContentKey used by current Streaming Policy",
        SerializedName = @"defaultContentKeyPolicyName",
        PossibleTypes = new [] { typeof(string) })]
        public string DefaultContentKeyPolicyName { get => ParametersBody.DefaultContentKeyPolicyName ?? null; set => ParametersBody.DefaultContentKeyPolicyName = value; }

        /// <summary>
        /// The credentials, account, tenant, and subscription used for communication with Azure
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The credentials, account, tenant, and subscription used for communication with Azure.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>Representing which tracks should not be encrypted</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Representing which tracks should not be encrypted")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Representing which tracks should not be encrypted",
        SerializedName = @"clearTracks",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ITrackSelection) })]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.ITrackSelection[] EnvelopeEncryptionClearTrack { get => ParametersBody.EnvelopeEncryptionClearTrack ?? null /* arrayOf */; set => ParametersBody.EnvelopeEncryptionClearTrack = value; }

        /// <summary>Label can be used to specify Content Key when creating a Streaming Locator</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Label can be used to specify Content Key when creating a Streaming Locator")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Label can be used to specify Content Key when creating a Streaming Locator",
        SerializedName = @"label",
        PossibleTypes = new [] { typeof(string) })]
        public string EnvelopeEncryptionContentKeysDefaultKeyLabel { get => ParametersBody.EnvelopeEncryptionContentKeysDefaultKeyLabel ?? null; set => ParametersBody.EnvelopeEncryptionContentKeysDefaultKeyLabel = value; }

        /// <summary>Policy used by Default Key</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Policy used by Default Key")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Policy used by Default Key",
        SerializedName = @"policyName",
        PossibleTypes = new [] { typeof(string) })]
        public string EnvelopeEncryptionContentKeysDefaultKeyPolicyName { get => ParametersBody.EnvelopeEncryptionContentKeysDefaultKeyPolicyName ?? null; set => ParametersBody.EnvelopeEncryptionContentKeysDefaultKeyPolicyName = value; }

        /// <summary>Representing tracks needs separate content key</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Representing tracks needs separate content key")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Representing tracks needs separate content key",
        SerializedName = @"keyToTrackMappings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicyContentKey) })]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicyContentKey[] EnvelopeEncryptionContentKeysKeyToTrackMapping { get => ParametersBody.EnvelopeEncryptionContentKeysKeyToTrackMapping ?? null /* arrayOf */; set => ParametersBody.EnvelopeEncryptionContentKeysKeyToTrackMapping = value; }

        /// <summary>
        /// Template for the URL of the custom service delivering keys to end user players. Not required when using Azure Media Services
        /// for issuing keys. The template supports replaceable tokens that the service will update at runtime with the value specific
        /// to the request. The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId,
        /// and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Template for the URL of the custom service delivering keys to end user players. Not required when using Azure Media Services for issuing keys. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Template for the URL of the custom service delivering keys to end user players. Not required when using Azure Media Services for issuing keys. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.",
        SerializedName = @"customKeyAcquisitionUrlTemplate",
        PossibleTypes = new [] { typeof(string) })]
        public string EnvelopeEncryptionCustomKeyAcquisitionUrlTemplate { get => ParametersBody.EnvelopeEncryptionCustomKeyAcquisitionUrlTemplate ?? null; set => ParametersBody.EnvelopeEncryptionCustomKeyAcquisitionUrlTemplate = value; }

        /// <summary>Enable DASH protocol or not</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Enable DASH protocol or not")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable DASH protocol or not",
        SerializedName = @"dash",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter EnvelopeEncryptionEnabledProtocolsDash { get => ParametersBody.EnvelopeEncryptionEnabledProtocolsDash ?? default(global::System.Management.Automation.SwitchParameter); set => ParametersBody.EnvelopeEncryptionEnabledProtocolsDash = value; }

        /// <summary>Enable Download protocol or not</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Enable Download protocol or not")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable Download protocol or not",
        SerializedName = @"download",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter EnvelopeEncryptionEnabledProtocolsDownload { get => ParametersBody.EnvelopeEncryptionEnabledProtocolsDownload ?? default(global::System.Management.Automation.SwitchParameter); set => ParametersBody.EnvelopeEncryptionEnabledProtocolsDownload = value; }

        /// <summary>Enable HLS protocol or not</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Enable HLS protocol or not")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable HLS protocol or not",
        SerializedName = @"hls",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter EnvelopeEncryptionEnabledProtocolsHl { get => ParametersBody.EnvelopeEncryptionEnabledProtocolsHl ?? default(global::System.Management.Automation.SwitchParameter); set => ParametersBody.EnvelopeEncryptionEnabledProtocolsHl = value; }

        /// <summary>Enable SmoothStreaming protocol or not</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Enable SmoothStreaming protocol or not")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable SmoothStreaming protocol or not",
        SerializedName = @"smoothStreaming",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter EnvelopeEncryptionEnabledProtocolsSmoothStreaming { get => ParametersBody.EnvelopeEncryptionEnabledProtocolsSmoothStreaming ?? default(global::System.Management.Automation.SwitchParameter); set => ParametersBody.EnvelopeEncryptionEnabledProtocolsSmoothStreaming = value; }

        /// <summary>All license to be persistent or not</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "All license to be persistent or not")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"All license to be persistent or not",
        SerializedName = @"allowPersistentLicense",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter FairPlayAllowPersistentLicense { get => ParametersBody.FairPlayAllowPersistentLicense ?? default(global::System.Management.Automation.SwitchParameter); set => ParametersBody.FairPlayAllowPersistentLicense = value; }

        /// <summary>
        /// Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media
        /// Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the
        /// value specific to the request. The currently supported token values are {AlternativeMediaId}, which is replaced with the
        /// value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of
        /// the key being requested.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.",
        SerializedName = @"customLicenseAcquisitionUrlTemplate",
        PossibleTypes = new [] { typeof(string) })]
        public string FairPlayCustomLicenseAcquisitionUrlTemplate { get => ParametersBody.FairPlayCustomLicenseAcquisitionUrlTemplate ?? null; set => ParametersBody.FairPlayCustomLicenseAcquisitionUrlTemplate = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>
        /// <see cref="IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>The Streaming Policy name.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The Streaming Policy name.")]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The Streaming Policy name.",
        SerializedName = @"streamingPolicyName",
        PossibleTypes = new [] { typeof(string) })]
        [global::System.Management.Automation.Alias("StreamingPolicyName")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Path)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Enable DASH protocol or not</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Enable DASH protocol or not")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable DASH protocol or not",
        SerializedName = @"dash",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter NoEncryptionEnabledProtocolsDash { get => ParametersBody.NoEncryptionEnabledProtocolsDash ?? default(global::System.Management.Automation.SwitchParameter); set => ParametersBody.NoEncryptionEnabledProtocolsDash = value; }

        /// <summary>Enable Download protocol or not</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Enable Download protocol or not")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable Download protocol or not",
        SerializedName = @"download",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter NoEncryptionEnabledProtocolsDownload { get => ParametersBody.NoEncryptionEnabledProtocolsDownload ?? default(global::System.Management.Automation.SwitchParameter); set => ParametersBody.NoEncryptionEnabledProtocolsDownload = value; }

        /// <summary>Enable HLS protocol or not</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Enable HLS protocol or not")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable HLS protocol or not",
        SerializedName = @"hls",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter NoEncryptionEnabledProtocolsHl { get => ParametersBody.NoEncryptionEnabledProtocolsHl ?? default(global::System.Management.Automation.SwitchParameter); set => ParametersBody.NoEncryptionEnabledProtocolsHl = value; }

        /// <summary>Enable SmoothStreaming protocol or not</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Enable SmoothStreaming protocol or not")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable SmoothStreaming protocol or not",
        SerializedName = @"smoothStreaming",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter NoEncryptionEnabledProtocolsSmoothStreaming { get => ParametersBody.NoEncryptionEnabledProtocolsSmoothStreaming ?? default(global::System.Management.Automation.SwitchParameter); set => ParametersBody.NoEncryptionEnabledProtocolsSmoothStreaming = value; }

        /// <summary>Backing field for <see cref="ParametersBody" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicy _parametersBody= new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.StreamingPolicy();

        /// <summary>A Streaming Policy resource</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicy ParametersBody { get => this._parametersBody; set => this._parametersBody = value; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>Backing field for <see cref="ResourceGroupName" /> property.</summary>
        private string _resourceGroupName;

        /// <summary>The name of the resource group within the Azure subscription.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The name of the resource group within the Azure subscription.")]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the resource group within the Azure subscription.",
        SerializedName = @"resourceGroupName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Path)]
        public string ResourceGroupName { get => this._resourceGroupName; set => this._resourceGroupName = value; }

        /// <summary>Backing field for <see cref="SubscriptionId" /> property.</summary>
        private string _subscriptionId;

        /// <summary>The unique identifier for a Microsoft Azure subscription.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The unique identifier for a Microsoft Azure subscription.")]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The unique identifier for a Microsoft Azure subscription.",
        SerializedName = @"subscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.DefaultInfo(
        Name = @"",
        Description =@"",
        Script = @"(Get-AzContext).Subscription.Id")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Category(global::Microsoft.Azure.PowerShell.Cmdlets.MediaServices.ParameterCategory.Path)]
        public string SubscriptionId { get => this._subscriptionId; set => this._subscriptionId = value; }

        /// <summary>
        /// <c>overrideOnCreated</c> will be called before the regular onCreated has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicy"
        /// /> from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onCreated method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnCreated(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicy> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.IErrorResponse"
        /// /> from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.IErrorResponse> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {

        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Events.Information:
                    {
                        var data = messageData();
                        WriteInformation(data.Message, new string[]{});
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Module.Instance.Signal(id, token, messageData, (i,t,m) => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener)this).Signal(i,t,()=> Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.EventDataConverter.ConvertFrom( m() ) as Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.EventData ), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>
        /// Intializes a new instance of the <see cref="NewAzMediaServicesStreamingPolicy_CreateExpanded" /> cmdlet class.
        /// </summary>
        public NewAzMediaServicesStreamingPolicy_CreateExpanded()
        {

        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'StreamingPoliciesCreate' operation"))
                {
                    using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener)this).Token) )
                    {
                        asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener)this).Token);
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    await this.Client.StreamingPoliciesCreate(SubscriptionId, ResourceGroupName, AccountName, Name, ParametersBody, onCreated, onDefault, this, Pipeline);
                    await ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  SubscriptionId=SubscriptionId,ResourceGroupName=ResourceGroupName,AccountName=AccountName,Name=Name,body=ParametersBody})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <summary>a delegate that is called when the remote service returns 201 (Created).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicy"
        /// /> from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onCreated(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicy> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnCreated(responseMessage, response, ref _returnNow);
                // if overrideOnCreated has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onCreated - response for 201 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20211101.IStreamingPolicy
                WriteObject((await response));
            }
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.IErrorResponse"
        /// /> from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.IErrorResponse> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.Message;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20.IErrorResponse>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new { SubscriptionId=SubscriptionId, ResourceGroupName=ResourceGroupName, AccountName=AccountName, Name=Name, body=ParametersBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { SubscriptionId=SubscriptionId, ResourceGroupName=ResourceGroupName, AccountName=AccountName, Name=Name, body=ParametersBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }
    }
}