// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Confluent.Models.Api20240701
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Confluent.Runtime.Extensions;

    /// <summary>The authentication info when auth_type is AzureSynapseAnalyticsSinkConnector</summary>
    public partial class AzureSynapseAnalyticsSinkConnectorServiceInfo :
        Microsoft.Azure.PowerShell.Cmdlets.Confluent.Models.Api20240701.IAzureSynapseAnalyticsSinkConnectorServiceInfo,
        Microsoft.Azure.PowerShell.Cmdlets.Confluent.Models.Api20240701.IAzureSynapseAnalyticsSinkConnectorServiceInfoInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Confluent.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Confluent.Models.Api20240701.IConnectorServiceTypeInfoBase"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Confluent.Models.Api20240701.IConnectorServiceTypeInfoBase __connectorServiceTypeInfoBase = new Microsoft.Azure.PowerShell.Cmdlets.Confluent.Models.Api20240701.ConnectorServiceTypeInfoBase();

        /// <summary>The connector service type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Confluent.Origin(Microsoft.Azure.PowerShell.Cmdlets.Confluent.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.Confluent.Support.ConnectorServiceType ConnectorServiceType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Confluent.Models.Api20240701.IConnectorServiceTypeInfoBaseInternal)__connectorServiceTypeInfoBase).ConnectorServiceType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Confluent.Models.Api20240701.IConnectorServiceTypeInfoBaseInternal)__connectorServiceTypeInfoBase).ConnectorServiceType = value ; }

        /// <summary>Backing field for <see cref="SynapseSqlDatabaseName" /> property.</summary>
        private string _synapseSqlDatabaseName;

        /// <summary>Azure Synapse Dedicated SQL Pool Database Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Confluent.Origin(Microsoft.Azure.PowerShell.Cmdlets.Confluent.PropertyOrigin.Owned)]
        public string SynapseSqlDatabaseName { get => this._synapseSqlDatabaseName; set => this._synapseSqlDatabaseName = value; }

        /// <summary>Backing field for <see cref="SynapseSqlPassword" /> property.</summary>
        private string _synapseSqlPassword;

        /// <summary>Azure Synapse SQL login details</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Confluent.Origin(Microsoft.Azure.PowerShell.Cmdlets.Confluent.PropertyOrigin.Owned)]
        public string SynapseSqlPassword { get => this._synapseSqlPassword; set => this._synapseSqlPassword = value; }

        /// <summary>Backing field for <see cref="SynapseSqlServerName" /> property.</summary>
        private string _synapseSqlServerName;

        /// <summary>Azure Synapse Analytics SQL Server Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Confluent.Origin(Microsoft.Azure.PowerShell.Cmdlets.Confluent.PropertyOrigin.Owned)]
        public string SynapseSqlServerName { get => this._synapseSqlServerName; set => this._synapseSqlServerName = value; }

        /// <summary>Backing field for <see cref="SynapseSqlUser" /> property.</summary>
        private string _synapseSqlUser;

        /// <summary>Azure Synapse SQL login details</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Confluent.Origin(Microsoft.Azure.PowerShell.Cmdlets.Confluent.PropertyOrigin.Owned)]
        public string SynapseSqlUser { get => this._synapseSqlUser; set => this._synapseSqlUser = value; }

        /// <summary>
        /// Creates an new <see cref="AzureSynapseAnalyticsSinkConnectorServiceInfo" /> instance.
        /// </summary>
        public AzureSynapseAnalyticsSinkConnectorServiceInfo()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Confluent.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Confluent.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__connectorServiceTypeInfoBase), __connectorServiceTypeInfoBase);
            await eventListener.AssertObjectIsValid(nameof(__connectorServiceTypeInfoBase), __connectorServiceTypeInfoBase);
        }
    }
    /// The authentication info when auth_type is AzureSynapseAnalyticsSinkConnector
    public partial interface IAzureSynapseAnalyticsSinkConnectorServiceInfo :
        Microsoft.Azure.PowerShell.Cmdlets.Confluent.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Confluent.Models.Api20240701.IConnectorServiceTypeInfoBase
    {
        /// <summary>Azure Synapse Dedicated SQL Pool Database Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Confluent.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Azure Synapse Dedicated SQL Pool Database Name",
        SerializedName = @"synapseSqlDatabaseName",
        PossibleTypes = new [] { typeof(string) })]
        string SynapseSqlDatabaseName { get; set; }
        /// <summary>Azure Synapse SQL login details</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Confluent.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Azure Synapse SQL login details",
        SerializedName = @"synapseSqlPassword",
        PossibleTypes = new [] { typeof(string) })]
        string SynapseSqlPassword { get; set; }
        /// <summary>Azure Synapse Analytics SQL Server Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Confluent.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Azure Synapse Analytics SQL Server Name",
        SerializedName = @"synapseSqlServerName",
        PossibleTypes = new [] { typeof(string) })]
        string SynapseSqlServerName { get; set; }
        /// <summary>Azure Synapse SQL login details</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Confluent.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Azure Synapse SQL login details",
        SerializedName = @"synapseSqlUser",
        PossibleTypes = new [] { typeof(string) })]
        string SynapseSqlUser { get; set; }

    }
    /// The authentication info when auth_type is AzureSynapseAnalyticsSinkConnector
    internal partial interface IAzureSynapseAnalyticsSinkConnectorServiceInfoInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Confluent.Models.Api20240701.IConnectorServiceTypeInfoBaseInternal
    {
        /// <summary>Azure Synapse Dedicated SQL Pool Database Name</summary>
        string SynapseSqlDatabaseName { get; set; }
        /// <summary>Azure Synapse SQL login details</summary>
        string SynapseSqlPassword { get; set; }
        /// <summary>Azure Synapse Analytics SQL Server Name</summary>
        string SynapseSqlServerName { get; set; }
        /// <summary>Azure Synapse SQL login details</summary>
        string SynapseSqlUser { get; set; }

    }
}