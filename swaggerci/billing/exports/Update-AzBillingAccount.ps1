
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Updates the properties of a billing account.
Currently, displayName and address can be updated for billing accounts with agreement type Microsoft Customer Agreement.
Currently address and notification email address can be updated for billing accounts with agreement type Microsoft Online Services Agreement.
Currently, purchase order number can be edited for billing accounts with agreement type Enterprise Agreement.
.Description
Updates the properties of a billing account.
Currently, displayName and address can be updated for billing accounts with agreement type Microsoft Customer Agreement.
Currently address and notification email address can be updated for billing accounts with agreement type Microsoft Online Services Agreement.
Currently, purchase order number can be edited for billing accounts with agreement type Enterprise Agreement.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IBillingIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20230401.IBillingAccount
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IBillingIdentity>: Identity Parameter
  [AgreementName <String>]: The ID that uniquely identifies an agreement.
  [BillingAccountName <String>]: The ID that uniquely identifies a billing account.
  [BillingProfileName <String>]: The ID that uniquely identifies a billing profile.
  [BillingRoleAssignmentName <String>]: The ID that uniquely identifies a role assignment.
  [BillingRoleDefinitionName <String>]: The ID that uniquely identifies a role definition.
  [CustomerName <String>]: The ID that uniquely identifies a customer.
  [Id <String>]: Resource identity path
  [InstructionName <String>]: Instruction Name.
  [InvoiceName <String>]: The ID that uniquely identifies an invoice.
  [InvoiceSectionName <String>]: The ID that uniquely identifies an invoice section.
  [PaymentMethodName <String>]: The ID that uniquely identifies a payment method.
  [ProductName <String>]: The ID that uniquely identifies a product.
  [SubscriptionId <String>]: The ID that uniquely identifies a billing subscription.
.Link
https://learn.microsoft.com/powershell/module/az.billing/update-azbillingaccount
#>
function Update-AzBillingAccount {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20230401.IBillingAccount])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Alias('BillingAccountName')]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Path')]
    [System.String]
    # The ID that uniquely identifies a billing account.
    ${Name},

    [Parameter(ParameterSetName='UpdateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IBillingIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Body')]
    [System.String]
    # The billing account name.
    ${DisplayName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Body')]
    [System.String]
    # The end date of the enrollment.
    ${EnrollmentDetailEndDate},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Body')]
    [System.String]
    # The purchase order number of the enrollment.
    ${EnrollmentDetailPoNumber},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Body')]
    [System.String]
    # The start date of the enrollment.
    ${EnrollmentDetailStartDate},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Indicates whether user has read access to the billing account.
    ${HasReadAccess},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Body')]
    [System.String]
    # The billing account name of the partner or the customer for an indirect motion.
    ${IndirectRelationshipInfoBillingAccountName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Body')]
    [System.String]
    # The billing profile name of the partner or the customer for an indirect motion.
    # This field is not populated for Enterprise Agreement billing accounts.
    ${IndirectRelationshipInfoBillingProfileName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Body')]
    [System.String]
    # The display name of the partner or customer for an indirect motion.
    ${IndirectRelationshipInfoDisplayName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Body')]
    [System.String]
    # Notification email address for legacy account.
    # Available for agreement type Microsoft Online Services Program.
    ${NotificationEmailAddress},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Body')]
    [System.String]
    # The tenant that was used to set up the billing account.
    # By default, only users from this tenant can get role assignments on the billing account and all purchases are provisioned in this tenant.
    ${PrimaryBillingTenantId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Body')]
    [System.String]
    # The unique identification number of the organization linked with the billing account.
    ${RegistrationNumberId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Body')]
    [System.String]
    # Address line 1.
    ${SoldToAddressLine1},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Body')]
    [System.String]
    # Address line 2.
    ${SoldToAddressLine2},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Body')]
    [System.String]
    # Address line 3.
    ${SoldToAddressLine3},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Body')]
    [System.String]
    # Address city.
    ${SoldToCity},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Body')]
    [System.String]
    # Company name.
    ${SoldToCompanyName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Body')]
    [System.String]
    # Country code uses IS02, 2-digit format.
    ${SoldToCountry},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Body')]
    [System.String]
    # Address district.
    ${SoldToDistrict},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Body')]
    [System.String]
    # Email address.
    ${SoldToEmail},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Body')]
    [System.String]
    # First name.
    ${SoldToFirstName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Indicates if the address is incomplete.
    ${SoldToIsValidAddress},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Body')]
    [System.String]
    # Last name.
    ${SoldToLastName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Body')]
    [System.String]
    # Middle name.
    ${SoldToMiddleName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Body')]
    [System.String]
    # Phone number.
    ${SoldToPhoneNumber},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Body')]
    [System.String]
    # Postal code.
    ${SoldToPostalCode},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Body')]
    [System.String]
    # Address region.
    ${SoldToRegion},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Billing.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            UpdateExpanded = 'Az.Billing.private\Update-AzBillingAccount_UpdateExpanded';
            UpdateViaIdentityExpanded = 'Az.Billing.private\Update-AzBillingAccount_UpdateViaIdentityExpanded';
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Billing.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
