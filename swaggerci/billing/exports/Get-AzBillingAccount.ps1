
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Gets a billing account by its ID.
.Description
Gets a billing account by its ID.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IBillingIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20230401.IBillingAccount
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IBillingIdentity>: Identity Parameter
  [AgreementName <String>]: The ID that uniquely identifies an agreement.
  [BillingAccountName <String>]: The ID that uniquely identifies a billing account.
  [BillingProfileName <String>]: The ID that uniquely identifies a billing profile.
  [BillingRoleAssignmentName <String>]: The ID that uniquely identifies a role assignment.
  [BillingRoleDefinitionName <String>]: The ID that uniquely identifies a role definition.
  [CustomerName <String>]: The ID that uniquely identifies a customer.
  [Id <String>]: Resource identity path
  [InstructionName <String>]: Instruction Name.
  [InvoiceName <String>]: The ID that uniquely identifies an invoice.
  [InvoiceSectionName <String>]: The ID that uniquely identifies an invoice section.
  [PaymentMethodName <String>]: The ID that uniquely identifies a payment method.
  [ProductName <String>]: The ID that uniquely identifies a product.
  [SubscriptionId <String>]: The ID that uniquely identifies a billing subscription.
.Link
https://learn.microsoft.com/powershell/module/az.billing/get-azbillingaccount
#>
function Get-AzBillingAccount {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20230401.IBillingAccount])]
[CmdletBinding(DefaultParameterSetName='List', PositionalBinding=$false)]
param(
    [Parameter(ParameterSetName='Get', Mandatory)]
    [Alias('BillingAccountName')]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Path')]
    [System.String]
    # The ID that uniquely identifies a billing account.
    ${Name},

    [Parameter(ParameterSetName='GetViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.IBillingIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Get')]
    [Parameter(ParameterSetName='GetViaIdentity')]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Query')]
    [System.String]
    # Expand is allowed for SoldTo and EnrollmentDetails/PONumber.
    ${Expand},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Query')]
    [System.Management.Automation.SwitchParameter]
    # When true, results will include Billing Accounts that have been deleted.
    ${IncludeDeletedBillingAccount},

    [Parameter(ParameterSetName='List')]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Query')]
    [System.Management.Automation.SwitchParameter]
    # The count query option allows clients to request a count of the matching resources included with the resources in the response.
    ${Count},

    [Parameter(ParameterSetName='List')]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Query')]
    [System.Management.Automation.SwitchParameter]
    # When true, results will exclude Billing Accounts that are not fully created if the user has one of the following AAD roles: Global Administrator, Global Reader, Billing Administrator.
    ${ExcludeAccountsWithoutBillingProfile},

    [Parameter(ParameterSetName='List')]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Query')]
    [System.String]
    # The filter query option allows clients to filter a collection of resources that are addressed by a request URL.
    ${Filter},

    [Parameter(ParameterSetName='List')]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Query')]
    [System.Management.Automation.SwitchParameter]
    # When true, results will include Billing Accounts that the user does not have a direct role assignment on if the user has one of the following AAD roles: Global Administrator, Global Reader, Billing Administrator.
    ${IncludeAllBillingAccount},

    [Parameter(ParameterSetName='List')]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Query')]
    [System.Management.Automation.SwitchParameter]
    # When true, results will include the tenant's Microsoft Online Services Program Billing Account if the user has one of the following AAD roles: Global Administrator, Global Reader, Billing Administrator.
    ${IncludeTenantAccount},

    [Parameter(ParameterSetName='List')]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Query')]
    [System.String]
    # Must be combined with legalOwnerTID, results will only include Billing Accounts for whom is legally responsible for the Billing Accounts.
    # Optional.
    ${LegalOwnerOid},

    [Parameter(ParameterSetName='List')]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Query')]
    [System.String]
    # Must be combined with legalOwnerOID, results will only include Billing Accounts for whom is legally responsible for the Billing Accounts.
    # Optional.
    ${LegalOwnerTid},

    [Parameter(ParameterSetName='List')]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Query')]
    [System.String]
    # The orderby query option allows clients to request resources in a particular order.
    ${OrderBy},

    [Parameter(ParameterSetName='List')]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Query')]
    [System.String]
    # The search query option allows clients to request items within a collection matching a free-text search expression.
    # search is only supported for string fields.
    ${Search},

    [Parameter(ParameterSetName='List')]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Query')]
    [System.Int64]
    # The skip query option requests the number of items in the queried collection that are to be skipped and not included in the result.
    ${Skip},

    [Parameter(ParameterSetName='List')]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Query')]
    [System.Int64]
    # The top query option requests the number of items in the queried collection to be included in the result.
    # The maximum supported value for top is 50.
    ${Top},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Billing.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Billing.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Get = 'Az.Billing.private\Get-AzBillingAccount_Get';
            GetViaIdentity = 'Az.Billing.private\Get-AzBillingAccount_GetViaIdentity';
            List = 'Az.Billing.private\Get-AzBillingAccount_List';
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Billing.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
