// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Billing.Support
{

    /// <summary>
    /// Category of the subscription. Possible values include: ReservationOrder, SavingsPlanOrder, AzureSupport, UsageBased, Hardware,
    /// SaaS, SeatBased, and Software.
    /// </summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Billing.Support.BillingSubscriptionCategoryTypeConverter))]
    public partial struct BillingSubscriptionCategory :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Other".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Other'", "Other", global::System.Management.Automation.CompletionResultType.ParameterValue, "Other");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ReservationOrder".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ReservationOrder'", "ReservationOrder", global::System.Management.Automation.CompletionResultType.ParameterValue, "ReservationOrder");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SavingsPlanOrder".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SavingsPlanOrder'", "SavingsPlanOrder", global::System.Management.Automation.CompletionResultType.ParameterValue, "SavingsPlanOrder");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AzureSupport".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AzureSupport'", "AzureSupport", global::System.Management.Automation.CompletionResultType.ParameterValue, "AzureSupport");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "UsageBased".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'UsageBased'", "UsageBased", global::System.Management.Automation.CompletionResultType.ParameterValue, "UsageBased");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Hardware".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Hardware'", "Hardware", global::System.Management.Automation.CompletionResultType.ParameterValue, "Hardware");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SaaS".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SaaS'", "SaaS", global::System.Management.Automation.CompletionResultType.ParameterValue, "SaaS");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SeatBased".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SeatBased'", "SeatBased", global::System.Management.Automation.CompletionResultType.ParameterValue, "SeatBased");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Software".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Software'", "Software", global::System.Management.Automation.CompletionResultType.ParameterValue, "Software");
            }
        }
    }
}