// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support
{

    /// <summary>The input values for defining resource types for naming conventions.</summary>
    public partial struct ResourceType :
        System.IEquatable<ResourceType>
    {
        /// <summary>
        /// Value when customer wants to provide custom naming convention for automation account.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.ResourceType AutomationAccounts = @"automationAccounts";

        /// <summary>
        /// Value when customer wants to provide custom naming convention for Azure Firewall.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.ResourceType AzureFirewalls = @"azureFirewalls";

        /// <summary>Value when customer wants to provide custom naming convention for Bastion.</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.ResourceType BastionHosts = @"bastionHosts";

        /// <summary>Value when customer wants to provide custom naming convention for dashboard.</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.ResourceType Dashboards = @"dashboards";

        /// <summary>
        /// Value when customer wants to provide custom naming convention for DDoS protection plan.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.ResourceType DdosProtectionPlans = @"ddosProtectionPlans";

        /// <summary>Value when customer wants to provide custom naming convention for Bastion NSG.</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.ResourceType NetworkSecurityGroups = @"networkSecurityGroups";

        /// <summary>Value when customer wants to provide custom naming convention for route table.</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.ResourceType RouteTables = @"routeTables";

        /// <summary>
        /// Value when customer wants to provide custom naming convention for managed identity.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.ResourceType UserAssignedIdentities = @"userAssignedIdentities";

        /// <summary>
        /// Value when customer wants to provide custom naming convention for virtual network.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.ResourceType VirtualNetworks = @"virtualNetworks";

        /// <summary>
        /// Value when customer wants to provide custom naming convention for Log Analytics workspace.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.ResourceType Workspaces = @"workspaces";

        /// <summary>the value for an instance of the <see cref="ResourceType" /> Enum.</summary>
        private string _value { get; set; }

        /// <summary>Conversion from arbitrary object to ResourceType</summary>
        /// <param name="value">the value to convert to an instance of <see cref="ResourceType" />.</param>
        internal static object CreateFrom(object value)
        {
            return new ResourceType(global::System.Convert.ToString(value));
        }

        /// <summary>Compares values of enum type ResourceType</summary>
        /// <param name="e">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public bool Equals(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.ResourceType e)
        {
            return _value.Equals(e._value);
        }

        /// <summary>Compares values of enum type ResourceType (override for Object)</summary>
        /// <param name="obj">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public override bool Equals(object obj)
        {
            return obj is ResourceType && Equals((ResourceType)obj);
        }

        /// <summary>Returns hashCode for enum ResourceType</summary>
        /// <returns>The hashCode of the value</returns>
        public override int GetHashCode()
        {
            return this._value.GetHashCode();
        }

        /// <summary>Creates an instance of the <see cref="ResourceType"/> Enum class.</summary>
        /// <param name="underlyingValue">the value to create an instance for.</param>
        private ResourceType(string underlyingValue)
        {
            this._value = underlyingValue;
        }

        /// <summary>Returns string representation for ResourceType</summary>
        /// <returns>A string for this value.</returns>
        public override string ToString()
        {
            return this._value;
        }

        /// <summary>Implicit operator to convert string to ResourceType</summary>
        /// <param name="value">the value to convert to an instance of <see cref="ResourceType" />.</param>

        public static implicit operator ResourceType(string value)
        {
            return new ResourceType(value);
        }

        /// <summary>Implicit operator to convert ResourceType to string</summary>
        /// <param name="e">the value to convert to an instance of <see cref="ResourceType" />.</param>

        public static implicit operator string(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.ResourceType e)
        {
            return e._value;
        }

        /// <summary>Overriding != operator for enum ResourceType</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are not equal to the same value</returns>
        public static bool operator !=(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.ResourceType e1, Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.ResourceType e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>Overriding == operator for enum ResourceType</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public static bool operator ==(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.ResourceType e1, Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.ResourceType e2)
        {
            return e2.Equals(e1);
        }
    }
}