// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Extensions;
    using System;

    /// <summary>Generate infrastructure as code (IaC) for a landing zone deployment.</summary>
    /// <remarks>
    /// [OpenAPI] GenerateLandingZone=>POST:"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations/{landingZoneConfigurationName}/generateLandingZone"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsCommon.New, @"AzSovereignLandingZoneConfigurationOperationLandingZone_GenerateExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.IGenerateLandingZoneResponse))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Description(@"Generate infrastructure as code (IaC) for a landing zone deployment.")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Generated]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.HttpPath(Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations/{landingZoneConfigurationName}/generateLandingZone", ApiVersion = "2025-02-27-preview")]
    public partial class NewAzSovereignLandingZoneConfigurationOperationLandingZone_GenerateExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>The request to generate Infrastructure as Code (IaC) for a landing zone.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.IGenerateLandingZoneRequest _body = new Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.GenerateLandingZoneRequest();

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>when specified, runs this cmdlet as a PowerShell job</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Run the command as a job")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter AsJob { get; set; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.Sovereign.MicrosoftSovereign Client => Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Module.Instance.ClientAPI;

        /// <summary>
        /// The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet
        /// against a different subscription
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>
        /// The Azure region where the landing zone will be deployed. All Azure regions are supported.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The Azure region where the landing zone will be deployed. All Azure regions are supported.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The Azure region where the landing zone will be deployed. All Azure regions are supported.",
        SerializedName = @"deploymentLocation",
        PossibleTypes = new [] { typeof(string) })]
        public string DeploymentLocation { get => _body.DeploymentLocation ?? null; set => _body.DeploymentLocation = value; }

        /// <summary>
        /// The prefix that will be added to all resources created by this deployment. Use between 2 and 5 characters, consisting
        /// only of letters, digits, '-', '.', or '_'. No other special characters are supported.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The prefix that will be added to all resources created by this deployment. Use between 2 and 5 characters, consisting only of letters, digits, '-', '.', or '_'. No other special characters are supported.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The prefix that will be added to all resources created by this deployment. Use between 2 and 5 characters, consisting only of letters, digits, '-', '.', or '_'. No other special characters are supported.",
        SerializedName = @"deploymentPrefix",
        PossibleTypes = new [] { typeof(string) })]
        public string DeploymentPrefix { get => _body.DeploymentPrefix ?? null; set => _body.DeploymentPrefix = value; }

        /// <summary>
        /// The optional suffix that will be appended to all resources created by this deployment, maximum 5 characters.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The optional suffix that will be appended to all resources created by this deployment, maximum 5 characters.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The optional suffix that will be appended to all resources created by this deployment, maximum 5 characters.",
        SerializedName = @"deploymentSuffix",
        PossibleTypes = new [] { typeof(string) })]
        public string DeploymentSuffix { get => _body.DeploymentSuffix ?? null; set => _body.DeploymentSuffix = value; }

        /// <summary>
        /// The environment where the landing zone is being deployed, such as ppe, prod, test, etc.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The environment where the landing zone is being deployed, such as ppe, prod, test, etc.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The environment where the landing zone is being deployed, such as ppe, prod, test, etc.",
        SerializedName = @"environment",
        PossibleTypes = new [] { typeof(string) })]
        public string Environment { get => _body.Environment ?? null; set => _body.Environment = value; }

        /// <summary>
        /// Existing 'Connectivity' subscription ID to be linked with this deployment when reusing instead of creating a new subscription.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Existing 'Connectivity' subscription ID to be linked with this deployment when reusing instead of creating a new subscription.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Existing 'Connectivity' subscription ID to be linked with this deployment when reusing instead of creating a new subscription.",
        SerializedName = @"existingConnectivitySubscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        public string ExistingConnectivitySubscriptionId { get => _body.ExistingConnectivitySubscriptionId ?? null; set => _body.ExistingConnectivitySubscriptionId = value; }

        /// <summary>
        /// Existing 'Identity' subscription ID to be linked with this deployment when reusing instead of creating a new subscription.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Existing 'Identity' subscription ID to be linked with this deployment when reusing instead of creating a new subscription.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Existing 'Identity' subscription ID to be linked with this deployment when reusing instead of creating a new subscription.",
        SerializedName = @"existingIdentitySubscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        public string ExistingIdentitySubscriptionId { get => _body.ExistingIdentitySubscriptionId ?? null; set => _body.ExistingIdentitySubscriptionId = value; }

        /// <summary>
        /// Existing 'Management' subscription ID to be linked with this deployment when reusing instead of creating a new subscription.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Existing 'Management' subscription ID to be linked with this deployment when reusing instead of creating a new subscription.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Existing 'Management' subscription ID to be linked with this deployment when reusing instead of creating a new subscription.",
        SerializedName = @"existingManagementSubscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        public string ExistingManagementSubscriptionId { get => _body.ExistingManagementSubscriptionId ?? null; set => _body.ExistingManagementSubscriptionId = value; }

        /// <summary>
        /// Optional parent for the management group hierarchy, serving as an intermediate root management group parent if specified.
        /// If left empty, the default will be to deploy under the tenant root management group.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Optional parent for the management group hierarchy, serving as an intermediate root management group parent if specified. If left empty, the default will be to deploy under the tenant root management group.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Optional parent for the management group hierarchy, serving as an intermediate root management group parent if specified. If left empty, the default will be to deploy under the tenant root management group.",
        SerializedName = @"existingTopLevelMgParentId",
        PossibleTypes = new [] { typeof(string) })]
        public string ExistingTopLevelMgParentId { get => _body.ExistingTopLevelMgParentId ?? null; set => _body.ExistingTopLevelMgParentId = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>The export options available for code generation.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The export options available for code generation.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The export options available for code generation.",
        SerializedName = @"infrastructureAsCodeOutputOptions",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.InfrastructureAsCodeOutputOptions) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.InfrastructureAsCodeOutputOptions))]
        public Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.InfrastructureAsCodeOutputOptions InfrastructureAsCodeOutputOption { get => _body.InfrastructureAsCodeOutputOption; set => _body.InfrastructureAsCodeOutputOption = value; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>Backing field for <see cref="LandingZoneAccountName" /> property.</summary>
        private string _landingZoneAccountName;

        /// <summary>The landing zone account.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The landing zone account.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The landing zone account.",
        SerializedName = @"landingZoneAccountName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Path)]
        public string LandingZoneAccountName { get => this._landingZoneAccountName; set => this._landingZoneAccountName = value; }

        /// <summary>Backing field for <see cref="LandingZoneConfigurationName" /> property.</summary>
        private string _landingZoneConfigurationName;

        /// <summary>The landing zone configuration name</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The landing zone configuration name")]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The landing zone configuration name",
        SerializedName = @"landingZoneConfigurationName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Path)]
        public string LandingZoneConfigurationName { get => this._landingZoneConfigurationName; set => this._landingZoneConfigurationName = value; }

        /// <summary>
        /// <see cref="Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>
        /// when specified, will make the remote call, and return an AsyncOperationResponse, letting the remote operation continue
        /// asynchronously.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Run the command asynchronously")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter NoWait { get; set; }

        /// <summary>
        /// The name of the organization or agency for which the landing zone is being deployed. This is optional.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The name of the organization or agency for which the landing zone is being deployed. This is optional.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the organization or agency for which the landing zone is being deployed. This is optional.",
        SerializedName = @"organization",
        PossibleTypes = new [] { typeof(string) })]
        public string Organization { get => _body.Organization ?? null; set => _body.Organization = value; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>Backing field for <see cref="ResourceGroupName" /> property.</summary>
        private string _resourceGroupName;

        /// <summary>The name of the resource group. The name is case insensitive.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The name of the resource group. The name is case insensitive.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the resource group. The name is case insensitive.",
        SerializedName = @"resourceGroupName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Path)]
        public string ResourceGroupName { get => this._resourceGroupName; set => this._resourceGroupName = value; }

        /// <summary>
        /// The complete resource ID of the billing scope linked to the EA, MCA, or MPA account where you want to create the subscription.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The complete resource ID of the billing scope linked to the EA, MCA, or MPA account where you want to create the subscription.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The complete resource ID of the billing scope linked to the EA, MCA, or MPA account where you want to create the subscription.",
        SerializedName = @"subscriptionBillingScope",
        PossibleTypes = new [] { typeof(string) })]
        public string SubscriptionBillingScope { get => _body.SubscriptionBillingScope ?? null; set => _body.SubscriptionBillingScope = value; }

        /// <summary>Backing field for <see cref="SubscriptionId" /> property.</summary>
        private string _subscriptionId;

        /// <summary>The ID of the target subscription. The value must be an UUID.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The ID of the target subscription. The value must be an UUID.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The ID of the target subscription. The value must be an UUID.",
        SerializedName = @"subscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.DefaultInfo(
        Name = @"",
        Description =@"",
        Script = @"(Get-AzContext).Subscription.Id")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Path)]
        public string SubscriptionId { get => this._subscriptionId; set => this._subscriptionId = value; }

        /// <summary>
        /// The display name assigned to the top management group of the landing zone deployment hierarchy. It is recommended to use
        /// unique names for each landing zone deployment.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The display name assigned to the top management group of the landing zone deployment hierarchy. It is recommended to use unique names for each landing zone deployment.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The display name assigned to the top management group of the landing zone deployment hierarchy. It is recommended to use unique names for each landing zone deployment.",
        SerializedName = @"topLevelMgDisplayName",
        PossibleTypes = new [] { typeof(string) })]
        public string TopLevelMgDisplayName { get => _body.TopLevelMgDisplayName ?? null; set => _body.TopLevelMgDisplayName = value; }

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api50.IErrorResponse">Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api50.IErrorResponse</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api50.IErrorResponse> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.IGenerateLandingZoneResponse">Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.IGenerateLandingZoneResponse</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.IGenerateLandingZoneResponse> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Creates a duplicate instance of this cmdlet (via JSON serialization).</summary>
        /// <returns>
        /// a duplicate instance of NewAzSovereignLandingZoneConfigurationOperationLandingZone_GenerateExpanded
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Cmdlets.NewAzSovereignLandingZoneConfigurationOperationLandingZone_GenerateExpanded Clone()
        {
            var clone = new NewAzSovereignLandingZoneConfigurationOperationLandingZone_GenerateExpanded();
            clone.__correlationId = this.__correlationId;
            clone.__processRecordId = this.__processRecordId;
            clone.DefaultProfile = this.DefaultProfile;
            clone.InvocationInformation = this.InvocationInformation;
            clone.Proxy = this.Proxy;
            clone.Pipeline = this.Pipeline;
            clone.AsJob = this.AsJob;
            clone.Break = this.Break;
            clone.ProxyCredential = this.ProxyCredential;
            clone.ProxyUseDefaultCredentials = this.ProxyUseDefaultCredentials;
            clone.HttpPipelinePrepend = this.HttpPipelinePrepend;
            clone.HttpPipelineAppend = this.HttpPipelineAppend;
            clone._body = this._body;
            clone.SubscriptionId = this.SubscriptionId;
            clone.ResourceGroupName = this.ResourceGroupName;
            clone.LandingZoneAccountName = this.LandingZoneAccountName;
            clone.LandingZoneConfigurationName = this.LandingZoneConfigurationName;
            return clone;
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {
            var telemetryInfo = Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Module.Instance.GetTelemetryInfo?.Invoke(__correlationId);
            if (telemetryInfo != null)
            {
                telemetryInfo.TryGetValue("ShowSecretsWarning", out var showSecretsWarning);
                telemetryInfo.TryGetValue("SanitizedProperties", out var sanitizedProperties);
                telemetryInfo.TryGetValue("InvocationName", out var invocationName);
                if (showSecretsWarning == "true")
                {
                    if (string.IsNullOrEmpty(sanitizedProperties))
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing secrets. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                    else
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing the following secrets: {sanitizedProperties}. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                }
            }
        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Events.Information:
                    {
                        // When an operation supports asjob, Information messages must go thru verbose.
                        WriteVerbose($"INFORMATION: {(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Events.DelayBeforePolling:
                    {
                        if (true == MyInvocation?.BoundParameters?.ContainsKey("NoWait"))
                        {
                            var data = messageData();
                            if (data.ResponseMessage is System.Net.Http.HttpResponseMessage response)
                            {
                                var asyncOperation = response.GetFirstHeader(@"Azure-AsyncOperation");
                                var location = response.GetFirstHeader(@"Location");
                                var uri = global::System.String.IsNullOrEmpty(asyncOperation) ? global::System.String.IsNullOrEmpty(location) ? response.RequestMessage.RequestUri.AbsoluteUri : location : asyncOperation;
                                WriteObject(new Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.PowerShell.AsyncOperationResponse { Target = uri });
                                // do nothing more.
                                data.Cancel();
                                return;
                            }
                        }
                        break;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Module.Instance.Signal(id, token, messageData, (i,t,m) => ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Signal(i,t,()=> Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.EventDataConverter.ConvertFrom( m() ) as Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.EventData ), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>
        /// Intializes a new instance of the <see cref="NewAzSovereignLandingZoneConfigurationOperationLandingZone_GenerateExpanded"
        /// /> cmdlet class.
        /// </summary>
        public NewAzSovereignLandingZoneConfigurationOperationLandingZone_GenerateExpanded()
        {

        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'LandingZoneConfigurationOperationsGenerateLandingZone' operation"))
                {
                    if (true == MyInvocation?.BoundParameters?.ContainsKey("AsJob"))
                    {
                        var instance = this.Clone();
                        var job = new Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.PowerShell.AsyncJob(instance, this.MyInvocation.Line, this.MyInvocation.MyCommand.Name, this._cancellationTokenSource.Token, this._cancellationTokenSource.Cancel);
                        JobRepository.Add(job);
                        var task = instance.ProcessRecordAsync();
                        job.Monitor(task);
                        WriteObject(job);
                    }
                    else
                    {
                        using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Token) )
                        {
                            asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Token);
                        }
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    await this.Client.LandingZoneConfigurationOperationsGenerateLandingZone(SubscriptionId, ResourceGroupName, LandingZoneAccountName, LandingZoneConfigurationName, _body, onOk, onDefault, this, Pipeline);
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  SubscriptionId=SubscriptionId,ResourceGroupName=ResourceGroupName,LandingZoneAccountName=LandingZoneAccountName,LandingZoneConfigurationName=LandingZoneConfigurationName,body=_body})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <param name="sendToPipeline"></param>
        new protected void WriteObject(object sendToPipeline)
        {
            Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline);
        }

        /// <param name="sendToPipeline"></param>
        /// <param name="enumerateCollection"></param>
        new protected void WriteObject(object sendToPipeline, bool enumerateCollection)
        {
            Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline, enumerateCollection);
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api50.IErrorResponse">Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api50.IErrorResponse</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api50.IErrorResponse> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.Message;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api50.IErrorResponse>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new { SubscriptionId=SubscriptionId, ResourceGroupName=ResourceGroupName, LandingZoneAccountName=LandingZoneAccountName, LandingZoneConfigurationName=LandingZoneConfigurationName, body=_body })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { SubscriptionId=SubscriptionId, ResourceGroupName=ResourceGroupName, LandingZoneAccountName=LandingZoneAccountName, LandingZoneConfigurationName=LandingZoneConfigurationName, body=_body })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.IGenerateLandingZoneResponse">Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.IGenerateLandingZoneResponse</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.IGenerateLandingZoneResponse> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.IGenerateLandingZoneResponse
                WriteObject((await response));
            }
        }
    }
}