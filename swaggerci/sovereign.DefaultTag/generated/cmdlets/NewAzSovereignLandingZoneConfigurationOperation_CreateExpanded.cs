// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Extensions;
    using System;

    /// <summary>Create a landing zone configuration.</summary>
    /// <remarks>
    /// [OpenAPI] Create=>PUT:"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations/{landingZoneConfigurationName}"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsCommon.New, @"AzSovereignLandingZoneConfigurationOperation_CreateExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.ILandingZoneConfigurationResource))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Description(@"Create a landing zone configuration.")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Generated]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.HttpPath(Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations/{landingZoneConfigurationName}", ApiVersion = "2025-02-27-preview")]
    public partial class NewAzSovereignLandingZoneConfigurationOperation_CreateExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>
        /// Concrete proxy resource types can be created by aliasing this type using a specific property type.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.ILandingZoneConfigurationResource _resourceBody = new Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.LandingZoneConfigurationResource();

        /// <summary>when specified, runs this cmdlet as a PowerShell job</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Run the command as a job")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter AsJob { get; set; }

        /// <summary>
        /// Parameter used to deploy a Bastion: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing
        /// Bastion.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Parameter used to deploy a Bastion: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing Bastion.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Parameter used to deploy a Bastion: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing Bastion.",
        SerializedName = @"azureBastionCreationOption",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.ResourceCreationOptions) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.ResourceCreationOptions))]
        public Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.ResourceCreationOptions AzureBastionCreationOption { get => _resourceBody.AzureBastionCreationOption ?? ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.ResourceCreationOptions)""); set => _resourceBody.AzureBastionCreationOption = value; }

        /// <summary>The Bastion subnet address. Specify the address using IPv4 CIDR notation.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The Bastion subnet address. Specify the address using IPv4 CIDR notation.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Bastion subnet address. Specify the address using IPv4 CIDR notation.",
        SerializedName = @"azureBastionSubnetCidrBlock",
        PossibleTypes = new [] { typeof(string) })]
        public string AzureBastionSubnetCidrBlock { get => _resourceBody.AzureBastionSubnetCidrBlock ?? null; set => _resourceBody.AzureBastionSubnetCidrBlock = value; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.Sovereign.MicrosoftSovereign Client => Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Module.Instance.ClientAPI;

        /// <summary>
        /// The custom naming convention applied to specific resource types for this landing zone configuration, which overrides the
        /// default naming convention for those resource types. Example - 'customNamingConvention': [{'resourceType': 'azureFirewalls',
        /// 'formula': '{DeploymentPrefix}-afwl-{DeploymentSuffix}'}]
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The custom naming convention applied to specific resource types for this landing zone configuration, which overrides the default naming convention for those resource types. Example - 'customNamingConvention': [{'resourceType': 'azureFirewalls', 'formula': '{DeploymentPrefix}-afwl-{DeploymentSuffix}'}]")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The custom naming convention applied to specific resource types for this landing zone configuration, which overrides the default naming convention for those resource types. Example - 'customNamingConvention': [{'resourceType': 'azureFirewalls', 'formula': '{DeploymentPrefix}-afwl-{DeploymentSuffix}'}]",
        SerializedName = @"customNamingConvention",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.ICustomNamingConvention) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.ICustomNamingConvention[] CustomNamingConvention { get => _resourceBody.CustomNamingConvention ?? null /* arrayOf */; set => _resourceBody.CustomNamingConvention = value; }

        /// <summary>
        /// Parameter used to deploy a DDoS protection plan: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to
        /// reuse an existing DDoS protection plan.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Parameter used to deploy a DDoS protection plan: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing DDoS protection plan.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Parameter used to deploy a DDoS protection plan: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing DDoS protection plan.",
        SerializedName = @"ddosProtectionCreationOption",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.ResourceCreationOptions) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.ResourceCreationOptions))]
        public Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.ResourceCreationOptions DdosProtectionCreationOption { get => _resourceBody.DdosProtectionCreationOption ?? ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.ResourceCreationOptions)""); set => _resourceBody.DdosProtectionCreationOption = value; }

        /// <summary>
        /// This parameter determines whether the 'Decommissioned' management group will be created. If set to true, the group will
        /// be created; if set to false, it will not be created. The default value is false.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "This parameter determines whether the 'Decommissioned' management group will be created. If set to true, the group will be created; if set to false, it will not be created. The default value is false.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This parameter determines whether the 'Decommissioned' management group will be created. If set to true, the group will be created; if set to false, it will not be created. The default value is false.",
        SerializedName = @"create",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter DecommissionedMgMetadataCreate { get => _resourceBody.DecommissionedMgMetadataCreate ?? default(global::System.Management.Automation.SwitchParameter); set => _resourceBody.DecommissionedMgMetadataCreate = value; }

        /// <summary>Array of policy initiatives applied to the management group.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Array of policy initiatives applied to the management group.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Array of policy initiatives applied to the management group.",
        SerializedName = @"policyInitiativesAssignmentProperties",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.IPolicyInitiativeAssignmentProperties) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.IPolicyInitiativeAssignmentProperties[] DecommissionedMgMetadataPolicyInitiativesAssignmentProperty { get => _resourceBody.DecommissionedMgMetadataPolicyInitiativesAssignmentProperty ?? null /* arrayOf */; set => _resourceBody.DecommissionedMgMetadataPolicyInitiativesAssignmentProperty = value; }

        /// <summary>
        /// The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet
        /// against a different subscription
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>The resource ID of the Bastion when reusing an existing one.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The resource ID of the Bastion when reusing an existing one.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource ID of the Bastion when reusing an existing one.",
        SerializedName = @"existingAzureBastionId",
        PossibleTypes = new [] { typeof(string) })]
        public string ExistingAzureBastionId { get => _resourceBody.ExistingAzureBastionId ?? null; set => _resourceBody.ExistingAzureBastionId = value; }

        /// <summary>The resource ID of the DDoS protection plan when reusing an existing one.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The resource ID of the DDoS protection plan when reusing an existing one.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource ID of the DDoS protection plan when reusing an existing one.",
        SerializedName = @"existingDdosProtectionId",
        PossibleTypes = new [] { typeof(string) })]
        public string ExistingDdosProtectionId { get => _resourceBody.ExistingDdosProtectionId ?? null; set => _resourceBody.ExistingDdosProtectionId = value; }

        /// <summary>The resource ID of the log analytics workspace when reusing an existing one.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The resource ID of the log analytics workspace when reusing an existing one.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource ID of the log analytics workspace when reusing an existing one.",
        SerializedName = @"existingLogAnalyticsWorkspaceId",
        PossibleTypes = new [] { typeof(string) })]
        public string ExistingLogAnalyticsWorkspaceId { get => _resourceBody.ExistingLogAnalyticsWorkspaceId ?? null; set => _resourceBody.ExistingLogAnalyticsWorkspaceId = value; }

        /// <summary>
        /// Parameter used for deploying a Firewall: Select 'No' to skip deployment, 'Standard' to deploy the Standard SKU, or 'Premium'
        /// to deploy the Premium SKU.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Parameter used for deploying a Firewall: Select 'No' to skip deployment, 'Standard' to deploy the Standard SKU, or 'Premium' to deploy the Premium SKU.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Parameter used for deploying a Firewall: Select 'No' to skip deployment, 'Standard' to deploy the Standard SKU, or 'Premium' to deploy the Premium SKU.",
        SerializedName = @"firewallCreationOption",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.FirewallCreationOptions) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.FirewallCreationOptions))]
        public Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.FirewallCreationOptions FirewallCreationOption { get => _resourceBody.FirewallCreationOption ?? ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.FirewallCreationOptions)""); set => _resourceBody.FirewallCreationOption = value; }

        /// <summary>
        /// The Firewall subnet address used for deploying a firewall. Specify the Firewall subnet using IPv4 CIDR notation.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The Firewall subnet address used for deploying a firewall. Specify the Firewall subnet using IPv4 CIDR notation.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Firewall subnet address used for deploying a firewall. Specify the Firewall subnet using IPv4 CIDR notation.",
        SerializedName = @"firewallSubnetCidrBlock",
        PossibleTypes = new [] { typeof(string) })]
        public string FirewallSubnetCidrBlock { get => _resourceBody.FirewallSubnetCidrBlock ?? null; set => _resourceBody.FirewallSubnetCidrBlock = value; }

        /// <summary>
        /// The gateway subnet address used for deploying a virtual network. Specify the subnet using IPv4 CIDR notation.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The gateway subnet address used for deploying a virtual network. Specify the subnet using IPv4 CIDR notation.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The gateway subnet address used for deploying a virtual network. Specify the subnet using IPv4 CIDR notation.",
        SerializedName = @"gatewaySubnetCidrBlock",
        PossibleTypes = new [] { typeof(string) })]
        public string GatewaySubnetCidrBlock { get => _resourceBody.GatewaySubnetCidrBlock ?? null; set => _resourceBody.GatewaySubnetCidrBlock = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>The Virtual Network address. Specify the address using IPv4 CIDR notation.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The Virtual Network address. Specify the address using IPv4 CIDR notation.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Virtual Network address. Specify the address using IPv4 CIDR notation.",
        SerializedName = @"hubNetworkCidrBlock",
        PossibleTypes = new [] { typeof(string) })]
        public string HubNetworkCidrBlock { get => _resourceBody.HubNetworkCidrBlock ?? null; set => _resourceBody.HubNetworkCidrBlock = value; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>Backing field for <see cref="LandingZoneAccountName" /> property.</summary>
        private string _landingZoneAccountName;

        /// <summary>The landing zone account.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The landing zone account.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The landing zone account.",
        SerializedName = @"landingZoneAccountName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Path)]
        public string LandingZoneAccountName { get => this._landingZoneAccountName; set => this._landingZoneAccountName = value; }

        /// <summary>Backing field for <see cref="LandingZoneConfigurationName" /> property.</summary>
        private string _landingZoneConfigurationName;

        /// <summary>The landing zone configuration name</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The landing zone configuration name")]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The landing zone configuration name",
        SerializedName = @"landingZoneConfigurationName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Path)]
        public string LandingZoneConfigurationName { get => this._landingZoneConfigurationName; set => this._landingZoneConfigurationName = value; }

        /// <summary>Array of policy initiatives applied to the management group.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Array of policy initiatives applied to the management group.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Array of policy initiatives applied to the management group.",
        SerializedName = @"policyInitiativesAssignmentProperties",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.IPolicyInitiativeAssignmentProperties) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.IPolicyInitiativeAssignmentProperties[] LandingZoneMgMetadataPolicyInitiativesAssignmentProperty { get => _resourceBody.LandingZoneMgMetadataPolicyInitiativesAssignmentProperty ?? null /* arrayOf */; set => _resourceBody.LandingZoneMgMetadataPolicyInitiativesAssignmentProperty = value; }

        /// <summary>
        /// The child management groups of 'Landing Zones' management group and their assigned policies.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The child management groups of 'Landing Zones' management group and their assigned policies.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The child management groups of 'Landing Zones' management group and their assigned policies.",
        SerializedName = @"landingZonesMgChildren",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.ILandingZoneManagementGroupProperties) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.ILandingZoneManagementGroupProperties[] LandingZonesMgChild { get => _resourceBody.LandingZonesMgChild ?? null /* arrayOf */; set => _resourceBody.LandingZonesMgChild = value; }

        /// <summary>
        /// Parameter used to deploy a log analytics workspace: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing'
        /// to reuse an existing log analytics workspace.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Parameter used to deploy a log analytics workspace: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing log analytics workspace.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Parameter used to deploy a log analytics workspace: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing log analytics workspace.",
        SerializedName = @"logAnalyticsWorkspaceCreationOption",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.ResourceCreationOptions) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.ResourceCreationOptions))]
        public Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.ResourceCreationOptions LogAnalyticsWorkspaceCreationOption { get => _resourceBody.LogAnalyticsWorkspaceCreationOption ?? ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.ResourceCreationOptions)""); set => _resourceBody.LogAnalyticsWorkspaceCreationOption = value; }

        /// <summary>
        /// Parameter to define the retention period for logs, in days. The minimum duration is 30 days and the maximum is 730 days.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Parameter to define the retention period for logs, in days. The minimum duration is 30 days and the maximum is 730 days.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Parameter to define the retention period for logs, in days. The minimum duration is 30 days and the maximum is 730 days.",
        SerializedName = @"logRetentionInDays",
        PossibleTypes = new [] { typeof(long) })]
        public long LogRetentionInDay { get => _resourceBody.LogRetentionInDay ?? default(long); set => _resourceBody.LogRetentionInDay = value; }

        /// <summary>The type of managed identity.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The type of managed identity.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of managed identity.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.ManagedIdentityResourceType) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.ManagedIdentityResourceType))]
        public Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.ManagedIdentityResourceType ManagedIdentityType { get => _resourceBody.ManagedIdentityType ?? ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Support.ManagedIdentityResourceType)""); set => _resourceBody.ManagedIdentityType = value; }

        /// <summary>The resource id of the managed identity.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The resource id of the managed identity.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource id of the managed identity.",
        SerializedName = @"userAssignedIdentityResourceId",
        PossibleTypes = new [] { typeof(string) })]
        public string ManagedIdentityUserAssignedIdentityResourceId { get => _resourceBody.ManagedIdentityUserAssignedIdentityResourceId ?? null; set => _resourceBody.ManagedIdentityUserAssignedIdentityResourceId = value; }

        /// <summary>
        /// <see cref="Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>
        /// The default naming convention applied to all resources for this landing zone configuration. Example - {DeploymentPrefix}-Contoso-{ResourceTypeAbbreviation}{DeploymentSuffix}-{Environment}-testing
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The default naming convention applied to all resources for this landing zone configuration. Example - {DeploymentPrefix}-Contoso-{ResourceTypeAbbreviation}{DeploymentSuffix}-{Environment}-testing")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default naming convention applied to all resources for this landing zone configuration. Example - {DeploymentPrefix}-Contoso-{ResourceTypeAbbreviation}{DeploymentSuffix}-{Environment}-testing",
        SerializedName = @"namingConventionFormula",
        PossibleTypes = new [] { typeof(string) })]
        public string NamingConventionFormula { get => _resourceBody.NamingConventionFormula ?? null; set => _resourceBody.NamingConventionFormula = value; }

        /// <summary>
        /// when specified, will make the remote call, and return an AsyncOperationResponse, letting the remote operation continue
        /// asynchronously.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Run the command asynchronously")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter NoWait { get; set; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>Array of policy initiatives applied to the management group.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Array of policy initiatives applied to the management group.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Array of policy initiatives applied to the management group.",
        SerializedName = @"policyInitiativesAssignmentProperties",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.IPolicyInitiativeAssignmentProperties) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.IPolicyInitiativeAssignmentProperties[] PlatformConnectivityMgMetadataPolicyInitiativesAssignmentProperty { get => _resourceBody.PlatformConnectivityMgMetadataPolicyInitiativesAssignmentProperty ?? null /* arrayOf */; set => _resourceBody.PlatformConnectivityMgMetadataPolicyInitiativesAssignmentProperty = value; }

        /// <summary>Array of policy initiatives applied to the management group.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Array of policy initiatives applied to the management group.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Array of policy initiatives applied to the management group.",
        SerializedName = @"policyInitiativesAssignmentProperties",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.IPolicyInitiativeAssignmentProperties) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.IPolicyInitiativeAssignmentProperties[] PlatformIdentityMgMetadataPolicyInitiativesAssignmentProperty { get => _resourceBody.PlatformIdentityMgMetadataPolicyInitiativesAssignmentProperty ?? null /* arrayOf */; set => _resourceBody.PlatformIdentityMgMetadataPolicyInitiativesAssignmentProperty = value; }

        /// <summary>Array of policy initiatives applied to the management group.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Array of policy initiatives applied to the management group.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Array of policy initiatives applied to the management group.",
        SerializedName = @"policyInitiativesAssignmentProperties",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.IPolicyInitiativeAssignmentProperties) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.IPolicyInitiativeAssignmentProperties[] PlatformManagementMgMetadataPolicyInitiativesAssignmentProperty { get => _resourceBody.PlatformManagementMgMetadataPolicyInitiativesAssignmentProperty ?? null /* arrayOf */; set => _resourceBody.PlatformManagementMgMetadataPolicyInitiativesAssignmentProperty = value; }

        /// <summary>
        /// The names of the 'Platform' child management groups and their assigned policies, excluding the default ones: 'Connectivity',
        /// 'Identity', and 'Management'
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The names of the 'Platform' child management groups and their assigned policies, excluding the default ones: 'Connectivity', 'Identity', and 'Management'")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The names of the 'Platform' child management groups and their assigned policies, excluding the default ones: 'Connectivity', 'Identity', and 'Management'",
        SerializedName = @"platformMgChildren",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.IPlatformManagementGroupProperties) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.IPlatformManagementGroupProperties[] PlatformMgChild { get => _resourceBody.PlatformMgChild ?? null /* arrayOf */; set => _resourceBody.PlatformMgChild = value; }

        /// <summary>Array of policy initiatives applied to the management group.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Array of policy initiatives applied to the management group.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Array of policy initiatives applied to the management group.",
        SerializedName = @"policyInitiativesAssignmentProperties",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.IPolicyInitiativeAssignmentProperties) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.IPolicyInitiativeAssignmentProperties[] PlatformMgMetadataPolicyInitiativesAssignmentProperty { get => _resourceBody.PlatformMgMetadataPolicyInitiativesAssignmentProperty ?? null /* arrayOf */; set => _resourceBody.PlatformMgMetadataPolicyInitiativesAssignmentProperty = value; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>Backing field for <see cref="ResourceGroupName" /> property.</summary>
        private string _resourceGroupName;

        /// <summary>The name of the resource group. The name is case insensitive.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The name of the resource group. The name is case insensitive.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the resource group. The name is case insensitive.",
        SerializedName = @"resourceGroupName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Path)]
        public string ResourceGroupName { get => this._resourceGroupName; set => this._resourceGroupName = value; }

        /// <summary>
        /// This parameter determines whether the 'Sandbox' management group will be created. If set to true, the group will be created;
        /// if set to false, it will not be created. The default value is false.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "This parameter determines whether the 'Sandbox' management group will be created. If set to true, the group will be created; if set to false, it will not be created. The default value is false.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This parameter determines whether the 'Sandbox' management group will be created. If set to true, the group will be created; if set to false, it will not be created. The default value is false.",
        SerializedName = @"create",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter SandboxMgMetadataCreate { get => _resourceBody.SandboxMgMetadataCreate ?? default(global::System.Management.Automation.SwitchParameter); set => _resourceBody.SandboxMgMetadataCreate = value; }

        /// <summary>Array of policy initiatives applied to the management group.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Array of policy initiatives applied to the management group.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Array of policy initiatives applied to the management group.",
        SerializedName = @"policyInitiativesAssignmentProperties",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.IPolicyInitiativeAssignmentProperties) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.IPolicyInitiativeAssignmentProperties[] SandboxMgMetadataPolicyInitiativesAssignmentProperty { get => _resourceBody.SandboxMgMetadataPolicyInitiativesAssignmentProperty ?? null /* arrayOf */; set => _resourceBody.SandboxMgMetadataPolicyInitiativesAssignmentProperty = value; }

        /// <summary>Backing field for <see cref="SubscriptionId" /> property.</summary>
        private string _subscriptionId;

        /// <summary>The ID of the target subscription. The value must be an UUID.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The ID of the target subscription. The value must be an UUID.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The ID of the target subscription. The value must be an UUID.",
        SerializedName = @"subscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.DefaultInfo(
        Name = @"",
        Description =@"",
        Script = @"(Get-AzContext).Subscription.Id")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Path)]
        public string SubscriptionId { get => this._subscriptionId; set => this._subscriptionId = value; }

        /// <summary>
        /// Tags are key-value pairs that can be assigned to a resource to organize and manage it more effectively. Example: {'name':
        /// 'a tag name', 'value': 'a tag value'}
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Tags are key-value pairs that can be assigned to a resource to organize and manage it more effectively. Example: {'name': 'a tag name', 'value': 'a tag value'}")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Tags are key-value pairs that can be assigned to a resource to organize and manage it more effectively. Example: {'name': 'a tag name', 'value': 'a tag value'}",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.ITags) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.ITags[] Tag { get => _resourceBody.Tag ?? null /* arrayOf */; set => _resourceBody.Tag = value; }

        /// <summary>Array of policy initiatives applied to the management group.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Array of policy initiatives applied to the management group.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Sovereign.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Array of policy initiatives applied to the management group.",
        SerializedName = @"policyInitiativesAssignmentProperties",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.IPolicyInitiativeAssignmentProperties) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.IPolicyInitiativeAssignmentProperties[] TopLevelMgMetadataPolicyInitiativesAssignmentProperty { get => _resourceBody.TopLevelMgMetadataPolicyInitiativesAssignmentProperty ?? null /* arrayOf */; set => _resourceBody.TopLevelMgMetadataPolicyInitiativesAssignmentProperty = value; }

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api50.IErrorResponse">Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api50.IErrorResponse</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api50.IErrorResponse> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.ILandingZoneConfigurationResource">Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.ILandingZoneConfigurationResource</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.ILandingZoneConfigurationResource> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Creates a duplicate instance of this cmdlet (via JSON serialization).</summary>
        /// <returns>
        /// a duplicate instance of NewAzSovereignLandingZoneConfigurationOperation_CreateExpanded
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Cmdlets.NewAzSovereignLandingZoneConfigurationOperation_CreateExpanded Clone()
        {
            var clone = new NewAzSovereignLandingZoneConfigurationOperation_CreateExpanded();
            clone.__correlationId = this.__correlationId;
            clone.__processRecordId = this.__processRecordId;
            clone.DefaultProfile = this.DefaultProfile;
            clone.InvocationInformation = this.InvocationInformation;
            clone.Proxy = this.Proxy;
            clone.Pipeline = this.Pipeline;
            clone.AsJob = this.AsJob;
            clone.Break = this.Break;
            clone.ProxyCredential = this.ProxyCredential;
            clone.ProxyUseDefaultCredentials = this.ProxyUseDefaultCredentials;
            clone.HttpPipelinePrepend = this.HttpPipelinePrepend;
            clone.HttpPipelineAppend = this.HttpPipelineAppend;
            clone._resourceBody = this._resourceBody;
            clone.SubscriptionId = this.SubscriptionId;
            clone.ResourceGroupName = this.ResourceGroupName;
            clone.LandingZoneAccountName = this.LandingZoneAccountName;
            clone.LandingZoneConfigurationName = this.LandingZoneConfigurationName;
            return clone;
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {
            var telemetryInfo = Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Module.Instance.GetTelemetryInfo?.Invoke(__correlationId);
            if (telemetryInfo != null)
            {
                telemetryInfo.TryGetValue("ShowSecretsWarning", out var showSecretsWarning);
                telemetryInfo.TryGetValue("SanitizedProperties", out var sanitizedProperties);
                telemetryInfo.TryGetValue("InvocationName", out var invocationName);
                if (showSecretsWarning == "true")
                {
                    if (string.IsNullOrEmpty(sanitizedProperties))
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing secrets. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                    else
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing the following secrets: {sanitizedProperties}. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                }
            }
        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Events.Information:
                    {
                        // When an operation supports asjob, Information messages must go thru verbose.
                        WriteVerbose($"INFORMATION: {(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Events.DelayBeforePolling:
                    {
                        if (true == MyInvocation?.BoundParameters?.ContainsKey("NoWait"))
                        {
                            var data = messageData();
                            if (data.ResponseMessage is System.Net.Http.HttpResponseMessage response)
                            {
                                var asyncOperation = response.GetFirstHeader(@"Azure-AsyncOperation");
                                var location = response.GetFirstHeader(@"Location");
                                var uri = global::System.String.IsNullOrEmpty(asyncOperation) ? global::System.String.IsNullOrEmpty(location) ? response.RequestMessage.RequestUri.AbsoluteUri : location : asyncOperation;
                                WriteObject(new Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.PowerShell.AsyncOperationResponse { Target = uri });
                                // do nothing more.
                                data.Cancel();
                                return;
                            }
                        }
                        break;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Module.Instance.Signal(id, token, messageData, (i,t,m) => ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Signal(i,t,()=> Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.EventDataConverter.ConvertFrom( m() ) as Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.EventData ), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>
        /// Intializes a new instance of the <see cref="NewAzSovereignLandingZoneConfigurationOperation_CreateExpanded" /> cmdlet
        /// class.
        /// </summary>
        public NewAzSovereignLandingZoneConfigurationOperation_CreateExpanded()
        {

        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'LandingZoneConfigurationOperationsCreate' operation"))
                {
                    if (true == MyInvocation?.BoundParameters?.ContainsKey("AsJob"))
                    {
                        var instance = this.Clone();
                        var job = new Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.PowerShell.AsyncJob(instance, this.MyInvocation.Line, this.MyInvocation.MyCommand.Name, this._cancellationTokenSource.Token, this._cancellationTokenSource.Cancel);
                        JobRepository.Add(job);
                        var task = instance.ProcessRecordAsync();
                        job.Monitor(task);
                        WriteObject(job);
                    }
                    else
                    {
                        using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Token) )
                        {
                            asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Token);
                        }
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    await this.Client.LandingZoneConfigurationOperationsCreate(SubscriptionId, ResourceGroupName, LandingZoneAccountName, LandingZoneConfigurationName, _resourceBody, onOk, onDefault, this, Pipeline);
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  SubscriptionId=SubscriptionId,ResourceGroupName=ResourceGroupName,LandingZoneAccountName=LandingZoneAccountName,LandingZoneConfigurationName=LandingZoneConfigurationName,body=_resourceBody})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <param name="sendToPipeline"></param>
        new protected void WriteObject(object sendToPipeline)
        {
            Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline);
        }

        /// <param name="sendToPipeline"></param>
        /// <param name="enumerateCollection"></param>
        new protected void WriteObject(object sendToPipeline, bool enumerateCollection)
        {
            Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline, enumerateCollection);
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api50.IErrorResponse">Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api50.IErrorResponse</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api50.IErrorResponse> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.Message;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api50.IErrorResponse>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new { SubscriptionId=SubscriptionId, ResourceGroupName=ResourceGroupName, LandingZoneAccountName=LandingZoneAccountName, LandingZoneConfigurationName=LandingZoneConfigurationName, body=_resourceBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { SubscriptionId=SubscriptionId, ResourceGroupName=ResourceGroupName, LandingZoneAccountName=LandingZoneAccountName, LandingZoneConfigurationName=LandingZoneConfigurationName, body=_resourceBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.ILandingZoneConfigurationResource">Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.ILandingZoneConfigurationResource</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.ILandingZoneConfigurationResource> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.Sovereign.Models.Api20250227Preview.ILandingZoneConfigurationResource
                WriteObject((await response));
            }
        }
    }
}