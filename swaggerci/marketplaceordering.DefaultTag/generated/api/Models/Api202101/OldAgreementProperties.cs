// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MarketplaceOrderingAgreements.Models.Api202101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MarketplaceOrderingAgreements.Runtime.Extensions;

    /// <summary>Old Agreement Terms definition</summary>
    public partial class OldAgreementProperties :
        Microsoft.Azure.PowerShell.Cmdlets.MarketplaceOrderingAgreements.Models.Api202101.IOldAgreementProperties,
        Microsoft.Azure.PowerShell.Cmdlets.MarketplaceOrderingAgreements.Models.Api202101.IOldAgreementPropertiesInternal
    {

        /// <summary>Backing field for <see cref="CancelDate" /> property.</summary>
        private global::System.DateTime? _cancelDate;

        /// <summary>
        /// Date and time in UTC of when the terms were cancelled. This is empty if state is active.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MarketplaceOrderingAgreements.Origin(Microsoft.Azure.PowerShell.Cmdlets.MarketplaceOrderingAgreements.PropertyOrigin.Owned)]
        public global::System.DateTime? CancelDate { get => this._cancelDate; set => this._cancelDate = value; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private string _id;

        /// <summary>A unique identifier of the agreement.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MarketplaceOrderingAgreements.Origin(Microsoft.Azure.PowerShell.Cmdlets.MarketplaceOrderingAgreements.PropertyOrigin.Owned)]
        public string Id { get => this._id; set => this._id = value; }

        /// <summary>Backing field for <see cref="Offer" /> property.</summary>
        private string _offer;

        /// <summary>Offer identifier string of image being deployed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MarketplaceOrderingAgreements.Origin(Microsoft.Azure.PowerShell.Cmdlets.MarketplaceOrderingAgreements.PropertyOrigin.Owned)]
        public string Offer { get => this._offer; set => this._offer = value; }

        /// <summary>Backing field for <see cref="Publisher" /> property.</summary>
        private string _publisher;

        /// <summary>Publisher identifier string of image being deployed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MarketplaceOrderingAgreements.Origin(Microsoft.Azure.PowerShell.Cmdlets.MarketplaceOrderingAgreements.PropertyOrigin.Owned)]
        public string Publisher { get => this._publisher; set => this._publisher = value; }

        /// <summary>Backing field for <see cref="SignDate" /> property.</summary>
        private global::System.DateTime? _signDate;

        /// <summary>
        /// Date and time in UTC of when the terms were accepted. This is empty if state is cancelled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MarketplaceOrderingAgreements.Origin(Microsoft.Azure.PowerShell.Cmdlets.MarketplaceOrderingAgreements.PropertyOrigin.Owned)]
        public global::System.DateTime? SignDate { get => this._signDate; set => this._signDate = value; }

        /// <summary>Backing field for <see cref="State" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MarketplaceOrderingAgreements.Support.State? _state;

        /// <summary>Whether the agreement is active or cancelled</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MarketplaceOrderingAgreements.Origin(Microsoft.Azure.PowerShell.Cmdlets.MarketplaceOrderingAgreements.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MarketplaceOrderingAgreements.Support.State? State { get => this._state; set => this._state = value; }

        /// <summary>Creates an new <see cref="OldAgreementProperties" /> instance.</summary>
        public OldAgreementProperties()
        {

        }
    }
    /// Old Agreement Terms definition
    public partial interface IOldAgreementProperties :
        Microsoft.Azure.PowerShell.Cmdlets.MarketplaceOrderingAgreements.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Date and time in UTC of when the terms were cancelled. This is empty if state is active.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MarketplaceOrderingAgreements.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Date and time in UTC of when the terms were cancelled. This is empty if state is active.",
        SerializedName = @"cancelDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? CancelDate { get; set; }
        /// <summary>A unique identifier of the agreement.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MarketplaceOrderingAgreements.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A unique identifier of the agreement.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string Id { get; set; }
        /// <summary>Offer identifier string of image being deployed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MarketplaceOrderingAgreements.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Offer identifier string of image being deployed.",
        SerializedName = @"offer",
        PossibleTypes = new [] { typeof(string) })]
        string Offer { get; set; }
        /// <summary>Publisher identifier string of image being deployed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MarketplaceOrderingAgreements.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Publisher identifier string of image being deployed.",
        SerializedName = @"publisher",
        PossibleTypes = new [] { typeof(string) })]
        string Publisher { get; set; }
        /// <summary>
        /// Date and time in UTC of when the terms were accepted. This is empty if state is cancelled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MarketplaceOrderingAgreements.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Date and time in UTC of when the terms were accepted. This is empty if state is cancelled.",
        SerializedName = @"signDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? SignDate { get; set; }
        /// <summary>Whether the agreement is active or cancelled</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MarketplaceOrderingAgreements.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether the agreement is active or cancelled",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MarketplaceOrderingAgreements.Support.State) })]
        Microsoft.Azure.PowerShell.Cmdlets.MarketplaceOrderingAgreements.Support.State? State { get; set; }

    }
    /// Old Agreement Terms definition
    internal partial interface IOldAgreementPropertiesInternal

    {
        /// <summary>
        /// Date and time in UTC of when the terms were cancelled. This is empty if state is active.
        /// </summary>
        global::System.DateTime? CancelDate { get; set; }
        /// <summary>A unique identifier of the agreement.</summary>
        string Id { get; set; }
        /// <summary>Offer identifier string of image being deployed.</summary>
        string Offer { get; set; }
        /// <summary>Publisher identifier string of image being deployed.</summary>
        string Publisher { get; set; }
        /// <summary>
        /// Date and time in UTC of when the terms were accepted. This is empty if state is cancelled.
        /// </summary>
        global::System.DateTime? SignDate { get; set; }
        /// <summary>Whether the agreement is active or cancelled</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MarketplaceOrderingAgreements.Support.State? State { get; set; }

    }
}