// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Extensions;

    /// <summary>The properties of the benefit plan recommendation.</summary>
    public partial class BenefitRecommendationProperties
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json serialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name= "returnNow" />
        /// output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonObject into a new instance of <see cref="BenefitRecommendationProperties" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal BenefitRecommendationProperties(Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_usage = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonObject>("usage"), out var __jsonUsage) ? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.RecommendationUsageDetails.FromJson(__jsonUsage) : Usage;}
            {_recommendationDetail = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonObject>("recommendationDetails"), out var __jsonRecommendationDetails) ? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.AllSavingsBenefitDetails.FromJson(__jsonRecommendationDetails) : RecommendationDetail;}
            {_allRecommendationDetail = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonObject>("allRecommendationDetails"), out var __jsonAllRecommendationDetails) ? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.AllSavingsList.FromJson(__jsonAllRecommendationDetails) : AllRecommendationDetail;}
            {_firstConsumptionDate = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonString>("firstConsumptionDate"), out var __jsonFirstConsumptionDate) ? global::System.DateTime.TryParse((string)__jsonFirstConsumptionDate, global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.AdjustToUniversal, out var __jsonFirstConsumptionDateValue) ? __jsonFirstConsumptionDateValue : FirstConsumptionDate : FirstConsumptionDate;}
            {_lastConsumptionDate = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonString>("lastConsumptionDate"), out var __jsonLastConsumptionDate) ? global::System.DateTime.TryParse((string)__jsonLastConsumptionDate, global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.AdjustToUniversal, out var __jsonLastConsumptionDateValue) ? __jsonLastConsumptionDateValue : LastConsumptionDate : LastConsumptionDate;}
            {_lookBackPeriod = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonString>("lookBackPeriod"), out var __jsonLookBackPeriod) ? (string)__jsonLookBackPeriod : (string)LookBackPeriod;}
            {_totalHour = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonNumber>("totalHours"), out var __jsonTotalHours) ? (int?)__jsonTotalHours : TotalHour;}
            {_armSkuName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonString>("armSkuName"), out var __jsonArmSkuName) ? (string)__jsonArmSkuName : (string)ArmSkuName;}
            {_term = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonString>("term"), out var __jsonTerm) ? (string)__jsonTerm : (string)Term;}
            {_commitmentGranularity = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonString>("commitmentGranularity"), out var __jsonCommitmentGranularity) ? (string)__jsonCommitmentGranularity : (string)CommitmentGranularity;}
            {_currencyCode = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonString>("currencyCode"), out var __jsonCurrencyCode) ? (string)__jsonCurrencyCode : (string)CurrencyCode;}
            {_costWithoutBenefit = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonNumber>("costWithoutBenefit"), out var __jsonCostWithoutBenefit) ? (decimal?)__jsonCostWithoutBenefit : CostWithoutBenefit;}
            {_scope = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonString>("scope"), out var __jsonScope) ? (string)__jsonScope : (string)Scope;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationProperties.
        /// Note: the Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationProperties interface is polymorphic,
        /// and the precise model class that will get deserialized is determined at runtime based on the payload.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationProperties.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationProperties FromJson(Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonNode node)
        {
            if (!(node is Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonObject json))
            {
                return null;
            }
            // Polymorphic type -- select the appropriate constructor using the discriminator

            switch ( json.StringProperty("scope") )
            {
                case "Single":
                {
                    return new SingleScopeBenefitRecommendationProperties(json);
                }
                case "Shared":
                {
                    return new SharedScopeBenefitRecommendationProperties(json);
                }
            }
            return new BenefitRecommendationProperties(json);
        }

        /// <summary>
        /// Serializes this instance of <see cref="BenefitRecommendationProperties" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="BenefitRecommendationProperties" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonNode" />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            AddIf( null != this._usage ? (Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonNode) this._usage.ToJson(null,serializationMode) : null, "usage" ,container.Add );
            AddIf( null != this._recommendationDetail ? (Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonNode) this._recommendationDetail.ToJson(null,serializationMode) : null, "recommendationDetails" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._allRecommendationDetail ? (Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonNode) this._allRecommendationDetail.ToJson(null,serializationMode) : null, "allRecommendationDetails" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._firstConsumptionDate ? (Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonString(this._firstConsumptionDate?.ToString(@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK",global::System.Globalization.CultureInfo.InvariantCulture)) : null, "firstConsumptionDate" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._lastConsumptionDate ? (Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonString(this._lastConsumptionDate?.ToString(@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK",global::System.Globalization.CultureInfo.InvariantCulture)) : null, "lastConsumptionDate" ,container.Add );
            }
            AddIf( null != (((object)this._lookBackPeriod)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonString(this._lookBackPeriod.ToString()) : null, "lookBackPeriod" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._totalHour ? (Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonNumber((int)this._totalHour) : null, "totalHours" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._armSkuName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonString(this._armSkuName.ToString()) : null, "armSkuName" ,container.Add );
            }
            AddIf( null != (((object)this._term)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonString(this._term.ToString()) : null, "term" ,container.Add );
            AddIf( null != (((object)this._commitmentGranularity)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonString(this._commitmentGranularity.ToString()) : null, "commitmentGranularity" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._currencyCode)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonString(this._currencyCode.ToString()) : null, "currencyCode" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._costWithoutBenefit ? (Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonNumber((decimal)this._costWithoutBenefit) : null, "costWithoutBenefit" ,container.Add );
            }
            AddIf( null != (((object)this._scope)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Json.JsonString(this._scope.ToString()) : null, "scope" ,container.Add );
            AfterToJson(ref container);
            return container;
        }
    }
}