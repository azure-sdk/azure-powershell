// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Extensions;

    /// <summary>benefit plan recommendation details.</summary>
    public partial class BenefitRecommendationModel :
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationModel,
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationModelInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitResource __benefitResource = new Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.BenefitResource();

        /// <summary>The link (URL) to the next page of results.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public string AllRecommendationDetailNextLink { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).AllRecommendationDetailNextLink; }

        /// <summary>The list of benefit recommendations.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetails[] AllRecommendationDetailValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).AllRecommendationDetailValue; }

        /// <summary>
        /// ARM SKU name. For example, Standard_D1_V2 for Reservations and Compute_Savings_Plan for SavingsPlan.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public string ArmSkuName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).ArmSkuName; }

        /// <summary>Grain of the proposed commitment amount. For example, hourly, monthly etc.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Grain? CommitmentGranularity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).CommitmentGranularity; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).CommitmentGranularity = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Grain)""); }

        /// <summary>
        /// The current cost without benefit corresponds to 'totalHours' property in a given look-back period.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public decimal? CostWithoutBenefit { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).CostWithoutBenefit; }

        /// <summary>An ISO 4217 currency code identifier for the costs and savings amounts.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public string CurrencyCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).CurrencyCode; }

        /// <summary>The first usage date used for looking back for computing the recommendation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public global::System.DateTime? FirstConsumptionDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).FirstConsumptionDate; }

        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20.IResourceInternal)__benefitResource).Id; }

        /// <summary>Reservation or SavingsPlan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.BenefitKind? Kind { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitResourceInternal)__benefitResource).Kind; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitResourceInternal)__benefitResource).Kind = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.BenefitKind)""); }

        /// <summary>The last usage date used for looking back for computing the recommendation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public global::System.DateTime? LastConsumptionDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).LastConsumptionDate; }

        /// <summary>The number of days of usage used to look back for computing the recommendation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.LookBackPeriod? LookBackPeriod { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).LookBackPeriod; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).LookBackPeriod = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.LookBackPeriod)""); }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20.IResourceInternal)__benefitResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20.IResourceInternal)__benefitResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20.IResourceInternal)__benefitResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20.IResourceInternal)__benefitResource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20.IResourceInternal)__benefitResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20.IResourceInternal)__benefitResource).Type = value; }

        /// <summary>Internal Acessors for AllRecommendationDetail</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsList Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationModelInternal.AllRecommendationDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).AllRecommendationDetail; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).AllRecommendationDetail = value; }

        /// <summary>Internal Acessors for AllRecommendationDetailNextLink</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationModelInternal.AllRecommendationDetailNextLink { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).AllRecommendationDetailNextLink; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).AllRecommendationDetailNextLink = value; }

        /// <summary>Internal Acessors for AllRecommendationDetailValue</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetails[] Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationModelInternal.AllRecommendationDetailValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).AllRecommendationDetailValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).AllRecommendationDetailValue = value; }

        /// <summary>Internal Acessors for ArmSkuName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationModelInternal.ArmSkuName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).ArmSkuName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).ArmSkuName = value; }

        /// <summary>Internal Acessors for CostWithoutBenefit</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationModelInternal.CostWithoutBenefit { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).CostWithoutBenefit; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).CostWithoutBenefit = value; }

        /// <summary>Internal Acessors for CurrencyCode</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationModelInternal.CurrencyCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).CurrencyCode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).CurrencyCode = value; }

        /// <summary>Internal Acessors for FirstConsumptionDate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationModelInternal.FirstConsumptionDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).FirstConsumptionDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).FirstConsumptionDate = value; }

        /// <summary>Internal Acessors for LastConsumptionDate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationModelInternal.LastConsumptionDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).LastConsumptionDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).LastConsumptionDate = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationProperties Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationModelInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.BenefitRecommendationProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for RecommendationDetail</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetails Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationModelInternal.RecommendationDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).RecommendationDetail; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).RecommendationDetail = value; }

        /// <summary>Internal Acessors for RecommendationDetailAverageUtilizationPercentage</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationModelInternal.RecommendationDetailAverageUtilizationPercentage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).RecommendationDetailAverageUtilizationPercentage; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).RecommendationDetailAverageUtilizationPercentage = value; }

        /// <summary>Internal Acessors for RecommendationDetailBenefitCost</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationModelInternal.RecommendationDetailBenefitCost { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).RecommendationDetailBenefitCost; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).RecommendationDetailBenefitCost = value; }

        /// <summary>Internal Acessors for RecommendationDetailCommitmentAmount</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationModelInternal.RecommendationDetailCommitmentAmount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).RecommendationDetailCommitmentAmount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).RecommendationDetailCommitmentAmount = value; }

        /// <summary>Internal Acessors for RecommendationDetailCoveragePercentage</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationModelInternal.RecommendationDetailCoveragePercentage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).RecommendationDetailCoveragePercentage; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).RecommendationDetailCoveragePercentage = value; }

        /// <summary>Internal Acessors for RecommendationDetailOverageCost</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationModelInternal.RecommendationDetailOverageCost { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).RecommendationDetailOverageCost; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).RecommendationDetailOverageCost = value; }

        /// <summary>Internal Acessors for RecommendationDetailSavingsAmount</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationModelInternal.RecommendationDetailSavingsAmount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).RecommendationDetailSavingsAmount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).RecommendationDetailSavingsAmount = value; }

        /// <summary>Internal Acessors for RecommendationDetailSavingsPercentage</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationModelInternal.RecommendationDetailSavingsPercentage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).RecommendationDetailSavingsPercentage; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).RecommendationDetailSavingsPercentage = value; }

        /// <summary>Internal Acessors for RecommendationDetailTotalCost</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationModelInternal.RecommendationDetailTotalCost { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).RecommendationDetailTotalCost; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).RecommendationDetailTotalCost = value; }

        /// <summary>Internal Acessors for RecommendationDetailWastageCost</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationModelInternal.RecommendationDetailWastageCost { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).RecommendationDetailWastageCost; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).RecommendationDetailWastageCost = value; }

        /// <summary>Internal Acessors for TotalHour</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationModelInternal.TotalHour { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).TotalHour; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).TotalHour = value; }

        /// <summary>Internal Acessors for Usage</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IRecommendationUsageDetails Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationModelInternal.Usage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).Usage; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).Usage = value; }

        /// <summary>Internal Acessors for UsageCharge</summary>
        decimal[] Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationModelInternal.UsageCharge { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).UsageCharge; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).UsageCharge = value; }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20.IResourceInternal)__benefitResource).Name; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationProperties _property;

        /// <summary>The properties of the benefit plan recommendation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.BenefitRecommendationProperties()); set => this._property = value; }

        /// <summary>Estimated average utilization percentage at this commitment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public decimal? RecommendationDetailAverageUtilizationPercentage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).RecommendationDetailAverageUtilizationPercentage; }

        /// <summary>
        /// The exact cost of the estimated usage using plan. It's equal to (commitmentAmount * totalHours)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public decimal? RecommendationDetailBenefitCost { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).RecommendationDetailBenefitCost; }

        /// <summary>The commitment amount for the benefit.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public decimal? RecommendationDetailCommitmentAmount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).RecommendationDetailCommitmentAmount; }

        /// <summary>Expected coverage at this commitment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public decimal? RecommendationDetailCoveragePercentage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).RecommendationDetailCoveragePercentage; }

        /// <summary>The difference between total cost and benefit cost.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public decimal? RecommendationDetailOverageCost { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).RecommendationDetailOverageCost; }

        /// <summary>The amount saved by purchasing the recommended quantity of benefit.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public decimal? RecommendationDetailSavingsAmount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).RecommendationDetailSavingsAmount; }

        /// <summary>The savings in percentage by purchasing the recommended quantity of benefit.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public decimal? RecommendationDetailSavingsPercentage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).RecommendationDetailSavingsPercentage; }

        /// <summary>The cost of the suggested commitment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public decimal? RecommendationDetailTotalCost { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).RecommendationDetailTotalCost; }

        /// <summary>Wastage cost at this commitment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public decimal? RecommendationDetailWastageCost { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).RecommendationDetailWastageCost; }

        /// <summary>Scope of the benefit. For example, Single or Shared.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Scope? Scope { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).Scope; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).Scope = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Scope)""); }

        /// <summary>Term period of the benefit. For example, P1Y or P3Y.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Term? Term { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).Term; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).Term = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Term)""); }

        /// <summary>
        /// The total hours for which the cost is covered. Its equal to number of records in a property 'properties/usage/charges'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public int? TotalHour { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).TotalHour; }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20.IResourceInternal)__benefitResource).Type; }

        /// <summary>current cost without benefit i.e. charges at the specified grain.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public decimal[] UsageCharge { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).UsageCharge; }

        /// <summary>The grain of the usage. For example, hourly or monthly etc.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Grain? UsageGrain { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).UsageGrain; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal)Property).UsageGrain = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Grain)""); }

        /// <summary>Creates an new <see cref="BenefitRecommendationModel" /> instance.</summary>
        public BenefitRecommendationModel()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__benefitResource), __benefitResource);
            await eventListener.AssertObjectIsValid(nameof(__benefitResource), __benefitResource);
        }
    }
    /// benefit plan recommendation details.
    public partial interface IBenefitRecommendationModel :
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitResource
    {
        /// <summary>The link (URL) to the next page of results.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The link (URL) to the next page of results.",
        SerializedName = @"nextLink",
        PossibleTypes = new [] { typeof(string) })]
        string AllRecommendationDetailNextLink { get;  }
        /// <summary>The list of benefit recommendations.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The list of benefit recommendations.",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetails) })]
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetails[] AllRecommendationDetailValue { get;  }
        /// <summary>
        /// ARM SKU name. For example, Standard_D1_V2 for Reservations and Compute_Savings_Plan for SavingsPlan.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"ARM SKU name. For example, Standard_D1_V2 for Reservations and Compute_Savings_Plan for SavingsPlan.",
        SerializedName = @"armSkuName",
        PossibleTypes = new [] { typeof(string) })]
        string ArmSkuName { get;  }
        /// <summary>Grain of the proposed commitment amount. For example, hourly, monthly etc.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Grain of the proposed commitment amount. For example, hourly, monthly etc.",
        SerializedName = @"commitmentGranularity",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Grain) })]
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Grain? CommitmentGranularity { get; set; }
        /// <summary>
        /// The current cost without benefit corresponds to 'totalHours' property in a given look-back period.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The current cost without benefit corresponds to 'totalHours' property in a given look-back period.",
        SerializedName = @"costWithoutBenefit",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? CostWithoutBenefit { get;  }
        /// <summary>An ISO 4217 currency code identifier for the costs and savings amounts.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"An ISO 4217 currency code identifier for the costs and savings amounts.",
        SerializedName = @"currencyCode",
        PossibleTypes = new [] { typeof(string) })]
        string CurrencyCode { get;  }
        /// <summary>The first usage date used for looking back for computing the recommendation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The first usage date used for looking back for computing the recommendation.",
        SerializedName = @"firstConsumptionDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? FirstConsumptionDate { get;  }
        /// <summary>The last usage date used for looking back for computing the recommendation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The last usage date used for looking back for computing the recommendation.",
        SerializedName = @"lastConsumptionDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastConsumptionDate { get;  }
        /// <summary>The number of days of usage used to look back for computing the recommendation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of days of usage used to look back for computing the recommendation.",
        SerializedName = @"lookBackPeriod",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.LookBackPeriod) })]
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.LookBackPeriod? LookBackPeriod { get; set; }
        /// <summary>Estimated average utilization percentage at this commitment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Estimated average utilization percentage at this commitment.",
        SerializedName = @"averageUtilizationPercentage",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? RecommendationDetailAverageUtilizationPercentage { get;  }
        /// <summary>
        /// The exact cost of the estimated usage using plan. It's equal to (commitmentAmount * totalHours)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The exact cost of the estimated usage using plan. It's equal to (commitmentAmount * totalHours)",
        SerializedName = @"benefitCost",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? RecommendationDetailBenefitCost { get;  }
        /// <summary>The commitment amount for the benefit.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The commitment amount for the benefit.",
        SerializedName = @"commitmentAmount",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? RecommendationDetailCommitmentAmount { get;  }
        /// <summary>Expected coverage at this commitment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Expected coverage at this commitment.",
        SerializedName = @"coveragePercentage",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? RecommendationDetailCoveragePercentage { get;  }
        /// <summary>The difference between total cost and benefit cost.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The difference between total cost and benefit cost.",
        SerializedName = @"overageCost",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? RecommendationDetailOverageCost { get;  }
        /// <summary>The amount saved by purchasing the recommended quantity of benefit.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The amount saved by purchasing the recommended quantity of benefit.",
        SerializedName = @"savingsAmount",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? RecommendationDetailSavingsAmount { get;  }
        /// <summary>The savings in percentage by purchasing the recommended quantity of benefit.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The savings in percentage by purchasing the recommended quantity of benefit.",
        SerializedName = @"savingsPercentage",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? RecommendationDetailSavingsPercentage { get;  }
        /// <summary>The cost of the suggested commitment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The cost of the suggested commitment.",
        SerializedName = @"totalCost",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? RecommendationDetailTotalCost { get;  }
        /// <summary>Wastage cost at this commitment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Wastage cost at this commitment.",
        SerializedName = @"wastageCost",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? RecommendationDetailWastageCost { get;  }
        /// <summary>Scope of the benefit. For example, Single or Shared.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Scope of the benefit. For example, Single or Shared.",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Scope) })]
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Scope? Scope { get; set; }
        /// <summary>Term period of the benefit. For example, P1Y or P3Y.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Term period of the benefit. For example, P1Y or P3Y.",
        SerializedName = @"term",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Term) })]
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Term? Term { get; set; }
        /// <summary>
        /// The total hours for which the cost is covered. Its equal to number of records in a property 'properties/usage/charges'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The total hours for which the cost is covered. Its equal to number of records in a property 'properties/usage/charges'.",
        SerializedName = @"totalHours",
        PossibleTypes = new [] { typeof(int) })]
        int? TotalHour { get;  }
        /// <summary>current cost without benefit i.e. charges at the specified grain.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"current cost without benefit i.e. charges at the specified grain.",
        SerializedName = @"charges",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal[] UsageCharge { get;  }
        /// <summary>The grain of the usage. For example, hourly or monthly etc.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The grain of the usage. For example, hourly or monthly etc.",
        SerializedName = @"usageGrain",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Grain) })]
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Grain? UsageGrain { get; set; }

    }
    /// benefit plan recommendation details.
    internal partial interface IBenefitRecommendationModelInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitResourceInternal
    {
        /// <summary>The list of all benefit recommendations.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsList AllRecommendationDetail { get; set; }
        /// <summary>The link (URL) to the next page of results.</summary>
        string AllRecommendationDetailNextLink { get; set; }
        /// <summary>The list of benefit recommendations.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetails[] AllRecommendationDetailValue { get; set; }
        /// <summary>
        /// ARM SKU name. For example, Standard_D1_V2 for Reservations and Compute_Savings_Plan for SavingsPlan.
        /// </summary>
        string ArmSkuName { get; set; }
        /// <summary>Grain of the proposed commitment amount. For example, hourly, monthly etc.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Grain? CommitmentGranularity { get; set; }
        /// <summary>
        /// The current cost without benefit corresponds to 'totalHours' property in a given look-back period.
        /// </summary>
        decimal? CostWithoutBenefit { get; set; }
        /// <summary>An ISO 4217 currency code identifier for the costs and savings amounts.</summary>
        string CurrencyCode { get; set; }
        /// <summary>The first usage date used for looking back for computing the recommendation.</summary>
        global::System.DateTime? FirstConsumptionDate { get; set; }
        /// <summary>The last usage date used for looking back for computing the recommendation.</summary>
        global::System.DateTime? LastConsumptionDate { get; set; }
        /// <summary>The number of days of usage used to look back for computing the recommendation.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.LookBackPeriod? LookBackPeriod { get; set; }
        /// <summary>The properties of the benefit plan recommendation.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationProperties Property { get; set; }
        /// <summary>The details of the proposed recommendation.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetails RecommendationDetail { get; set; }
        /// <summary>Estimated average utilization percentage at this commitment.</summary>
        decimal? RecommendationDetailAverageUtilizationPercentage { get; set; }
        /// <summary>
        /// The exact cost of the estimated usage using plan. It's equal to (commitmentAmount * totalHours)
        /// </summary>
        decimal? RecommendationDetailBenefitCost { get; set; }
        /// <summary>The commitment amount for the benefit.</summary>
        decimal? RecommendationDetailCommitmentAmount { get; set; }
        /// <summary>Expected coverage at this commitment.</summary>
        decimal? RecommendationDetailCoveragePercentage { get; set; }
        /// <summary>The difference between total cost and benefit cost.</summary>
        decimal? RecommendationDetailOverageCost { get; set; }
        /// <summary>The amount saved by purchasing the recommended quantity of benefit.</summary>
        decimal? RecommendationDetailSavingsAmount { get; set; }
        /// <summary>The savings in percentage by purchasing the recommended quantity of benefit.</summary>
        decimal? RecommendationDetailSavingsPercentage { get; set; }
        /// <summary>The cost of the suggested commitment.</summary>
        decimal? RecommendationDetailTotalCost { get; set; }
        /// <summary>Wastage cost at this commitment.</summary>
        decimal? RecommendationDetailWastageCost { get; set; }
        /// <summary>Scope of the benefit. For example, Single or Shared.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Scope? Scope { get; set; }
        /// <summary>Term period of the benefit. For example, P1Y or P3Y.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Term? Term { get; set; }
        /// <summary>
        /// The total hours for which the cost is covered. Its equal to number of records in a property 'properties/usage/charges'.
        /// </summary>
        int? TotalHour { get; set; }
        /// <summary>
        /// The additional details about the usage which are considered while computing benefit recommendations.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IRecommendationUsageDetails Usage { get; set; }
        /// <summary>current cost without benefit i.e. charges at the specified grain.</summary>
        decimal[] UsageCharge { get; set; }
        /// <summary>The grain of the usage. For example, hourly or monthly etc.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Grain? UsageGrain { get; set; }

    }
}