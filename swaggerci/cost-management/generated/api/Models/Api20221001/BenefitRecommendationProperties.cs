// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Extensions;

    /// <summary>The properties of the benefit plan recommendation.</summary>
    public partial class BenefitRecommendationProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationProperties,
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal
    {

        /// <summary>Backing field for <see cref="AllRecommendationDetail" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsList _allRecommendationDetail;

        /// <summary>The list of all benefit recommendations.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsList AllRecommendationDetail { get => (this._allRecommendationDetail = this._allRecommendationDetail ?? new Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.AllSavingsList()); }

        /// <summary>The link (URL) to the next page of results.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public string AllRecommendationDetailNextLink { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsListInternal)AllRecommendationDetail).NextLink; }

        /// <summary>The list of benefit recommendations.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetails[] AllRecommendationDetailValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsListInternal)AllRecommendationDetail).Value; }

        /// <summary>Backing field for <see cref="ArmSkuName" /> property.</summary>
        private string _armSkuName;

        /// <summary>
        /// ARM SKU name. For example, Standard_D1_V2 for Reservations and Compute_Savings_Plan for SavingsPlan.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Owned)]
        public string ArmSkuName { get => this._armSkuName; }

        /// <summary>Backing field for <see cref="CommitmentGranularity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Grain? _commitmentGranularity;

        /// <summary>Grain of the proposed commitment amount. For example, hourly, monthly etc.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Grain? CommitmentGranularity { get => this._commitmentGranularity; set => this._commitmentGranularity = value; }

        /// <summary>Backing field for <see cref="CostWithoutBenefit" /> property.</summary>
        private decimal? _costWithoutBenefit;

        /// <summary>
        /// The current cost without benefit corresponds to 'totalHours' property in a given look-back period.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Owned)]
        public decimal? CostWithoutBenefit { get => this._costWithoutBenefit; }

        /// <summary>Backing field for <see cref="CurrencyCode" /> property.</summary>
        private string _currencyCode;

        /// <summary>An ISO 4217 currency code identifier for the costs and savings amounts.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Owned)]
        public string CurrencyCode { get => this._currencyCode; }

        /// <summary>Backing field for <see cref="FirstConsumptionDate" /> property.</summary>
        private global::System.DateTime? _firstConsumptionDate;

        /// <summary>The first usage date used for looking back for computing the recommendation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Owned)]
        public global::System.DateTime? FirstConsumptionDate { get => this._firstConsumptionDate; }

        /// <summary>Backing field for <see cref="LastConsumptionDate" /> property.</summary>
        private global::System.DateTime? _lastConsumptionDate;

        /// <summary>The last usage date used for looking back for computing the recommendation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Owned)]
        public global::System.DateTime? LastConsumptionDate { get => this._lastConsumptionDate; }

        /// <summary>Backing field for <see cref="LookBackPeriod" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.LookBackPeriod? _lookBackPeriod;

        /// <summary>The number of days of usage used to look back for computing the recommendation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.LookBackPeriod? LookBackPeriod { get => this._lookBackPeriod; set => this._lookBackPeriod = value; }

        /// <summary>Internal Acessors for AllRecommendationDetail</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsList Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal.AllRecommendationDetail { get => (this._allRecommendationDetail = this._allRecommendationDetail ?? new Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.AllSavingsList()); set { {_allRecommendationDetail = value;} } }

        /// <summary>Internal Acessors for AllRecommendationDetailNextLink</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal.AllRecommendationDetailNextLink { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsListInternal)AllRecommendationDetail).NextLink; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsListInternal)AllRecommendationDetail).NextLink = value; }

        /// <summary>Internal Acessors for AllRecommendationDetailValue</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetails[] Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal.AllRecommendationDetailValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsListInternal)AllRecommendationDetail).Value; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsListInternal)AllRecommendationDetail).Value = value; }

        /// <summary>Internal Acessors for ArmSkuName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal.ArmSkuName { get => this._armSkuName; set { {_armSkuName = value;} } }

        /// <summary>Internal Acessors for CostWithoutBenefit</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal.CostWithoutBenefit { get => this._costWithoutBenefit; set { {_costWithoutBenefit = value;} } }

        /// <summary>Internal Acessors for CurrencyCode</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal.CurrencyCode { get => this._currencyCode; set { {_currencyCode = value;} } }

        /// <summary>Internal Acessors for FirstConsumptionDate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal.FirstConsumptionDate { get => this._firstConsumptionDate; set { {_firstConsumptionDate = value;} } }

        /// <summary>Internal Acessors for LastConsumptionDate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal.LastConsumptionDate { get => this._lastConsumptionDate; set { {_lastConsumptionDate = value;} } }

        /// <summary>Internal Acessors for RecommendationDetail</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetails Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal.RecommendationDetail { get => (this._recommendationDetail = this._recommendationDetail ?? new Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.AllSavingsBenefitDetails()); set { {_recommendationDetail = value;} } }

        /// <summary>Internal Acessors for RecommendationDetailAverageUtilizationPercentage</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal.RecommendationDetailAverageUtilizationPercentage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal)RecommendationDetail).AverageUtilizationPercentage; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal)RecommendationDetail).AverageUtilizationPercentage = value; }

        /// <summary>Internal Acessors for RecommendationDetailBenefitCost</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal.RecommendationDetailBenefitCost { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal)RecommendationDetail).BenefitCost; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal)RecommendationDetail).BenefitCost = value; }

        /// <summary>Internal Acessors for RecommendationDetailCommitmentAmount</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal.RecommendationDetailCommitmentAmount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal)RecommendationDetail).CommitmentAmount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal)RecommendationDetail).CommitmentAmount = value; }

        /// <summary>Internal Acessors for RecommendationDetailCoveragePercentage</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal.RecommendationDetailCoveragePercentage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal)RecommendationDetail).CoveragePercentage; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal)RecommendationDetail).CoveragePercentage = value; }

        /// <summary>Internal Acessors for RecommendationDetailOverageCost</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal.RecommendationDetailOverageCost { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal)RecommendationDetail).OverageCost; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal)RecommendationDetail).OverageCost = value; }

        /// <summary>Internal Acessors for RecommendationDetailSavingsAmount</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal.RecommendationDetailSavingsAmount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal)RecommendationDetail).SavingsAmount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal)RecommendationDetail).SavingsAmount = value; }

        /// <summary>Internal Acessors for RecommendationDetailSavingsPercentage</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal.RecommendationDetailSavingsPercentage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal)RecommendationDetail).SavingsPercentage; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal)RecommendationDetail).SavingsPercentage = value; }

        /// <summary>Internal Acessors for RecommendationDetailTotalCost</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal.RecommendationDetailTotalCost { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal)RecommendationDetail).TotalCost; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal)RecommendationDetail).TotalCost = value; }

        /// <summary>Internal Acessors for RecommendationDetailWastageCost</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal.RecommendationDetailWastageCost { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal)RecommendationDetail).WastageCost; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal)RecommendationDetail).WastageCost = value; }

        /// <summary>Internal Acessors for TotalHour</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal.TotalHour { get => this._totalHour; set { {_totalHour = value;} } }

        /// <summary>Internal Acessors for Usage</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IRecommendationUsageDetails Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal.Usage { get => (this._usage = this._usage ?? new Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.RecommendationUsageDetails()); set { {_usage = value;} } }

        /// <summary>Internal Acessors for UsageCharge</summary>
        decimal[] Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IBenefitRecommendationPropertiesInternal.UsageCharge { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IRecommendationUsageDetailsInternal)Usage).Charge; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IRecommendationUsageDetailsInternal)Usage).Charge = value; }

        /// <summary>Backing field for <see cref="RecommendationDetail" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetails _recommendationDetail;

        /// <summary>The details of the proposed recommendation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetails RecommendationDetail { get => (this._recommendationDetail = this._recommendationDetail ?? new Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.AllSavingsBenefitDetails()); set => this._recommendationDetail = value; }

        /// <summary>Estimated average utilization percentage at this commitment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public decimal? RecommendationDetailAverageUtilizationPercentage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal)RecommendationDetail).AverageUtilizationPercentage; }

        /// <summary>
        /// The exact cost of the estimated usage using plan. It's equal to (commitmentAmount * totalHours)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public decimal? RecommendationDetailBenefitCost { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal)RecommendationDetail).BenefitCost; }

        /// <summary>The commitment amount for the benefit.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public decimal? RecommendationDetailCommitmentAmount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal)RecommendationDetail).CommitmentAmount; }

        /// <summary>Expected coverage at this commitment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public decimal? RecommendationDetailCoveragePercentage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal)RecommendationDetail).CoveragePercentage; }

        /// <summary>The difference between total cost and benefit cost.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public decimal? RecommendationDetailOverageCost { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal)RecommendationDetail).OverageCost; }

        /// <summary>The amount saved by purchasing the recommended quantity of benefit.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public decimal? RecommendationDetailSavingsAmount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal)RecommendationDetail).SavingsAmount; }

        /// <summary>The savings in percentage by purchasing the recommended quantity of benefit.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public decimal? RecommendationDetailSavingsPercentage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal)RecommendationDetail).SavingsPercentage; }

        /// <summary>The cost of the suggested commitment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public decimal? RecommendationDetailTotalCost { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal)RecommendationDetail).TotalCost; }

        /// <summary>Wastage cost at this commitment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public decimal? RecommendationDetailWastageCost { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal)RecommendationDetail).WastageCost; }

        /// <summary>Backing field for <see cref="Scope" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Scope _scope;

        /// <summary>Scope of the benefit. For example, Single or Shared.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Scope Scope { get => this._scope; set => this._scope = value; }

        /// <summary>Backing field for <see cref="Term" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Term? _term;

        /// <summary>Term period of the benefit. For example, P1Y or P3Y.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Term? Term { get => this._term; set => this._term = value; }

        /// <summary>Backing field for <see cref="TotalHour" /> property.</summary>
        private int? _totalHour;

        /// <summary>
        /// The total hours for which the cost is covered. Its equal to number of records in a property 'properties/usage/charges'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Owned)]
        public int? TotalHour { get => this._totalHour; }

        /// <summary>Backing field for <see cref="Usage" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IRecommendationUsageDetails _usage;

        /// <summary>
        /// The additional details about the usage which are considered while computing benefit recommendations.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IRecommendationUsageDetails Usage { get => (this._usage = this._usage ?? new Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.RecommendationUsageDetails()); set => this._usage = value; }

        /// <summary>current cost without benefit i.e. charges at the specified grain.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public decimal[] UsageCharge { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IRecommendationUsageDetailsInternal)Usage).Charge; }

        /// <summary>The grain of the usage. For example, hourly or monthly etc.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Grain? UsageGrain { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IRecommendationUsageDetailsInternal)Usage).UsageGrain; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IRecommendationUsageDetailsInternal)Usage).UsageGrain = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Grain)""); }

        /// <summary>Creates an new <see cref="BenefitRecommendationProperties" /> instance.</summary>
        public BenefitRecommendationProperties()
        {

        }
    }
    /// The properties of the benefit plan recommendation.
    public partial interface IBenefitRecommendationProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.IJsonSerializable
    {
        /// <summary>The link (URL) to the next page of results.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The link (URL) to the next page of results.",
        SerializedName = @"nextLink",
        PossibleTypes = new [] { typeof(string) })]
        string AllRecommendationDetailNextLink { get;  }
        /// <summary>The list of benefit recommendations.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The list of benefit recommendations.",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetails) })]
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetails[] AllRecommendationDetailValue { get;  }
        /// <summary>
        /// ARM SKU name. For example, Standard_D1_V2 for Reservations and Compute_Savings_Plan for SavingsPlan.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"ARM SKU name. For example, Standard_D1_V2 for Reservations and Compute_Savings_Plan for SavingsPlan.",
        SerializedName = @"armSkuName",
        PossibleTypes = new [] { typeof(string) })]
        string ArmSkuName { get;  }
        /// <summary>Grain of the proposed commitment amount. For example, hourly, monthly etc.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Grain of the proposed commitment amount. For example, hourly, monthly etc.",
        SerializedName = @"commitmentGranularity",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Grain) })]
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Grain? CommitmentGranularity { get; set; }
        /// <summary>
        /// The current cost without benefit corresponds to 'totalHours' property in a given look-back period.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The current cost without benefit corresponds to 'totalHours' property in a given look-back period.",
        SerializedName = @"costWithoutBenefit",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? CostWithoutBenefit { get;  }
        /// <summary>An ISO 4217 currency code identifier for the costs and savings amounts.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"An ISO 4217 currency code identifier for the costs and savings amounts.",
        SerializedName = @"currencyCode",
        PossibleTypes = new [] { typeof(string) })]
        string CurrencyCode { get;  }
        /// <summary>The first usage date used for looking back for computing the recommendation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The first usage date used for looking back for computing the recommendation.",
        SerializedName = @"firstConsumptionDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? FirstConsumptionDate { get;  }
        /// <summary>The last usage date used for looking back for computing the recommendation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The last usage date used for looking back for computing the recommendation.",
        SerializedName = @"lastConsumptionDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastConsumptionDate { get;  }
        /// <summary>The number of days of usage used to look back for computing the recommendation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of days of usage used to look back for computing the recommendation.",
        SerializedName = @"lookBackPeriod",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.LookBackPeriod) })]
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.LookBackPeriod? LookBackPeriod { get; set; }
        /// <summary>Estimated average utilization percentage at this commitment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Estimated average utilization percentage at this commitment.",
        SerializedName = @"averageUtilizationPercentage",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? RecommendationDetailAverageUtilizationPercentage { get;  }
        /// <summary>
        /// The exact cost of the estimated usage using plan. It's equal to (commitmentAmount * totalHours)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The exact cost of the estimated usage using plan. It's equal to (commitmentAmount * totalHours)",
        SerializedName = @"benefitCost",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? RecommendationDetailBenefitCost { get;  }
        /// <summary>The commitment amount for the benefit.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The commitment amount for the benefit.",
        SerializedName = @"commitmentAmount",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? RecommendationDetailCommitmentAmount { get;  }
        /// <summary>Expected coverage at this commitment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Expected coverage at this commitment.",
        SerializedName = @"coveragePercentage",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? RecommendationDetailCoveragePercentage { get;  }
        /// <summary>The difference between total cost and benefit cost.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The difference between total cost and benefit cost.",
        SerializedName = @"overageCost",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? RecommendationDetailOverageCost { get;  }
        /// <summary>The amount saved by purchasing the recommended quantity of benefit.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The amount saved by purchasing the recommended quantity of benefit.",
        SerializedName = @"savingsAmount",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? RecommendationDetailSavingsAmount { get;  }
        /// <summary>The savings in percentage by purchasing the recommended quantity of benefit.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The savings in percentage by purchasing the recommended quantity of benefit.",
        SerializedName = @"savingsPercentage",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? RecommendationDetailSavingsPercentage { get;  }
        /// <summary>The cost of the suggested commitment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The cost of the suggested commitment.",
        SerializedName = @"totalCost",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? RecommendationDetailTotalCost { get;  }
        /// <summary>Wastage cost at this commitment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Wastage cost at this commitment.",
        SerializedName = @"wastageCost",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? RecommendationDetailWastageCost { get;  }
        /// <summary>Scope of the benefit. For example, Single or Shared.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Scope of the benefit. For example, Single or Shared.",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Scope) })]
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Scope Scope { get; set; }
        /// <summary>Term period of the benefit. For example, P1Y or P3Y.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Term period of the benefit. For example, P1Y or P3Y.",
        SerializedName = @"term",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Term) })]
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Term? Term { get; set; }
        /// <summary>
        /// The total hours for which the cost is covered. Its equal to number of records in a property 'properties/usage/charges'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The total hours for which the cost is covered. Its equal to number of records in a property 'properties/usage/charges'.",
        SerializedName = @"totalHours",
        PossibleTypes = new [] { typeof(int) })]
        int? TotalHour { get;  }
        /// <summary>current cost without benefit i.e. charges at the specified grain.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"current cost without benefit i.e. charges at the specified grain.",
        SerializedName = @"charges",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal[] UsageCharge { get;  }
        /// <summary>The grain of the usage. For example, hourly or monthly etc.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The grain of the usage. For example, hourly or monthly etc.",
        SerializedName = @"usageGrain",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Grain) })]
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Grain? UsageGrain { get; set; }

    }
    /// The properties of the benefit plan recommendation.
    internal partial interface IBenefitRecommendationPropertiesInternal

    {
        /// <summary>The list of all benefit recommendations.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsList AllRecommendationDetail { get; set; }
        /// <summary>The link (URL) to the next page of results.</summary>
        string AllRecommendationDetailNextLink { get; set; }
        /// <summary>The list of benefit recommendations.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetails[] AllRecommendationDetailValue { get; set; }
        /// <summary>
        /// ARM SKU name. For example, Standard_D1_V2 for Reservations and Compute_Savings_Plan for SavingsPlan.
        /// </summary>
        string ArmSkuName { get; set; }
        /// <summary>Grain of the proposed commitment amount. For example, hourly, monthly etc.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Grain? CommitmentGranularity { get; set; }
        /// <summary>
        /// The current cost without benefit corresponds to 'totalHours' property in a given look-back period.
        /// </summary>
        decimal? CostWithoutBenefit { get; set; }
        /// <summary>An ISO 4217 currency code identifier for the costs and savings amounts.</summary>
        string CurrencyCode { get; set; }
        /// <summary>The first usage date used for looking back for computing the recommendation.</summary>
        global::System.DateTime? FirstConsumptionDate { get; set; }
        /// <summary>The last usage date used for looking back for computing the recommendation.</summary>
        global::System.DateTime? LastConsumptionDate { get; set; }
        /// <summary>The number of days of usage used to look back for computing the recommendation.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.LookBackPeriod? LookBackPeriod { get; set; }
        /// <summary>The details of the proposed recommendation.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetails RecommendationDetail { get; set; }
        /// <summary>Estimated average utilization percentage at this commitment.</summary>
        decimal? RecommendationDetailAverageUtilizationPercentage { get; set; }
        /// <summary>
        /// The exact cost of the estimated usage using plan. It's equal to (commitmentAmount * totalHours)
        /// </summary>
        decimal? RecommendationDetailBenefitCost { get; set; }
        /// <summary>The commitment amount for the benefit.</summary>
        decimal? RecommendationDetailCommitmentAmount { get; set; }
        /// <summary>Expected coverage at this commitment.</summary>
        decimal? RecommendationDetailCoveragePercentage { get; set; }
        /// <summary>The difference between total cost and benefit cost.</summary>
        decimal? RecommendationDetailOverageCost { get; set; }
        /// <summary>The amount saved by purchasing the recommended quantity of benefit.</summary>
        decimal? RecommendationDetailSavingsAmount { get; set; }
        /// <summary>The savings in percentage by purchasing the recommended quantity of benefit.</summary>
        decimal? RecommendationDetailSavingsPercentage { get; set; }
        /// <summary>The cost of the suggested commitment.</summary>
        decimal? RecommendationDetailTotalCost { get; set; }
        /// <summary>Wastage cost at this commitment.</summary>
        decimal? RecommendationDetailWastageCost { get; set; }
        /// <summary>Scope of the benefit. For example, Single or Shared.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Scope Scope { get; set; }
        /// <summary>Term period of the benefit. For example, P1Y or P3Y.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Term? Term { get; set; }
        /// <summary>
        /// The total hours for which the cost is covered. Its equal to number of records in a property 'properties/usage/charges'.
        /// </summary>
        int? TotalHour { get; set; }
        /// <summary>
        /// The additional details about the usage which are considered while computing benefit recommendations.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IRecommendationUsageDetails Usage { get; set; }
        /// <summary>current cost without benefit i.e. charges at the specified grain.</summary>
        decimal[] UsageCharge { get; set; }
        /// <summary>The grain of the usage. For example, hourly or monthly etc.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.Grain? UsageGrain { get; set; }

    }
}