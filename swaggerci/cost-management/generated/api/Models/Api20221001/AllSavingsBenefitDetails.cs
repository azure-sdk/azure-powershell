// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Extensions;

    /// <summary>The properties of the benefit plan recommendation details for a saving.</summary>
    public partial class AllSavingsBenefitDetails :
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetails,
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal
    {

        /// <summary>Backing field for <see cref="AverageUtilizationPercentage" /> property.</summary>
        private decimal? _averageUtilizationPercentage;

        /// <summary>Estimated average utilization percentage at this commitment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Owned)]
        public decimal? AverageUtilizationPercentage { get => this._averageUtilizationPercentage; }

        /// <summary>Backing field for <see cref="BenefitCost" /> property.</summary>
        private decimal? _benefitCost;

        /// <summary>
        /// The exact cost of the estimated usage using plan. It's equal to (commitmentAmount * totalHours)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Owned)]
        public decimal? BenefitCost { get => this._benefitCost; }

        /// <summary>Backing field for <see cref="CommitmentAmount" /> property.</summary>
        private decimal? _commitmentAmount;

        /// <summary>The commitment amount for the benefit.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Owned)]
        public decimal? CommitmentAmount { get => this._commitmentAmount; }

        /// <summary>Backing field for <see cref="CoveragePercentage" /> property.</summary>
        private decimal? _coveragePercentage;

        /// <summary>Expected coverage at this commitment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Owned)]
        public decimal? CoveragePercentage { get => this._coveragePercentage; }

        /// <summary>Internal Acessors for AverageUtilizationPercentage</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal.AverageUtilizationPercentage { get => this._averageUtilizationPercentage; set { {_averageUtilizationPercentage = value;} } }

        /// <summary>Internal Acessors for BenefitCost</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal.BenefitCost { get => this._benefitCost; set { {_benefitCost = value;} } }

        /// <summary>Internal Acessors for CommitmentAmount</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal.CommitmentAmount { get => this._commitmentAmount; set { {_commitmentAmount = value;} } }

        /// <summary>Internal Acessors for CoveragePercentage</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal.CoveragePercentage { get => this._coveragePercentage; set { {_coveragePercentage = value;} } }

        /// <summary>Internal Acessors for OverageCost</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal.OverageCost { get => this._overageCost; set { {_overageCost = value;} } }

        /// <summary>Internal Acessors for SavingsAmount</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal.SavingsAmount { get => this._savingsAmount; set { {_savingsAmount = value;} } }

        /// <summary>Internal Acessors for SavingsPercentage</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal.SavingsPercentage { get => this._savingsPercentage; set { {_savingsPercentage = value;} } }

        /// <summary>Internal Acessors for TotalCost</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal.TotalCost { get => this._totalCost; set { {_totalCost = value;} } }

        /// <summary>Internal Acessors for WastageCost</summary>
        decimal? Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20221001.IAllSavingsBenefitDetailsInternal.WastageCost { get => this._wastageCost; set { {_wastageCost = value;} } }

        /// <summary>Backing field for <see cref="OverageCost" /> property.</summary>
        private decimal? _overageCost;

        /// <summary>The difference between total cost and benefit cost.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Owned)]
        public decimal? OverageCost { get => this._overageCost; }

        /// <summary>Backing field for <see cref="SavingsAmount" /> property.</summary>
        private decimal? _savingsAmount;

        /// <summary>The amount saved by purchasing the recommended quantity of benefit.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Owned)]
        public decimal? SavingsAmount { get => this._savingsAmount; }

        /// <summary>Backing field for <see cref="SavingsPercentage" /> property.</summary>
        private decimal? _savingsPercentage;

        /// <summary>The savings in percentage by purchasing the recommended quantity of benefit.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Owned)]
        public decimal? SavingsPercentage { get => this._savingsPercentage; }

        /// <summary>Backing field for <see cref="TotalCost" /> property.</summary>
        private decimal? _totalCost;

        /// <summary>The cost of the suggested commitment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Owned)]
        public decimal? TotalCost { get => this._totalCost; }

        /// <summary>Backing field for <see cref="WastageCost" /> property.</summary>
        private decimal? _wastageCost;

        /// <summary>Wastage cost at this commitment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Owned)]
        public decimal? WastageCost { get => this._wastageCost; }

        /// <summary>Creates an new <see cref="AllSavingsBenefitDetails" /> instance.</summary>
        public AllSavingsBenefitDetails()
        {

        }
    }
    /// The properties of the benefit plan recommendation details for a saving.
    public partial interface IAllSavingsBenefitDetails :
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.IJsonSerializable
    {
        /// <summary>Estimated average utilization percentage at this commitment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Estimated average utilization percentage at this commitment.",
        SerializedName = @"averageUtilizationPercentage",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? AverageUtilizationPercentage { get;  }
        /// <summary>
        /// The exact cost of the estimated usage using plan. It's equal to (commitmentAmount * totalHours)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The exact cost of the estimated usage using plan. It's equal to (commitmentAmount * totalHours)",
        SerializedName = @"benefitCost",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? BenefitCost { get;  }
        /// <summary>The commitment amount for the benefit.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The commitment amount for the benefit.",
        SerializedName = @"commitmentAmount",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? CommitmentAmount { get;  }
        /// <summary>Expected coverage at this commitment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Expected coverage at this commitment.",
        SerializedName = @"coveragePercentage",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? CoveragePercentage { get;  }
        /// <summary>The difference between total cost and benefit cost.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The difference between total cost and benefit cost.",
        SerializedName = @"overageCost",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? OverageCost { get;  }
        /// <summary>The amount saved by purchasing the recommended quantity of benefit.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The amount saved by purchasing the recommended quantity of benefit.",
        SerializedName = @"savingsAmount",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? SavingsAmount { get;  }
        /// <summary>The savings in percentage by purchasing the recommended quantity of benefit.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The savings in percentage by purchasing the recommended quantity of benefit.",
        SerializedName = @"savingsPercentage",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? SavingsPercentage { get;  }
        /// <summary>The cost of the suggested commitment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The cost of the suggested commitment.",
        SerializedName = @"totalCost",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? TotalCost { get;  }
        /// <summary>Wastage cost at this commitment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Wastage cost at this commitment.",
        SerializedName = @"wastageCost",
        PossibleTypes = new [] { typeof(decimal) })]
        decimal? WastageCost { get;  }

    }
    /// The properties of the benefit plan recommendation details for a saving.
    internal partial interface IAllSavingsBenefitDetailsInternal

    {
        /// <summary>Estimated average utilization percentage at this commitment.</summary>
        decimal? AverageUtilizationPercentage { get; set; }
        /// <summary>
        /// The exact cost of the estimated usage using plan. It's equal to (commitmentAmount * totalHours)
        /// </summary>
        decimal? BenefitCost { get; set; }
        /// <summary>The commitment amount for the benefit.</summary>
        decimal? CommitmentAmount { get; set; }
        /// <summary>Expected coverage at this commitment.</summary>
        decimal? CoveragePercentage { get; set; }
        /// <summary>The difference between total cost and benefit cost.</summary>
        decimal? OverageCost { get; set; }
        /// <summary>The amount saved by purchasing the recommended quantity of benefit.</summary>
        decimal? SavingsAmount { get; set; }
        /// <summary>The savings in percentage by purchasing the recommended quantity of benefit.</summary>
        decimal? SavingsPercentage { get; set; }
        /// <summary>The cost of the suggested commitment.</summary>
        decimal? TotalCost { get; set; }
        /// <summary>Wastage cost at this commitment.</summary>
        decimal? WastageCost { get; set; }

    }
}