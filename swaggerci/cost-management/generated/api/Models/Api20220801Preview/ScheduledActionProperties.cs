// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Extensions;

    /// <summary>The properties of the scheduled action.</summary>
    public partial class ScheduledActionProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.IScheduledActionProperties,
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.IScheduledActionPropertiesInternal
    {

        /// <summary>Backing field for <see cref="DisplayName" /> property.</summary>
        private string _displayName;

        /// <summary>Scheduled action name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Owned)]
        public string DisplayName { get => this._displayName; set => this._displayName = value; }

        /// <summary>Backing field for <see cref="FileDestination" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.IFileDestination _fileDestination;

        /// <summary>Destination format of the view data. This is optional.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.IFileDestination FileDestination { get => (this._fileDestination = this._fileDestination ?? new Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.FileDestination()); set => this._fileDestination = value; }

        /// <summary>Destination of the view data. Currently only csv format is supported.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.FileFormat[] FileDestinationFileFormat { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.IFileDestinationInternal)FileDestination).FileFormat; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.IFileDestinationInternal)FileDestination).FileFormat = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for FileDestination</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.IFileDestination Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.IScheduledActionPropertiesInternal.FileDestination { get => (this._fileDestination = this._fileDestination ?? new Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.FileDestination()); set { {_fileDestination = value;} } }

        /// <summary>Internal Acessors for Notification</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.INotificationProperties Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.IScheduledActionPropertiesInternal.Notification { get => (this._notification = this._notification ?? new Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.NotificationProperties()); set { {_notification = value;} } }

        /// <summary>Internal Acessors for Schedule</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.IScheduleProperties Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.IScheduledActionPropertiesInternal.Schedule { get => (this._schedule = this._schedule ?? new Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.ScheduleProperties()); set { {_schedule = value;} } }

        /// <summary>Backing field for <see cref="Notification" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.INotificationProperties _notification;

        /// <summary>Notification properties based on scheduled action kind.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.INotificationProperties Notification { get => (this._notification = this._notification ?? new Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.NotificationProperties()); set => this._notification = value; }

        /// <summary>Optional message to be added in the email. Length is limited to 250 characters.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public string NotificationMessage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.INotificationPropertiesInternal)Notification).Message; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.INotificationPropertiesInternal)Notification).Message = value ?? null; }

        /// <summary>Subject of the email. Length is limited to 70 characters.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public string NotificationSubject { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.INotificationPropertiesInternal)Notification).Subject; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.INotificationPropertiesInternal)Notification).Subject = value ; }

        /// <summary>Array of email addresses.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public string[] NotificationTo { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.INotificationPropertiesInternal)Notification).To; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.INotificationPropertiesInternal)Notification).To = value ; }

        /// <summary>Backing field for <see cref="Schedule" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.IScheduleProperties _schedule;

        /// <summary>Schedule of the scheduled action.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.IScheduleProperties Schedule { get => (this._schedule = this._schedule ?? new Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.ScheduleProperties()); set => this._schedule = value; }

        /// <summary>
        /// UTC day on which cost analysis data will be emailed. Must be between 1 and 31. This property is applicable when frequency
        /// is Monthly and overrides weeksOfMonth or daysOfWeek.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public int? ScheduleDayOfMonth { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.ISchedulePropertiesInternal)Schedule).DayOfMonth; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.ISchedulePropertiesInternal)Schedule).DayOfMonth = value ?? default(int); }

        /// <summary>
        /// Day names in english on which cost analysis data will be emailed. This property is applicable when frequency is Weekly
        /// or Monthly.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.DaysOfWeek[] ScheduleDaysOfWeek { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.ISchedulePropertiesInternal)Schedule).DaysOfWeek; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.ISchedulePropertiesInternal)Schedule).DaysOfWeek = value ?? null /* arrayOf */; }

        /// <summary>The end date and time of the scheduled action (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public global::System.DateTime ScheduleEndDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.ISchedulePropertiesInternal)Schedule).EndDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.ISchedulePropertiesInternal)Schedule).EndDate = value ; }

        /// <summary>Frequency of the schedule.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.ScheduleFrequency ScheduleFrequency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.ISchedulePropertiesInternal)Schedule).Frequency; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.ISchedulePropertiesInternal)Schedule).Frequency = value ; }

        /// <summary>UTC time at which cost analysis data will be emailed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public int? ScheduleHourOfDay { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.ISchedulePropertiesInternal)Schedule).HourOfDay; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.ISchedulePropertiesInternal)Schedule).HourOfDay = value ?? default(int); }

        /// <summary>The start date and time of the scheduled action (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public global::System.DateTime ScheduleStartDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.ISchedulePropertiesInternal)Schedule).StartDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.ISchedulePropertiesInternal)Schedule).StartDate = value ; }

        /// <summary>
        /// Weeks in which cost analysis data will be emailed. This property is applicable when frequency is Monthly and used in combination
        /// with daysOfWeek.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.WeeksOfMonth[] ScheduleWeeksOfMonth { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.ISchedulePropertiesInternal)Schedule).WeeksOfMonth; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.ISchedulePropertiesInternal)Schedule).WeeksOfMonth = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="Scope" /> property.</summary>
        private string _scope;

        /// <summary>
        /// Cost Management scope like 'subscriptions/{subscriptionId}' for subscription scope, 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
        /// for resourceGroup scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}'
        /// for Department scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
        /// for EnrollmentAccount scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
        /// for BillingProfile scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
        /// for InvoiceSection scope, '/providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
        /// ExternalBillingAccount scope, and '/providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}'
        /// for ExternalSubscription scope.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Owned)]
        public string Scope { get => this._scope; set => this._scope = value; }

        /// <summary>Backing field for <see cref="Status" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.ScheduledActionStatus _status;

        /// <summary>Status of the scheduled action.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.ScheduledActionStatus Status { get => this._status; set => this._status = value; }

        /// <summary>Backing field for <see cref="ViewId" /> property.</summary>
        private string _viewId;

        /// <summary>
        /// Cost analysis viewId used for scheduled action. For example, '/providers/Microsoft.CostManagement/views/swaggerExample'
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cost.PropertyOrigin.Owned)]
        public string ViewId { get => this._viewId; set => this._viewId = value; }

        /// <summary>Creates an new <see cref="ScheduledActionProperties" /> instance.</summary>
        public ScheduledActionProperties()
        {

        }
    }
    /// The properties of the scheduled action.
    public partial interface IScheduledActionProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.IJsonSerializable
    {
        /// <summary>Scheduled action name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Scheduled action name.",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get; set; }
        /// <summary>Destination of the view data. Currently only csv format is supported.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Destination of the view data. Currently only csv format is supported.",
        SerializedName = @"fileFormats",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.FileFormat) })]
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.FileFormat[] FileDestinationFileFormat { get; set; }
        /// <summary>Optional message to be added in the email. Length is limited to 250 characters.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Optional message to be added in the email. Length is limited to 250 characters.",
        SerializedName = @"message",
        PossibleTypes = new [] { typeof(string) })]
        string NotificationMessage { get; set; }
        /// <summary>Subject of the email. Length is limited to 70 characters.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Subject of the email. Length is limited to 70 characters.",
        SerializedName = @"subject",
        PossibleTypes = new [] { typeof(string) })]
        string NotificationSubject { get; set; }
        /// <summary>Array of email addresses.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Array of email addresses.",
        SerializedName = @"to",
        PossibleTypes = new [] { typeof(string) })]
        string[] NotificationTo { get; set; }
        /// <summary>
        /// UTC day on which cost analysis data will be emailed. Must be between 1 and 31. This property is applicable when frequency
        /// is Monthly and overrides weeksOfMonth or daysOfWeek.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"UTC day on which cost analysis data will be emailed. Must be between 1 and 31. This property is applicable when frequency is Monthly and overrides weeksOfMonth or daysOfWeek.",
        SerializedName = @"dayOfMonth",
        PossibleTypes = new [] { typeof(int) })]
        int? ScheduleDayOfMonth { get; set; }
        /// <summary>
        /// Day names in english on which cost analysis data will be emailed. This property is applicable when frequency is Weekly
        /// or Monthly.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Day names in english on which cost analysis data will be emailed. This property is applicable when frequency is Weekly or Monthly.",
        SerializedName = @"daysOfWeek",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.DaysOfWeek) })]
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.DaysOfWeek[] ScheduleDaysOfWeek { get; set; }
        /// <summary>The end date and time of the scheduled action (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The end date and time of the scheduled action (UTC).",
        SerializedName = @"endDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime ScheduleEndDate { get; set; }
        /// <summary>Frequency of the schedule.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Frequency of the schedule.",
        SerializedName = @"frequency",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.ScheduleFrequency) })]
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.ScheduleFrequency ScheduleFrequency { get; set; }
        /// <summary>UTC time at which cost analysis data will be emailed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"UTC time at which cost analysis data will be emailed.",
        SerializedName = @"hourOfDay",
        PossibleTypes = new [] { typeof(int) })]
        int? ScheduleHourOfDay { get; set; }
        /// <summary>The start date and time of the scheduled action (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The start date and time of the scheduled action (UTC).",
        SerializedName = @"startDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime ScheduleStartDate { get; set; }
        /// <summary>
        /// Weeks in which cost analysis data will be emailed. This property is applicable when frequency is Monthly and used in combination
        /// with daysOfWeek.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Weeks in which cost analysis data will be emailed. This property is applicable when frequency is Monthly and used in combination with daysOfWeek.",
        SerializedName = @"weeksOfMonth",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.WeeksOfMonth) })]
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.WeeksOfMonth[] ScheduleWeeksOfMonth { get; set; }
        /// <summary>
        /// Cost Management scope like 'subscriptions/{subscriptionId}' for subscription scope, 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
        /// for resourceGroup scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}'
        /// for Department scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
        /// for EnrollmentAccount scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
        /// for BillingProfile scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
        /// for InvoiceSection scope, '/providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
        /// ExternalBillingAccount scope, and '/providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}'
        /// for ExternalSubscription scope.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Cost Management scope like 'subscriptions/{subscriptionId}' for subscription scope, 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for BillingProfile scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}' for InvoiceSection scope, '/providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for ExternalBillingAccount scope, and '/providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for ExternalSubscription scope.",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        string Scope { get; set; }
        /// <summary>Status of the scheduled action.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Status of the scheduled action.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.ScheduledActionStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.ScheduledActionStatus Status { get; set; }
        /// <summary>
        /// Cost analysis viewId used for scheduled action. For example, '/providers/Microsoft.CostManagement/views/swaggerExample'
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cost.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Cost analysis viewId used for scheduled action. For example, '/providers/Microsoft.CostManagement/views/swaggerExample'",
        SerializedName = @"viewId",
        PossibleTypes = new [] { typeof(string) })]
        string ViewId { get; set; }

    }
    /// The properties of the scheduled action.
    internal partial interface IScheduledActionPropertiesInternal

    {
        /// <summary>Scheduled action name.</summary>
        string DisplayName { get; set; }
        /// <summary>Destination format of the view data. This is optional.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.IFileDestination FileDestination { get; set; }
        /// <summary>Destination of the view data. Currently only csv format is supported.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.FileFormat[] FileDestinationFileFormat { get; set; }
        /// <summary>Notification properties based on scheduled action kind.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.INotificationProperties Notification { get; set; }
        /// <summary>Optional message to be added in the email. Length is limited to 250 characters.</summary>
        string NotificationMessage { get; set; }
        /// <summary>Subject of the email. Length is limited to 70 characters.</summary>
        string NotificationSubject { get; set; }
        /// <summary>Array of email addresses.</summary>
        string[] NotificationTo { get; set; }
        /// <summary>Schedule of the scheduled action.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Models.Api20220801Preview.IScheduleProperties Schedule { get; set; }
        /// <summary>
        /// UTC day on which cost analysis data will be emailed. Must be between 1 and 31. This property is applicable when frequency
        /// is Monthly and overrides weeksOfMonth or daysOfWeek.
        /// </summary>
        int? ScheduleDayOfMonth { get; set; }
        /// <summary>
        /// Day names in english on which cost analysis data will be emailed. This property is applicable when frequency is Weekly
        /// or Monthly.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.DaysOfWeek[] ScheduleDaysOfWeek { get; set; }
        /// <summary>The end date and time of the scheduled action (UTC).</summary>
        global::System.DateTime ScheduleEndDate { get; set; }
        /// <summary>Frequency of the schedule.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.ScheduleFrequency ScheduleFrequency { get; set; }
        /// <summary>UTC time at which cost analysis data will be emailed.</summary>
        int? ScheduleHourOfDay { get; set; }
        /// <summary>The start date and time of the scheduled action (UTC).</summary>
        global::System.DateTime ScheduleStartDate { get; set; }
        /// <summary>
        /// Weeks in which cost analysis data will be emailed. This property is applicable when frequency is Monthly and used in combination
        /// with daysOfWeek.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.WeeksOfMonth[] ScheduleWeeksOfMonth { get; set; }
        /// <summary>
        /// Cost Management scope like 'subscriptions/{subscriptionId}' for subscription scope, 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
        /// for resourceGroup scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}'
        /// for Department scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
        /// for EnrollmentAccount scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
        /// for BillingProfile scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
        /// for InvoiceSection scope, '/providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
        /// ExternalBillingAccount scope, and '/providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}'
        /// for ExternalSubscription scope.
        /// </summary>
        string Scope { get; set; }
        /// <summary>Status of the scheduled action.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cost.Support.ScheduledActionStatus Status { get; set; }
        /// <summary>
        /// Cost analysis viewId used for scheduled action. For example, '/providers/Microsoft.CostManagement/views/swaggerExample'
        /// </summary>
        string ViewId { get; set; }

    }
}