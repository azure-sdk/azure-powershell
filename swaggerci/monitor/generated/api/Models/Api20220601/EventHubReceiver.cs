// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Monitor.Models.Api20220601
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Monitor.Runtime.Extensions;

    /// <summary>An Event hub receiver.</summary>
    public partial class EventHubReceiver :
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.Models.Api20220601.IEventHubReceiver,
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.Models.Api20220601.IEventHubReceiverInternal
    {

        /// <summary>Backing field for <see cref="EventHubName" /> property.</summary>
        private string _eventHubName;

        /// <summary>The name of the specific Event Hub queue</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.PropertyOrigin.Owned)]
        public string EventHubName { get => this._eventHubName; set => this._eventHubName = value; }

        /// <summary>Backing field for <see cref="EventHubNameSpace" /> property.</summary>
        private string _eventHubNameSpace;

        /// <summary>The Event Hub namespace</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.PropertyOrigin.Owned)]
        public string EventHubNameSpace { get => this._eventHubNameSpace; set => this._eventHubNameSpace = value; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>
        /// The name of the Event hub receiver. Names must be unique across all receivers within an action group.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="SubscriptionId" /> property.</summary>
        private string _subscriptionId;

        /// <summary>The Id for the subscription containing this event hub</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.PropertyOrigin.Owned)]
        public string SubscriptionId { get => this._subscriptionId; set => this._subscriptionId = value; }

        /// <summary>Backing field for <see cref="TenantId" /> property.</summary>
        private string _tenantId;

        /// <summary>The tenant Id for the subscription containing this event hub</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.PropertyOrigin.Owned)]
        public string TenantId { get => this._tenantId; set => this._tenantId = value; }

        /// <summary>Backing field for <see cref="UseCommonAlertSchema" /> property.</summary>
        private bool? _useCommonAlertSchema;

        /// <summary>Indicates whether to use common alert schema.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.PropertyOrigin.Owned)]
        public bool? UseCommonAlertSchema { get => this._useCommonAlertSchema; set => this._useCommonAlertSchema = value; }

        /// <summary>Creates an new <see cref="EventHubReceiver" /> instance.</summary>
        public EventHubReceiver()
        {

        }
    }
    /// An Event hub receiver.
    public partial interface IEventHubReceiver :
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.Runtime.IJsonSerializable
    {
        /// <summary>The name of the specific Event Hub queue</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the specific Event Hub queue",
        SerializedName = @"eventHubName",
        PossibleTypes = new [] { typeof(string) })]
        string EventHubName { get; set; }
        /// <summary>The Event Hub namespace</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The Event Hub namespace",
        SerializedName = @"eventHubNameSpace",
        PossibleTypes = new [] { typeof(string) })]
        string EventHubNameSpace { get; set; }
        /// <summary>
        /// The name of the Event hub receiver. Names must be unique across all receivers within an action group.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the Event hub receiver. Names must be unique across all receivers within an action group.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>The Id for the subscription containing this event hub</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The Id for the subscription containing this event hub",
        SerializedName = @"subscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        string SubscriptionId { get; set; }
        /// <summary>The tenant Id for the subscription containing this event hub</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The tenant Id for the subscription containing this event hub",
        SerializedName = @"tenantId",
        PossibleTypes = new [] { typeof(string) })]
        string TenantId { get; set; }
        /// <summary>Indicates whether to use common alert schema.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether to use common alert schema.",
        SerializedName = @"useCommonAlertSchema",
        PossibleTypes = new [] { typeof(bool) })]
        bool? UseCommonAlertSchema { get; set; }

    }
    /// An Event hub receiver.
    internal partial interface IEventHubReceiverInternal

    {
        /// <summary>The name of the specific Event Hub queue</summary>
        string EventHubName { get; set; }
        /// <summary>The Event Hub namespace</summary>
        string EventHubNameSpace { get; set; }
        /// <summary>
        /// The name of the Event hub receiver. Names must be unique across all receivers within an action group.
        /// </summary>
        string Name { get; set; }
        /// <summary>The Id for the subscription containing this event hub</summary>
        string SubscriptionId { get; set; }
        /// <summary>The tenant Id for the subscription containing this event hub</summary>
        string TenantId { get; set; }
        /// <summary>Indicates whether to use common alert schema.</summary>
        bool? UseCommonAlertSchema { get; set; }

    }
}