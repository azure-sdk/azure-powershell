
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create a new action group or update an existing one.
.Description
Create a new action group or update an existing one.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Monitor.Models.Api20220601.IActionGroupResource
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

ARMROLERECEIVER <IArmRoleReceiver[]>: The list of ARM role receivers that are part of this action group. Roles are Azure RBAC roles and only built-in roles are supported.
  Name <String>: The name of the arm role receiver. Names must be unique across all receivers within an action group.
  RoleId <String>: The arm role id.
  [UseCommonAlertSchema <Boolean?>]: Indicates whether to use common alert schema.

AUTOMATIONRUNBOOKRECEIVER <IAutomationRunbookReceiver[]>: The list of AutomationRunbook receivers that are part of this action group.
  AutomationAccountId <String>: The Azure automation account Id which holds this runbook and authenticate to Azure resource.
  IsGlobalRunbook <Boolean>: Indicates whether this instance is global runbook.
  RunbookName <String>: The name for this runbook.
  WebhookResourceId <String>: The resource id for webhook linked to this runbook.
  [Name <String>]: Indicates name of the webhook.
  [ServiceUri <String>]: The URI where webhooks should be sent.
  [UseCommonAlertSchema <Boolean?>]: Indicates whether to use common alert schema.

AZUREAPPPUSHRECEIVER <IAzureAppPushReceiver[]>: The list of AzureAppPush receivers that are part of this action group.
  EmailAddress <String>: The email address registered for the Azure mobile app.
  Name <String>: The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.

AZUREFUNCTIONRECEIVER <IAzureFunctionReceiver[]>: The list of azure function receivers that are part of this action group.
  FunctionAppResourceId <String>: The azure resource id of the function app.
  FunctionName <String>: The function name in the function app.
  HttpTriggerUrl <String>: The http trigger url where http request sent to.
  Name <String>: The name of the azure function receiver. Names must be unique across all receivers within an action group.
  [UseCommonAlertSchema <Boolean?>]: Indicates whether to use common alert schema.

EMAILRECEIVER <IEmailReceiver[]>: The list of email receivers that are part of this action group.
  EmailAddress <String>: The email address of this receiver.
  Name <String>: The name of the email receiver. Names must be unique across all receivers within an action group.
  [UseCommonAlertSchema <Boolean?>]: Indicates whether to use common alert schema.

EVENTHUBRECEIVER <IEventHubReceiver[]>: The list of event hub receivers that are part of this action group.
  EventHubName <String>: The name of the specific Event Hub queue
  EventHubNameSpace <String>: The Event Hub namespace
  Name <String>: The name of the Event hub receiver. Names must be unique across all receivers within an action group.
  SubscriptionId <String>: The Id for the subscription containing this event hub
  [TenantId <String>]: The tenant Id for the subscription containing this event hub
  [UseCommonAlertSchema <Boolean?>]: Indicates whether to use common alert schema.

ITSMRECEIVER <IItsmReceiver[]>: The list of ITSM receivers that are part of this action group.
  ConnectionId <String>: Unique identification of ITSM connection among multiple defined in above workspace.
  Name <String>: The name of the Itsm receiver. Names must be unique across all receivers within an action group.
  Region <String>: Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
  TicketConfiguration <String>: JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
  WorkspaceId <String>: OMS LA instance identifier.

LOGICAPPRECEIVER <ILogicAppReceiver[]>: The list of logic app receivers that are part of this action group.
  CallbackUrl <String>: The callback url where http request sent to.
  Name <String>: The name of the logic app receiver. Names must be unique across all receivers within an action group.
  ResourceId <String>: The azure resource id of the logic app receiver.
  [UseCommonAlertSchema <Boolean?>]: Indicates whether to use common alert schema.

SMSRECEIVER <ISmsReceiver[]>: The list of SMS receivers that are part of this action group.
  CountryCode <String>: The country code of the SMS receiver.
  Name <String>: The name of the SMS receiver. Names must be unique across all receivers within an action group.
  PhoneNumber <String>: The phone number of the SMS receiver.

VOICERECEIVER <IVoiceReceiver[]>: The list of voice receivers that are part of this action group.
  CountryCode <String>: The country code of the voice receiver.
  Name <String>: The name of the voice receiver. Names must be unique across all receivers within an action group.
  PhoneNumber <String>: The phone number of the voice receiver.

WEBHOOKRECEIVER <IWebhookReceiver[]>: The list of webhook receivers that are part of this action group.
  Name <String>: The name of the webhook receiver. Names must be unique across all receivers within an action group.
  ServiceUri <String>: The URI where webhooks should be sent.
  [IdentifierUri <String>]: Indicates the identifier uri for aad auth.
  [ObjectId <String>]: Indicates the webhook app object Id for aad auth.
  [TenantId <String>]: Indicates the tenant id for aad auth.
  [UseAadAuth <Boolean?>]: Indicates whether or not use AAD authentication.
  [UseCommonAlertSchema <Boolean?>]: Indicates whether to use common alert schema.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.monitor/new-azmonitoractiongroup
#>
function New-AzMonitorActionGroup {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Monitor.Models.Api20220601.IActionGroupResource])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Alias('ActionGroupName')]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Category('Path')]
    [System.String]
    # The name of the action group.
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    ${SubscriptionId},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Category('Body')]
    [System.String]
    # Resource location
    ${Location},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Models.Api20220601.IArmRoleReceiver[]]
    # The list of ARM role receivers that are part of this action group.
    # Roles are Azure RBAC roles and only built-in roles are supported.
    # To construct, see NOTES section for ARMROLERECEIVER properties and create a hash table.
    ${ArmRoleReceiver},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Models.Api20220601.IAutomationRunbookReceiver[]]
    # The list of AutomationRunbook receivers that are part of this action group.
    # To construct, see NOTES section for AUTOMATIONRUNBOOKRECEIVER properties and create a hash table.
    ${AutomationRunbookReceiver},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Models.Api20220601.IAzureAppPushReceiver[]]
    # The list of AzureAppPush receivers that are part of this action group.
    # To construct, see NOTES section for AZUREAPPPUSHRECEIVER properties and create a hash table.
    ${AzureAppPushReceiver},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Models.Api20220601.IAzureFunctionReceiver[]]
    # The list of azure function receivers that are part of this action group.
    # To construct, see NOTES section for AZUREFUNCTIONRECEIVER properties and create a hash table.
    ${AzureFunctionReceiver},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Models.Api20220601.IEmailReceiver[]]
    # The list of email receivers that are part of this action group.
    # To construct, see NOTES section for EMAILRECEIVER properties and create a hash table.
    ${EmailReceiver},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Indicates whether this action group is enabled.
    # If an action group is not enabled, then none of its receivers will receive communications.
    ${Enabled},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Models.Api20220601.IEventHubReceiver[]]
    # The list of event hub receivers that are part of this action group.
    # To construct, see NOTES section for EVENTHUBRECEIVER properties and create a hash table.
    ${EventHubReceiver},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Category('Body')]
    [System.String]
    # The short name of the action group.
    # This will be used in SMS messages.
    ${GroupShortName},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Models.Api20220601.IItsmReceiver[]]
    # The list of ITSM receivers that are part of this action group.
    # To construct, see NOTES section for ITSMRECEIVER properties and create a hash table.
    ${ItsmReceiver},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Models.Api20220601.ILogicAppReceiver[]]
    # The list of logic app receivers that are part of this action group.
    # To construct, see NOTES section for LOGICAPPRECEIVER properties and create a hash table.
    ${LogicAppReceiver},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Models.Api20220601.ISmsReceiver[]]
    # The list of SMS receivers that are part of this action group.
    # To construct, see NOTES section for SMSRECEIVER properties and create a hash table.
    ${SmsReceiver},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.Monitor.Models.Api20220601.IAzureResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags
    ${Tag},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Models.Api20220601.IVoiceReceiver[]]
    # The list of voice receivers that are part of this action group.
    # To construct, see NOTES section for VOICERECEIVER properties and create a hash table.
    ${VoiceReceiver},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Models.Api20220601.IWebhookReceiver[]]
    # The list of webhook receivers that are part of this action group.
    # To construct, see NOTES section for WEBHOOKRECEIVER properties and create a hash table.
    ${WebhookReceiver},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Runspace.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Monitor.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.Monitor.private\New-AzMonitorActionGroup_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Monitor.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
