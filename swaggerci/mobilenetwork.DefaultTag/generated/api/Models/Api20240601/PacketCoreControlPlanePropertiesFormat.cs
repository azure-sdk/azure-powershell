// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Extensions;

    /// <summary>Packet core control plane properties.</summary>
    public partial class PacketCoreControlPlanePropertiesFormat :
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPacketCoreControlPlanePropertiesFormat,
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPacketCoreControlPlanePropertiesFormatInternal
    {

        /// <summary>Azure Stack Edge device resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public string AzureStackEdgeDeviceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPlatformConfigurationInternal)Platform).AzureStackEdgeDeviceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPlatformConfigurationInternal)Platform).AzureStackEdgeDeviceId = value ?? null; }

        /// <summary>Azure Stack HCI cluster resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public string AzureStackHciClusterId { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPlatformConfigurationInternal)Platform).AzureStackHciClusterId; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPlatformConfigurationInternal)Platform).AzureStackHciClusterId = value ?? null; }

        /// <summary>Azure Arc custom location resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public string ConnectedClusterId { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPlatformConfigurationInternal)Platform).ConnectedClusterId; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPlatformConfigurationInternal)Platform).ConnectedClusterId = value ?? null; }

        /// <summary>Backing field for <see cref="ControlPlaneAccessInterface" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInterfaceProperties _controlPlaneAccessInterface;

        /// <summary>
        /// The control plane interface on the access network. For 5G networks, this is the N2 interface. For 4G networks, this is
        /// the S1-MME interface.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInterfaceProperties ControlPlaneAccessInterface { get => (this._controlPlaneAccessInterface = this._controlPlaneAccessInterface ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.InterfaceProperties()); set => this._controlPlaneAccessInterface = value; }

        /// <summary>The IPv4 addresses of the endpoints to send BFD probes to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public string[] ControlPlaneAccessInterfaceBfdIpv4Endpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInterfacePropertiesInternal)ControlPlaneAccessInterface).BfdIpv4Endpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInterfacePropertiesInternal)ControlPlaneAccessInterface).BfdIpv4Endpoint = value ?? null /* arrayOf */; }

        /// <summary>The IPv4 address.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public string ControlPlaneAccessInterfaceIpv4Address { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInterfacePropertiesInternal)ControlPlaneAccessInterface).Ipv4Address; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInterfacePropertiesInternal)ControlPlaneAccessInterface).Ipv4Address = value ?? null; }

        /// <summary>The list of IPv4 addresses, for a multi-node system.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public string[] ControlPlaneAccessInterfaceIpv4AddressList { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInterfacePropertiesInternal)ControlPlaneAccessInterface).Ipv4AddressList; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInterfacePropertiesInternal)ControlPlaneAccessInterface).Ipv4AddressList = value ?? null /* arrayOf */; }

        /// <summary>The default IPv4 gateway (router).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public string ControlPlaneAccessInterfaceIpv4Gateway { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInterfacePropertiesInternal)ControlPlaneAccessInterface).Ipv4Gateway; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInterfacePropertiesInternal)ControlPlaneAccessInterface).Ipv4Gateway = value ?? null; }

        /// <summary>The IPv4 subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public string ControlPlaneAccessInterfaceIpv4Subnet { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInterfacePropertiesInternal)ControlPlaneAccessInterface).Ipv4Subnet; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInterfacePropertiesInternal)ControlPlaneAccessInterface).Ipv4Subnet = value ?? null; }

        /// <summary>
        /// The logical name for this interface. This should match one of the interfaces configured on your Azure Stack Edge device.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public string ControlPlaneAccessInterfaceName { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInterfacePropertiesInternal)ControlPlaneAccessInterface).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInterfacePropertiesInternal)ControlPlaneAccessInterface).Name = value ?? null; }

        /// <summary>VLAN identifier of the network interface. Example: 501.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public int? ControlPlaneAccessInterfaceVlanId { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInterfacePropertiesInternal)ControlPlaneAccessInterface).VlanId; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInterfacePropertiesInternal)ControlPlaneAccessInterface).VlanId = value ?? default(int); }

        /// <summary>Backing field for <see cref="ControlPlaneAccessVirtualIpv4Address" /> property.</summary>
        private string[] _controlPlaneAccessVirtualIpv4Address;

        /// <summary>
        /// The virtual IP address(es) for the control plane on the access network in a High Availability (HA) system. In an HA deployment
        /// the access network router should be configured to anycast traffic for this address to the control plane access interfaces
        /// on the active and standby nodes. In non-HA system this list should be omitted or empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Owned)]
        public string[] ControlPlaneAccessVirtualIpv4Address { get => this._controlPlaneAccessVirtualIpv4Address; set => this._controlPlaneAccessVirtualIpv4Address = value; }

        /// <summary>Backing field for <see cref="CoreNetworkTechnology" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.CoreNetworkType? _coreNetworkTechnology;

        /// <summary>The core network technology generation (5G core or EPC / 4G core).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.CoreNetworkType? CoreNetworkTechnology { get => this._coreNetworkTechnology; set => this._coreNetworkTechnology = value; }

        /// <summary>Azure Arc custom location resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public string CustomLocationId { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPlatformConfigurationInternal)Platform).CustomLocationId; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPlatformConfigurationInternal)Platform).CustomLocationId = value ?? null; }

        /// <summary>The Storage Account Container URL to upload diagnostics to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public string DiagnosticUploadStorageAccountContainerUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IDiagnosticsUploadConfigurationInternal)DiagnosticsUpload).StorageAccountContainerUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IDiagnosticsUploadConfigurationInternal)DiagnosticsUpload).StorageAccountContainerUrl = value ?? null; }

        /// <summary>Backing field for <see cref="DiagnosticsUpload" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IDiagnosticsUploadConfiguration _diagnosticsUpload;

        /// <summary>Configuration for uploading packet core diagnostics</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IDiagnosticsUploadConfiguration DiagnosticsUpload { get => (this._diagnosticsUpload = this._diagnosticsUpload ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.DiagnosticsUploadConfiguration()); set => this._diagnosticsUpload = value; }

        /// <summary>Backing field for <see cref="EventHub" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IEventHubConfiguration _eventHub;

        /// <summary>Configuration for sending packet core events to an Azure Event Hub.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IEventHubConfiguration EventHub { get => (this._eventHub = this._eventHub ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.EventHubConfiguration()); set => this._eventHub = value; }

        /// <summary>Resource ID of Azure Event Hub to send packet core events to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public string EventHubId { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IEventHubConfigurationInternal)EventHub).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IEventHubConfigurationInternal)EventHub).Id = value ?? null; }

        /// <summary>The duration (in seconds) between UE usage reports.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public int? EventHubReportingInterval { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IEventHubConfigurationInternal)EventHub).ReportingInterval; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IEventHubConfigurationInternal)EventHub).ReportingInterval = value ?? default(int); }

        /// <summary>The provisioning state of the private keys for SUPI concealment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.HomeNetworkPrivateKeysProvisioningState? HomeNetworkPrivateKeyProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IHomeNetworkPrivateKeysProvisioningInternal)HomeNetworkPrivateKeysProvisioning).State; }

        /// <summary>Backing field for <see cref="HomeNetworkPrivateKeysProvisioning" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IHomeNetworkPrivateKeysProvisioning _homeNetworkPrivateKeysProvisioning;

        /// <summary>
        /// The provisioning state of the secret containing private keys and keyIds for SUPI concealment.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IHomeNetworkPrivateKeysProvisioning HomeNetworkPrivateKeysProvisioning { get => (this._homeNetworkPrivateKeysProvisioning = this._homeNetworkPrivateKeysProvisioning ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.HomeNetworkPrivateKeysProvisioning()); }

        /// <summary>
        /// The certificate URL, unversioned. For example: https://contosovault.vault.azure.net/certificates/ingress.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public string HttpsServerCertificateUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ILocalDiagnosticsAccessConfigurationInternal)LocalDiagnosticsAccess).HttpsServerCertificateUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ILocalDiagnosticsAccessConfigurationInternal)LocalDiagnosticsAccess).HttpsServerCertificateUrl = value ?? null; }

        /// <summary>Backing field for <see cref="Installation" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInstallation _installation;

        /// <summary>The installation state of the packet core control plane resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInstallation Installation { get => (this._installation = this._installation ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.Installation()); set => this._installation = value; }

        /// <summary>The desired installation state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.DesiredInstallationState? InstallationDesiredState { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInstallationInternal)Installation).DesiredState; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInstallationInternal)Installation).DesiredState = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.DesiredInstallationState)""); }

        /// <summary>Reason(s) for the current installation state of the packet core.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.InstallationReason[] InstallationReason { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInstallationInternal)Installation).Reason; }

        /// <summary>
        /// Whether a reinstall of the packet core is required to pick up the latest configuration changes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.ReinstallRequired? InstallationReinstallRequired { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInstallationInternal)Installation).ReinstallRequired; }

        /// <summary>Installation state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.InstallationState? InstallationState { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInstallationInternal)Installation).State; }

        /// <summary>Backing field for <see cref="InstalledVersion" /> property.</summary>
        private string _installedVersion;

        /// <summary>The currently installed version of the packet core software.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Owned)]
        public string InstalledVersion { get => this._installedVersion; }

        /// <summary>Backing field for <see cref="InteropSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IAny _interopSetting;

        /// <summary>
        /// Settings to allow interoperability with third party components e.g. RANs and UEs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IAny InteropSetting { get => (this._interopSetting = this._interopSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Any()); set => this._interopSetting = value; }

        /// <summary>How to authenticate users who access local diagnostics APIs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.AuthenticationType LocalDiagnosticAccessAuthenticationType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ILocalDiagnosticsAccessConfigurationInternal)LocalDiagnosticsAccess).AuthenticationType; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ILocalDiagnosticsAccessConfigurationInternal)LocalDiagnosticsAccess).AuthenticationType = value ; }

        /// <summary>Backing field for <see cref="LocalDiagnosticsAccess" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ILocalDiagnosticsAccessConfiguration _localDiagnosticsAccess;

        /// <summary>
        /// The kubernetes ingress configuration to control access to packet core diagnostics over local APIs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ILocalDiagnosticsAccessConfiguration LocalDiagnosticsAccess { get => (this._localDiagnosticsAccess = this._localDiagnosticsAccess ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.LocalDiagnosticsAccessConfiguration()); set => this._localDiagnosticsAccess = value; }

        /// <summary>The certificate's provisioning state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.CertificateProvisioningState? LocalDiagnosticsAccessHttpsServerCertificateProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ILocalDiagnosticsAccessConfigurationInternal)LocalDiagnosticsAccess).ProvisioningState; }

        /// <summary>Internal Acessors for ControlPlaneAccessInterface</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInterfaceProperties Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPacketCoreControlPlanePropertiesFormatInternal.ControlPlaneAccessInterface { get => (this._controlPlaneAccessInterface = this._controlPlaneAccessInterface ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.InterfaceProperties()); set { {_controlPlaneAccessInterface = value;} } }

        /// <summary>Internal Acessors for DiagnosticsUpload</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IDiagnosticsUploadConfiguration Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPacketCoreControlPlanePropertiesFormatInternal.DiagnosticsUpload { get => (this._diagnosticsUpload = this._diagnosticsUpload ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.DiagnosticsUploadConfiguration()); set { {_diagnosticsUpload = value;} } }

        /// <summary>Internal Acessors for EventHub</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IEventHubConfiguration Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPacketCoreControlPlanePropertiesFormatInternal.EventHub { get => (this._eventHub = this._eventHub ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.EventHubConfiguration()); set { {_eventHub = value;} } }

        /// <summary>Internal Acessors for HomeNetworkPrivateKeyProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.HomeNetworkPrivateKeysProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPacketCoreControlPlanePropertiesFormatInternal.HomeNetworkPrivateKeyProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IHomeNetworkPrivateKeysProvisioningInternal)HomeNetworkPrivateKeysProvisioning).State; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IHomeNetworkPrivateKeysProvisioningInternal)HomeNetworkPrivateKeysProvisioning).State = value; }

        /// <summary>Internal Acessors for HomeNetworkPrivateKeysProvisioning</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IHomeNetworkPrivateKeysProvisioning Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPacketCoreControlPlanePropertiesFormatInternal.HomeNetworkPrivateKeysProvisioning { get => (this._homeNetworkPrivateKeysProvisioning = this._homeNetworkPrivateKeysProvisioning ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.HomeNetworkPrivateKeysProvisioning()); set { {_homeNetworkPrivateKeysProvisioning = value;} } }

        /// <summary>Internal Acessors for HttpsServerCertificateProvisioning</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ICertificateProvisioning Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPacketCoreControlPlanePropertiesFormatInternal.HttpsServerCertificateProvisioning { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ILocalDiagnosticsAccessConfigurationInternal)LocalDiagnosticsAccess).HttpsServerCertificateProvisioning; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ILocalDiagnosticsAccessConfigurationInternal)LocalDiagnosticsAccess).HttpsServerCertificateProvisioning = value; }

        /// <summary>Internal Acessors for Installation</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInstallation Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPacketCoreControlPlanePropertiesFormatInternal.Installation { get => (this._installation = this._installation ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.Installation()); set { {_installation = value;} } }

        /// <summary>Internal Acessors for InstallationOperation</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IAsyncOperationId Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPacketCoreControlPlanePropertiesFormatInternal.InstallationOperation { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInstallationInternal)Installation).Operation; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInstallationInternal)Installation).Operation = value; }

        /// <summary>Internal Acessors for InstallationReason</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.InstallationReason[] Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPacketCoreControlPlanePropertiesFormatInternal.InstallationReason { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInstallationInternal)Installation).Reason; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInstallationInternal)Installation).Reason = value; }

        /// <summary>Internal Acessors for InstallationReinstallRequired</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.ReinstallRequired? Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPacketCoreControlPlanePropertiesFormatInternal.InstallationReinstallRequired { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInstallationInternal)Installation).ReinstallRequired; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInstallationInternal)Installation).ReinstallRequired = value; }

        /// <summary>Internal Acessors for InstallationState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.InstallationState? Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPacketCoreControlPlanePropertiesFormatInternal.InstallationState { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInstallationInternal)Installation).State; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInstallationInternal)Installation).State = value; }

        /// <summary>Internal Acessors for InstalledVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPacketCoreControlPlanePropertiesFormatInternal.InstalledVersion { get => this._installedVersion; set { {_installedVersion = value;} } }

        /// <summary>Internal Acessors for LocalDiagnosticAccessHttpsServerCertificate</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IHttpsServerCertificate Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPacketCoreControlPlanePropertiesFormatInternal.LocalDiagnosticAccessHttpsServerCertificate { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ILocalDiagnosticsAccessConfigurationInternal)LocalDiagnosticsAccess).HttpsServerCertificate; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ILocalDiagnosticsAccessConfigurationInternal)LocalDiagnosticsAccess).HttpsServerCertificate = value; }

        /// <summary>Internal Acessors for LocalDiagnosticsAccess</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ILocalDiagnosticsAccessConfiguration Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPacketCoreControlPlanePropertiesFormatInternal.LocalDiagnosticsAccess { get => (this._localDiagnosticsAccess = this._localDiagnosticsAccess ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.LocalDiagnosticsAccessConfiguration()); set { {_localDiagnosticsAccess = value;} } }

        /// <summary>
        /// Internal Acessors for LocalDiagnosticsAccessHttpsServerCertificateProvisioningState
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.CertificateProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPacketCoreControlPlanePropertiesFormatInternal.LocalDiagnosticsAccessHttpsServerCertificateProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ILocalDiagnosticsAccessConfigurationInternal)LocalDiagnosticsAccess).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ILocalDiagnosticsAccessConfigurationInternal)LocalDiagnosticsAccess).ProvisioningState = value; }

        /// <summary>Internal Acessors for Platform</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPlatformConfiguration Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPacketCoreControlPlanePropertiesFormatInternal.Platform { get => (this._platform = this._platform ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.PlatformConfiguration()); set { {_platform = value;} } }

        /// <summary>Internal Acessors for PlatformAzureStackEdgeDevice</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IAzureStackEdgeDeviceResourceId Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPacketCoreControlPlanePropertiesFormatInternal.PlatformAzureStackEdgeDevice { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPlatformConfigurationInternal)Platform).AzureStackEdgeDevice; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPlatformConfigurationInternal)Platform).AzureStackEdgeDevice = value; }

        /// <summary>Internal Acessors for PlatformAzureStackEdgeDevices</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IAzureStackEdgeDeviceResourceId[] Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPacketCoreControlPlanePropertiesFormatInternal.PlatformAzureStackEdgeDevices { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPlatformConfigurationInternal)Platform).AzureStackEdgeDevices; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPlatformConfigurationInternal)Platform).AzureStackEdgeDevices = value; }

        /// <summary>Internal Acessors for PlatformAzureStackHciCluster</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IAzureStackHciClusterResourceId Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPacketCoreControlPlanePropertiesFormatInternal.PlatformAzureStackHciCluster { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPlatformConfigurationInternal)Platform).AzureStackHciCluster; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPlatformConfigurationInternal)Platform).AzureStackHciCluster = value; }

        /// <summary>Internal Acessors for PlatformConnectedCluster</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IConnectedClusterResourceId Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPacketCoreControlPlanePropertiesFormatInternal.PlatformConnectedCluster { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPlatformConfigurationInternal)Platform).ConnectedCluster; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPlatformConfigurationInternal)Platform).ConnectedCluster = value; }

        /// <summary>Internal Acessors for PlatformCustomLocation</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ICustomLocationResourceId Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPacketCoreControlPlanePropertiesFormatInternal.PlatformCustomLocation { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPlatformConfigurationInternal)Platform).CustomLocation; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPlatformConfigurationInternal)Platform).CustomLocation = value; }

        /// <summary>Internal Acessors for ProvisioningReason</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPacketCoreControlPlanePropertiesFormatInternal.ProvisioningReason { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ILocalDiagnosticsAccessConfigurationInternal)LocalDiagnosticsAccess).ProvisioningReason; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ILocalDiagnosticsAccessConfigurationInternal)LocalDiagnosticsAccess).ProvisioningReason = value; }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.ProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPacketCoreControlPlanePropertiesFormatInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Internal Acessors for RollbackVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPacketCoreControlPlanePropertiesFormatInternal.RollbackVersion { get => this._rollbackVersion; set { {_rollbackVersion = value;} } }

        /// <summary>Internal Acessors for Signaling</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ISignalingConfiguration Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPacketCoreControlPlanePropertiesFormatInternal.Signaling { get => (this._signaling = this._signaling ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.SignalingConfiguration()); set { {_signaling = value;} } }

        /// <summary>Internal Acessors for SignalingNasReroute</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.INasRerouteConfiguration Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPacketCoreControlPlanePropertiesFormatInternal.SignalingNasReroute { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ISignalingConfigurationInternal)Signaling).NasReroute; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ISignalingConfigurationInternal)Signaling).NasReroute = value; }

        /// <summary>Internal Acessors for UserConsent</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IUserConsentConfiguration Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPacketCoreControlPlanePropertiesFormatInternal.UserConsent { get => (this._userConsent = this._userConsent ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.UserConsentConfiguration()); set { {_userConsent = value;} } }

        /// <summary>
        /// The macro network's MME group ID. This is where unknown UEs are sent to via NAS reroute.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public int? NaRerouteMacroMmeGroupId { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ISignalingConfigurationInternal)Signaling).NaRerouteMacroMmeGroupId; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ISignalingConfigurationInternal)Signaling).NaRerouteMacroMmeGroupId = value ?? default(int); }

        /// <summary>Azure Async Operation ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public string OperationId { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInstallationInternal)Installation).OperationId; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInstallationInternal)Installation).OperationId = value ?? null; }

        /// <summary>Backing field for <see cref="Platform" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPlatformConfiguration _platform;

        /// <summary>The platform where the packet core is deployed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPlatformConfiguration Platform { get => (this._platform = this._platform ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.PlatformConfiguration()); set => this._platform = value; }

        /// <summary>
        /// The Azure Stack Edge devices where the packet core is deployed. If the packet core is deployed across multiple devices,
        /// all devices will appear in this list.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IAzureStackEdgeDeviceResourceId[] PlatformAzureStackEdgeDevices { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPlatformConfigurationInternal)Platform).AzureStackEdgeDevices; }

        /// <summary>The platform type where packet core is deployed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.PlatformType PlatformType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPlatformConfigurationInternal)Platform).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPlatformConfigurationInternal)Platform).Type = value ; }

        /// <summary>Reason for certificate provisioning failure.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public string ProvisioningReason { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ILocalDiagnosticsAccessConfigurationInternal)LocalDiagnosticsAccess).ProvisioningReason; }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.ProvisioningState? _provisioningState;

        /// <summary>The provisioning state of the packet core control plane resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.ProvisioningState? ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="RollbackVersion" /> property.</summary>
        private string _rollbackVersion;

        /// <summary>
        /// The previous version of the packet core software that was deployed. Used when performing the rollback action.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Owned)]
        public string RollbackVersion { get => this._rollbackVersion; }

        /// <summary>Backing field for <see cref="Signaling" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ISignalingConfiguration _signaling;

        /// <summary>Signaling configuration for the packet core.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ISignalingConfiguration Signaling { get => (this._signaling = this._signaling ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.SignalingConfiguration()); set => this._signaling = value; }

        /// <summary>
        /// An ordered list of NAS encryption algorithms, used to encrypt control plane traffic between the UE and packet core, in
        /// order from most to least preferred. If not specified, the packet core will use a built-in default ordering.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.NasEncryptionType[] SignalingNasEncryption { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ISignalingConfigurationInternal)Signaling).NasEncryption; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ISignalingConfigurationInternal)Signaling).NasEncryption = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="Site" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ISiteResourceId[] _site;

        /// <summary>
        /// Site(s) under which this packet core control plane should be deployed. The sites must be in the same location as the packet
        /// core control plane.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ISiteResourceId[] Site { get => this._site; set => this._site = value; }

        /// <summary>Backing field for <see cref="Sku" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.BillingSku _sku;

        /// <summary>
        /// The SKU defining the throughput and SIM allowances for this packet core control plane deployment.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.BillingSku Sku { get => this._sku; set => this._sku = value; }

        /// <summary>Backing field for <see cref="UeMtu" /> property.</summary>
        private int? _ueMtu;

        /// <summary>
        /// The MTU (in bytes) signaled to the UE. The same MTU is set on the user plane data links for all data networks. The MTU
        /// set on the user plane access link is calculated to be 60 bytes greater than this value to allow for GTP encapsulation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Owned)]
        public int? UeMtu { get => this._ueMtu; set => this._ueMtu = value; }

        /// <summary>Backing field for <see cref="UserConsent" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IUserConsentConfiguration _userConsent;

        /// <summary>The user consent configuration for the packet core.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IUserConsentConfiguration UserConsent { get => (this._userConsent = this._userConsent ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.UserConsentConfiguration()); set => this._userConsent = value; }

        /// <summary>Allow Microsoft to access non-PII telemetry information from the packet core.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public bool? UserConsentAllowSupportTelemetryAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IUserConsentConfigurationInternal)UserConsent).AllowSupportTelemetryAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IUserConsentConfigurationInternal)UserConsent).AllowSupportTelemetryAccess = value ?? default(bool); }

        /// <summary>Backing field for <see cref="Version" /> property.</summary>
        private string _version;

        /// <summary>The desired version of the packet core software.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Owned)]
        public string Version { get => this._version; set => this._version = value; }

        /// <summary>Creates an new <see cref="PacketCoreControlPlanePropertiesFormat" /> instance.</summary>
        public PacketCoreControlPlanePropertiesFormat()
        {

        }
    }
    /// Packet core control plane properties.
    public partial interface IPacketCoreControlPlanePropertiesFormat :
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.IJsonSerializable
    {
        /// <summary>Azure Stack Edge device resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Azure Stack Edge device resource ID.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string AzureStackEdgeDeviceId { get; set; }
        /// <summary>Azure Stack HCI cluster resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Azure Stack HCI cluster resource ID.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string AzureStackHciClusterId { get; set; }
        /// <summary>Azure Arc custom location resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Azure Arc custom location resource ID.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string ConnectedClusterId { get; set; }
        /// <summary>The IPv4 addresses of the endpoints to send BFD probes to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The IPv4 addresses of the endpoints to send BFD probes to.",
        SerializedName = @"bfdIpv4Endpoints",
        PossibleTypes = new [] { typeof(string) })]
        string[] ControlPlaneAccessInterfaceBfdIpv4Endpoint { get; set; }
        /// <summary>The IPv4 address.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The IPv4 address.",
        SerializedName = @"ipv4Address",
        PossibleTypes = new [] { typeof(string) })]
        string ControlPlaneAccessInterfaceIpv4Address { get; set; }
        /// <summary>The list of IPv4 addresses, for a multi-node system.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of IPv4 addresses, for a multi-node system.",
        SerializedName = @"ipv4AddressList",
        PossibleTypes = new [] { typeof(string) })]
        string[] ControlPlaneAccessInterfaceIpv4AddressList { get; set; }
        /// <summary>The default IPv4 gateway (router).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default IPv4 gateway (router).",
        SerializedName = @"ipv4Gateway",
        PossibleTypes = new [] { typeof(string) })]
        string ControlPlaneAccessInterfaceIpv4Gateway { get; set; }
        /// <summary>The IPv4 subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The IPv4 subnet.",
        SerializedName = @"ipv4Subnet",
        PossibleTypes = new [] { typeof(string) })]
        string ControlPlaneAccessInterfaceIpv4Subnet { get; set; }
        /// <summary>
        /// The logical name for this interface. This should match one of the interfaces configured on your Azure Stack Edge device.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The logical name for this interface. This should match one of the interfaces configured on your Azure Stack Edge device.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string ControlPlaneAccessInterfaceName { get; set; }
        /// <summary>VLAN identifier of the network interface. Example: 501.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"VLAN identifier of the network interface. Example: 501.",
        SerializedName = @"vlanId",
        PossibleTypes = new [] { typeof(int) })]
        int? ControlPlaneAccessInterfaceVlanId { get; set; }
        /// <summary>
        /// The virtual IP address(es) for the control plane on the access network in a High Availability (HA) system. In an HA deployment
        /// the access network router should be configured to anycast traffic for this address to the control plane access interfaces
        /// on the active and standby nodes. In non-HA system this list should be omitted or empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The virtual IP address(es) for the control plane on the access network in a High Availability (HA) system. In an HA deployment the access network router should be configured to anycast traffic for this address to the control plane access interfaces on the active and standby nodes. In non-HA system this list should be omitted or empty.",
        SerializedName = @"controlPlaneAccessVirtualIpv4Addresses",
        PossibleTypes = new [] { typeof(string) })]
        string[] ControlPlaneAccessVirtualIpv4Address { get; set; }
        /// <summary>The core network technology generation (5G core or EPC / 4G core).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The core network technology generation (5G core or EPC / 4G core).",
        SerializedName = @"coreNetworkTechnology",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.CoreNetworkType) })]
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.CoreNetworkType? CoreNetworkTechnology { get; set; }
        /// <summary>Azure Arc custom location resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Azure Arc custom location resource ID.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string CustomLocationId { get; set; }
        /// <summary>The Storage Account Container URL to upload diagnostics to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Storage Account Container URL to upload diagnostics to.",
        SerializedName = @"storageAccountContainerUrl",
        PossibleTypes = new [] { typeof(string) })]
        string DiagnosticUploadStorageAccountContainerUrl { get; set; }
        /// <summary>Resource ID of Azure Event Hub to send packet core events to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource ID  of Azure Event Hub to send packet core events to.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string EventHubId { get; set; }
        /// <summary>The duration (in seconds) between UE usage reports.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The duration (in seconds) between UE usage reports.",
        SerializedName = @"reportingInterval",
        PossibleTypes = new [] { typeof(int) })]
        int? EventHubReportingInterval { get; set; }
        /// <summary>The provisioning state of the private keys for SUPI concealment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The provisioning state of the private keys for SUPI concealment.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.HomeNetworkPrivateKeysProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.HomeNetworkPrivateKeysProvisioningState? HomeNetworkPrivateKeyProvisioningState { get;  }
        /// <summary>
        /// The certificate URL, unversioned. For example: https://contosovault.vault.azure.net/certificates/ingress.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The certificate URL, unversioned. For example: https://contosovault.vault.azure.net/certificates/ingress.",
        SerializedName = @"certificateUrl",
        PossibleTypes = new [] { typeof(string) })]
        string HttpsServerCertificateUrl { get; set; }
        /// <summary>The desired installation state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The desired installation state",
        SerializedName = @"desiredState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.DesiredInstallationState) })]
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.DesiredInstallationState? InstallationDesiredState { get; set; }
        /// <summary>Reason(s) for the current installation state of the packet core.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Reason(s) for the current installation state of the packet core.",
        SerializedName = @"reasons",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.InstallationReason) })]
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.InstallationReason[] InstallationReason { get;  }
        /// <summary>
        /// Whether a reinstall of the packet core is required to pick up the latest configuration changes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Whether a reinstall of the packet core is required to pick up the latest configuration changes.",
        SerializedName = @"reinstallRequired",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.ReinstallRequired) })]
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.ReinstallRequired? InstallationReinstallRequired { get;  }
        /// <summary>Installation state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Installation state",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.InstallationState) })]
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.InstallationState? InstallationState { get;  }
        /// <summary>The currently installed version of the packet core software.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The currently installed version of the packet core software.",
        SerializedName = @"installedVersion",
        PossibleTypes = new [] { typeof(string) })]
        string InstalledVersion { get;  }
        /// <summary>
        /// Settings to allow interoperability with third party components e.g. RANs and UEs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Settings to allow interoperability with third party components e.g. RANs and UEs.",
        SerializedName = @"interopSettings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IAny) })]
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IAny InteropSetting { get; set; }
        /// <summary>How to authenticate users who access local diagnostics APIs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"How to authenticate users who access local diagnostics APIs.",
        SerializedName = @"authenticationType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.AuthenticationType) })]
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.AuthenticationType LocalDiagnosticAccessAuthenticationType { get; set; }
        /// <summary>The certificate's provisioning state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The certificate's provisioning state",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.CertificateProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.CertificateProvisioningState? LocalDiagnosticsAccessHttpsServerCertificateProvisioningState { get;  }
        /// <summary>
        /// The macro network's MME group ID. This is where unknown UEs are sent to via NAS reroute.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The macro network's MME group ID. This is where unknown UEs are sent to via NAS reroute.",
        SerializedName = @"macroMmeGroupId",
        PossibleTypes = new [] { typeof(int) })]
        int? NaRerouteMacroMmeGroupId { get; set; }
        /// <summary>Azure Async Operation ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Azure Async Operation ID.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string OperationId { get; set; }
        /// <summary>
        /// The Azure Stack Edge devices where the packet core is deployed. If the packet core is deployed across multiple devices,
        /// all devices will appear in this list.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The Azure Stack Edge devices where the packet core is deployed. If the packet core is deployed across multiple devices, all devices will appear in this list.",
        SerializedName = @"azureStackEdgeDevices",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IAzureStackEdgeDeviceResourceId) })]
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IAzureStackEdgeDeviceResourceId[] PlatformAzureStackEdgeDevices { get;  }
        /// <summary>The platform type where packet core is deployed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The platform type where packet core is deployed.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.PlatformType) })]
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.PlatformType PlatformType { get; set; }
        /// <summary>Reason for certificate provisioning failure.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Reason for certificate provisioning failure.",
        SerializedName = @"reason",
        PossibleTypes = new [] { typeof(string) })]
        string ProvisioningReason { get;  }
        /// <summary>The provisioning state of the packet core control plane resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The provisioning state of the packet core control plane resource.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.ProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.ProvisioningState? ProvisioningState { get;  }
        /// <summary>
        /// The previous version of the packet core software that was deployed. Used when performing the rollback action.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The previous version of the packet core software that was deployed. Used when performing the rollback action.",
        SerializedName = @"rollbackVersion",
        PossibleTypes = new [] { typeof(string) })]
        string RollbackVersion { get;  }
        /// <summary>
        /// An ordered list of NAS encryption algorithms, used to encrypt control plane traffic between the UE and packet core, in
        /// order from most to least preferred. If not specified, the packet core will use a built-in default ordering.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An ordered list of NAS encryption algorithms, used to encrypt control plane traffic between the UE and packet core, in order from most to least preferred. If not specified, the packet core will use a built-in default ordering.",
        SerializedName = @"nasEncryption",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.NasEncryptionType) })]
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.NasEncryptionType[] SignalingNasEncryption { get; set; }
        /// <summary>
        /// Site(s) under which this packet core control plane should be deployed. The sites must be in the same location as the packet
        /// core control plane.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Site(s) under which this packet core control plane should be deployed. The sites must be in the same location as the packet core control plane.",
        SerializedName = @"sites",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ISiteResourceId) })]
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ISiteResourceId[] Site { get; set; }
        /// <summary>
        /// The SKU defining the throughput and SIM allowances for this packet core control plane deployment.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The SKU defining the throughput and SIM allowances for this packet core control plane deployment.",
        SerializedName = @"sku",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.BillingSku) })]
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.BillingSku Sku { get; set; }
        /// <summary>
        /// The MTU (in bytes) signaled to the UE. The same MTU is set on the user plane data links for all data networks. The MTU
        /// set on the user plane access link is calculated to be 60 bytes greater than this value to allow for GTP encapsulation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The MTU (in bytes) signaled to the UE. The same MTU is set on the user plane data links for all data networks. The MTU set on the user plane access link is calculated to be 60 bytes greater than this value to allow for GTP encapsulation.",
        SerializedName = @"ueMtu",
        PossibleTypes = new [] { typeof(int) })]
        int? UeMtu { get; set; }
        /// <summary>Allow Microsoft to access non-PII telemetry information from the packet core.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Allow Microsoft to access non-PII telemetry information from the packet core.",
        SerializedName = @"allowSupportTelemetryAccess",
        PossibleTypes = new [] { typeof(bool) })]
        bool? UserConsentAllowSupportTelemetryAccess { get; set; }
        /// <summary>The desired version of the packet core software.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The desired version of the packet core software.",
        SerializedName = @"version",
        PossibleTypes = new [] { typeof(string) })]
        string Version { get; set; }

    }
    /// Packet core control plane properties.
    internal partial interface IPacketCoreControlPlanePropertiesFormatInternal

    {
        /// <summary>Azure Stack Edge device resource ID.</summary>
        string AzureStackEdgeDeviceId { get; set; }
        /// <summary>Azure Stack HCI cluster resource ID.</summary>
        string AzureStackHciClusterId { get; set; }
        /// <summary>Azure Arc custom location resource ID.</summary>
        string ConnectedClusterId { get; set; }
        /// <summary>
        /// The control plane interface on the access network. For 5G networks, this is the N2 interface. For 4G networks, this is
        /// the S1-MME interface.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInterfaceProperties ControlPlaneAccessInterface { get; set; }
        /// <summary>The IPv4 addresses of the endpoints to send BFD probes to.</summary>
        string[] ControlPlaneAccessInterfaceBfdIpv4Endpoint { get; set; }
        /// <summary>The IPv4 address.</summary>
        string ControlPlaneAccessInterfaceIpv4Address { get; set; }
        /// <summary>The list of IPv4 addresses, for a multi-node system.</summary>
        string[] ControlPlaneAccessInterfaceIpv4AddressList { get; set; }
        /// <summary>The default IPv4 gateway (router).</summary>
        string ControlPlaneAccessInterfaceIpv4Gateway { get; set; }
        /// <summary>The IPv4 subnet.</summary>
        string ControlPlaneAccessInterfaceIpv4Subnet { get; set; }
        /// <summary>
        /// The logical name for this interface. This should match one of the interfaces configured on your Azure Stack Edge device.
        /// </summary>
        string ControlPlaneAccessInterfaceName { get; set; }
        /// <summary>VLAN identifier of the network interface. Example: 501.</summary>
        int? ControlPlaneAccessInterfaceVlanId { get; set; }
        /// <summary>
        /// The virtual IP address(es) for the control plane on the access network in a High Availability (HA) system. In an HA deployment
        /// the access network router should be configured to anycast traffic for this address to the control plane access interfaces
        /// on the active and standby nodes. In non-HA system this list should be omitted or empty.
        /// </summary>
        string[] ControlPlaneAccessVirtualIpv4Address { get; set; }
        /// <summary>The core network technology generation (5G core or EPC / 4G core).</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.CoreNetworkType? CoreNetworkTechnology { get; set; }
        /// <summary>Azure Arc custom location resource ID.</summary>
        string CustomLocationId { get; set; }
        /// <summary>The Storage Account Container URL to upload diagnostics to.</summary>
        string DiagnosticUploadStorageAccountContainerUrl { get; set; }
        /// <summary>Configuration for uploading packet core diagnostics</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IDiagnosticsUploadConfiguration DiagnosticsUpload { get; set; }
        /// <summary>Configuration for sending packet core events to an Azure Event Hub.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IEventHubConfiguration EventHub { get; set; }
        /// <summary>Resource ID of Azure Event Hub to send packet core events to.</summary>
        string EventHubId { get; set; }
        /// <summary>The duration (in seconds) between UE usage reports.</summary>
        int? EventHubReportingInterval { get; set; }
        /// <summary>The provisioning state of the private keys for SUPI concealment.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.HomeNetworkPrivateKeysProvisioningState? HomeNetworkPrivateKeyProvisioningState { get; set; }
        /// <summary>
        /// The provisioning state of the secret containing private keys and keyIds for SUPI concealment.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IHomeNetworkPrivateKeysProvisioning HomeNetworkPrivateKeysProvisioning { get; set; }
        /// <summary>The provisioning state of the certificate.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ICertificateProvisioning HttpsServerCertificateProvisioning { get; set; }
        /// <summary>
        /// The certificate URL, unversioned. For example: https://contosovault.vault.azure.net/certificates/ingress.
        /// </summary>
        string HttpsServerCertificateUrl { get; set; }
        /// <summary>The installation state of the packet core control plane resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IInstallation Installation { get; set; }
        /// <summary>The desired installation state</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.DesiredInstallationState? InstallationDesiredState { get; set; }
        /// <summary>A reference to an in-progress installation operation</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IAsyncOperationId InstallationOperation { get; set; }
        /// <summary>Reason(s) for the current installation state of the packet core.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.InstallationReason[] InstallationReason { get; set; }
        /// <summary>
        /// Whether a reinstall of the packet core is required to pick up the latest configuration changes.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.ReinstallRequired? InstallationReinstallRequired { get; set; }
        /// <summary>Installation state</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.InstallationState? InstallationState { get; set; }
        /// <summary>The currently installed version of the packet core software.</summary>
        string InstalledVersion { get; set; }
        /// <summary>
        /// Settings to allow interoperability with third party components e.g. RANs and UEs.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IAny InteropSetting { get; set; }
        /// <summary>How to authenticate users who access local diagnostics APIs.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.AuthenticationType LocalDiagnosticAccessAuthenticationType { get; set; }
        /// <summary>The HTTPS server TLS certificate used to secure local access to diagnostics.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IHttpsServerCertificate LocalDiagnosticAccessHttpsServerCertificate { get; set; }
        /// <summary>
        /// The kubernetes ingress configuration to control access to packet core diagnostics over local APIs.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ILocalDiagnosticsAccessConfiguration LocalDiagnosticsAccess { get; set; }
        /// <summary>The certificate's provisioning state</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.CertificateProvisioningState? LocalDiagnosticsAccessHttpsServerCertificateProvisioningState { get; set; }
        /// <summary>
        /// The macro network's MME group ID. This is where unknown UEs are sent to via NAS reroute.
        /// </summary>
        int? NaRerouteMacroMmeGroupId { get; set; }
        /// <summary>Azure Async Operation ID.</summary>
        string OperationId { get; set; }
        /// <summary>The platform where the packet core is deployed.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IPlatformConfiguration Platform { get; set; }
        /// <summary>
        /// The Azure Stack Edge device where the packet core is deployed. If the device is part of a fault tolerant pair, either
        /// device in the pair can be specified.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IAzureStackEdgeDeviceResourceId PlatformAzureStackEdgeDevice { get; set; }
        /// <summary>
        /// The Azure Stack Edge devices where the packet core is deployed. If the packet core is deployed across multiple devices,
        /// all devices will appear in this list.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IAzureStackEdgeDeviceResourceId[] PlatformAzureStackEdgeDevices { get; set; }
        /// <summary>The Azure Stack HCI cluster where the packet core is deployed.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IAzureStackHciClusterResourceId PlatformAzureStackHciCluster { get; set; }
        /// <summary>Azure Arc connected cluster where the packet core is deployed.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IConnectedClusterResourceId PlatformConnectedCluster { get; set; }
        /// <summary>Azure Arc custom location where the packet core is deployed.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ICustomLocationResourceId PlatformCustomLocation { get; set; }
        /// <summary>The platform type where packet core is deployed.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.PlatformType PlatformType { get; set; }
        /// <summary>Reason for certificate provisioning failure.</summary>
        string ProvisioningReason { get; set; }
        /// <summary>The provisioning state of the packet core control plane resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.ProvisioningState? ProvisioningState { get; set; }
        /// <summary>
        /// The previous version of the packet core software that was deployed. Used when performing the rollback action.
        /// </summary>
        string RollbackVersion { get; set; }
        /// <summary>Signaling configuration for the packet core.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ISignalingConfiguration Signaling { get; set; }
        /// <summary>
        /// An ordered list of NAS encryption algorithms, used to encrypt control plane traffic between the UE and packet core, in
        /// order from most to least preferred. If not specified, the packet core will use a built-in default ordering.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.NasEncryptionType[] SignalingNasEncryption { get; set; }
        /// <summary>Configuration enabling 4G NAS reroute.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.INasRerouteConfiguration SignalingNasReroute { get; set; }
        /// <summary>
        /// Site(s) under which this packet core control plane should be deployed. The sites must be in the same location as the packet
        /// core control plane.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.ISiteResourceId[] Site { get; set; }
        /// <summary>
        /// The SKU defining the throughput and SIM allowances for this packet core control plane deployment.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.BillingSku Sku { get; set; }
        /// <summary>
        /// The MTU (in bytes) signaled to the UE. The same MTU is set on the user plane data links for all data networks. The MTU
        /// set on the user plane access link is calculated to be 60 bytes greater than this value to allow for GTP encapsulation.
        /// </summary>
        int? UeMtu { get; set; }
        /// <summary>The user consent configuration for the packet core.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20240601.IUserConsentConfiguration UserConsent { get; set; }
        /// <summary>Allow Microsoft to access non-PII telemetry information from the packet core.</summary>
        bool? UserConsentAllowSupportTelemetryAccess { get; set; }
        /// <summary>The desired version of the packet core software.</summary>
        string Version { get; set; }

    }
}