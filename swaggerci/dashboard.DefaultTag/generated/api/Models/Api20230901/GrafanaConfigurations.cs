// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.Api20230901
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Runtime.Extensions;

    /// <summary>Server configurations of a Grafana instance</summary>
    public partial class GrafanaConfigurations :
        Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.Api20230901.IGrafanaConfigurations,
        Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.Api20230901.IGrafanaConfigurationsInternal
    {

        /// <summary>Internal Acessors for Smtp</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.Api20230901.ISmtp Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.Api20230901.IGrafanaConfigurationsInternal.Smtp { get => (this._smtp = this._smtp ?? new Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.Api20230901.Smtp()); set { {_smtp = value;} } }

        /// <summary>Backing field for <see cref="Smtp" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.Api20230901.ISmtp _smtp;

        /// <summary>
        /// Email server settings.
        /// https://grafana.com/docs/grafana/v9.0/setup-grafana/configure-grafana/#smtp
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Origin(Microsoft.Azure.PowerShell.Cmdlets.Dashboard.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.Api20230901.ISmtp Smtp { get => (this._smtp = this._smtp ?? new Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.Api20230901.Smtp()); set => this._smtp = value; }

        /// <summary>Enable this to allow Grafana to send email. Default is false</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Origin(Microsoft.Azure.PowerShell.Cmdlets.Dashboard.PropertyOrigin.Inlined)]
        public bool? SmtpEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.Api20230901.ISmtpInternal)Smtp).Enabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.Api20230901.ISmtpInternal)Smtp).Enabled = value ?? default(bool); }

        /// <summary>
        /// Address used when sending out emails
        /// https://pkg.go.dev/net/mail#Address
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Origin(Microsoft.Azure.PowerShell.Cmdlets.Dashboard.PropertyOrigin.Inlined)]
        public string SmtpFromAddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.Api20230901.ISmtpInternal)Smtp).FromAddress; set => ((Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.Api20230901.ISmtpInternal)Smtp).FromAddress = value ?? null; }

        /// <summary>
        /// Name to be used when sending out emails. Default is "Azure Managed Grafana Notification"
        /// https://pkg.go.dev/net/mail#Address
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Origin(Microsoft.Azure.PowerShell.Cmdlets.Dashboard.PropertyOrigin.Inlined)]
        public string SmtpFromName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.Api20230901.ISmtpInternal)Smtp).FromName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.Api20230901.ISmtpInternal)Smtp).FromName = value ?? null; }

        /// <summary>SMTP server hostname with port, e.g. test.email.net:587</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Origin(Microsoft.Azure.PowerShell.Cmdlets.Dashboard.PropertyOrigin.Inlined)]
        public string SmtpHost { get => ((Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.Api20230901.ISmtpInternal)Smtp).Host; set => ((Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.Api20230901.ISmtpInternal)Smtp).Host = value ?? null; }

        /// <summary>
        /// Password of SMTP auth. If the password contains # or ;, then you have to wrap it with triple quotes
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Origin(Microsoft.Azure.PowerShell.Cmdlets.Dashboard.PropertyOrigin.Inlined)]
        public string SmtpPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.Api20230901.ISmtpInternal)Smtp).Password; set => ((Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.Api20230901.ISmtpInternal)Smtp).Password = value ?? null; }

        /// <summary>
        /// Verify SSL for SMTP server. Default is false
        /// https://pkg.go.dev/crypto/tls#Config
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Origin(Microsoft.Azure.PowerShell.Cmdlets.Dashboard.PropertyOrigin.Inlined)]
        public bool? SmtpSkipVerify { get => ((Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.Api20230901.ISmtpInternal)Smtp).SkipVerify; set => ((Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.Api20230901.ISmtpInternal)Smtp).SkipVerify = value ?? default(bool); }

        /// <summary>
        /// The StartTLSPolicy setting of the SMTP configuration
        /// https://pkg.go.dev/github.com/go-mail/mail#StartTLSPolicy
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Origin(Microsoft.Azure.PowerShell.Cmdlets.Dashboard.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Support.StartTlsPolicy? SmtpStartTlsPolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.Api20230901.ISmtpInternal)Smtp).StartTlsPolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.Api20230901.ISmtpInternal)Smtp).StartTlsPolicy = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Support.StartTlsPolicy)""); }

        /// <summary>User of SMTP auth</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Origin(Microsoft.Azure.PowerShell.Cmdlets.Dashboard.PropertyOrigin.Inlined)]
        public string SmtpUser { get => ((Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.Api20230901.ISmtpInternal)Smtp).User; set => ((Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.Api20230901.ISmtpInternal)Smtp).User = value ?? null; }

        /// <summary>Creates an new <see cref="GrafanaConfigurations" /> instance.</summary>
        public GrafanaConfigurations()
        {

        }
    }
    /// Server configurations of a Grafana instance
    public partial interface IGrafanaConfigurations :
        Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Runtime.IJsonSerializable
    {
        /// <summary>Enable this to allow Grafana to send email. Default is false</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable this to allow Grafana to send email. Default is false",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SmtpEnabled { get; set; }
        /// <summary>
        /// Address used when sending out emails
        /// https://pkg.go.dev/net/mail#Address
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Address used when sending out emails
        https://pkg.go.dev/net/mail#Address",
        SerializedName = @"fromAddress",
        PossibleTypes = new [] { typeof(string) })]
        string SmtpFromAddress { get; set; }
        /// <summary>
        /// Name to be used when sending out emails. Default is "Azure Managed Grafana Notification"
        /// https://pkg.go.dev/net/mail#Address
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name to be used when sending out emails. Default is ""Azure Managed Grafana Notification""
        https://pkg.go.dev/net/mail#Address",
        SerializedName = @"fromName",
        PossibleTypes = new [] { typeof(string) })]
        string SmtpFromName { get; set; }
        /// <summary>SMTP server hostname with port, e.g. test.email.net:587</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SMTP server hostname with port, e.g. test.email.net:587",
        SerializedName = @"host",
        PossibleTypes = new [] { typeof(string) })]
        string SmtpHost { get; set; }
        /// <summary>
        /// Password of SMTP auth. If the password contains # or ;, then you have to wrap it with triple quotes
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Password of SMTP auth. If the password contains # or ;, then you have to wrap it with triple quotes",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(string) })]
        string SmtpPassword { get; set; }
        /// <summary>
        /// Verify SSL for SMTP server. Default is false
        /// https://pkg.go.dev/crypto/tls#Config
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Verify SSL for SMTP server. Default is false
        https://pkg.go.dev/crypto/tls#Config",
        SerializedName = @"skipVerify",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SmtpSkipVerify { get; set; }
        /// <summary>
        /// The StartTLSPolicy setting of the SMTP configuration
        /// https://pkg.go.dev/github.com/go-mail/mail#StartTLSPolicy
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The StartTLSPolicy setting of the SMTP configuration
        https://pkg.go.dev/github.com/go-mail/mail#StartTLSPolicy",
        SerializedName = @"startTLSPolicy",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Support.StartTlsPolicy) })]
        Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Support.StartTlsPolicy? SmtpStartTlsPolicy { get; set; }
        /// <summary>User of SMTP auth</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"User of SMTP auth",
        SerializedName = @"user",
        PossibleTypes = new [] { typeof(string) })]
        string SmtpUser { get; set; }

    }
    /// Server configurations of a Grafana instance
    internal partial interface IGrafanaConfigurationsInternal

    {
        /// <summary>
        /// Email server settings.
        /// https://grafana.com/docs/grafana/v9.0/setup-grafana/configure-grafana/#smtp
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.Api20230901.ISmtp Smtp { get; set; }
        /// <summary>Enable this to allow Grafana to send email. Default is false</summary>
        bool? SmtpEnabled { get; set; }
        /// <summary>
        /// Address used when sending out emails
        /// https://pkg.go.dev/net/mail#Address
        /// </summary>
        string SmtpFromAddress { get; set; }
        /// <summary>
        /// Name to be used when sending out emails. Default is "Azure Managed Grafana Notification"
        /// https://pkg.go.dev/net/mail#Address
        /// </summary>
        string SmtpFromName { get; set; }
        /// <summary>SMTP server hostname with port, e.g. test.email.net:587</summary>
        string SmtpHost { get; set; }
        /// <summary>
        /// Password of SMTP auth. If the password contains # or ;, then you have to wrap it with triple quotes
        /// </summary>
        string SmtpPassword { get; set; }
        /// <summary>
        /// Verify SSL for SMTP server. Default is false
        /// https://pkg.go.dev/crypto/tls#Config
        /// </summary>
        bool? SmtpSkipVerify { get; set; }
        /// <summary>
        /// The StartTLSPolicy setting of the SMTP configuration
        /// https://pkg.go.dev/github.com/go-mail/mail#StartTLSPolicy
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Support.StartTlsPolicy? SmtpStartTlsPolicy { get; set; }
        /// <summary>User of SMTP auth</summary>
        string SmtpUser { get; set; }

    }
}