
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Update a workspace for Grafana resource.
.Description
Update a workspace for Grafana resource.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.IDashboardIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.Api20241001.IManagedGrafana
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

GRAFANAINTEGRATIONAZUREMONITORWORKSPACEINTEGRATION <IAzureMonitorWorkspaceIntegration[]>: .
  [AzureMonitorWorkspaceResourceId <String>]: The resource Id of the connected Azure Monitor Workspace.

INPUTOBJECT <IDashboardIdentity>: Identity Parameter
  [Id <String>]: Resource identity path
  [IntegrationFabricName <String>]: The integration fabric name of Azure Managed Grafana.
  [ManagedPrivateEndpointName <String>]: The managed private endpoint name of Azure Managed Grafana.
  [PrivateEndpointConnectionName <String>]: The private endpoint connection name of Azure Managed Grafana.
  [PrivateLinkResourceName <String>]: 
  [ResourceGroupName <String>]: The name of the resource group. The name is case insensitive.
  [SubscriptionId <String>]: The ID of the target subscription.
  [WorkspaceName <String>]: The workspace name of Azure Managed Grafana.
.Link
https://learn.microsoft.com/powershell/module/az.dashboard/update-azdashboardgrafana
#>
function Update-AzDashboardGrafana {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.Api20241001.IManagedGrafana])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    ${SubscriptionId},

    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Path')]
    [System.String]
    # The workspace name of Azure Managed Grafana.
    ${WorkspaceName},

    [Parameter(ParameterSetName='UpdateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.IDashboardIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Support.ApiKey])]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Support.ApiKey]
    # The api key setting of the Grafana instance.
    ${ApiKey},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Support.DeterministicOutboundIP])]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Support.DeterministicOutboundIP]
    # Whether a Grafana instance uses deterministic outbound IPs.
    ${DeterministicOutboundIP},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Support.MarketplaceAutoRenew])]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Support.MarketplaceAutoRenew]
    # The AutoRenew setting of the Enterprise subscription
    ${EnterpriseConfigurationMarketplaceAutoRenew},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Body')]
    [System.String]
    # The Plan Id of the Azure Marketplace subscription for the Enterprise plugins
    ${EnterpriseConfigurationMarketplacePlanId},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.Api20241001.IAzureMonitorWorkspaceIntegration[]]
    # .
    # To construct, see NOTES section for GRAFANAINTEGRATIONAZUREMONITORWORKSPACEINTEGRATION properties and create a hash table.
    ${GrafanaIntegrationAzureMonitorWorkspaceIntegration},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Body')]
    [System.String]
    # The major Grafana software version to target.
    ${GrafanaMajorVersion},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.Api20241001.IManagedGrafanaPropertiesUpdateParametersGrafanaPlugins]))]
    [System.Collections.Hashtable]
    # Update of Grafana plugin.
    # Key is plugin id, value is plugin definition.
    # If plugin definition is null, plugin with given plugin id will be removed.
    # Otherwise, given plugin will be installed.
    ${GrafanaPlugin},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Support.ManagedServiceIdentityType])]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Support.ManagedServiceIdentityType]
    # Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    ${IdentityType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.Api30.IUserAssignedIdentities]))]
    [System.Collections.Hashtable]
    # The set of user assigned identities associated with the resource.
    # The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
    # The dictionary values can be empty objects ({}) in requests.
    ${IdentityUserAssignedIdentity},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Support.PublicNetworkAccess])]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Support.PublicNetworkAccess]
    # Indicate the state for enable or disable traffic over the public interface.
    ${PublicNetworkAccess},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Set to true to execute the CSRF check even if the login cookie is not in a request (default false).
    ${SecurityCsrfAlwaysCheck},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Body')]
    [System.String]
    # The name of the SKU.
    ${SkuName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Enable this to allow Grafana to send email.
    # Default is false
    ${SmtpEnabled},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Body')]
    [System.String]
    # Address used when sending out emailshttps://pkg.go.dev/net/mail#Address
    ${SmtpFromAddress},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Body')]
    [System.String]
    # Name to be used when sending out emails.
    # Default is "Azure Managed Grafana Notification"https://pkg.go.dev/net/mail#Address
    ${SmtpFromName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Body')]
    [System.String]
    # SMTP server hostname with port, e.g.
    # test.email.net:587
    ${SmtpHost},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Body')]
    [System.Security.SecureString]
    # Password of SMTP auth.
    # If the password contains # or ;, then you have to wrap it with triple quotes
    ${SmtpPassword},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Verify SSL for SMTP server.
    # Default is falsehttps://pkg.go.dev/crypto/tls#Config
    ${SmtpSkipVerify},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Support.StartTlsPolicy])]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Support.StartTlsPolicy]
    # The StartTLSPolicy setting of the SMTP configurationhttps://pkg.go.dev/github.com/go-mail/mail#StartTLSPolicy
    ${SmtpStartTlsPolicy},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Body')]
    [System.String]
    # User of SMTP auth
    ${SmtpUser},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Set to false to disable external snapshot publish endpoint
    ${SnapshotExternalEnabled},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Models.Api20241001.IManagedGrafanaUpdateParametersTags]))]
    [System.Collections.Hashtable]
    # The new tags of the grafana resource.
    ${Tag},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Set to true so viewers can access and use explore and perform temporary edits on panels in dashboards they have access to.
    # They cannot save their changes.
    ${UserViewersCanEdit},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Support.ZoneRedundancy])]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Support.ZoneRedundancy]
    # The zone redundancy setting of the Grafana instance.
    ${ZoneRedundancy},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            UpdateExpanded = 'Az.Dashboard.private\Update-AzDashboardGrafana_UpdateExpanded';
            UpdateViaIdentityExpanded = 'Az.Dashboard.private\Update-AzDashboardGrafana_UpdateViaIdentityExpanded';
        }
        if (('UpdateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $testPlayback = $false
            $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Dashboard.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
