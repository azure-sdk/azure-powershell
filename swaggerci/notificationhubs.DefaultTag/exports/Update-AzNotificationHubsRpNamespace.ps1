
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Patches the existing namespace.
.Description
Patches the existing namespace.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Models.INotificationHubsRpIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Models.Api20231001Preview.INamespaceResource
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <INotificationHubsRpIdentity>: Identity Parameter
  [AuthorizationRuleName <String>]: The name of the SharedAccessAuthorizationRuleResource
  [Id <String>]: Resource identity path
  [NamespaceName <String>]: Namespace name
  [NotificationHubName <String>]: Notification Hub name
  [PrivateEndpointConnectionName <String>]: Private Endpoint Connection Name
  [ResourceGroupName <String>]: The name of the resource group. The name is case insensitive.
  [SubResourceName <String>]: Name of the Private Link sub-resource. The only supported sub-resource is "namespace"
  [SubscriptionId <String>]: The ID of the target subscription. The value must be an UUID.

NETWORKACLSIPRULE <IIPRule[]>: List of IP rules.
  IPMask <String>: IP mask.
  Rights <AccessRights[]>: List of access rights.

PNSCREDENTIALS <IPnsCredentials>: Collection of Notification Hub or Notification Hub Namespace PNS credentials.
  [ApnsCertificate <SecureString>]: Gets or sets the APNS certificate.
  [ApnsCredentialPropertiesCertificateKey <SecureString>]: Gets or sets the certificate key.
  [ApnsCredentialPropertiesEndpoint <SecureString>]: Gets or sets the endpoint of this credential.
  [ApnsCredentialPropertiesThumbprint <SecureString>]: Gets or sets the APNS certificate Thumbprint
  [AppId <SecureString>]: Gets or sets the issuer (iss) registered claim key, whose value is         your 10-character Team ID, obtained from your developer account
  [AppName <SecureString>]: Gets or sets the name of the application
  [AppSecret <SecureString>]: Gets or sets app secret.
  [AuthTokenUrl <SecureString>]: Gets or sets the URL of the authorization token.
  [BaiduApiKey <SecureString>]: Gets or sets baidu Api Key.
  [BaiduEndPoint <SecureString>]: Gets or sets baidu Endpoint.
  [BaiduSecretKey <SecureString>]: Gets or sets baidu Secret Key
  [ClientEmail <SecureString>]: Gets or sets client email.
  [ClientId <SecureString>]: Gets or sets the client identifier.
  [ClientSecret <SecureString>]: Gets or sets the credential secret access key.
  [GcmEndpoint <SecureString>]: Gets or sets the GCM endpoint.
  [GoogleApiKey <SecureString>]: Gets or sets the Google API key.
  [KeyId <SecureString>]: Gets or sets a 10-character key identifier (kid) key, obtained from         your developer account
  [MpnsCertificate <SecureString>]: Gets or sets the MPNS certificate.
  [MpnsCredentialPropertiesCertificateKey <SecureString>]: Gets or sets the certificate key for this credential.
  [MpnsCredentialPropertiesThumbprint <SecureString>]: Gets or sets the MPNS certificate Thumbprint
  [PackageSid <SecureString>]: Gets or sets the package ID for this credential.
  [PrivateKey <SecureString>]: Gets or sets private key.
  [ProjectId <SecureString>]: Gets or sets project id.
  [SecretKey <SecureString>]: Gets or sets the secret key.
  [Subject <SecureString>]: Gets or sets web push subject.
  [Token <SecureString>]: Gets or sets provider Authentication Token, obtained through your         developer account
  [VapidPrivateKey <SecureString>]: Gets or sets VAPID private key.
  [VapidPublicKey <SecureString>]: Gets or sets VAPID public key.
  [WindowsLiveEndpoint <SecureString>]: Gets or sets the Windows Live endpoint.
  [WnsCertificate <SecureString>]: Gets or sets the WNS Certificate.
  [WnsCredentialPropertiesCertificateKey <SecureString>]: Ges or sets the WNS Certificate Key.
  [XiaomiCredentialPropertiesEndpoint <SecureString>]: Gets or sets xiaomi service endpoint.
.Link
https://learn.microsoft.com/powershell/module/az.notificationhubsrp/update-aznotificationhubsrpnamespace
#>
function Update-AzNotificationHubsRpNamespace {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Models.Api20231001Preview.INamespaceResource])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Alias('NamespaceName')]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Category('Path')]
    [System.String]
    # Namespace name
    ${Name},

    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    # The value must be an UUID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='UpdateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Models.INotificationHubsRpIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Category('Body')]
    [System.String]
    # Deprecated.
    ${DataCenter},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Support.NamespaceType])]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Support.NamespaceType]
    # Defines values for NamespaceType.
    ${NamespaceType},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Models.Api20231001Preview.IIPRule[]]
    # List of IP rules.
    # To construct, see NOTES section for NETWORKACLSIPRULE properties and create a hash table.
    ${NetworkAclsIPRule},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Models.Api20231001Preview.IPnsCredentials]
    # Collection of Notification Hub or Notification Hub Namespace PNS credentials.
    # To construct, see NOTES section for PNSCREDENTIALS properties and create a hash table.
    ${PnsCredentials},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Support.OperationProvisioningState])]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Support.OperationProvisioningState]
    # Defines values for OperationProvisioningState.
    ${ProvisioningState},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Support.PublicNetworkAccess])]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Support.PublicNetworkAccess]
    # Type of public network access.
    ${PublicNetworkAccess},

    [Parameter()]
    [AllowEmptyCollection()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Support.AccessRights])]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Support.AccessRights[]]
    # List of access rights.
    ${PublicNetworkRuleRights},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Support.ReplicationRegion])]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Support.ReplicationRegion]
    # Allowed replication region
    ${ReplicationRegion},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Category('Body')]
    [System.String]
    # Gets or sets scaleUnit where the namespace gets created
    ${ScaleUnit},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Category('Body')]
    [System.Int32]
    # Gets or sets the capacity of the resource
    ${SkuCapacity},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Category('Body')]
    [System.String]
    # Gets or sets the Sku Family
    ${SkuFamily},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Support.SkuName])]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Support.SkuName]
    # Namespace SKU name.
    ${SkuName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Category('Body')]
    [System.String]
    # Gets or sets the Sku size
    ${SkuSize},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Category('Body')]
    [System.String]
    # Gets or sets the tier of particular sku
    ${SkuTier},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Support.NamespaceStatus])]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Support.NamespaceStatus]
    # Namespace status.
    ${Status},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Models.Api20231001Preview.INamespacePatchParametersTags]))]
    [System.Collections.Hashtable]
    # Dictionary of <string>
    ${Tag},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Support.ZoneRedundancyPreference])]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Support.ZoneRedundancyPreference]
    # Namespace SKU name.
    ${ZoneRedundancy},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            UpdateExpanded = 'Az.NotificationHubsRp.private\Update-AzNotificationHubsRpNamespace_UpdateExpanded';
            UpdateViaIdentityExpanded = 'Az.NotificationHubsRp.private\Update-AzNotificationHubsRpNamespace_UpdateViaIdentityExpanded';
        }
        if (('UpdateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $testPlayback = $false
            $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubsRp.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
