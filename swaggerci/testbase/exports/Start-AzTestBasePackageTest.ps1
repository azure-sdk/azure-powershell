
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Trigger a test run on the package.
.Description
Trigger a test run on the package.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20220401Preview.IPackageRunTestParameters
.Inputs
Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.ITestBaseIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <ITestBaseIdentity>: Identity Parameter
  [AnalysisResultName <AnalysisResultName?>]: The name of the Analysis Result of a Test Result.
  [AvailableOSResourceName <String>]: The resource name of an Available OS.
  [CustomerEventName <String>]: The resource name of the Test Base Customer event.
  [EmailEventResourceName <String>]: The resource name of an email event.
  [FavoriteProcessResourceName <String>]: The resource name of a favorite process in a package. If the process name contains characters that are not allowed in Azure Resource Name, we use 'actualProcessName' in request body to submit the name.
  [FlightingRingResourceName <String>]: The resource name of a flighting ring.
  [Id <String>]: Resource identity path
  [OSUpdateResourceName <String>]: The resource name of an OS Update.
  [PackageName <String>]: The resource name of the Test Base Package.
  [ResourceGroupName <String>]: The name of the resource group that contains the resource.
  [SubscriptionId <String>]: The Azure subscription ID. This is a GUID-formatted string.
  [TestBaseAccountName <String>]: The resource name of the Test Base Account.
  [TestResultName <String>]: The Test Result Name. It equals to TestResult-{TestResultId} string.
  [TestSummaryName <String>]: The name of the Test Summary.
  [TestTypeResourceName <String>]: The resource name of a test type.

PARAMETER <IPackageRunTestParameters>: The parameters supplied to the Test Base Package to start a Test Run.
  OSName <String>: The operating system name. e.g. Windows 10 1809.
  TestType <TestType>: The type of the test.
  [FlightingRing <String>]: The flighting ring, only for release of feature updates.
  [OSUpdateType <OSUpdateType?>]: Specifies the OS update type to test against.
  [ReleaseName <String>]: The name of the tested release (OS update).
.Link
https://docs.microsoft.com/en-us/powershell/module/az.testbase/start-aztestbasepackagetest
#>
function Start-AzTestBasePackageTest {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='RunExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Run', Mandatory)]
    [Parameter(ParameterSetName='RunExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Category('Path')]
    [System.String]
    # The resource name of the Test Base Package.
    ${PackageName},

    [Parameter(ParameterSetName='Run', Mandatory)]
    [Parameter(ParameterSetName='RunExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Category('Path')]
    [System.String]
    # The name of the resource group that contains the resource.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='Run')]
    [Parameter(ParameterSetName='RunExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The Azure subscription ID.
    # This is a GUID-formatted string.
    ${SubscriptionId},

    [Parameter(ParameterSetName='Run', Mandatory)]
    [Parameter(ParameterSetName='RunExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Category('Path')]
    [System.String]
    # The resource name of the Test Base Account.
    ${TestBaseAccountName},

    [Parameter(ParameterSetName='RunViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='RunViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.ITestBaseIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Run', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='RunViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20220401Preview.IPackageRunTestParameters]
    # The parameters supplied to the Test Base Package to start a Test Run.
    # To construct, see NOTES section for PARAMETER properties and create a hash table.
    ${Parameter},

    [Parameter(ParameterSetName='RunExpanded', Mandatory)]
    [Parameter(ParameterSetName='RunViaIdentityExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Category('Body')]
    [System.String]
    # The operating system name.
    # e.g.
    # Windows 10 1809.
    ${OSName},

    [Parameter(ParameterSetName='RunExpanded', Mandatory)]
    [Parameter(ParameterSetName='RunViaIdentityExpanded', Mandatory)]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.TestBase.Support.TestType])]
    [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Support.TestType]
    # The type of the test.
    ${TestType},

    [Parameter(ParameterSetName='RunExpanded')]
    [Parameter(ParameterSetName='RunViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Category('Body')]
    [System.String]
    # The flighting ring, only for release of feature updates.
    ${FlightingRing},

    [Parameter(ParameterSetName='RunExpanded')]
    [Parameter(ParameterSetName='RunViaIdentityExpanded')]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.TestBase.Support.OSUpdateType])]
    [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Support.OSUpdateType]
    # Specifies the OS update type to test against.
    ${OSUpdateType},

    [Parameter(ParameterSetName='RunExpanded')]
    [Parameter(ParameterSetName='RunViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Category('Body')]
    [System.String]
    # The name of the tested release (OS update).
    ${ReleaseName},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.TestBase.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Run = 'Az.TestBase.private\Start-AzTestBasePackageTest_Run';
            RunExpanded = 'Az.TestBase.private\Start-AzTestBasePackageTest_RunExpanded';
            RunViaIdentity = 'Az.TestBase.private\Start-AzTestBasePackageTest_RunViaIdentity';
            RunViaIdentityExpanded = 'Az.TestBase.private\Start-AzTestBasePackageTest_RunViaIdentityExpanded';
        }
        if (('Run', 'RunExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.TestBase.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
