// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20220401Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Extensions;

    public partial class BillingHubExecutionUsageDetail
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json serialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name= "returnNow" />
        /// output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject into a new instance of <see cref="BillingHubExecutionUsageDetail" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal BillingHubExecutionUsageDetail(Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_applicationName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString>("applicationName"), out var __jsonApplicationName) ? (string)__jsonApplicationName : (string)ApplicationName;}
            {_applicationVersion = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString>("applicationVersion"), out var __jsonApplicationVersion) ? (string)__jsonApplicationVersion : (string)ApplicationVersion;}
            {_executionRequestId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString>("executionRequestId"), out var __jsonExecutionRequestId) ? (string)__jsonExecutionRequestId : (string)ExecutionRequestId;}
            {_sku = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString>("sku"), out var __jsonSku) ? (string)__jsonSku : (string)Sku;}
            {_meterId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString>("meterId"), out var __jsonMeterId) ? (string)__jsonMeterId : (string)MeterId;}
            {_startTimeStamp = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString>("startTimeStamp"), out var __jsonStartTimeStamp) ? global::System.DateTime.TryParse((string)__jsonStartTimeStamp, global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.AdjustToUniversal, out var __jsonStartTimeStampValue) ? __jsonStartTimeStampValue : StartTimeStamp : StartTimeStamp;}
            {_endTimeStamp = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString>("endTimeStamp"), out var __jsonEndTimeStamp) ? global::System.DateTime.TryParse((string)__jsonEndTimeStamp, global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.AdjustToUniversal, out var __jsonEndTimeStampValue) ? __jsonEndTimeStampValue : EndTimeStamp : EndTimeStamp;}
            {_oSBuild = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString>("osBuild"), out var __jsonOSBuild) ? (string)__jsonOSBuild : (string)OSBuild;}
            {_release = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString>("release"), out var __jsonRelease) ? (string)__jsonRelease : (string)Release;}
            {_testType = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString>("testType"), out var __jsonTestType) ? (string)__jsonTestType : (string)TestType;}
            {_updateType = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString>("updateType"), out var __jsonUpdateType) ? (string)__jsonUpdateType : (string)UpdateType;}
            {_usedFreeHour = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNumber>("usedFreeHours"), out var __jsonUsedFreeHours) ? (double?)__jsonUsedFreeHours : UsedFreeHour;}
            {_usedBillableHour = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNumber>("usedBillableHours"), out var __jsonUsedBillableHours) ? (double?)__jsonUsedBillableHours : UsedBillableHour;}
            {_billedCharge = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNumber>("billedCharges"), out var __jsonBilledCharges) ? (double?)__jsonBilledCharges : BilledCharge;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20220401Preview.IBillingHubExecutionUsageDetail.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20220401Preview.IBillingHubExecutionUsageDetail.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20220401Preview.IBillingHubExecutionUsageDetail FromJson(Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode node)
        {
            return node is Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject json ? new BillingHubExecutionUsageDetail(json) : null;
        }

        /// <summary>
        /// Serializes this instance of <see cref="BillingHubExecutionUsageDetail" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="BillingHubExecutionUsageDetail" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode" />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            AddIf( null != (((object)this._applicationName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString(this._applicationName.ToString()) : null, "applicationName" ,container.Add );
            AddIf( null != (((object)this._applicationVersion)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString(this._applicationVersion.ToString()) : null, "applicationVersion" ,container.Add );
            AddIf( null != (((object)this._executionRequestId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString(this._executionRequestId.ToString()) : null, "executionRequestId" ,container.Add );
            AddIf( null != (((object)this._sku)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString(this._sku.ToString()) : null, "sku" ,container.Add );
            AddIf( null != (((object)this._meterId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString(this._meterId.ToString()) : null, "meterId" ,container.Add );
            AddIf( null != this._startTimeStamp ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString(this._startTimeStamp?.ToString(@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK",global::System.Globalization.CultureInfo.InvariantCulture)) : null, "startTimeStamp" ,container.Add );
            AddIf( null != this._endTimeStamp ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString(this._endTimeStamp?.ToString(@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK",global::System.Globalization.CultureInfo.InvariantCulture)) : null, "endTimeStamp" ,container.Add );
            AddIf( null != (((object)this._oSBuild)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString(this._oSBuild.ToString()) : null, "osBuild" ,container.Add );
            AddIf( null != (((object)this._release)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString(this._release.ToString()) : null, "release" ,container.Add );
            AddIf( null != (((object)this._testType)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString(this._testType.ToString()) : null, "testType" ,container.Add );
            AddIf( null != (((object)this._updateType)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonString(this._updateType.ToString()) : null, "updateType" ,container.Add );
            AddIf( null != this._usedFreeHour ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNumber((double)this._usedFreeHour) : null, "usedFreeHours" ,container.Add );
            AddIf( null != this._usedBillableHour ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNumber((double)this._usedBillableHour) : null, "usedBillableHours" ,container.Add );
            AddIf( null != this._billedCharge ? (Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Json.JsonNumber((double)this._billedCharge) : null, "billedCharges" ,container.Add );
            AfterToJson(ref container);
            return container;
        }
    }
}