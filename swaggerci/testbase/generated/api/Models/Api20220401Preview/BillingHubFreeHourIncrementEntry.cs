// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20220401Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Extensions;

    public partial class BillingHubFreeHourIncrementEntry :
        Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20220401Preview.IBillingHubFreeHourIncrementEntry,
        Microsoft.Azure.PowerShell.Cmdlets.TestBase.Models.Api20220401Preview.IBillingHubFreeHourIncrementEntryInternal
    {

        /// <summary>Backing field for <see cref="CreateTimeStamp" /> property.</summary>
        private global::System.DateTime? _createTimeStamp;

        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Origin(Microsoft.Azure.PowerShell.Cmdlets.TestBase.PropertyOrigin.Owned)]
        public global::System.DateTime? CreateTimeStamp { get => this._createTimeStamp; set => this._createTimeStamp = value; }

        /// <summary>Backing field for <see cref="ExpirationTimeStamp" /> property.</summary>
        private global::System.DateTime? _expirationTimeStamp;

        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Origin(Microsoft.Azure.PowerShell.Cmdlets.TestBase.PropertyOrigin.Owned)]
        public global::System.DateTime? ExpirationTimeStamp { get => this._expirationTimeStamp; set => this._expirationTimeStamp = value; }

        /// <summary>Backing field for <see cref="IncrementalFreeHour" /> property.</summary>
        private double? _incrementalFreeHour;

        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Origin(Microsoft.Azure.PowerShell.Cmdlets.TestBase.PropertyOrigin.Owned)]
        public double? IncrementalFreeHour { get => this._incrementalFreeHour; set => this._incrementalFreeHour = value; }

        /// <summary>Backing field for <see cref="RemainingFreeHour" /> property.</summary>
        private double? _remainingFreeHour;

        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Origin(Microsoft.Azure.PowerShell.Cmdlets.TestBase.PropertyOrigin.Owned)]
        public double? RemainingFreeHour { get => this._remainingFreeHour; set => this._remainingFreeHour = value; }

        /// <summary>Creates an new <see cref="BillingHubFreeHourIncrementEntry" /> instance.</summary>
        public BillingHubFreeHourIncrementEntry()
        {

        }
    }
    public partial interface IBillingHubFreeHourIncrementEntry :
        Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.IJsonSerializable
    {
        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"createTimeStamp",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? CreateTimeStamp { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"expirationTimeStamp",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ExpirationTimeStamp { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"incrementalFreeHours",
        PossibleTypes = new [] { typeof(double) })]
        double? IncrementalFreeHour { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.TestBase.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"remainingFreeHours",
        PossibleTypes = new [] { typeof(double) })]
        double? RemainingFreeHour { get; set; }

    }
    internal partial interface IBillingHubFreeHourIncrementEntryInternal

    {
        global::System.DateTime? CreateTimeStamp { get; set; }

        global::System.DateTime? ExpirationTimeStamp { get; set; }

        double? IncrementalFreeHour { get; set; }

        double? RemainingFreeHour { get; set; }

    }
}