
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create or update an Application
.Description
Create or update an Application
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Chaos.Models.Api20230131Preview.IApplication
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

FAULTMETADATA <IMetadata[]>: List of fault metadata of an application resource
  [ContainingFunctionSignatureArchiveCulture <String>]: culture of an archive
  [ContainingFunctionSignatureArchiveName <String>]: name of an archive which defines the function
  [ContainingFunctionSignatureArchivePublicKeyToken <String>]: public key token of an archive
  [ContainingFunctionSignatureArchiveType <String>]: defines the type of an archive
  [ContainingFunctionSignatureArchiveVersion <String>]: version of an archive
  [ContainingFunctionSignatureArgument <IFunctionArguments[]>]: List of arguments of a function
    [Name <String>]: Name of a function argument
    [Type <String>]: Type of a function argument
  [ContainingFunctionSignatureFunctionNamespace <String>]: Namespace in which the function is defined
  [ContainingFunctionSignatureGenericCount <Int32?>]: Number of types defined in a generic
  [ContainingFunctionSignatureGenericType <String[]>]: Types defined if Class is a generic class
  [ContainingFunctionSignatureName <String>]: Name of a function
  [ContainingFunctionSignatureType <String>]: ClassName in which the function is defined
  [FaultableFunctionCategory <String>]: SDK or Custom library in which fault is injected
  [FaultableFunctionFaultCapability <IFaultCapabilityProperties[]>]: faults supported by torch for the function
    [FaultUrn <String>]: URN for fault capability
    [Parameter <IFaultParameter[]>]: Input Parameters supported by a fault
      [Name <String>]: name of a fault parameter
  [FaultableFunctionSignatureArchiveCulture <String>]: culture of an archive
  [FaultableFunctionSignatureArchiveName <String>]: name of an archive which defines the function
  [FaultableFunctionSignatureArchivePublicKeyToken <String>]: public key token of an archive
  [FaultableFunctionSignatureArchiveType <String>]: defines the type of an archive
  [FaultableFunctionSignatureArchiveVersion <String>]: version of an archive
  [FaultableFunctionSignatureArgument <IFunctionArguments[]>]: List of arguments of a function
  [FaultableFunctionSignatureFunctionNamespace <String>]: Namespace in which the function is defined
  [FaultableFunctionSignatureGenericCount <Int32?>]: Number of types defined in a generic
  [FaultableFunctionSignatureGenericType <String[]>]: Types defined if Class is a generic class
  [FaultableFunctionSignatureName <String>]: Name of a function
  [FaultableFunctionSignatureType <String>]: ClassName in which the function is defined
  [SourceCodePath <String>]: code path where function is defined
  [SourceEndColumn <Int32?>]: column in the code where function ends
  [SourceEndLine <Int32?>]: line in the code where function ends
  [SourceStartColumn <Int32?>]: column in the code where function starts
  [SourceStartLine <Int32?>]: line in the code where function starts

IDENTITY <IUserAssignedManagedIdentityProperties[]>: list of User assigned managed identities used by application
  ClientId <String>: client id of the managed identity
  TenantId <String>: active directory tenant id in which managed identity is provisioned
  Type <String>: type of managed identity i.e AzureManagedIdentity
.Link
https://learn.microsoft.com/powershell/module/az.chaos/new-azchaosapplication
#>
function New-AzChaosApplication {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Chaos.Models.Api20230131Preview.IApplication])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Alias('ApplicationName')]
    [Microsoft.Azure.PowerShell.Cmdlets.Chaos.Category('Path')]
    [System.String]
    # name of an application resource
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Chaos.Category('Path')]
    [System.String]
    # String that represents an Azure resource group.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Chaos.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Chaos.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # GUID that represents an Azure subscription ID.
    ${SubscriptionId},

    [Parameter(Mandatory)]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Chaos.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Chaos.Models.Api20230131Preview.IUserAssignedManagedIdentityProperties[]]
    # list of User assigned managed identities used by application
    # To construct, see NOTES section for IDENTITY properties and create a hash table.
    ${Identity},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Chaos.Category('Body')]
    [System.String]
    # The geo-location where the resource lives
    ${Location},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Chaos.Category('Body')]
    [System.String]
    # ARM id of the platform resource on which application is deployed
    ${DeployedPlatformResourceId},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Chaos.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Chaos.Models.Api20230131Preview.IMetadata[]]
    # List of fault metadata of an application resource
    # To construct, see NOTES section for FAULTMETADATA properties and create a hash table.
    ${FaultMetadata},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Chaos.Category('Body')]
    [System.String]
    # Chaos Studio profile id of an application resource.
    ${ProfileId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Chaos.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Chaos.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.Chaos.Models.Api20.ITrackedResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Chaos.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Chaos.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Chaos.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Chaos.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Chaos.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Chaos.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Chaos.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Chaos.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Chaos.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Chaos.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.Chaos.private\New-AzChaosApplication_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Chaos.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Chaos.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
