
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Search for relevant Azure Diagnostics, Solutions and Troubleshooters using a natural language issue summary.
.Description
Search for relevant Azure Diagnostics, Solutions and Troubleshooters using a natural language issue summary.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.HelpRp.Models.Api20240301Preview.IDiscoveryNlpRequest
.Inputs
Microsoft.Azure.PowerShell.Cmdlets.HelpRp.Models.IHelpRpIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.HelpRp.Models.Api20240301Preview.ISolutionNlpMetadataResource
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

DISCOVERSOLUTIONREQUEST <IDiscoveryNlpRequest>: Discover NLP request.
  IssueSummary <String>: Natural language description of the issue.
  [AdditionalContext <String>]: Additional information in the form of a string.
  [ResourceId <String>]: ARM resource Id of the resource that is having the issue. Only applicable for Discovery Solution NLP Subscription Scope.
  [ServiceId <String>]: ARM service Id of the service that is having the issue. For more information on service Id see https://learn.microsoft.com/rest/api/support/services/list?tabs=HTTP.

INPUTOBJECT <IHelpRpIdentity>: Identity Parameter
  [DiagnosticsResourceName <String>]: Unique resource name for insight resources
  [Id <String>]: Resource identity path
  [Scope <String>]: The fully qualified Azure Resource manager identifier of the resource.
  [SimplifiedSolutionsResourceName <String>]: Simplified Solutions Resource Name.
  [SolutionId <String>]: SolutionId is a unique id to identify a solution. You can retrieve the solution id using the Discovery api - https://learn.microsoft.com/en-us/rest/api/help/discovery-solution/list?view=rest-help-2023-09-01-preview&tabs=HTTP
  [SolutionResourceName <String>]: Solution resource Name.
  [SubscriptionId <String>]: The ID of the target subscription. The value must be an UUID.
  [TroubleshooterName <String>]: Troubleshooter resource Name.
.Link
https://learn.microsoft.com/powershell/module/az.helprp/find-azhelprpdiscoverysolutionnlpsolution
#>
function Find-AzHelpRpDiscoverySolutionNlpSolution {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.HelpRp.Models.Api20240301Preview.ISolutionNlpMetadataResource])]
[CmdletBinding(DefaultParameterSetName='DiscoverExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Discover1')]
    [Parameter(ParameterSetName='DiscoverExpanded1')]
    [Microsoft.Azure.PowerShell.Cmdlets.HelpRp.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.HelpRp.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    # The value must be an UUID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='DiscoverViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='DiscoverViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.HelpRp.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.HelpRp.Models.IHelpRpIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Discover', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='Discover1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='DiscoverViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.HelpRp.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.HelpRp.Models.Api20240301Preview.IDiscoveryNlpRequest]
    # Discover NLP request.
    # To construct, see NOTES section for DISCOVERSOLUTIONREQUEST properties and create a hash table.
    ${DiscoverSolutionRequest},

    [Parameter(ParameterSetName='DiscoverExpanded', Mandatory)]
    [Parameter(ParameterSetName='DiscoverExpanded1', Mandatory)]
    [Parameter(ParameterSetName='DiscoverViaIdentityExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.HelpRp.Category('Body')]
    [System.String]
    # Natural language description of the issue.
    ${IssueSummary},

    [Parameter(ParameterSetName='DiscoverExpanded')]
    [Parameter(ParameterSetName='DiscoverExpanded1')]
    [Parameter(ParameterSetName='DiscoverViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HelpRp.Category('Body')]
    [System.String]
    # Additional information in the form of a string.
    ${AdditionalContext},

    [Parameter(ParameterSetName='DiscoverExpanded')]
    [Parameter(ParameterSetName='DiscoverExpanded1')]
    [Parameter(ParameterSetName='DiscoverViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HelpRp.Category('Body')]
    [System.String]
    # ARM resource Id of the resource that is having the issue.
    # Only applicable for Discovery Solution NLP Subscription Scope.
    ${ResourceId},

    [Parameter(ParameterSetName='DiscoverExpanded')]
    [Parameter(ParameterSetName='DiscoverExpanded1')]
    [Parameter(ParameterSetName='DiscoverViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.HelpRp.Category('Body')]
    [System.String]
    # ARM service Id of the service that is having the issue.
    # For more information on service Id see https://learn.microsoft.com/rest/api/support/services/listtabs=HTTP.
    ${ServiceId},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.HelpRp.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.HelpRp.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.HelpRp.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.HelpRp.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.HelpRp.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.HelpRp.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.HelpRp.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.HelpRp.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.HelpRp.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.HelpRp.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Discover = 'Az.HelpRp.private\Find-AzHelpRpDiscoverySolutionNlpSolution_Discover';
            Discover1 = 'Az.HelpRp.private\Find-AzHelpRpDiscoverySolutionNlpSolution_Discover1';
            DiscoverExpanded = 'Az.HelpRp.private\Find-AzHelpRpDiscoverySolutionNlpSolution_DiscoverExpanded';
            DiscoverExpanded1 = 'Az.HelpRp.private\Find-AzHelpRpDiscoverySolutionNlpSolution_DiscoverExpanded1';
            DiscoverViaIdentity = 'Az.HelpRp.private\Find-AzHelpRpDiscoverySolutionNlpSolution_DiscoverViaIdentity';
            DiscoverViaIdentityExpanded = 'Az.HelpRp.private\Find-AzHelpRpDiscoverySolutionNlpSolution_DiscoverViaIdentityExpanded';
        }
        if (('Discover1', 'DiscoverExpanded1') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $testPlayback = $false
            $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.HelpRp.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.HelpRp.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.HelpRp.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.HelpRp.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.HelpRp.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
