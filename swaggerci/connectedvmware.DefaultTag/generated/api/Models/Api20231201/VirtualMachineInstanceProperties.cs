// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Extensions;

    /// <summary>Describes the properties of a Virtual Machine Instance.</summary>
    public partial class VirtualMachineInstanceProperties :
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualMachineInstanceProperties,
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualMachineInstancePropertiesInternal
    {

        /// <summary>Backing field for <see cref="HardwareProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IHardwareProfile _hardwareProfile;

        /// <summary>Hardware properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IHardwareProfile HardwareProfile { get => (this._hardwareProfile = this._hardwareProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.HardwareProfile()); set => this._hardwareProfile = value; }

        /// <summary>
        /// Gets or sets a value indicating whether virtual processors can be added while this virtual machine is running.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public bool? HardwareProfileCpuHotAddEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IHardwareProfileInternal)HardwareProfile).CpuHotAddEnabled; }

        /// <summary>
        /// Gets or sets a value indicating whether virtual processors can be removed while this virtual machine is running.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public bool? HardwareProfileCpuHotRemoveEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IHardwareProfileInternal)HardwareProfile).CpuHotRemoveEnabled; }

        /// <summary>
        /// Gets or sets a value indicating whether memory can be added while this virtual machine is running.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public bool? HardwareProfileMemoryHotAddEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IHardwareProfileInternal)HardwareProfile).MemoryHotAddEnabled; }

        /// <summary>Gets or sets memory size in MBs for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public int? HardwareProfileMemorySizeMb { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IHardwareProfileInternal)HardwareProfile).MemorySizeMb; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IHardwareProfileInternal)HardwareProfile).MemorySizeMb = value ?? default(int); }

        /// <summary>
        /// Gets or sets the number of cores per socket for the vm. Defaults to 1 if unspecified.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public int? HardwareProfileNumCoresPerSocket { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IHardwareProfileInternal)HardwareProfile).NumCoresPerSocket; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IHardwareProfileInternal)HardwareProfile).NumCoresPerSocket = value ?? default(int); }

        /// <summary>Gets or sets the number of vCPUs for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public int? HardwareProfileNumCpUs { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IHardwareProfileInternal)HardwareProfile).NumCpUs; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IHardwareProfileInternal)HardwareProfile).NumCpUs = value ?? default(int); }

        /// <summary>Backing field for <see cref="InfrastructureProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IInfrastructureProfile _infrastructureProfile;

        /// <summary>Gets the infrastructure profile.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IInfrastructureProfile InfrastructureProfile { get => (this._infrastructureProfile = this._infrastructureProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.InfrastructureProfile()); set => this._infrastructureProfile = value; }

        /// <summary>Gets the name of the corresponding resource in Kubernetes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string InfrastructureProfileCustomResourceName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IInfrastructureProfileInternal)InfrastructureProfile).CustomResourceName; }

        /// <summary>Firmware type</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.FirmwareType? InfrastructureProfileFirmwareType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IInfrastructureProfileInternal)InfrastructureProfile).FirmwareType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IInfrastructureProfileInternal)InfrastructureProfile).FirmwareType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.FirmwareType)""); }

        /// <summary>Gets or sets the folder path of the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string InfrastructureProfileFolderPath { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IInfrastructureProfileInternal)InfrastructureProfile).FolderPath; }

        /// <summary>Gets or sets the instance uuid of the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string InfrastructureProfileInstanceUuid { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IInfrastructureProfileInternal)InfrastructureProfile).InstanceUuid; }

        /// <summary>Gets or sets the inventory Item ID for the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string InfrastructureProfileInventoryItemId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IInfrastructureProfileInternal)InfrastructureProfile).InventoryItemId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IInfrastructureProfileInternal)InfrastructureProfile).InventoryItemId = value ?? null; }

        /// <summary>Gets or sets the vCenter Managed Object name for the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string InfrastructureProfileMoName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IInfrastructureProfileInternal)InfrastructureProfile).MoName; }

        /// <summary>
        /// Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual machine.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string InfrastructureProfileMoRefId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IInfrastructureProfileInternal)InfrastructureProfile).MoRefId; }

        /// <summary>Gets or sets the SMBIOS UUID of the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string InfrastructureProfileSmbiosUuid { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IInfrastructureProfileInternal)InfrastructureProfile).SmbiosUuid; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IInfrastructureProfileInternal)InfrastructureProfile).SmbiosUuid = value ?? null; }

        /// <summary>Gets or sets the ARM Id of the template resource to deploy the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string InfrastructureProfileTemplateId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IInfrastructureProfileInternal)InfrastructureProfile).TemplateId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IInfrastructureProfileInternal)InfrastructureProfile).TemplateId = value ?? null; }

        /// <summary>
        /// Gets or sets the ARM Id of the vCenter resource in which this resource pool resides.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string InfrastructureProfileVCenterId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IInfrastructureProfileInternal)InfrastructureProfile).VCenterId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IInfrastructureProfileInternal)InfrastructureProfile).VCenterId = value ?? null; }

        /// <summary>Internal Acessors for HardwareProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IHardwareProfile Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualMachineInstancePropertiesInternal.HardwareProfile { get => (this._hardwareProfile = this._hardwareProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.HardwareProfile()); set { {_hardwareProfile = value;} } }

        /// <summary>Internal Acessors for HardwareProfileCpuHotAddEnabled</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualMachineInstancePropertiesInternal.HardwareProfileCpuHotAddEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IHardwareProfileInternal)HardwareProfile).CpuHotAddEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IHardwareProfileInternal)HardwareProfile).CpuHotAddEnabled = value; }

        /// <summary>Internal Acessors for HardwareProfileCpuHotRemoveEnabled</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualMachineInstancePropertiesInternal.HardwareProfileCpuHotRemoveEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IHardwareProfileInternal)HardwareProfile).CpuHotRemoveEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IHardwareProfileInternal)HardwareProfile).CpuHotRemoveEnabled = value; }

        /// <summary>Internal Acessors for HardwareProfileMemoryHotAddEnabled</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualMachineInstancePropertiesInternal.HardwareProfileMemoryHotAddEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IHardwareProfileInternal)HardwareProfile).MemoryHotAddEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IHardwareProfileInternal)HardwareProfile).MemoryHotAddEnabled = value; }

        /// <summary>Internal Acessors for InfrastructureProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IInfrastructureProfile Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualMachineInstancePropertiesInternal.InfrastructureProfile { get => (this._infrastructureProfile = this._infrastructureProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.InfrastructureProfile()); set { {_infrastructureProfile = value;} } }

        /// <summary>Internal Acessors for InfrastructureProfileCustomResourceName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualMachineInstancePropertiesInternal.InfrastructureProfileCustomResourceName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IInfrastructureProfileInternal)InfrastructureProfile).CustomResourceName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IInfrastructureProfileInternal)InfrastructureProfile).CustomResourceName = value; }

        /// <summary>Internal Acessors for InfrastructureProfileFolderPath</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualMachineInstancePropertiesInternal.InfrastructureProfileFolderPath { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IInfrastructureProfileInternal)InfrastructureProfile).FolderPath; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IInfrastructureProfileInternal)InfrastructureProfile).FolderPath = value; }

        /// <summary>Internal Acessors for InfrastructureProfileInstanceUuid</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualMachineInstancePropertiesInternal.InfrastructureProfileInstanceUuid { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IInfrastructureProfileInternal)InfrastructureProfile).InstanceUuid; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IInfrastructureProfileInternal)InfrastructureProfile).InstanceUuid = value; }

        /// <summary>Internal Acessors for InfrastructureProfileMoName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualMachineInstancePropertiesInternal.InfrastructureProfileMoName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IInfrastructureProfileInternal)InfrastructureProfile).MoName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IInfrastructureProfileInternal)InfrastructureProfile).MoName = value; }

        /// <summary>Internal Acessors for InfrastructureProfileMoRefId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualMachineInstancePropertiesInternal.InfrastructureProfileMoRefId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IInfrastructureProfileInternal)InfrastructureProfile).MoRefId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IInfrastructureProfileInternal)InfrastructureProfile).MoRefId = value; }

        /// <summary>Internal Acessors for NetworkProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.INetworkProfile Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualMachineInstancePropertiesInternal.NetworkProfile { get => (this._networkProfile = this._networkProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.NetworkProfile()); set { {_networkProfile = value;} } }

        /// <summary>Internal Acessors for OSProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstance Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualMachineInstancePropertiesInternal.OSProfile { get => (this._oSProfile = this._oSProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.OSProfileForVminstance()); set { {_oSProfile = value;} } }

        /// <summary>Internal Acessors for OSProfileOssku</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualMachineInstancePropertiesInternal.OSProfileOssku { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).OSSku; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).OSSku = value; }

        /// <summary>Internal Acessors for OSProfileToolsRunningStatus</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualMachineInstancePropertiesInternal.OSProfileToolsRunningStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).ToolsRunningStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).ToolsRunningStatus = value; }

        /// <summary>Internal Acessors for OSProfileToolsVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualMachineInstancePropertiesInternal.OSProfileToolsVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).ToolsVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).ToolsVersion = value; }

        /// <summary>Internal Acessors for OSProfileToolsVersionStatus</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualMachineInstancePropertiesInternal.OSProfileToolsVersionStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).ToolsVersionStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).ToolsVersionStatus = value; }

        /// <summary>Internal Acessors for OSProfileWindowsConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IWindowsConfiguration Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualMachineInstancePropertiesInternal.OSProfileWindowsConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).WindowsConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).WindowsConfiguration = value; }

        /// <summary>Internal Acessors for PlacementProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IPlacementProfile Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualMachineInstancePropertiesInternal.PlacementProfile { get => (this._placementProfile = this._placementProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.PlacementProfile()); set { {_placementProfile = value;} } }

        /// <summary>Internal Acessors for PowerState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualMachineInstancePropertiesInternal.PowerState { get => this._powerState; set { {_powerState = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.ProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualMachineInstancePropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Internal Acessors for ResourceUid</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualMachineInstancePropertiesInternal.ResourceUid { get => this._resourceUid; set { {_resourceUid = value;} } }

        /// <summary>Internal Acessors for SecurityProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.ISecurityProfile Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualMachineInstancePropertiesInternal.SecurityProfile { get => (this._securityProfile = this._securityProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.SecurityProfile()); set { {_securityProfile = value;} } }

        /// <summary>Internal Acessors for SecurityProfileUefiSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IUefiSettings Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualMachineInstancePropertiesInternal.SecurityProfileUefiSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.ISecurityProfileInternal)SecurityProfile).UefiSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.ISecurityProfileInternal)SecurityProfile).UefiSetting = value; }

        /// <summary>Internal Acessors for Statuses</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IResourceStatus[] Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualMachineInstancePropertiesInternal.Statuses { get => this._statuses; set { {_statuses = value;} } }

        /// <summary>Internal Acessors for StorageProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IStorageProfile Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualMachineInstancePropertiesInternal.StorageProfile { get => (this._storageProfile = this._storageProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.StorageProfile()); set { {_storageProfile = value;} } }

        /// <summary>Internal Acessors for StorageProfileScsiController</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualScsiController[] Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualMachineInstancePropertiesInternal.StorageProfileScsiController { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IStorageProfileInternal)StorageProfile).ScsiController; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IStorageProfileInternal)StorageProfile).ScsiController = value; }

        /// <summary>Backing field for <see cref="NetworkProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.INetworkProfile _networkProfile;

        /// <summary>Network properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.INetworkProfile NetworkProfile { get => (this._networkProfile = this._networkProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.NetworkProfile()); set => this._networkProfile = value; }

        /// <summary>
        /// Gets or sets the list of network interfaces associated with the virtual machine.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.INetworkInterface[] NetworkProfileNetworkInterface { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.INetworkProfileInternal)NetworkProfile).NetworkInterface; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.INetworkProfileInternal)NetworkProfile).NetworkInterface = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="OSProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstance _oSProfile;

        /// <summary>OS properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstance OSProfile { get => (this._oSProfile = this._oSProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.OSProfileForVminstance()); set => this._oSProfile = value; }

        /// <summary>Sets administrator password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string OSProfileAdminPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).AdminPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).AdminPassword = value ?? null; }

        /// <summary>Gets or sets administrator username.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string OSProfileAdminUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).AdminUsername; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).AdminUsername = value ?? null; }

        /// <summary>Gets or sets computer name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string OSProfileComputerName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).ComputerName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).ComputerName = value ?? null; }

        /// <summary>Gets or sets the guestId.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string OSProfileGuestId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).GuestId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).GuestId = value ?? null; }

        /// <summary>Gets or sets os sku.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string OSProfileOssku { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).OSSku; }

        /// <summary>Gets or sets the type of the os.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.OSType? OSProfileOstype { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).OSType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).OSType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.OSType)""); }

        /// <summary>
        /// Gets or sets the current running status of VMware Tools running in the guest operating system.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string OSProfileToolsRunningStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).ToolsRunningStatus; }

        /// <summary>Gets or sets the current version of VMware Tools.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string OSProfileToolsVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).ToolsVersion; }

        /// <summary>
        /// Gets or sets the current version status of VMware Tools installed in the guest operating system.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string OSProfileToolsVersionStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).ToolsVersionStatus; }

        /// <summary>Backing field for <see cref="PlacementProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IPlacementProfile _placementProfile;

        /// <summary>Placement properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IPlacementProfile PlacementProfile { get => (this._placementProfile = this._placementProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.PlacementProfile()); set => this._placementProfile = value; }

        /// <summary>
        /// Gets or sets the ARM Id of the cluster resource on which this virtual machine will deploy.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string PlacementProfileClusterId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IPlacementProfileInternal)PlacementProfile).ClusterId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IPlacementProfileInternal)PlacementProfile).ClusterId = value ?? null; }

        /// <summary>
        /// Gets or sets the ARM Id of the datastore resource on which the data for the virtual machine will be kept.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string PlacementProfileDatastoreId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IPlacementProfileInternal)PlacementProfile).DatastoreId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IPlacementProfileInternal)PlacementProfile).DatastoreId = value ?? null; }

        /// <summary>
        /// Gets or sets the ARM Id of the host resource on which this virtual machine will deploy.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string PlacementProfileHostId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IPlacementProfileInternal)PlacementProfile).HostId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IPlacementProfileInternal)PlacementProfile).HostId = value ?? null; }

        /// <summary>
        /// Gets or sets the ARM Id of the resourcePool resource on which this virtual machine will deploy.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string PlacementProfileResourcePoolId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IPlacementProfileInternal)PlacementProfile).ResourcePoolId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IPlacementProfileInternal)PlacementProfile).ResourcePoolId = value ?? null; }

        /// <summary>Backing field for <see cref="PowerState" /> property.</summary>
        private string _powerState;

        /// <summary>Gets the power state of the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        public string PowerState { get => this._powerState; }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.ProvisioningState? _provisioningState;

        /// <summary>Gets the provisioning state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.ProvisioningState? ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="ResourceUid" /> property.</summary>
        private string _resourceUid;

        /// <summary>Gets or sets a unique identifier for the vm resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        public string ResourceUid { get => this._resourceUid; }

        /// <summary>Backing field for <see cref="SecurityProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.ISecurityProfile _securityProfile;

        /// <summary>Gets the security profile.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.ISecurityProfile SecurityProfile { get => (this._securityProfile = this._securityProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.SecurityProfile()); set => this._securityProfile = value; }

        /// <summary>Backing field for <see cref="Statuses" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IResourceStatus[] _statuses;

        /// <summary>The resource status information.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IResourceStatus[] Statuses { get => this._statuses; }

        /// <summary>Backing field for <see cref="StorageProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IStorageProfile _storageProfile;

        /// <summary>Storage properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IStorageProfile StorageProfile { get => (this._storageProfile = this._storageProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.StorageProfile()); set => this._storageProfile = value; }

        /// <summary>Gets or sets the list of virtual disks associated with the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualDisk[] StorageProfileDisk { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IStorageProfileInternal)StorageProfile).Disk; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IStorageProfileInternal)StorageProfile).Disk = value ?? null /* arrayOf */; }

        /// <summary>
        /// Gets or sets the list of virtual SCSI controllers associated with the virtual machine.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualScsiController[] StorageProfileScsiController { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IStorageProfileInternal)StorageProfile).ScsiController; }

        /// <summary>Specifies whether secure boot should be enabled on the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public bool? UefiSettingSecureBootEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.ISecurityProfileInternal)SecurityProfile).UefiSettingSecureBootEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.ISecurityProfileInternal)SecurityProfile).UefiSettingSecureBootEnabled = value ?? default(bool); }

        /// <summary>Sets a value indicating whether auto logon is enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public bool? WindowConfigurationAutoLogon { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).WindowConfigurationAutoLogon; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).WindowConfigurationAutoLogon = value ?? default(bool); }

        /// <summary>Sets auto logon count.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public int? WindowConfigurationAutoLogonCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).WindowConfigurationAutoLogonCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).WindowConfigurationAutoLogonCount = value ?? default(int); }

        /// <summary>Sets domain name that vm should join.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string WindowConfigurationDomainName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).WindowConfigurationDomainName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).WindowConfigurationDomainName = value ?? null; }

        /// <summary>Sets domain user password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string WindowConfigurationDomainUserPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).WindowConfigurationDomainUserPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).WindowConfigurationDomainUserPassword = value ?? null; }

        /// <summary>Sets domain username.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string WindowConfigurationDomainUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).WindowConfigurationDomainUsername; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).WindowConfigurationDomainUsername = value ?? null; }

        /// <summary>Sets first logon commands</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string[] WindowConfigurationFirstLogonCommand { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).WindowConfigurationFirstLogonCommand; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).WindowConfigurationFirstLogonCommand = value ?? null /* arrayOf */; }

        /// <summary>Sets full name of the owner of the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string WindowConfigurationFullName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).WindowConfigurationFullName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).WindowConfigurationFullName = value ?? null; }

        /// <summary>Sets org name to which the owner of the vm belongs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string WindowConfigurationOrgName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).WindowConfigurationOrgName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).WindowConfigurationOrgName = value ?? null; }

        /// <summary>Sets product id of the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string WindowConfigurationProductId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).WindowConfigurationProductId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).WindowConfigurationProductId = value ?? null; }

        /// <summary>
        /// Specifies the time zone of the virtual machine. e.g. "Pacific Standard Time". Time zone name correspond to time zones
        /// listed at Microsoft Time Zone name values(https://learn.microsoft.com/en-us/previous-versions/windows/embedded/ms912391(v=winembedded.11)).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string WindowConfigurationTimeZone { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).WindowConfigurationTimeZone; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).WindowConfigurationTimeZone = value ?? null; }

        /// <summary>Sets work group name that vm should join.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.PropertyOrigin.Inlined)]
        public string WindowConfigurationWorkGroupName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).WindowConfigurationWorkGroupName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstanceInternal)OSProfile).WindowConfigurationWorkGroupName = value ?? null; }

        /// <summary>Creates an new <see cref="VirtualMachineInstanceProperties" /> instance.</summary>
        public VirtualMachineInstanceProperties()
        {

        }
    }
    /// Describes the properties of a Virtual Machine Instance.
    public partial interface IVirtualMachineInstanceProperties :
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Gets or sets a value indicating whether virtual processors can be added while this virtual machine is running.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets or sets a value indicating whether virtual processors can be added while this virtual machine is running.",
        SerializedName = @"cpuHotAddEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? HardwareProfileCpuHotAddEnabled { get;  }
        /// <summary>
        /// Gets or sets a value indicating whether virtual processors can be removed while this virtual machine is running.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets or sets a value indicating whether virtual processors can be removed while this virtual machine is running.",
        SerializedName = @"cpuHotRemoveEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? HardwareProfileCpuHotRemoveEnabled { get;  }
        /// <summary>
        /// Gets or sets a value indicating whether memory can be added while this virtual machine is running.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets or sets a value indicating whether memory can be added while this virtual machine is running.",
        SerializedName = @"memoryHotAddEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? HardwareProfileMemoryHotAddEnabled { get;  }
        /// <summary>Gets or sets memory size in MBs for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets memory size in MBs for the vm.",
        SerializedName = @"memorySizeMB",
        PossibleTypes = new [] { typeof(int) })]
        int? HardwareProfileMemorySizeMb { get; set; }
        /// <summary>
        /// Gets or sets the number of cores per socket for the vm. Defaults to 1 if unspecified.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the number of cores per socket for the vm. Defaults to 1 if unspecified.",
        SerializedName = @"numCoresPerSocket",
        PossibleTypes = new [] { typeof(int) })]
        int? HardwareProfileNumCoresPerSocket { get; set; }
        /// <summary>Gets or sets the number of vCPUs for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the number of vCPUs for the vm.",
        SerializedName = @"numCPUs",
        PossibleTypes = new [] { typeof(int) })]
        int? HardwareProfileNumCpUs { get; set; }
        /// <summary>Gets the name of the corresponding resource in Kubernetes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets the name of the corresponding resource in Kubernetes.",
        SerializedName = @"customResourceName",
        PossibleTypes = new [] { typeof(string) })]
        string InfrastructureProfileCustomResourceName { get;  }
        /// <summary>Firmware type</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Firmware type",
        SerializedName = @"firmwareType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.FirmwareType) })]
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.FirmwareType? InfrastructureProfileFirmwareType { get; set; }
        /// <summary>Gets or sets the folder path of the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets or sets the folder path of the vm.",
        SerializedName = @"folderPath",
        PossibleTypes = new [] { typeof(string) })]
        string InfrastructureProfileFolderPath { get;  }
        /// <summary>Gets or sets the instance uuid of the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets or sets the instance uuid of the vm.",
        SerializedName = @"instanceUuid",
        PossibleTypes = new [] { typeof(string) })]
        string InfrastructureProfileInstanceUuid { get;  }
        /// <summary>Gets or sets the inventory Item ID for the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the inventory Item ID for the virtual machine.",
        SerializedName = @"inventoryItemId",
        PossibleTypes = new [] { typeof(string) })]
        string InfrastructureProfileInventoryItemId { get; set; }
        /// <summary>Gets or sets the vCenter Managed Object name for the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets or sets the vCenter Managed Object name for the virtual machine.",
        SerializedName = @"moName",
        PossibleTypes = new [] { typeof(string) })]
        string InfrastructureProfileMoName { get;  }
        /// <summary>
        /// Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual machine.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual machine.",
        SerializedName = @"moRefId",
        PossibleTypes = new [] { typeof(string) })]
        string InfrastructureProfileMoRefId { get;  }
        /// <summary>Gets or sets the SMBIOS UUID of the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the SMBIOS UUID of the vm.",
        SerializedName = @"smbiosUuid",
        PossibleTypes = new [] { typeof(string) })]
        string InfrastructureProfileSmbiosUuid { get; set; }
        /// <summary>Gets or sets the ARM Id of the template resource to deploy the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the ARM Id of the template resource to deploy the virtual machine.",
        SerializedName = @"templateId",
        PossibleTypes = new [] { typeof(string) })]
        string InfrastructureProfileTemplateId { get; set; }
        /// <summary>
        /// Gets or sets the ARM Id of the vCenter resource in which this resource pool resides.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the ARM Id of the vCenter resource in which this resource pool resides.",
        SerializedName = @"vCenterId",
        PossibleTypes = new [] { typeof(string) })]
        string InfrastructureProfileVCenterId { get; set; }
        /// <summary>
        /// Gets or sets the list of network interfaces associated with the virtual machine.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the list of network interfaces associated with the virtual machine.",
        SerializedName = @"networkInterfaces",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.INetworkInterface) })]
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.INetworkInterface[] NetworkProfileNetworkInterface { get; set; }
        /// <summary>Sets administrator password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Sets administrator password.",
        SerializedName = @"adminPassword",
        PossibleTypes = new [] { typeof(string) })]
        string OSProfileAdminPassword { get; set; }
        /// <summary>Gets or sets administrator username.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets administrator username.",
        SerializedName = @"adminUsername",
        PossibleTypes = new [] { typeof(string) })]
        string OSProfileAdminUsername { get; set; }
        /// <summary>Gets or sets computer name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets computer name.",
        SerializedName = @"computerName",
        PossibleTypes = new [] { typeof(string) })]
        string OSProfileComputerName { get; set; }
        /// <summary>Gets or sets the guestId.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the guestId.",
        SerializedName = @"guestId",
        PossibleTypes = new [] { typeof(string) })]
        string OSProfileGuestId { get; set; }
        /// <summary>Gets or sets os sku.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets or sets os sku.",
        SerializedName = @"osSku",
        PossibleTypes = new [] { typeof(string) })]
        string OSProfileOssku { get;  }
        /// <summary>Gets or sets the type of the os.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the type of the os.",
        SerializedName = @"osType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.OSType) })]
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.OSType? OSProfileOstype { get; set; }
        /// <summary>
        /// Gets or sets the current running status of VMware Tools running in the guest operating system.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets or sets the current running status of VMware Tools running in the guest operating system.",
        SerializedName = @"toolsRunningStatus",
        PossibleTypes = new [] { typeof(string) })]
        string OSProfileToolsRunningStatus { get;  }
        /// <summary>Gets or sets the current version of VMware Tools.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets or sets the current version of VMware Tools.",
        SerializedName = @"toolsVersion",
        PossibleTypes = new [] { typeof(string) })]
        string OSProfileToolsVersion { get;  }
        /// <summary>
        /// Gets or sets the current version status of VMware Tools installed in the guest operating system.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets or sets the current version status of VMware Tools installed in the guest operating system.",
        SerializedName = @"toolsVersionStatus",
        PossibleTypes = new [] { typeof(string) })]
        string OSProfileToolsVersionStatus { get;  }
        /// <summary>
        /// Gets or sets the ARM Id of the cluster resource on which this virtual machine will deploy.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the ARM Id of the cluster resource on which this virtual machine will deploy.",
        SerializedName = @"clusterId",
        PossibleTypes = new [] { typeof(string) })]
        string PlacementProfileClusterId { get; set; }
        /// <summary>
        /// Gets or sets the ARM Id of the datastore resource on which the data for the virtual machine will be kept.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the ARM Id of the datastore resource on which the data for the virtual machine will be kept.",
        SerializedName = @"datastoreId",
        PossibleTypes = new [] { typeof(string) })]
        string PlacementProfileDatastoreId { get; set; }
        /// <summary>
        /// Gets or sets the ARM Id of the host resource on which this virtual machine will deploy.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the ARM Id of the host resource on which this virtual machine will deploy.",
        SerializedName = @"hostId",
        PossibleTypes = new [] { typeof(string) })]
        string PlacementProfileHostId { get; set; }
        /// <summary>
        /// Gets or sets the ARM Id of the resourcePool resource on which this virtual machine will deploy.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the ARM Id of the resourcePool resource on which this virtual machine will deploy.",
        SerializedName = @"resourcePoolId",
        PossibleTypes = new [] { typeof(string) })]
        string PlacementProfileResourcePoolId { get; set; }
        /// <summary>Gets the power state of the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets the power state of the virtual machine.",
        SerializedName = @"powerState",
        PossibleTypes = new [] { typeof(string) })]
        string PowerState { get;  }
        /// <summary>Gets the provisioning state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets the provisioning state.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.ProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.ProvisioningState? ProvisioningState { get;  }
        /// <summary>Gets or sets a unique identifier for the vm resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets or sets a unique identifier for the vm resource.",
        SerializedName = @"resourceUid",
        PossibleTypes = new [] { typeof(string) })]
        string ResourceUid { get;  }
        /// <summary>The resource status information.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The resource status information.",
        SerializedName = @"statuses",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IResourceStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IResourceStatus[] Statuses { get;  }
        /// <summary>Gets or sets the list of virtual disks associated with the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the list of virtual disks associated with the virtual machine.",
        SerializedName = @"disks",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualDisk) })]
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualDisk[] StorageProfileDisk { get; set; }
        /// <summary>
        /// Gets or sets the list of virtual SCSI controllers associated with the virtual machine.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Gets or sets the list of virtual SCSI controllers associated with the virtual machine.",
        SerializedName = @"scsiControllers",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualScsiController) })]
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualScsiController[] StorageProfileScsiController { get;  }
        /// <summary>Specifies whether secure boot should be enabled on the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether secure boot should be enabled on the virtual machine.",
        SerializedName = @"secureBootEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? UefiSettingSecureBootEnabled { get; set; }
        /// <summary>Sets a value indicating whether auto logon is enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Sets a value indicating whether auto logon is enabled.",
        SerializedName = @"autoLogon",
        PossibleTypes = new [] { typeof(bool) })]
        bool? WindowConfigurationAutoLogon { get; set; }
        /// <summary>Sets auto logon count.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Sets auto logon count.",
        SerializedName = @"autoLogonCount",
        PossibleTypes = new [] { typeof(int) })]
        int? WindowConfigurationAutoLogonCount { get; set; }
        /// <summary>Sets domain name that vm should join.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Sets domain name that vm should join.",
        SerializedName = @"domainName",
        PossibleTypes = new [] { typeof(string) })]
        string WindowConfigurationDomainName { get; set; }
        /// <summary>Sets domain user password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Sets domain user password.",
        SerializedName = @"domainUserPassword",
        PossibleTypes = new [] { typeof(string) })]
        string WindowConfigurationDomainUserPassword { get; set; }
        /// <summary>Sets domain username.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Sets domain username.",
        SerializedName = @"domainUsername",
        PossibleTypes = new [] { typeof(string) })]
        string WindowConfigurationDomainUsername { get; set; }
        /// <summary>Sets first logon commands</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Sets first logon commands",
        SerializedName = @"firstLogonCommands",
        PossibleTypes = new [] { typeof(string) })]
        string[] WindowConfigurationFirstLogonCommand { get; set; }
        /// <summary>Sets full name of the owner of the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Sets full name of the owner of the vm.",
        SerializedName = @"fullName",
        PossibleTypes = new [] { typeof(string) })]
        string WindowConfigurationFullName { get; set; }
        /// <summary>Sets org name to which the owner of the vm belongs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Sets org name to which the owner of the vm belongs.",
        SerializedName = @"orgName",
        PossibleTypes = new [] { typeof(string) })]
        string WindowConfigurationOrgName { get; set; }
        /// <summary>Sets product id of the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Sets product id of the vm.",
        SerializedName = @"productId",
        PossibleTypes = new [] { typeof(string) })]
        string WindowConfigurationProductId { get; set; }
        /// <summary>
        /// Specifies the time zone of the virtual machine. e.g. "Pacific Standard Time". Time zone name correspond to time zones
        /// listed at Microsoft Time Zone name values(https://learn.microsoft.com/en-us/previous-versions/windows/embedded/ms912391(v=winembedded.11)).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the time zone of the virtual machine. e.g. ""Pacific Standard Time"". Time zone name correspond to time zones listed at Microsoft Time Zone name values(https://learn.microsoft.com/en-us/previous-versions/windows/embedded/ms912391(v=winembedded.11)).",
        SerializedName = @"timeZone",
        PossibleTypes = new [] { typeof(string) })]
        string WindowConfigurationTimeZone { get; set; }
        /// <summary>Sets work group name that vm should join.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Sets work group name that vm should join.",
        SerializedName = @"workGroupName",
        PossibleTypes = new [] { typeof(string) })]
        string WindowConfigurationWorkGroupName { get; set; }

    }
    /// Describes the properties of a Virtual Machine Instance.
    internal partial interface IVirtualMachineInstancePropertiesInternal

    {
        /// <summary>Hardware properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IHardwareProfile HardwareProfile { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether virtual processors can be added while this virtual machine is running.
        /// </summary>
        bool? HardwareProfileCpuHotAddEnabled { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether virtual processors can be removed while this virtual machine is running.
        /// </summary>
        bool? HardwareProfileCpuHotRemoveEnabled { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether memory can be added while this virtual machine is running.
        /// </summary>
        bool? HardwareProfileMemoryHotAddEnabled { get; set; }
        /// <summary>Gets or sets memory size in MBs for the vm.</summary>
        int? HardwareProfileMemorySizeMb { get; set; }
        /// <summary>
        /// Gets or sets the number of cores per socket for the vm. Defaults to 1 if unspecified.
        /// </summary>
        int? HardwareProfileNumCoresPerSocket { get; set; }
        /// <summary>Gets or sets the number of vCPUs for the vm.</summary>
        int? HardwareProfileNumCpUs { get; set; }
        /// <summary>Gets the infrastructure profile.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IInfrastructureProfile InfrastructureProfile { get; set; }
        /// <summary>Gets the name of the corresponding resource in Kubernetes.</summary>
        string InfrastructureProfileCustomResourceName { get; set; }
        /// <summary>Firmware type</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.FirmwareType? InfrastructureProfileFirmwareType { get; set; }
        /// <summary>Gets or sets the folder path of the vm.</summary>
        string InfrastructureProfileFolderPath { get; set; }
        /// <summary>Gets or sets the instance uuid of the vm.</summary>
        string InfrastructureProfileInstanceUuid { get; set; }
        /// <summary>Gets or sets the inventory Item ID for the virtual machine.</summary>
        string InfrastructureProfileInventoryItemId { get; set; }
        /// <summary>Gets or sets the vCenter Managed Object name for the virtual machine.</summary>
        string InfrastructureProfileMoName { get; set; }
        /// <summary>
        /// Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual machine.
        /// </summary>
        string InfrastructureProfileMoRefId { get; set; }
        /// <summary>Gets or sets the SMBIOS UUID of the vm.</summary>
        string InfrastructureProfileSmbiosUuid { get; set; }
        /// <summary>Gets or sets the ARM Id of the template resource to deploy the virtual machine.</summary>
        string InfrastructureProfileTemplateId { get; set; }
        /// <summary>
        /// Gets or sets the ARM Id of the vCenter resource in which this resource pool resides.
        /// </summary>
        string InfrastructureProfileVCenterId { get; set; }
        /// <summary>Network properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.INetworkProfile NetworkProfile { get; set; }
        /// <summary>
        /// Gets or sets the list of network interfaces associated with the virtual machine.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.INetworkInterface[] NetworkProfileNetworkInterface { get; set; }
        /// <summary>OS properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IOSProfileForVminstance OSProfile { get; set; }
        /// <summary>Sets administrator password.</summary>
        string OSProfileAdminPassword { get; set; }
        /// <summary>Gets or sets administrator username.</summary>
        string OSProfileAdminUsername { get; set; }
        /// <summary>Gets or sets computer name.</summary>
        string OSProfileComputerName { get; set; }
        /// <summary>Gets or sets the guestId.</summary>
        string OSProfileGuestId { get; set; }
        /// <summary>Gets or sets os sku.</summary>
        string OSProfileOssku { get; set; }
        /// <summary>Gets or sets the type of the os.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.OSType? OSProfileOstype { get; set; }
        /// <summary>
        /// Gets or sets the current running status of VMware Tools running in the guest operating system.
        /// </summary>
        string OSProfileToolsRunningStatus { get; set; }
        /// <summary>Gets or sets the current version of VMware Tools.</summary>
        string OSProfileToolsVersion { get; set; }
        /// <summary>
        /// Gets or sets the current version status of VMware Tools installed in the guest operating system.
        /// </summary>
        string OSProfileToolsVersionStatus { get; set; }
        /// <summary>Windows Configuration.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IWindowsConfiguration OSProfileWindowsConfiguration { get; set; }
        /// <summary>Placement properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IPlacementProfile PlacementProfile { get; set; }
        /// <summary>
        /// Gets or sets the ARM Id of the cluster resource on which this virtual machine will deploy.
        /// </summary>
        string PlacementProfileClusterId { get; set; }
        /// <summary>
        /// Gets or sets the ARM Id of the datastore resource on which the data for the virtual machine will be kept.
        /// </summary>
        string PlacementProfileDatastoreId { get; set; }
        /// <summary>
        /// Gets or sets the ARM Id of the host resource on which this virtual machine will deploy.
        /// </summary>
        string PlacementProfileHostId { get; set; }
        /// <summary>
        /// Gets or sets the ARM Id of the resourcePool resource on which this virtual machine will deploy.
        /// </summary>
        string PlacementProfileResourcePoolId { get; set; }
        /// <summary>Gets the power state of the virtual machine.</summary>
        string PowerState { get; set; }
        /// <summary>Gets the provisioning state.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Support.ProvisioningState? ProvisioningState { get; set; }
        /// <summary>Gets or sets a unique identifier for the vm resource.</summary>
        string ResourceUid { get; set; }
        /// <summary>Gets the security profile.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.ISecurityProfile SecurityProfile { get; set; }
        /// <summary>
        /// Specifies the security settings like secure boot used while creating the virtual machine.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IUefiSettings SecurityProfileUefiSetting { get; set; }
        /// <summary>The resource status information.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IResourceStatus[] Statuses { get; set; }
        /// <summary>Storage properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IStorageProfile StorageProfile { get; set; }
        /// <summary>Gets or sets the list of virtual disks associated with the virtual machine.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualDisk[] StorageProfileDisk { get; set; }
        /// <summary>
        /// Gets or sets the list of virtual SCSI controllers associated with the virtual machine.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ArcVMwareServiceApi.Models.Api20231201.IVirtualScsiController[] StorageProfileScsiController { get; set; }
        /// <summary>Specifies whether secure boot should be enabled on the virtual machine.</summary>
        bool? UefiSettingSecureBootEnabled { get; set; }
        /// <summary>Sets a value indicating whether auto logon is enabled.</summary>
        bool? WindowConfigurationAutoLogon { get; set; }
        /// <summary>Sets auto logon count.</summary>
        int? WindowConfigurationAutoLogonCount { get; set; }
        /// <summary>Sets domain name that vm should join.</summary>
        string WindowConfigurationDomainName { get; set; }
        /// <summary>Sets domain user password.</summary>
        string WindowConfigurationDomainUserPassword { get; set; }
        /// <summary>Sets domain username.</summary>
        string WindowConfigurationDomainUsername { get; set; }
        /// <summary>Sets first logon commands</summary>
        string[] WindowConfigurationFirstLogonCommand { get; set; }
        /// <summary>Sets full name of the owner of the vm.</summary>
        string WindowConfigurationFullName { get; set; }
        /// <summary>Sets org name to which the owner of the vm belongs.</summary>
        string WindowConfigurationOrgName { get; set; }
        /// <summary>Sets product id of the vm.</summary>
        string WindowConfigurationProductId { get; set; }
        /// <summary>
        /// Specifies the time zone of the virtual machine. e.g. "Pacific Standard Time". Time zone name correspond to time zones
        /// listed at Microsoft Time Zone name values(https://learn.microsoft.com/en-us/previous-versions/windows/embedded/ms912391(v=winembedded.11)).
        /// </summary>
        string WindowConfigurationTimeZone { get; set; }
        /// <summary>Sets work group name that vm should join.</summary>
        string WindowConfigurationWorkGroupName { get; set; }

    }
}