// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Extensions;

    /// <summary>Kubernetes role properties.</summary>
    public partial class KubernetesRoleProperties :
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleProperties,
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRolePropertiesInternal
    {

        /// <summary>Pod Subnet</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Inlined)]
        public string CniConfigPodSubnet { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).CniConfigPodSubnet; }

        /// <summary>Service subnet</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Inlined)]
        public string CniConfigServiceSubnet { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).CniConfigServiceSubnet; }

        /// <summary>Cni type</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Inlined)]
        public string CniConfigType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).CniConfigType; }

        /// <summary>Cni version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Inlined)]
        public string CniConfigVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).CniConfigVersion; }

        /// <summary>Memory in bytes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Inlined)]
        public long? ComputeMemoryInByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).ComputeMemoryInByte; }

        /// <summary>Processor count</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Inlined)]
        public int? ComputeProcessorCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).ComputeProcessorCount; }

        /// <summary>VM profile</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Inlined)]
        public string ComputeVMProfile { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).ComputeVMProfile; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).ComputeVMProfile = value ; }

        /// <summary>Etcd type</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Inlined)]
        public string EtcdInfoType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesClusterInfoInternal)KubernetesClusterInfo).EtcdInfoType; }

        /// <summary>Etcd version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Inlined)]
        public string EtcdInfoVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesClusterInfoInternal)KubernetesClusterInfo).EtcdInfoVersion; }

        /// <summary>Backing field for <see cref="HostPlatform" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.PlatformType _hostPlatform;

        /// <summary>Host OS supported by the Kubernetes role.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.PlatformType HostPlatform { get => this._hostPlatform; set => this._hostPlatform = value; }

        /// <summary>Backing field for <see cref="HostPlatformType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.HostPlatformType? _hostPlatformType;

        /// <summary>Platform where the runtime is hosted.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.HostPlatformType? HostPlatformType { get => this._hostPlatformType; }

        /// <summary>Kubernetes cluster nodes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.INodeInfo[] KuberneteClusterInfoNode { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesClusterInfoInternal)KubernetesClusterInfo).Node; }

        /// <summary>Kubernetes cluster version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Inlined)]
        public string KuberneteClusterInfoVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesClusterInfoInternal)KubernetesClusterInfo).Version; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesClusterInfoInternal)KubernetesClusterInfo).Version = value ; }

        /// <summary>Backing field for <see cref="KubernetesClusterInfo" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesClusterInfo _kubernetesClusterInfo;

        /// <summary>Kubernetes cluster configuration</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesClusterInfo KubernetesClusterInfo { get => (this._kubernetesClusterInfo = this._kubernetesClusterInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.KubernetesClusterInfo()); set => this._kubernetesClusterInfo = value; }

        /// <summary>Backing field for <see cref="KubernetesRoleResource" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResources _kubernetesRoleResource;

        /// <summary>Kubernetes role resources</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResources KubernetesRoleResource { get => (this._kubernetesRoleResource = this._kubernetesRoleResource ?? new Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.KubernetesRoleResources()); set => this._kubernetesRoleResource = value; }

        /// <summary>Load balancer ipconfig</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Inlined)]
        public string[] LoadBalancerConfigIPRange { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).LoadBalancerConfigIPRange; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).LoadBalancerConfigIPRange = value ?? null /* arrayOf */; }

        /// <summary>Load balancer type</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Inlined)]
        public string LoadBalancerConfigType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).LoadBalancerConfigType; }

        /// <summary>Load balancer version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Inlined)]
        public string LoadBalancerConfigVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).LoadBalancerConfigVersion; }

        /// <summary>Internal Acessors for CniConfigPodSubnet</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRolePropertiesInternal.CniConfigPodSubnet { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).CniConfigPodSubnet; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).CniConfigPodSubnet = value; }

        /// <summary>Internal Acessors for CniConfigServiceSubnet</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRolePropertiesInternal.CniConfigServiceSubnet { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).CniConfigServiceSubnet; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).CniConfigServiceSubnet = value; }

        /// <summary>Internal Acessors for CniConfigType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRolePropertiesInternal.CniConfigType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).CniConfigType; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).CniConfigType = value; }

        /// <summary>Internal Acessors for CniConfigVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRolePropertiesInternal.CniConfigVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).CniConfigVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).CniConfigVersion = value; }

        /// <summary>Internal Acessors for ComputeMemoryInByte</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRolePropertiesInternal.ComputeMemoryInByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).ComputeMemoryInByte; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).ComputeMemoryInByte = value; }

        /// <summary>Internal Acessors for ComputeProcessorCount</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRolePropertiesInternal.ComputeProcessorCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).ComputeProcessorCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).ComputeProcessorCount = value; }

        /// <summary>Internal Acessors for EtcdInfoType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRolePropertiesInternal.EtcdInfoType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesClusterInfoInternal)KubernetesClusterInfo).EtcdInfoType; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesClusterInfoInternal)KubernetesClusterInfo).EtcdInfoType = value; }

        /// <summary>Internal Acessors for EtcdInfoVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRolePropertiesInternal.EtcdInfoVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesClusterInfoInternal)KubernetesClusterInfo).EtcdInfoVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesClusterInfoInternal)KubernetesClusterInfo).EtcdInfoVersion = value; }

        /// <summary>Internal Acessors for HostPlatformType</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.HostPlatformType? Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRolePropertiesInternal.HostPlatformType { get => this._hostPlatformType; set { {_hostPlatformType = value;} } }

        /// <summary>Internal Acessors for KuberneteClusterInfoEtcdInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IEtcdInfo Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRolePropertiesInternal.KuberneteClusterInfoEtcdInfo { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesClusterInfoInternal)KubernetesClusterInfo).EtcdInfo; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesClusterInfoInternal)KubernetesClusterInfo).EtcdInfo = value; }

        /// <summary>Internal Acessors for KuberneteClusterInfoNode</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.INodeInfo[] Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRolePropertiesInternal.KuberneteClusterInfoNode { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesClusterInfoInternal)KubernetesClusterInfo).Node; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesClusterInfoInternal)KubernetesClusterInfo).Node = value; }

        /// <summary>Internal Acessors for KuberneteRoleResourceCompute</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleCompute Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRolePropertiesInternal.KuberneteRoleResourceCompute { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).Compute; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).Compute = value; }

        /// <summary>Internal Acessors for KuberneteRoleResourceNetwork</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleNetwork Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRolePropertiesInternal.KuberneteRoleResourceNetwork { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).Network; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).Network = value; }

        /// <summary>Internal Acessors for KuberneteRoleResourceStorage</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleStorage Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRolePropertiesInternal.KuberneteRoleResourceStorage { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).Storage; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).Storage = value; }

        /// <summary>Internal Acessors for KubernetesClusterInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesClusterInfo Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRolePropertiesInternal.KubernetesClusterInfo { get => (this._kubernetesClusterInfo = this._kubernetesClusterInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.KubernetesClusterInfo()); set { {_kubernetesClusterInfo = value;} } }

        /// <summary>Internal Acessors for KubernetesRoleResource</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResources Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRolePropertiesInternal.KubernetesRoleResource { get => (this._kubernetesRoleResource = this._kubernetesRoleResource ?? new Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.KubernetesRoleResources()); set { {_kubernetesRoleResource = value;} } }

        /// <summary>Internal Acessors for LoadBalancerConfigType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRolePropertiesInternal.LoadBalancerConfigType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).LoadBalancerConfigType; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).LoadBalancerConfigType = value; }

        /// <summary>Internal Acessors for LoadBalancerConfigVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRolePropertiesInternal.LoadBalancerConfigVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).LoadBalancerConfigVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).LoadBalancerConfigVersion = value; }

        /// <summary>Internal Acessors for NetworkCniConfig</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.ICniConfig Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRolePropertiesInternal.NetworkCniConfig { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).NetworkCniConfig; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).NetworkCniConfig = value; }

        /// <summary>Internal Acessors for NetworkLoadBalancerConfig</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.ILoadBalancerConfig Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRolePropertiesInternal.NetworkLoadBalancerConfig { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).NetworkLoadBalancerConfig; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).NetworkLoadBalancerConfig = value; }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.KubernetesState? Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRolePropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Internal Acessors for StorageClass</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleStorageClassInfo[] Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRolePropertiesInternal.StorageClass { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).StorageClass; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).StorageClass = value; }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.KubernetesState? _provisioningState;

        /// <summary>State of Kubernetes deployment</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.KubernetesState? ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="RoleStatus" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.RoleStatus _roleStatus;

        /// <summary>Role status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.RoleStatus RoleStatus { get => this._roleStatus; set => this._roleStatus = value; }

        /// <summary>Kubernetes storage class info.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleStorageClassInfo[] StorageClass { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).StorageClass; }

        /// <summary>Mount points of shares in role(s).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IMountPointMap[] StorageEndpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).StorageEndpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResourcesInternal)KubernetesRoleResource).StorageEndpoint = value ?? null /* arrayOf */; }

        /// <summary>Creates an new <see cref="KubernetesRoleProperties" /> instance.</summary>
        public KubernetesRoleProperties()
        {

        }
    }
    /// Kubernetes role properties.
    public partial interface IKubernetesRoleProperties :
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.IJsonSerializable
    {
        /// <summary>Pod Subnet</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Pod Subnet",
        SerializedName = @"podSubnet",
        PossibleTypes = new [] { typeof(string) })]
        string CniConfigPodSubnet { get;  }
        /// <summary>Service subnet</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Service subnet",
        SerializedName = @"serviceSubnet",
        PossibleTypes = new [] { typeof(string) })]
        string CniConfigServiceSubnet { get;  }
        /// <summary>Cni type</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Cni type",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string CniConfigType { get;  }
        /// <summary>Cni version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Cni version",
        SerializedName = @"version",
        PossibleTypes = new [] { typeof(string) })]
        string CniConfigVersion { get;  }
        /// <summary>Memory in bytes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Memory in bytes",
        SerializedName = @"memoryInBytes",
        PossibleTypes = new [] { typeof(long) })]
        long? ComputeMemoryInByte { get;  }
        /// <summary>Processor count</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Processor count",
        SerializedName = @"processorCount",
        PossibleTypes = new [] { typeof(int) })]
        int? ComputeProcessorCount { get;  }
        /// <summary>VM profile</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"VM profile",
        SerializedName = @"vmProfile",
        PossibleTypes = new [] { typeof(string) })]
        string ComputeVMProfile { get; set; }
        /// <summary>Etcd type</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Etcd type",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string EtcdInfoType { get;  }
        /// <summary>Etcd version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Etcd version",
        SerializedName = @"version",
        PossibleTypes = new [] { typeof(string) })]
        string EtcdInfoVersion { get;  }
        /// <summary>Host OS supported by the Kubernetes role.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Host OS supported by the Kubernetes role.",
        SerializedName = @"hostPlatform",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.PlatformType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.PlatformType HostPlatform { get; set; }
        /// <summary>Platform where the runtime is hosted.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Platform where the runtime is hosted.",
        SerializedName = @"hostPlatformType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.HostPlatformType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.HostPlatformType? HostPlatformType { get;  }
        /// <summary>Kubernetes cluster nodes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Kubernetes cluster nodes",
        SerializedName = @"nodes",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.INodeInfo) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.INodeInfo[] KuberneteClusterInfoNode { get;  }
        /// <summary>Kubernetes cluster version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Kubernetes cluster version",
        SerializedName = @"version",
        PossibleTypes = new [] { typeof(string) })]
        string KuberneteClusterInfoVersion { get; set; }
        /// <summary>Load balancer ipconfig</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Load balancer ipconfig",
        SerializedName = @"ipRange",
        PossibleTypes = new [] { typeof(string) })]
        string[] LoadBalancerConfigIPRange { get; set; }
        /// <summary>Load balancer type</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Load balancer type",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string LoadBalancerConfigType { get;  }
        /// <summary>Load balancer version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Load balancer version",
        SerializedName = @"version",
        PossibleTypes = new [] { typeof(string) })]
        string LoadBalancerConfigVersion { get;  }
        /// <summary>State of Kubernetes deployment</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"State of Kubernetes deployment",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.KubernetesState) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.KubernetesState? ProvisioningState { get;  }
        /// <summary>Role status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Role status.",
        SerializedName = @"roleStatus",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.RoleStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.RoleStatus RoleStatus { get; set; }
        /// <summary>Kubernetes storage class info.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Kubernetes storage class info.",
        SerializedName = @"storageClasses",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleStorageClassInfo) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleStorageClassInfo[] StorageClass { get;  }
        /// <summary>Mount points of shares in role(s).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Mount points of shares in role(s).",
        SerializedName = @"endpoints",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IMountPointMap) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IMountPointMap[] StorageEndpoint { get; set; }

    }
    /// Kubernetes role properties.
    internal partial interface IKubernetesRolePropertiesInternal

    {
        /// <summary>Pod Subnet</summary>
        string CniConfigPodSubnet { get; set; }
        /// <summary>Service subnet</summary>
        string CniConfigServiceSubnet { get; set; }
        /// <summary>Cni type</summary>
        string CniConfigType { get; set; }
        /// <summary>Cni version</summary>
        string CniConfigVersion { get; set; }
        /// <summary>Memory in bytes</summary>
        long? ComputeMemoryInByte { get; set; }
        /// <summary>Processor count</summary>
        int? ComputeProcessorCount { get; set; }
        /// <summary>VM profile</summary>
        string ComputeVMProfile { get; set; }
        /// <summary>Etcd type</summary>
        string EtcdInfoType { get; set; }
        /// <summary>Etcd version</summary>
        string EtcdInfoVersion { get; set; }
        /// <summary>Host OS supported by the Kubernetes role.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.PlatformType HostPlatform { get; set; }
        /// <summary>Platform where the runtime is hosted.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.HostPlatformType? HostPlatformType { get; set; }
        /// <summary>Etcd configuration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IEtcdInfo KuberneteClusterInfoEtcdInfo { get; set; }
        /// <summary>Kubernetes cluster nodes</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.INodeInfo[] KuberneteClusterInfoNode { get; set; }
        /// <summary>Kubernetes cluster version</summary>
        string KuberneteClusterInfoVersion { get; set; }
        /// <summary>Kubernetes role compute resource</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleCompute KuberneteRoleResourceCompute { get; set; }
        /// <summary>Kubernetes role network resource</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleNetwork KuberneteRoleResourceNetwork { get; set; }
        /// <summary>Kubernetes role storage resource</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleStorage KuberneteRoleResourceStorage { get; set; }
        /// <summary>Kubernetes cluster configuration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesClusterInfo KubernetesClusterInfo { get; set; }
        /// <summary>Kubernetes role resources</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleResources KubernetesRoleResource { get; set; }
        /// <summary>Load balancer ipconfig</summary>
        string[] LoadBalancerConfigIPRange { get; set; }
        /// <summary>Load balancer type</summary>
        string LoadBalancerConfigType { get; set; }
        /// <summary>Load balancer version</summary>
        string LoadBalancerConfigVersion { get; set; }
        /// <summary>Cni configuration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.ICniConfig NetworkCniConfig { get; set; }
        /// <summary>Load balancer configuration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.ILoadBalancerConfig NetworkLoadBalancerConfig { get; set; }
        /// <summary>State of Kubernetes deployment</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.KubernetesState? ProvisioningState { get; set; }
        /// <summary>Role status.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Support.RoleStatus RoleStatus { get; set; }
        /// <summary>Kubernetes storage class info.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IKubernetesRoleStorageClassInfo[] StorageClass { get; set; }
        /// <summary>Mount points of shares in role(s).</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Models.Api20231201.IMountPointMap[] StorageEndpoint { get; set; }

    }
}