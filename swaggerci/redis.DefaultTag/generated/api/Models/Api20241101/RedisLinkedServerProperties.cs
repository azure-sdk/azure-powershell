// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20241101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Extensions;

    /// <summary>Properties of a linked server to be returned in get/put response</summary>
    public partial class RedisLinkedServerProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20241101.IRedisLinkedServerProperties,
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20241101.IRedisLinkedServerPropertiesInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20241101.IRedisLinkedServerCreateProperties"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20241101.IRedisLinkedServerCreateProperties __redisLinkedServerCreateProperties = new Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20241101.RedisLinkedServerCreateProperties();

        /// <summary>
        /// The unchanging DNS name which will always point to current geo-primary cache among the linked redis caches for seamless
        /// Geo Failover experience.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inherited)]
        public string GeoReplicatedPrimaryHostName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20241101.IRedisLinkedServerCreatePropertiesInternal)__redisLinkedServerCreateProperties).GeoReplicatedPrimaryHostName; }

        /// <summary>Fully qualified resourceId of the linked redis cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inherited)]
        public string LinkedRedisCacheId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20241101.IRedisLinkedServerCreatePropertiesInternal)__redisLinkedServerCreateProperties).LinkedRedisCacheId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20241101.IRedisLinkedServerCreatePropertiesInternal)__redisLinkedServerCreateProperties).LinkedRedisCacheId = value ; }

        /// <summary>Location of the linked redis cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inherited)]
        public string LinkedRedisCacheLocation { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20241101.IRedisLinkedServerCreatePropertiesInternal)__redisLinkedServerCreateProperties).LinkedRedisCacheLocation; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20241101.IRedisLinkedServerCreatePropertiesInternal)__redisLinkedServerCreateProperties).LinkedRedisCacheLocation = value ; }

        /// <summary>Internal Acessors for GeoReplicatedPrimaryHostName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20241101.IRedisLinkedServerCreatePropertiesInternal.GeoReplicatedPrimaryHostName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20241101.IRedisLinkedServerCreatePropertiesInternal)__redisLinkedServerCreateProperties).GeoReplicatedPrimaryHostName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20241101.IRedisLinkedServerCreatePropertiesInternal)__redisLinkedServerCreateProperties).GeoReplicatedPrimaryHostName = value; }

        /// <summary>Internal Acessors for PrimaryHostName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20241101.IRedisLinkedServerCreatePropertiesInternal.PrimaryHostName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20241101.IRedisLinkedServerCreatePropertiesInternal)__redisLinkedServerCreateProperties).PrimaryHostName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20241101.IRedisLinkedServerCreatePropertiesInternal)__redisLinkedServerCreateProperties).PrimaryHostName = value; }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20241101.IRedisLinkedServerPropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>
        /// The changing DNS name that resolves to the current geo-primary cache among the linked redis caches before or after the
        /// Geo Failover.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inherited)]
        public string PrimaryHostName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20241101.IRedisLinkedServerCreatePropertiesInternal)__redisLinkedServerCreateProperties).PrimaryHostName; }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private string _provisioningState;

        /// <summary>Terminal state of the link between primary and secondary redis cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Owned)]
        public string ProvisioningState { get => this._provisioningState; }

        /// <summary>Role of the linked server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.ReplicationRole ServerRole { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20241101.IRedisLinkedServerCreatePropertiesInternal)__redisLinkedServerCreateProperties).ServerRole; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20241101.IRedisLinkedServerCreatePropertiesInternal)__redisLinkedServerCreateProperties).ServerRole = value ; }

        /// <summary>Creates an new <see cref="RedisLinkedServerProperties" /> instance.</summary>
        public RedisLinkedServerProperties()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__redisLinkedServerCreateProperties), __redisLinkedServerCreateProperties);
            await eventListener.AssertObjectIsValid(nameof(__redisLinkedServerCreateProperties), __redisLinkedServerCreateProperties);
        }
    }
    /// Properties of a linked server to be returned in get/put response
    public partial interface IRedisLinkedServerProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20241101.IRedisLinkedServerCreateProperties
    {
        /// <summary>Terminal state of the link between primary and secondary redis cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Terminal state of the link between primary and secondary redis cache.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        string ProvisioningState { get;  }

    }
    /// Properties of a linked server to be returned in get/put response
    internal partial interface IRedisLinkedServerPropertiesInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20241101.IRedisLinkedServerCreatePropertiesInternal
    {
        /// <summary>Terminal state of the link between primary and secondary redis cache.</summary>
        string ProvisioningState { get; set; }

    }
}