// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Extensions;

    /// <summary>Parameters supplied to the Update Redis operation.</summary>
    public partial class RedisUpdateParameters :
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisUpdateParameters,
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisUpdateParametersInternal
    {

        /// <summary>Specifies whether the non-ssl Redis server port (6379) is enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public bool? EnableNonSslPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisCommonPropertiesInternal)Property).EnableNonSslPort; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisCommonPropertiesInternal)Property).EnableNonSslPort = value ?? default(bool); }

        /// <summary>Backing field for <see cref="Identity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IManagedServiceIdentity _identity;

        /// <summary>The identity of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IManagedServiceIdentity Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.ManagedServiceIdentity()); set => this._identity = value; }

        /// <summary>
        /// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public string IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IManagedServiceIdentityInternal)Identity).PrincipalId; }

        /// <summary>
        /// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public string IdentityTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IManagedServiceIdentityInternal)Identity).TenantId; }

        /// <summary>
        /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.ManagedServiceIdentityType? IdentityType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IManagedServiceIdentityInternal)Identity).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IManagedServiceIdentityInternal)Identity).Type = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.ManagedServiceIdentityType)""); }

        /// <summary>
        /// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM
        /// resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
        /// The dictionary values can be empty objects ({}) in requests.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IUserAssignedIdentities IdentityUserAssignedIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IManagedServiceIdentityInternal)Identity).UserAssignedIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IManagedServiceIdentityInternal)Identity).UserAssignedIdentity = value ?? null /* model class */; }

        /// <summary>Internal Acessors for Identity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IManagedServiceIdentity Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisUpdateParametersInternal.Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.ManagedServiceIdentity()); set { {_identity = value;} } }

        /// <summary>Internal Acessors for IdentityPrincipalId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisUpdateParametersInternal.IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IManagedServiceIdentityInternal)Identity).PrincipalId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IManagedServiceIdentityInternal)Identity).PrincipalId = value; }

        /// <summary>Internal Acessors for IdentityTenantId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisUpdateParametersInternal.IdentityTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IManagedServiceIdentityInternal)Identity).TenantId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IManagedServiceIdentityInternal)Identity).TenantId = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisUpdateProperties Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisUpdateParametersInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.RedisUpdateProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for Sku</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.ISku Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisUpdateParametersInternal.Sku { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisUpdatePropertiesInternal)Property).Sku; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisUpdatePropertiesInternal)Property).Sku = value; }

        /// <summary>
        /// Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.TlsVersion? MinimumTlsVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisCommonPropertiesInternal)Property).MinimumTlsVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisCommonPropertiesInternal)Property).MinimumTlsVersion = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.TlsVersion)""); }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisUpdateProperties _property;

        /// <summary>Redis cache properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisUpdateProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.RedisUpdateProperties()); set => this._property = value; }

        /// <summary>
        /// Whether or not public endpoint access is allowed for this cache. Value is optional but if passed in, must be 'Enabled'
        /// or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled'
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.PublicNetworkAccess? PublicNetworkAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisCommonPropertiesInternal)Property).PublicNetworkAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisCommonPropertiesInternal)Property).PublicNetworkAccess = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.PublicNetworkAccess)""); }

        /// <summary>
        /// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
        /// etc.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisCommonPropertiesRedisConfiguration RedisConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisCommonPropertiesInternal)Property).RedisConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisCommonPropertiesInternal)Property).RedisConfiguration = value ?? null /* model class */; }

        /// <summary>
        /// Redis version. This should be in the form 'major[.minor]' (only 'major' is required) or the value 'latest' which refers
        /// to the latest stable Redis version that is available. Supported versions: 4.0, 6.0 (latest). Default value is 'latest'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public string RedisVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisCommonPropertiesInternal)Property).RedisVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisCommonPropertiesInternal)Property).RedisVersion = value ?? null; }

        /// <summary>The number of replicas to be created per primary.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public int? ReplicasPerMaster { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisCommonPropertiesInternal)Property).ReplicasPerMaster; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisCommonPropertiesInternal)Property).ReplicasPerMaster = value ?? default(int); }

        /// <summary>The number of replicas to be created per primary.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public int? ReplicasPerPrimary { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisCommonPropertiesInternal)Property).ReplicasPerPrimary; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisCommonPropertiesInternal)Property).ReplicasPerPrimary = value ?? default(int); }

        /// <summary>The number of shards to be created on a Premium Cluster Cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public int? ShardCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisCommonPropertiesInternal)Property).ShardCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisCommonPropertiesInternal)Property).ShardCount = value ?? default(int); }

        /// <summary>
        /// The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium)
        /// family (1, 2, 3, 4).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public int? SkuCapacity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisUpdatePropertiesInternal)Property).SkuCapacity; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisUpdatePropertiesInternal)Property).SkuCapacity = value ?? default(int); }

        /// <summary>The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.SkuFamily? SkuFamily { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisUpdatePropertiesInternal)Property).SkuFamily; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisUpdatePropertiesInternal)Property).SkuFamily = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.SkuFamily)""); }

        /// <summary>The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.SkuName? SkuName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisUpdatePropertiesInternal)Property).SkuName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisUpdatePropertiesInternal)Property).SkuName = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.SkuName)""); }

        /// <summary>Backing field for <see cref="Tag" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisUpdateParametersTags _tag;

        /// <summary>Resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisUpdateParametersTags Tag { get => (this._tag = this._tag ?? new Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.RedisUpdateParametersTags()); set => this._tag = value; }

        /// <summary>A dictionary of tenant settings</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisCommonPropertiesTenantSettings TenantSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisCommonPropertiesInternal)Property).TenantSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisCommonPropertiesInternal)Property).TenantSetting = value ?? null /* model class */; }

        /// <summary>
        /// Optional: Specifies the update channel for the monthly Redis updates your Redis Cache will receive. Caches using 'Preview'
        /// update channel get latest Redis updates at least 4 weeks ahead of 'Stable' channel caches. Default value is 'Stable'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Origin(Microsoft.Azure.PowerShell.Cmdlets.Redis.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.UpdateChannel? UpdateChannel { get => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisCommonPropertiesInternal)Property).UpdateChannel; set => ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisCommonPropertiesInternal)Property).UpdateChannel = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.UpdateChannel)""); }

        /// <summary>Creates an new <see cref="RedisUpdateParameters" /> instance.</summary>
        public RedisUpdateParameters()
        {

        }
    }
    /// Parameters supplied to the Update Redis operation.
    public partial interface IRedisUpdateParameters :
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.IJsonSerializable
    {
        /// <summary>Specifies whether the non-ssl Redis server port (6379) is enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether the non-ssl Redis server port (6379) is enabled.",
        SerializedName = @"enableNonSslPort",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnableNonSslPort { get; set; }
        /// <summary>
        /// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
        SerializedName = @"principalId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityPrincipalId { get;  }
        /// <summary>
        /// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
        SerializedName = @"tenantId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityTenantId { get;  }
        /// <summary>
        /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.ManagedServiceIdentityType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.ManagedServiceIdentityType? IdentityType { get; set; }
        /// <summary>
        /// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM
        /// resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
        /// The dictionary values can be empty objects ({}) in requests.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.",
        SerializedName = @"userAssignedIdentities",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IUserAssignedIdentities) })]
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IUserAssignedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>
        /// Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')",
        SerializedName = @"minimumTlsVersion",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.TlsVersion) })]
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.TlsVersion? MinimumTlsVersion { get; set; }
        /// <summary>
        /// Whether or not public endpoint access is allowed for this cache. Value is optional but if passed in, must be 'Enabled'
        /// or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled'
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether or not public endpoint access is allowed for this cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled'",
        SerializedName = @"publicNetworkAccess",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.PublicNetworkAccess) })]
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.PublicNetworkAccess? PublicNetworkAccess { get; set; }
        /// <summary>
        /// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
        /// etc.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.",
        SerializedName = @"redisConfiguration",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisCommonPropertiesRedisConfiguration) })]
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisCommonPropertiesRedisConfiguration RedisConfiguration { get; set; }
        /// <summary>
        /// Redis version. This should be in the form 'major[.minor]' (only 'major' is required) or the value 'latest' which refers
        /// to the latest stable Redis version that is available. Supported versions: 4.0, 6.0 (latest). Default value is 'latest'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Redis version. This should be in the form 'major[.minor]' (only 'major' is required) or the value 'latest' which refers to the latest stable Redis version that is available. Supported versions: 4.0, 6.0 (latest). Default value is 'latest'.",
        SerializedName = @"redisVersion",
        PossibleTypes = new [] { typeof(string) })]
        string RedisVersion { get; set; }
        /// <summary>The number of replicas to be created per primary.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of replicas to be created per primary.",
        SerializedName = @"replicasPerMaster",
        PossibleTypes = new [] { typeof(int) })]
        int? ReplicasPerMaster { get; set; }
        /// <summary>The number of replicas to be created per primary.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of replicas to be created per primary.",
        SerializedName = @"replicasPerPrimary",
        PossibleTypes = new [] { typeof(int) })]
        int? ReplicasPerPrimary { get; set; }
        /// <summary>The number of shards to be created on a Premium Cluster Cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of shards to be created on a Premium Cluster Cache.",
        SerializedName = @"shardCount",
        PossibleTypes = new [] { typeof(int) })]
        int? ShardCount { get; set; }
        /// <summary>
        /// The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium)
        /// family (1, 2, 3, 4).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4).",
        SerializedName = @"capacity",
        PossibleTypes = new [] { typeof(int) })]
        int? SkuCapacity { get; set; }
        /// <summary>The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).",
        SerializedName = @"family",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.SkuFamily) })]
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.SkuFamily? SkuFamily { get; set; }
        /// <summary>The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.SkuName) })]
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.SkuName? SkuName { get; set; }
        /// <summary>Resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource tags.",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisUpdateParametersTags) })]
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisUpdateParametersTags Tag { get; set; }
        /// <summary>A dictionary of tenant settings</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A dictionary of tenant settings",
        SerializedName = @"tenantSettings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisCommonPropertiesTenantSettings) })]
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisCommonPropertiesTenantSettings TenantSetting { get; set; }
        /// <summary>
        /// Optional: Specifies the update channel for the monthly Redis updates your Redis Cache will receive. Caches using 'Preview'
        /// update channel get latest Redis updates at least 4 weeks ahead of 'Stable' channel caches. Default value is 'Stable'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Redis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Optional: Specifies the update channel for the monthly Redis updates your Redis Cache will receive. Caches using 'Preview' update channel get latest Redis updates at least 4 weeks ahead of 'Stable' channel caches. Default value is 'Stable'.",
        SerializedName = @"updateChannel",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.UpdateChannel) })]
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.UpdateChannel? UpdateChannel { get; set; }

    }
    /// Parameters supplied to the Update Redis operation.
    internal partial interface IRedisUpdateParametersInternal

    {
        /// <summary>Specifies whether the non-ssl Redis server port (6379) is enabled.</summary>
        bool? EnableNonSslPort { get; set; }
        /// <summary>The identity of the resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IManagedServiceIdentity Identity { get; set; }
        /// <summary>
        /// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        string IdentityPrincipalId { get; set; }
        /// <summary>
        /// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        string IdentityTenantId { get; set; }
        /// <summary>
        /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.ManagedServiceIdentityType? IdentityType { get; set; }
        /// <summary>
        /// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM
        /// resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
        /// The dictionary values can be empty objects ({}) in requests.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api40.IUserAssignedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>
        /// Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.TlsVersion? MinimumTlsVersion { get; set; }
        /// <summary>Redis cache properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisUpdateProperties Property { get; set; }
        /// <summary>
        /// Whether or not public endpoint access is allowed for this cache. Value is optional but if passed in, must be 'Enabled'
        /// or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled'
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.PublicNetworkAccess? PublicNetworkAccess { get; set; }
        /// <summary>
        /// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
        /// etc.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisCommonPropertiesRedisConfiguration RedisConfiguration { get; set; }
        /// <summary>
        /// Redis version. This should be in the form 'major[.minor]' (only 'major' is required) or the value 'latest' which refers
        /// to the latest stable Redis version that is available. Supported versions: 4.0, 6.0 (latest). Default value is 'latest'.
        /// </summary>
        string RedisVersion { get; set; }
        /// <summary>The number of replicas to be created per primary.</summary>
        int? ReplicasPerMaster { get; set; }
        /// <summary>The number of replicas to be created per primary.</summary>
        int? ReplicasPerPrimary { get; set; }
        /// <summary>The number of shards to be created on a Premium Cluster Cache.</summary>
        int? ShardCount { get; set; }
        /// <summary>The SKU of the Redis cache to deploy.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.ISku Sku { get; set; }
        /// <summary>
        /// The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium)
        /// family (1, 2, 3, 4).
        /// </summary>
        int? SkuCapacity { get; set; }
        /// <summary>The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.SkuFamily? SkuFamily { get; set; }
        /// <summary>The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.SkuName? SkuName { get; set; }
        /// <summary>Resource tags.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisUpdateParametersTags Tag { get; set; }
        /// <summary>A dictionary of tenant settings</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Models.Api20230801.IRedisCommonPropertiesTenantSettings TenantSetting { get; set; }
        /// <summary>
        /// Optional: Specifies the update channel for the monthly Redis updates your Redis Cache will receive. Caches using 'Preview'
        /// update channel get latest Redis updates at least 4 weeks ahead of 'Stable' channel caches. Default value is 'Stable'.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Redis.Support.UpdateChannel? UpdateChannel { get; set; }

    }
}