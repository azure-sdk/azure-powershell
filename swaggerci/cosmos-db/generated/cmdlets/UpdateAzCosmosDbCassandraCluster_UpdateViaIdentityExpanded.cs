// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Extensions;
    using System;

    /// <summary>Updates some of the properties of a managed Cassandra cluster.</summary>
    /// <remarks>
    /// [OpenAPI] Update=>PATCH:"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsData.Update, @"AzCosmosDbCassandraCluster_UpdateViaIdentityExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IClusterResource))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Description(@"Updates some of the properties of a managed Cassandra cluster.")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Generated]
    public partial class UpdateAzCosmosDbCassandraCluster_UpdateViaIdentityExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.IEventListener
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>Representation of a managed Cassandra cluster.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IClusterResource _body = new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ClusterResource();

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>when specified, runs this cmdlet as a PowerShell job</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Run the command as a job")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter AsJob { get; set; }

        /// <summary>
        /// Which authentication method Cassandra should use to authenticate clients. 'None' turns off authentication, so should not
        /// be used except in emergencies. 'Cassandra' is the default password based authentication. The default is 'Cassandra'.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Which authentication method Cassandra should use to authenticate clients. 'None' turns off authentication, so should not be used except in emergencies. 'Cassandra' is the default password based authentication. The default is 'Cassandra'.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Which authentication method Cassandra should use to authenticate clients. 'None' turns off authentication, so should not be used except in emergencies. 'Cassandra' is the default password based authentication. The default is 'Cassandra'.",
        SerializedName = @"authenticationMethod",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Support.AuthenticationMethod) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Support.AuthenticationMethod))]
        public Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Support.AuthenticationMethod AuthenticationMethod { get => _body.AuthenticationMethod ?? ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Support.AuthenticationMethod)""); set => _body.AuthenticationMethod = value; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>Whether Cassandra audit logging is enabled</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Whether Cassandra audit logging is enabled")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether Cassandra audit logging is enabled",
        SerializedName = @"cassandraAuditLoggingEnabled",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter CassandraAuditLoggingEnabled { get => _body.CassandraAuditLoggingEnabled ?? default(global::System.Management.Automation.SwitchParameter); set => _body.CassandraAuditLoggingEnabled = value; }

        /// <summary>
        /// Which version of Cassandra should this cluster converge to running (e.g., 3.11). When updated, the cluster may take some
        /// time to migrate to the new version.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Which version of Cassandra should this cluster converge to running (e.g., 3.11). When updated, the cluster may take some time to migrate to the new version.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Which version of Cassandra should this cluster converge to running (e.g., 3.11). When updated, the cluster may take some time to migrate to the new version.",
        SerializedName = @"cassandraVersion",
        PossibleTypes = new [] { typeof(string) })]
        public string CassandraVersion { get => _body.CassandraVersion ?? null; set => _body.CassandraVersion = value; }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.CosmosDbManagementClient Client => Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Module.Instance.ClientAPI;

        /// <summary>
        /// List of TLS certificates used to authorize clients connecting to the cluster. All connections are TLS encrypted whether
        /// clientCertificates is set or not, but if clientCertificates is set, the managed Cassandra cluster will reject all connections
        /// not bearing a TLS client certificate that can be validated from one or more of the public certificates in this property.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "List of TLS certificates used to authorize clients connecting to the cluster. All connections are TLS encrypted whether clientCertificates is set or not, but if clientCertificates is set, the managed Cassandra cluster will reject all connections not bearing a TLS client certificate that can be validated from one or more of the public certificates in this property.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of TLS certificates used to authorize clients connecting to the cluster. All connections are TLS encrypted whether clientCertificates is set or not, but if clientCertificates is set, the managed Cassandra cluster will reject all connections not bearing a TLS client certificate that can be validated from one or more of the public certificates in this property.",
        SerializedName = @"clientCertificates",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICertificate) })]
        public Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICertificate[] ClientCertificate { get => _body.ClientCertificate ?? null /* arrayOf */; set => _body.ClientCertificate = value; }

        /// <summary>
        /// If you need to set the clusterName property in cassandra.yaml to something besides the resource name of the cluster, set
        /// the value to use on this property.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "If you need to set the clusterName property in cassandra.yaml to something besides the resource name of the cluster, set the value to use on this property.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If you need to set the clusterName property in cassandra.yaml to something besides the resource name of the cluster, set the value to use on this property.",
        SerializedName = @"clusterNameOverride",
        PossibleTypes = new [] { typeof(string) })]
        public string ClusterNameOverride { get => _body.ClusterNameOverride ?? null; set => _body.ClusterNameOverride = value; }

        /// <summary>Whether the cluster and associated data centers has been deallocated.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Whether the cluster and associated data centers has been deallocated.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether the cluster and associated data centers has been deallocated.",
        SerializedName = @"deallocated",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter Deallocated { get => _body.Deallocated ?? default(global::System.Management.Automation.SwitchParameter); set => _body.Deallocated = value; }

        /// <summary>
        /// The credentials, account, tenant, and subscription used for communication with Azure
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The credentials, account, tenant, and subscription used for communication with Azure.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>
        /// Resource id of a subnet that this cluster's management service should have its network interface attached to. The subnet
        /// must be routable to all subnets that will be delegated to data centers. The resource id must be of the form '/subscriptions/<subscription
        /// id>/resourceGroups/<resource group>/providers/Microsoft.Network/virtualNetworks/<virtual network>/subnets/<subnet>'
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Resource id of a subnet that this cluster's management service should have its network interface attached to. The subnet must be routable to all subnets that will be delegated to data centers. The resource id must be of the form '/subscriptions/<subscription id>/resourceGroups/<resource group>/providers/Microsoft.Network/virtualNetworks/<virtual network>/subnets/<subnet>'")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource id of a subnet that this cluster's management service should have its network interface attached to. The subnet must be routable to all subnets that will be delegated to data centers. The resource id must be of the form '/subscriptions/<subscription id>/resourceGroups/<resource group>/providers/Microsoft.Network/virtualNetworks/<virtual network>/subnets/<subnet>'",
        SerializedName = @"delegatedManagementSubnetId",
        PossibleTypes = new [] { typeof(string) })]
        public string DelegatedManagementSubnetId { get => _body.DelegatedManagementSubnetId ?? null; set => _body.DelegatedManagementSubnetId = value; }

        /// <summary>
        /// List of TLS certificates used to authorize gossip from unmanaged data centers. The TLS certificates of all nodes in unmanaged
        /// data centers must be verifiable using one of the certificates provided in this property.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "List of TLS certificates used to authorize gossip from unmanaged data centers. The TLS certificates of all nodes in unmanaged data centers must be verifiable using one of the certificates provided in this property.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of TLS certificates used to authorize gossip from unmanaged data centers. The TLS certificates of all nodes in unmanaged data centers must be verifiable using one of the certificates provided in this property.",
        SerializedName = @"externalGossipCertificates",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICertificate) })]
        public Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICertificate[] ExternalGossipCertificate { get => _body.ExternalGossipCertificate ?? null /* arrayOf */; set => _body.ExternalGossipCertificate = value; }

        /// <summary>
        /// List of IP addresses of seed nodes in unmanaged data centers. These will be added to the seed node lists of all managed
        /// nodes.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "List of IP addresses of seed nodes in unmanaged data centers. These will be added to the seed node lists of all managed nodes.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of IP addresses of seed nodes in unmanaged data centers. These will be added to the seed node lists of all managed nodes.",
        SerializedName = @"externalSeedNodes",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ISeedNode) })]
        public Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ISeedNode[] ExternalSeedNode { get => _body.ExternalSeedNode ?? null /* arrayOf */; set => _body.ExternalSeedNode = value; }

        /// <summary>
        /// Number of hours to wait between taking a backup of the cluster. To disable backups, set this property to 0.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Number of hours to wait between taking a backup of the cluster. To disable backups, set this property to 0.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of hours to wait between taking a backup of the cluster. To disable backups, set this property to 0.",
        SerializedName = @"hoursBetweenBackups",
        PossibleTypes = new [] { typeof(int) })]
        public int HoursBetweenBackup { get => _body.HoursBetweenBackup ?? default(int); set => _body.HoursBetweenBackup = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>The type of the resource.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The type of the resource.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of the resource.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Support.ManagedCassandraResourceIdentityType) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Support.ManagedCassandraResourceIdentityType))]
        public Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Support.ManagedCassandraResourceIdentityType IdentityType { get => _body.IdentityType ?? ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Support.ManagedCassandraResourceIdentityType)""); set => _body.IdentityType = value; }

        /// <summary>
        /// Initial password for clients connecting as admin to the cluster. Should be changed after cluster creation. Returns null
        /// on GET. This field only applies when the authenticationMethod field is 'Cassandra'.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Initial password for clients connecting as admin to the cluster. Should be changed after cluster creation. Returns null on GET. This field only applies when the authenticationMethod field is 'Cassandra'.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Initial password for clients connecting as admin to the cluster. Should be changed after cluster creation. Returns null on GET. This field only applies when the authenticationMethod field is 'Cassandra'.",
        SerializedName = @"initialCassandraAdminPassword",
        PossibleTypes = new [] { typeof(string) })]
        public string InitialCassandraAdminPassword { get => _body.InitialCassandraAdminPassword ?? null; set => _body.InitialCassandraAdminPassword = value; }

        /// <summary>Backing field for <see cref="InputObject" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.ICosmosDbIdentity _inputObject;

        /// <summary>Identity Parameter</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Identity Parameter", ValueFromPipeline = true)]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.ParameterCategory.Path)]
        public Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.ICosmosDbIdentity InputObject { get => this._inputObject; set => this._inputObject = value; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>The location of the resource group to which the resource belongs.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The location of the resource group to which the resource belongs.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The location of the resource group to which the resource belongs.",
        SerializedName = @"location",
        PossibleTypes = new [] { typeof(string) })]
        public string Location { get => _body.Location ?? null; set => _body.Location = value; }

        /// <summary>
        /// <see cref="Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>
        /// when specified, will make the remote call, and return an AsyncOperationResponse, letting the remote operation continue
        /// asynchronously.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Run the command asynchronously")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter NoWait { get; set; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>IP address of this seed node.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "IP address of this seed node.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"IP address of this seed node.",
        SerializedName = @"ipAddress",
        PossibleTypes = new [] { typeof(string) })]
        public string PrometheuEndpointIPAddress { get => _body.PrometheuEndpointIPAddress ?? null; set => _body.PrometheuEndpointIPAddress = value; }

        /// <summary>The status of the resource at the time the operation was called.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The status of the resource at the time the operation was called.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The status of the resource at the time the operation was called.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Support.ManagedCassandraProvisioningState) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Support.ManagedCassandraProvisioningState))]
        public Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Support.ManagedCassandraProvisioningState ProvisioningState { get => _body.ProvisioningState ?? ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Support.ManagedCassandraProvisioningState)""); set => _body.ProvisioningState = value; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>
        /// Should automatic repairs run on this cluster If omitted, this is true, and should stay true unless you are running a hybrid
        /// cluster where you are already doing your own repairs.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Should automatic repairs run on this cluster If omitted, this is true, and should stay true unless you are running a hybrid cluster where you are already doing your own repairs.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Should automatic repairs run on this cluster If omitted, this is true, and should stay true unless you are running a hybrid cluster where you are already doing your own repairs.",
        SerializedName = @"repairEnabled",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter RepairEnabled { get => _body.RepairEnabled ?? default(global::System.Management.Automation.SwitchParameter); set => _body.RepairEnabled = value; }

        /// <summary>
        /// To create an empty cluster, omit this field or set it to null. To restore a backup into a new cluster, set this field
        /// to the resource id of the backup.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "To create an empty cluster, omit this field or set it to null. To restore a backup into a new cluster, set this field to the resource id of the backup.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"To create an empty cluster, omit this field or set it to null. To restore a backup into a new cluster, set this field to the resource id of the backup.",
        SerializedName = @"restoreFromBackupId",
        PossibleTypes = new [] { typeof(string) })]
        public string RestoreFromBackupId { get => _body.RestoreFromBackupId ?? null; set => _body.RestoreFromBackupId = value; }

        /// <summary>
        /// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource
        /// (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than
        /// 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set
        /// with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB",
        /// and "MongoDB".
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.ExportAs(typeof(global::System.Collections.Hashtable))]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Category(global::Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with ""defaultExperience"": ""Cassandra"". Current ""defaultExperience"" values also include ""Table"", ""Graph"", ""DocumentDB"", and ""MongoDB"".",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20220815.ITags) })]
        public Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20220815.ITags Tag { get => _body.Tag ?? null /* object */; set => _body.Tag = value; }

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20220815.ICloudError">Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20220815.ICloudError</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20220815.ICloudError> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IClusterResource">Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IClusterResource</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IClusterResource> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Creates a duplicate instance of this cmdlet (via JSON serialization).</summary>
        /// <returns>
        /// a duplicate instance of UpdateAzCosmosDbCassandraCluster_UpdateViaIdentityExpanded
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Cmdlets.UpdateAzCosmosDbCassandraCluster_UpdateViaIdentityExpanded Clone()
        {
            var clone = new UpdateAzCosmosDbCassandraCluster_UpdateViaIdentityExpanded();
            clone.__correlationId = this.__correlationId;
            clone.__processRecordId = this.__processRecordId;
            clone.DefaultProfile = this.DefaultProfile;
            clone.InvocationInformation = this.InvocationInformation;
            clone.Proxy = this.Proxy;
            clone.Pipeline = this.Pipeline;
            clone.AsJob = this.AsJob;
            clone.Break = this.Break;
            clone.ProxyCredential = this.ProxyCredential;
            clone.ProxyUseDefaultCredentials = this.ProxyUseDefaultCredentials;
            clone.HttpPipelinePrepend = this.HttpPipelinePrepend;
            clone.HttpPipelineAppend = this.HttpPipelineAppend;
            clone._body = this._body;
            return clone;
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {

        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Events.Information:
                    {
                        // When an operation supports asjob, Information messages must go thru verbose.
                        WriteVerbose($"INFORMATION: {(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Events.DelayBeforePolling:
                    {
                        if (true == MyInvocation?.BoundParameters?.ContainsKey("NoWait"))
                        {
                            var data = messageData();
                            if (data.ResponseMessage is System.Net.Http.HttpResponseMessage response)
                            {
                                var asyncOperation = response.GetFirstHeader(@"Azure-AsyncOperation");
                                var location = response.GetFirstHeader(@"Location");
                                var uri = global::System.String.IsNullOrEmpty(asyncOperation) ? global::System.String.IsNullOrEmpty(location) ? response.RequestMessage.RequestUri.AbsoluteUri : location : asyncOperation;
                                WriteObject(new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.PowerShell.AsyncOperationResponse { Target = uri });
                                // do nothing more.
                                data.Cancel();
                                return;
                            }
                        }
                        break;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Module.Instance.Signal(id, token, messageData, (i,t,m) => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.IEventListener)this).Signal(i,t,()=> Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.EventDataConverter.ConvertFrom( m() ) as Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.EventData ), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'CassandraClustersUpdate' operation"))
                {
                    if (true == MyInvocation?.BoundParameters?.ContainsKey("AsJob"))
                    {
                        var instance = this.Clone();
                        var job = new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.PowerShell.AsyncJob(instance, this.MyInvocation.Line, this.MyInvocation.MyCommand.Name, this._cancellationTokenSource.Token, this._cancellationTokenSource.Cancel);
                        JobRepository.Add(job);
                        var task = instance.ProcessRecordAsync();
                        job.Monitor(task);
                        WriteObject(job);
                    }
                    else
                    {
                        using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.IEventListener)this).Token) )
                        {
                            asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.IEventListener)this).Token);
                        }
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    if (InputObject?.Id != null)
                    {
                        await this.Client.CassandraClustersUpdateViaIdentity(InputObject.Id, _body, onOk, onDefault, this, Pipeline);
                    }
                    else
                    {
                        // try to call with PATH parameters from Input Object
                        if (null == InputObject.SubscriptionId)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InputObject has null value for InputObject.SubscriptionId"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InputObject) );
                        }
                        if (null == InputObject.ResourceGroupName)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InputObject has null value for InputObject.ResourceGroupName"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InputObject) );
                        }
                        if (null == InputObject.ClusterName)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InputObject has null value for InputObject.ClusterName"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InputObject) );
                        }
                        await this.Client.CassandraClustersUpdate(InputObject.SubscriptionId ?? null, InputObject.ResourceGroupName ?? null, InputObject.ClusterName ?? null, _body, onOk, onDefault, this, Pipeline);
                    }
                    await ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  body=_body})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <summary>
        /// Intializes a new instance of the <see cref="UpdateAzCosmosDbCassandraCluster_UpdateViaIdentityExpanded" /> cmdlet class.
        /// </summary>
        public UpdateAzCosmosDbCassandraCluster_UpdateViaIdentityExpanded()
        {

        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20220815.ICloudError">Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20220815.ICloudError</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20220815.ICloudError> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.Message;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20220815.ICloudError>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new { body=_body })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { body=_body })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IClusterResource">Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IClusterResource</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IClusterResource> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IClusterResource
                WriteObject((await response));
            }
        }
    }
}