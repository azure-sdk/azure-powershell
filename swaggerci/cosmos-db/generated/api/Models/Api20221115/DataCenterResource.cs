// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115
{
    using static Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Extensions;

    /// <summary>A managed Cassandra data center.</summary>
    public partial class DataCenterResource :
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResource,
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResourceInternal,
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20220815.IArmProxyResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20220815.IArmProxyResource __armProxyResource = new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20220815.ArmProxyResource();

        /// <summary>
        /// If the azure data center has Availability Zone support, apply it to the Virtual Machine ScaleSet that host the cassandra
        /// data center virtual machines.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Inlined)]
        public bool? AvailabilityZone { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResourcePropertiesInternal)Property).AvailabilityZone; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResourcePropertiesInternal)Property).AvailabilityZone = value ?? default(bool); }

        /// <summary>
        /// Indicates the Key Uri of the customer key to use for encryption of the backup storage account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Inlined)]
        public string BackupStorageCustomerKeyUri { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResourcePropertiesInternal)Property).BackupStorageCustomerKeyUri; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResourcePropertiesInternal)Property).BackupStorageCustomerKeyUri = value ?? null; }

        /// <summary>
        /// A fragment of a cassandra.yaml configuration file to be included in the cassandra.yaml for all nodes in this data center.
        /// The fragment should be Base64 encoded, and only a subset of keys are allowed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Inlined)]
        public string Base64EncodedCassandraYamlFragment { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResourcePropertiesInternal)Property).Base64EncodedCassandraYamlFragment; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResourcePropertiesInternal)Property).Base64EncodedCassandraYamlFragment = value ?? null; }

        /// <summary>The region this data center should be created in.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Inlined)]
        public string DataCenterLocation { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResourcePropertiesInternal)Property).DataCenterLocation; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResourcePropertiesInternal)Property).DataCenterLocation = value ?? null; }

        /// <summary>
        /// Resource id of a subnet the nodes in this data center should have their network interfaces connected to. The subnet must
        /// be in the same region specified in 'dataCenterLocation' and must be able to route to the subnet specified in the cluster's
        /// 'delegatedManagementSubnetId' property. This resource id will be of the form '/subscriptions/<subscription id>/resourceGroups/<resource
        /// group>/providers/Microsoft.Network/virtualNetworks/<virtual network>/subnets/<subnet>'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Inlined)]
        public string DelegatedSubnetId { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResourcePropertiesInternal)Property).DelegatedSubnetId; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResourcePropertiesInternal)Property).DelegatedSubnetId = value ?? null; }

        /// <summary>Number of disk used for data centers. Default value is 4.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Inlined)]
        public int? DiskCapacity { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResourcePropertiesInternal)Property).DiskCapacity; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResourcePropertiesInternal)Property).DiskCapacity = value ?? default(int); }

        /// <summary>Disk SKU used for data centers. Default value is P30.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Inlined)]
        public string DiskSku { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResourcePropertiesInternal)Property).DiskSku; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResourcePropertiesInternal)Property).DiskSku = value ?? null; }

        /// <summary>The unique resource identifier of the database account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20220815.IArmProxyResourceInternal)__armProxyResource).Id; }

        /// <summary>
        /// Key uri to use for encryption of managed disks. Ensure the system assigned identity of the cluster has been assigned appropriate
        /// permissions(key get/wrap/unwrap permissions) on the key.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Inlined)]
        public string ManagedDiskCustomerKeyUri { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResourcePropertiesInternal)Property).ManagedDiskCustomerKeyUri; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResourcePropertiesInternal)Property).ManagedDiskCustomerKeyUri = value ?? null; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20220815.IArmProxyResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20220815.IArmProxyResourceInternal)__armProxyResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20220815.IArmProxyResourceInternal)__armProxyResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20220815.IArmProxyResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20220815.IArmProxyResourceInternal)__armProxyResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20220815.IArmProxyResourceInternal)__armProxyResource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20220815.IArmProxyResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20220815.IArmProxyResourceInternal)__armProxyResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20220815.IArmProxyResourceInternal)__armProxyResource).Type = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResourceProperties Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResourceInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.DataCenterResourceProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for SeedNode</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ISeedNode[] Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResourceInternal.SeedNode { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResourcePropertiesInternal)Property).SeedNode; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResourcePropertiesInternal)Property).SeedNode = value; }

        /// <summary>The name of the database account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20220815.IArmProxyResourceInternal)__armProxyResource).Name; }

        /// <summary>
        /// The number of nodes the data center should have. This is the desired number. After it is set, it may take some time for
        /// the data center to be scaled to match. To monitor the number of nodes and their status, use the fetchNodeStatus method
        /// on the cluster.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Inlined)]
        public int? NodeCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResourcePropertiesInternal)Property).NodeCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResourcePropertiesInternal)Property).NodeCount = value ?? default(int); }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResourceProperties _property;

        /// <summary>Properties of a managed Cassandra data center.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResourceProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.DataCenterResourceProperties()); set => this._property = value; }

        /// <summary>The status of the resource at the time the operation was called.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Support.ManagedCassandraProvisioningState? ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResourcePropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResourcePropertiesInternal)Property).ProvisioningState = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Support.ManagedCassandraProvisioningState)""); }

        /// <summary>
        /// IP addresses for seed nodes in this data center. This is for reference. Generally you will want to use the seedNodes property
        /// on the cluster, which aggregates the seed nodes from all data centers in the cluster.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ISeedNode[] SeedNode { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResourcePropertiesInternal)Property).SeedNode; }

        /// <summary>Virtual Machine SKU used for data centers. Default value is Standard_DS14_v2</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Inlined)]
        public string Sku { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResourcePropertiesInternal)Property).Sku; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResourcePropertiesInternal)Property).Sku = value ?? null; }

        /// <summary>The type of Azure resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20220815.IArmProxyResourceInternal)__armProxyResource).Type; }

        /// <summary>Creates an new <see cref="DataCenterResource" /> instance.</summary>
        public DataCenterResource()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__armProxyResource), __armProxyResource);
            await eventListener.AssertObjectIsValid(nameof(__armProxyResource), __armProxyResource);
        }
    }
    /// A managed Cassandra data center.
    public partial interface IDataCenterResource :
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20220815.IArmProxyResource
    {
        /// <summary>
        /// If the azure data center has Availability Zone support, apply it to the Virtual Machine ScaleSet that host the cassandra
        /// data center virtual machines.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If the azure data center has Availability Zone support, apply it to the Virtual Machine ScaleSet that host the cassandra data center virtual machines.",
        SerializedName = @"availabilityZone",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AvailabilityZone { get; set; }
        /// <summary>
        /// Indicates the Key Uri of the customer key to use for encryption of the backup storage account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates the Key Uri of the customer key to use for encryption of the backup storage account.",
        SerializedName = @"backupStorageCustomerKeyUri",
        PossibleTypes = new [] { typeof(string) })]
        string BackupStorageCustomerKeyUri { get; set; }
        /// <summary>
        /// A fragment of a cassandra.yaml configuration file to be included in the cassandra.yaml for all nodes in this data center.
        /// The fragment should be Base64 encoded, and only a subset of keys are allowed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A fragment of a cassandra.yaml configuration file to be included in the cassandra.yaml for all nodes in this data center. The fragment should be Base64 encoded, and only a subset of keys are allowed.",
        SerializedName = @"base64EncodedCassandraYamlFragment",
        PossibleTypes = new [] { typeof(string) })]
        string Base64EncodedCassandraYamlFragment { get; set; }
        /// <summary>The region this data center should be created in.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The region this data center should be created in.",
        SerializedName = @"dataCenterLocation",
        PossibleTypes = new [] { typeof(string) })]
        string DataCenterLocation { get; set; }
        /// <summary>
        /// Resource id of a subnet the nodes in this data center should have their network interfaces connected to. The subnet must
        /// be in the same region specified in 'dataCenterLocation' and must be able to route to the subnet specified in the cluster's
        /// 'delegatedManagementSubnetId' property. This resource id will be of the form '/subscriptions/<subscription id>/resourceGroups/<resource
        /// group>/providers/Microsoft.Network/virtualNetworks/<virtual network>/subnets/<subnet>'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource id of a subnet the nodes in this data center should have their network interfaces connected to. The subnet must be in the same region specified in 'dataCenterLocation' and must be able to route to the subnet specified in the cluster's 'delegatedManagementSubnetId' property. This resource id will be of the form '/subscriptions/<subscription id>/resourceGroups/<resource group>/providers/Microsoft.Network/virtualNetworks/<virtual network>/subnets/<subnet>'.",
        SerializedName = @"delegatedSubnetId",
        PossibleTypes = new [] { typeof(string) })]
        string DelegatedSubnetId { get; set; }
        /// <summary>Number of disk used for data centers. Default value is 4.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of disk used for data centers. Default value is 4.",
        SerializedName = @"diskCapacity",
        PossibleTypes = new [] { typeof(int) })]
        int? DiskCapacity { get; set; }
        /// <summary>Disk SKU used for data centers. Default value is P30.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Disk SKU used for data centers. Default value is P30.",
        SerializedName = @"diskSku",
        PossibleTypes = new [] { typeof(string) })]
        string DiskSku { get; set; }
        /// <summary>
        /// Key uri to use for encryption of managed disks. Ensure the system assigned identity of the cluster has been assigned appropriate
        /// permissions(key get/wrap/unwrap permissions) on the key.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Key uri to use for encryption of managed disks. Ensure the system assigned identity of the cluster has been assigned appropriate permissions(key get/wrap/unwrap permissions) on the key.",
        SerializedName = @"managedDiskCustomerKeyUri",
        PossibleTypes = new [] { typeof(string) })]
        string ManagedDiskCustomerKeyUri { get; set; }
        /// <summary>
        /// The number of nodes the data center should have. This is the desired number. After it is set, it may take some time for
        /// the data center to be scaled to match. To monitor the number of nodes and their status, use the fetchNodeStatus method
        /// on the cluster.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of nodes the data center should have. This is the desired number. After it is set, it may take some time for the data center to be scaled to match. To monitor the number of nodes and their status, use the fetchNodeStatus method on the cluster.",
        SerializedName = @"nodeCount",
        PossibleTypes = new [] { typeof(int) })]
        int? NodeCount { get; set; }
        /// <summary>The status of the resource at the time the operation was called.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The status of the resource at the time the operation was called.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Support.ManagedCassandraProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Support.ManagedCassandraProvisioningState? ProvisioningState { get; set; }
        /// <summary>
        /// IP addresses for seed nodes in this data center. This is for reference. Generally you will want to use the seedNodes property
        /// on the cluster, which aggregates the seed nodes from all data centers in the cluster.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"IP addresses for seed nodes in this data center. This is for reference. Generally you will want to use the seedNodes property on the cluster, which aggregates the seed nodes from all data centers in the cluster.",
        SerializedName = @"seedNodes",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ISeedNode) })]
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ISeedNode[] SeedNode { get;  }
        /// <summary>Virtual Machine SKU used for data centers. Default value is Standard_DS14_v2</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Virtual Machine SKU used for data centers. Default value is Standard_DS14_v2",
        SerializedName = @"sku",
        PossibleTypes = new [] { typeof(string) })]
        string Sku { get; set; }

    }
    /// A managed Cassandra data center.
    internal partial interface IDataCenterResourceInternal :
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20220815.IArmProxyResourceInternal
    {
        /// <summary>
        /// If the azure data center has Availability Zone support, apply it to the Virtual Machine ScaleSet that host the cassandra
        /// data center virtual machines.
        /// </summary>
        bool? AvailabilityZone { get; set; }
        /// <summary>
        /// Indicates the Key Uri of the customer key to use for encryption of the backup storage account.
        /// </summary>
        string BackupStorageCustomerKeyUri { get; set; }
        /// <summary>
        /// A fragment of a cassandra.yaml configuration file to be included in the cassandra.yaml for all nodes in this data center.
        /// The fragment should be Base64 encoded, and only a subset of keys are allowed.
        /// </summary>
        string Base64EncodedCassandraYamlFragment { get; set; }
        /// <summary>The region this data center should be created in.</summary>
        string DataCenterLocation { get; set; }
        /// <summary>
        /// Resource id of a subnet the nodes in this data center should have their network interfaces connected to. The subnet must
        /// be in the same region specified in 'dataCenterLocation' and must be able to route to the subnet specified in the cluster's
        /// 'delegatedManagementSubnetId' property. This resource id will be of the form '/subscriptions/<subscription id>/resourceGroups/<resource
        /// group>/providers/Microsoft.Network/virtualNetworks/<virtual network>/subnets/<subnet>'.
        /// </summary>
        string DelegatedSubnetId { get; set; }
        /// <summary>Number of disk used for data centers. Default value is 4.</summary>
        int? DiskCapacity { get; set; }
        /// <summary>Disk SKU used for data centers. Default value is P30.</summary>
        string DiskSku { get; set; }
        /// <summary>
        /// Key uri to use for encryption of managed disks. Ensure the system assigned identity of the cluster has been assigned appropriate
        /// permissions(key get/wrap/unwrap permissions) on the key.
        /// </summary>
        string ManagedDiskCustomerKeyUri { get; set; }
        /// <summary>
        /// The number of nodes the data center should have. This is the desired number. After it is set, it may take some time for
        /// the data center to be scaled to match. To monitor the number of nodes and their status, use the fetchNodeStatus method
        /// on the cluster.
        /// </summary>
        int? NodeCount { get; set; }
        /// <summary>Properties of a managed Cassandra data center.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IDataCenterResourceProperties Property { get; set; }
        /// <summary>The status of the resource at the time the operation was called.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Support.ManagedCassandraProvisioningState? ProvisioningState { get; set; }
        /// <summary>
        /// IP addresses for seed nodes in this data center. This is for reference. Generally you will want to use the seedNodes property
        /// on the cluster, which aggregates the seed nodes from all data centers in the cluster.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ISeedNode[] SeedNode { get; set; }
        /// <summary>Virtual Machine SKU used for data centers. Default value is Standard_DS14_v2</summary>
        string Sku { get; set; }

    }
}