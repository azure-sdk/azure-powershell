// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115
{
    using static Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Extensions;

    /// <summary>Properties of a managed Cassandra cluster.</summary>
    public partial class ClusterResourceProperties :
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IClusterResourceProperties,
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IClusterResourcePropertiesInternal
    {

        /// <summary>Backing field for <see cref="AuthenticationMethod" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Support.AuthenticationMethod? _authenticationMethod;

        /// <summary>
        /// Which authentication method Cassandra should use to authenticate clients. 'None' turns off authentication, so should not
        /// be used except in emergencies. 'Cassandra' is the default password based authentication. The default is 'Cassandra'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Support.AuthenticationMethod? AuthenticationMethod { get => this._authenticationMethod; set => this._authenticationMethod = value; }

        /// <summary>Backing field for <see cref="CassandraAuditLoggingEnabled" /> property.</summary>
        private bool? _cassandraAuditLoggingEnabled;

        /// <summary>Whether Cassandra audit logging is enabled</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Owned)]
        public bool? CassandraAuditLoggingEnabled { get => this._cassandraAuditLoggingEnabled; set => this._cassandraAuditLoggingEnabled = value; }

        /// <summary>Backing field for <see cref="CassandraVersion" /> property.</summary>
        private string _cassandraVersion;

        /// <summary>
        /// Which version of Cassandra should this cluster converge to running (e.g., 3.11). When updated, the cluster may take some
        /// time to migrate to the new version.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Owned)]
        public string CassandraVersion { get => this._cassandraVersion; set => this._cassandraVersion = value; }

        /// <summary>Backing field for <see cref="ClientCertificate" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICertificate[] _clientCertificate;

        /// <summary>
        /// List of TLS certificates used to authorize clients connecting to the cluster. All connections are TLS encrypted whether
        /// clientCertificates is set or not, but if clientCertificates is set, the managed Cassandra cluster will reject all connections
        /// not bearing a TLS client certificate that can be validated from one or more of the public certificates in this property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICertificate[] ClientCertificate { get => this._clientCertificate; set => this._clientCertificate = value; }

        /// <summary>Backing field for <see cref="ClusterNameOverride" /> property.</summary>
        private string _clusterNameOverride;

        /// <summary>
        /// If you need to set the clusterName property in cassandra.yaml to something besides the resource name of the cluster, set
        /// the value to use on this property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Owned)]
        public string ClusterNameOverride { get => this._clusterNameOverride; set => this._clusterNameOverride = value; }

        /// <summary>Backing field for <see cref="Deallocated" /> property.</summary>
        private bool? _deallocated;

        /// <summary>Whether the cluster and associated data centers has been deallocated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Owned)]
        public bool? Deallocated { get => this._deallocated; set => this._deallocated = value; }

        /// <summary>Backing field for <see cref="DelegatedManagementSubnetId" /> property.</summary>
        private string _delegatedManagementSubnetId;

        /// <summary>
        /// Resource id of a subnet that this cluster's management service should have its network interface attached to. The subnet
        /// must be routable to all subnets that will be delegated to data centers. The resource id must be of the form '/subscriptions/<subscription
        /// id>/resourceGroups/<resource group>/providers/Microsoft.Network/virtualNetworks/<virtual network>/subnets/<subnet>'
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Owned)]
        public string DelegatedManagementSubnetId { get => this._delegatedManagementSubnetId; set => this._delegatedManagementSubnetId = value; }

        /// <summary>Backing field for <see cref="ExternalGossipCertificate" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICertificate[] _externalGossipCertificate;

        /// <summary>
        /// List of TLS certificates used to authorize gossip from unmanaged data centers. The TLS certificates of all nodes in unmanaged
        /// data centers must be verifiable using one of the certificates provided in this property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICertificate[] ExternalGossipCertificate { get => this._externalGossipCertificate; set => this._externalGossipCertificate = value; }

        /// <summary>Backing field for <see cref="ExternalSeedNode" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ISeedNode[] _externalSeedNode;

        /// <summary>
        /// List of IP addresses of seed nodes in unmanaged data centers. These will be added to the seed node lists of all managed
        /// nodes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ISeedNode[] ExternalSeedNode { get => this._externalSeedNode; set => this._externalSeedNode = value; }

        /// <summary>Backing field for <see cref="GossipCertificate" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICertificate[] _gossipCertificate;

        /// <summary>
        /// List of TLS certificates that unmanaged nodes must trust for gossip with managed nodes. All managed nodes will present
        /// TLS client certificates that are verifiable using one of the certificates provided in this property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICertificate[] GossipCertificate { get => this._gossipCertificate; }

        /// <summary>Backing field for <see cref="HoursBetweenBackup" /> property.</summary>
        private int? _hoursBetweenBackup;

        /// <summary>
        /// Number of hours to wait between taking a backup of the cluster. To disable backups, set this property to 0.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Owned)]
        public int? HoursBetweenBackup { get => this._hoursBetweenBackup; set => this._hoursBetweenBackup = value; }

        /// <summary>Backing field for <see cref="InitialCassandraAdminPassword" /> property.</summary>
        private string _initialCassandraAdminPassword;

        /// <summary>
        /// Initial password for clients connecting as admin to the cluster. Should be changed after cluster creation. Returns null
        /// on GET. This field only applies when the authenticationMethod field is 'Cassandra'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Owned)]
        public string InitialCassandraAdminPassword { get => this._initialCassandraAdminPassword; set => this._initialCassandraAdminPassword = value; }

        /// <summary>Internal Acessors for GossipCertificate</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICertificate[] Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IClusterResourcePropertiesInternal.GossipCertificate { get => this._gossipCertificate; set { {_gossipCertificate = value;} } }

        /// <summary>Internal Acessors for PrometheusEndpoint</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ISeedNode Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IClusterResourcePropertiesInternal.PrometheusEndpoint { get => (this._prometheusEndpoint = this._prometheusEndpoint ?? new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.SeedNode()); set { {_prometheusEndpoint = value;} } }

        /// <summary>Internal Acessors for SeedNode</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ISeedNode[] Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.IClusterResourcePropertiesInternal.SeedNode { get => this._seedNode; set { {_seedNode = value;} } }

        /// <summary>IP address of this seed node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Inlined)]
        public string PrometheuEndpointIPAddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ISeedNodeInternal)PrometheusEndpoint).IPAddress; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ISeedNodeInternal)PrometheusEndpoint).IPAddress = value ?? null; }

        /// <summary>Backing field for <see cref="PrometheusEndpoint" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ISeedNode _prometheusEndpoint;

        /// <summary>
        /// Hostname or IP address where the Prometheus endpoint containing data about the managed Cassandra nodes can be reached.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ISeedNode PrometheusEndpoint { get => (this._prometheusEndpoint = this._prometheusEndpoint ?? new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.SeedNode()); set => this._prometheusEndpoint = value; }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Support.ManagedCassandraProvisioningState? _provisioningState;

        /// <summary>The status of the resource at the time the operation was called.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Support.ManagedCassandraProvisioningState? ProvisioningState { get => this._provisioningState; set => this._provisioningState = value; }

        /// <summary>Backing field for <see cref="RepairEnabled" /> property.</summary>
        private bool? _repairEnabled;

        /// <summary>
        /// Should automatic repairs run on this cluster? If omitted, this is true, and should stay true unless you are running a
        /// hybrid cluster where you are already doing your own repairs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Owned)]
        public bool? RepairEnabled { get => this._repairEnabled; set => this._repairEnabled = value; }

        /// <summary>Backing field for <see cref="RestoreFromBackupId" /> property.</summary>
        private string _restoreFromBackupId;

        /// <summary>
        /// To create an empty cluster, omit this field or set it to null. To restore a backup into a new cluster, set this field
        /// to the resource id of the backup.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Owned)]
        public string RestoreFromBackupId { get => this._restoreFromBackupId; set => this._restoreFromBackupId = value; }

        /// <summary>Backing field for <see cref="SeedNode" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ISeedNode[] _seedNode;

        /// <summary>
        /// List of IP addresses of seed nodes in the managed data centers. These should be added to the seed node lists of all unmanaged
        /// nodes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ISeedNode[] SeedNode { get => this._seedNode; }

        /// <summary>Creates an new <see cref="ClusterResourceProperties" /> instance.</summary>
        public ClusterResourceProperties()
        {

        }
    }
    /// Properties of a managed Cassandra cluster.
    public partial interface IClusterResourceProperties :
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Which authentication method Cassandra should use to authenticate clients. 'None' turns off authentication, so should not
        /// be used except in emergencies. 'Cassandra' is the default password based authentication. The default is 'Cassandra'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Which authentication method Cassandra should use to authenticate clients. 'None' turns off authentication, so should not be used except in emergencies. 'Cassandra' is the default password based authentication. The default is 'Cassandra'.",
        SerializedName = @"authenticationMethod",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Support.AuthenticationMethod) })]
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Support.AuthenticationMethod? AuthenticationMethod { get; set; }
        /// <summary>Whether Cassandra audit logging is enabled</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether Cassandra audit logging is enabled",
        SerializedName = @"cassandraAuditLoggingEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? CassandraAuditLoggingEnabled { get; set; }
        /// <summary>
        /// Which version of Cassandra should this cluster converge to running (e.g., 3.11). When updated, the cluster may take some
        /// time to migrate to the new version.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Which version of Cassandra should this cluster converge to running (e.g., 3.11). When updated, the cluster may take some time to migrate to the new version.",
        SerializedName = @"cassandraVersion",
        PossibleTypes = new [] { typeof(string) })]
        string CassandraVersion { get; set; }
        /// <summary>
        /// List of TLS certificates used to authorize clients connecting to the cluster. All connections are TLS encrypted whether
        /// clientCertificates is set or not, but if clientCertificates is set, the managed Cassandra cluster will reject all connections
        /// not bearing a TLS client certificate that can be validated from one or more of the public certificates in this property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of TLS certificates used to authorize clients connecting to the cluster. All connections are TLS encrypted whether clientCertificates is set or not, but if clientCertificates is set, the managed Cassandra cluster will reject all connections not bearing a TLS client certificate that can be validated from one or more of the public certificates in this property.",
        SerializedName = @"clientCertificates",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICertificate) })]
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICertificate[] ClientCertificate { get; set; }
        /// <summary>
        /// If you need to set the clusterName property in cassandra.yaml to something besides the resource name of the cluster, set
        /// the value to use on this property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If you need to set the clusterName property in cassandra.yaml to something besides the resource name of the cluster, set the value to use on this property.",
        SerializedName = @"clusterNameOverride",
        PossibleTypes = new [] { typeof(string) })]
        string ClusterNameOverride { get; set; }
        /// <summary>Whether the cluster and associated data centers has been deallocated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether the cluster and associated data centers has been deallocated.",
        SerializedName = @"deallocated",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Deallocated { get; set; }
        /// <summary>
        /// Resource id of a subnet that this cluster's management service should have its network interface attached to. The subnet
        /// must be routable to all subnets that will be delegated to data centers. The resource id must be of the form '/subscriptions/<subscription
        /// id>/resourceGroups/<resource group>/providers/Microsoft.Network/virtualNetworks/<virtual network>/subnets/<subnet>'
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource id of a subnet that this cluster's management service should have its network interface attached to. The subnet must be routable to all subnets that will be delegated to data centers. The resource id must be of the form '/subscriptions/<subscription id>/resourceGroups/<resource group>/providers/Microsoft.Network/virtualNetworks/<virtual network>/subnets/<subnet>'",
        SerializedName = @"delegatedManagementSubnetId",
        PossibleTypes = new [] { typeof(string) })]
        string DelegatedManagementSubnetId { get; set; }
        /// <summary>
        /// List of TLS certificates used to authorize gossip from unmanaged data centers. The TLS certificates of all nodes in unmanaged
        /// data centers must be verifiable using one of the certificates provided in this property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of TLS certificates used to authorize gossip from unmanaged data centers. The TLS certificates of all nodes in unmanaged data centers must be verifiable using one of the certificates provided in this property.",
        SerializedName = @"externalGossipCertificates",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICertificate) })]
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICertificate[] ExternalGossipCertificate { get; set; }
        /// <summary>
        /// List of IP addresses of seed nodes in unmanaged data centers. These will be added to the seed node lists of all managed
        /// nodes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of IP addresses of seed nodes in unmanaged data centers. These will be added to the seed node lists of all managed nodes.",
        SerializedName = @"externalSeedNodes",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ISeedNode) })]
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ISeedNode[] ExternalSeedNode { get; set; }
        /// <summary>
        /// List of TLS certificates that unmanaged nodes must trust for gossip with managed nodes. All managed nodes will present
        /// TLS client certificates that are verifiable using one of the certificates provided in this property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"List of TLS certificates that unmanaged nodes must trust for gossip with managed nodes. All managed nodes will present TLS client certificates that are verifiable using one of the certificates provided in this property.",
        SerializedName = @"gossipCertificates",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICertificate) })]
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICertificate[] GossipCertificate { get;  }
        /// <summary>
        /// Number of hours to wait between taking a backup of the cluster. To disable backups, set this property to 0.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of hours to wait between taking a backup of the cluster. To disable backups, set this property to 0.",
        SerializedName = @"hoursBetweenBackups",
        PossibleTypes = new [] { typeof(int) })]
        int? HoursBetweenBackup { get; set; }
        /// <summary>
        /// Initial password for clients connecting as admin to the cluster. Should be changed after cluster creation. Returns null
        /// on GET. This field only applies when the authenticationMethod field is 'Cassandra'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Initial password for clients connecting as admin to the cluster. Should be changed after cluster creation. Returns null on GET. This field only applies when the authenticationMethod field is 'Cassandra'.",
        SerializedName = @"initialCassandraAdminPassword",
        PossibleTypes = new [] { typeof(string) })]
        string InitialCassandraAdminPassword { get; set; }
        /// <summary>IP address of this seed node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"IP address of this seed node.",
        SerializedName = @"ipAddress",
        PossibleTypes = new [] { typeof(string) })]
        string PrometheuEndpointIPAddress { get; set; }
        /// <summary>The status of the resource at the time the operation was called.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The status of the resource at the time the operation was called.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Support.ManagedCassandraProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Support.ManagedCassandraProvisioningState? ProvisioningState { get; set; }
        /// <summary>
        /// Should automatic repairs run on this cluster? If omitted, this is true, and should stay true unless you are running a
        /// hybrid cluster where you are already doing your own repairs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Should automatic repairs run on this cluster? If omitted, this is true, and should stay true unless you are running a hybrid cluster where you are already doing your own repairs.",
        SerializedName = @"repairEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RepairEnabled { get; set; }
        /// <summary>
        /// To create an empty cluster, omit this field or set it to null. To restore a backup into a new cluster, set this field
        /// to the resource id of the backup.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"To create an empty cluster, omit this field or set it to null. To restore a backup into a new cluster, set this field to the resource id of the backup.",
        SerializedName = @"restoreFromBackupId",
        PossibleTypes = new [] { typeof(string) })]
        string RestoreFromBackupId { get; set; }
        /// <summary>
        /// List of IP addresses of seed nodes in the managed data centers. These should be added to the seed node lists of all unmanaged
        /// nodes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"List of IP addresses of seed nodes in the managed data centers. These should be added to the seed node lists of all unmanaged nodes.",
        SerializedName = @"seedNodes",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ISeedNode) })]
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ISeedNode[] SeedNode { get;  }

    }
    /// Properties of a managed Cassandra cluster.
    internal partial interface IClusterResourcePropertiesInternal

    {
        /// <summary>
        /// Which authentication method Cassandra should use to authenticate clients. 'None' turns off authentication, so should not
        /// be used except in emergencies. 'Cassandra' is the default password based authentication. The default is 'Cassandra'.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Support.AuthenticationMethod? AuthenticationMethod { get; set; }
        /// <summary>Whether Cassandra audit logging is enabled</summary>
        bool? CassandraAuditLoggingEnabled { get; set; }
        /// <summary>
        /// Which version of Cassandra should this cluster converge to running (e.g., 3.11). When updated, the cluster may take some
        /// time to migrate to the new version.
        /// </summary>
        string CassandraVersion { get; set; }
        /// <summary>
        /// List of TLS certificates used to authorize clients connecting to the cluster. All connections are TLS encrypted whether
        /// clientCertificates is set or not, but if clientCertificates is set, the managed Cassandra cluster will reject all connections
        /// not bearing a TLS client certificate that can be validated from one or more of the public certificates in this property.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICertificate[] ClientCertificate { get; set; }
        /// <summary>
        /// If you need to set the clusterName property in cassandra.yaml to something besides the resource name of the cluster, set
        /// the value to use on this property.
        /// </summary>
        string ClusterNameOverride { get; set; }
        /// <summary>Whether the cluster and associated data centers has been deallocated.</summary>
        bool? Deallocated { get; set; }
        /// <summary>
        /// Resource id of a subnet that this cluster's management service should have its network interface attached to. The subnet
        /// must be routable to all subnets that will be delegated to data centers. The resource id must be of the form '/subscriptions/<subscription
        /// id>/resourceGroups/<resource group>/providers/Microsoft.Network/virtualNetworks/<virtual network>/subnets/<subnet>'
        /// </summary>
        string DelegatedManagementSubnetId { get; set; }
        /// <summary>
        /// List of TLS certificates used to authorize gossip from unmanaged data centers. The TLS certificates of all nodes in unmanaged
        /// data centers must be verifiable using one of the certificates provided in this property.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICertificate[] ExternalGossipCertificate { get; set; }
        /// <summary>
        /// List of IP addresses of seed nodes in unmanaged data centers. These will be added to the seed node lists of all managed
        /// nodes.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ISeedNode[] ExternalSeedNode { get; set; }
        /// <summary>
        /// List of TLS certificates that unmanaged nodes must trust for gossip with managed nodes. All managed nodes will present
        /// TLS client certificates that are verifiable using one of the certificates provided in this property.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICertificate[] GossipCertificate { get; set; }
        /// <summary>
        /// Number of hours to wait between taking a backup of the cluster. To disable backups, set this property to 0.
        /// </summary>
        int? HoursBetweenBackup { get; set; }
        /// <summary>
        /// Initial password for clients connecting as admin to the cluster. Should be changed after cluster creation. Returns null
        /// on GET. This field only applies when the authenticationMethod field is 'Cassandra'.
        /// </summary>
        string InitialCassandraAdminPassword { get; set; }
        /// <summary>IP address of this seed node.</summary>
        string PrometheuEndpointIPAddress { get; set; }
        /// <summary>
        /// Hostname or IP address where the Prometheus endpoint containing data about the managed Cassandra nodes can be reached.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ISeedNode PrometheusEndpoint { get; set; }
        /// <summary>The status of the resource at the time the operation was called.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Support.ManagedCassandraProvisioningState? ProvisioningState { get; set; }
        /// <summary>
        /// Should automatic repairs run on this cluster? If omitted, this is true, and should stay true unless you are running a
        /// hybrid cluster where you are already doing your own repairs.
        /// </summary>
        bool? RepairEnabled { get; set; }
        /// <summary>
        /// To create an empty cluster, omit this field or set it to null. To restore a backup into a new cluster, set this field
        /// to the resource id of the backup.
        /// </summary>
        string RestoreFromBackupId { get; set; }
        /// <summary>
        /// List of IP addresses of seed nodes in the managed data centers. These should be added to the seed node lists of all unmanaged
        /// nodes.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ISeedNode[] SeedNode { get; set; }

    }
}