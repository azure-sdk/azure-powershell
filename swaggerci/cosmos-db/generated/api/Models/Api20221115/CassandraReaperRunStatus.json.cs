// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115
{
    using static Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Extensions;

    public partial class CassandraReaperRunStatus
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json serialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name= "returnNow" />
        /// output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonObject into a new instance of <see cref="CassandraReaperRunStatus" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal CassandraReaperRunStatus(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_cause = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString>("cause"), out var __jsonCause) ? (string)__jsonCause : (string)Cause;}
            {_owner = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString>("owner"), out var __jsonOwner) ? (string)__jsonOwner : (string)Owner;}
            {_id = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString>("id"), out var __jsonId) ? (string)__jsonId : (string)Id;}
            {_clusterName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString>("clusterName"), out var __jsonClusterName) ? (string)__jsonClusterName : (string)ClusterName;}
            {_columnFamily = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonArray>("columnFamilies"), out var __jsonColumnFamilies) ? If( __jsonColumnFamilies as Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonArray, out var __v) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__v, (__u)=>(string) (__u is Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString __t ? (string)(__t.ToString()) : null)) ))() : null : ColumnFamily;}
            {_keyspaceName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString>("keyspaceName"), out var __jsonKeyspaceName) ? (string)__jsonKeyspaceName : (string)KeyspaceName;}
            {_repairState = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString>("repairState"), out var __jsonRepairState) ? (string)__jsonRepairState : (string)RepairState;}
            {_intensity = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNumber>("intensity"), out var __jsonIntensity) ? (double?)__jsonIntensity : Intensity;}
            {_incrementalRepair = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonBoolean>("incrementalRepair"), out var __jsonIncrementalRepair) ? (bool?)__jsonIncrementalRepair : IncrementalRepair;}
            {_totalSegment = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNumber>("totalSegments"), out var __jsonTotalSegments) ? (int?)__jsonTotalSegments : TotalSegment;}
            {_repairParallelism = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString>("repairParallelism"), out var __jsonRepairParallelism) ? (string)__jsonRepairParallelism : (string)RepairParallelism;}
            {_segmentsRepaired = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNumber>("segmentsRepaired"), out var __jsonSegmentsRepaired) ? (int?)__jsonSegmentsRepaired : SegmentsRepaired;}
            {_lastEvent = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString>("lastEvent"), out var __jsonLastEvent) ? (string)__jsonLastEvent : (string)LastEvent;}
            {_duration = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString>("duration"), out var __jsonDuration) ? (string)__jsonDuration : (string)Duration;}
            {_node = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonArray>("nodes"), out var __jsonNodes) ? If( __jsonNodes as Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonArray, out var __q) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__q, (__p)=>(string) (__p is Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString __o ? (string)(__o.ToString()) : null)) ))() : null : Node;}
            {_datacenter = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonArray>("datacenters"), out var __jsonDatacenters) ? If( __jsonDatacenters as Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonArray, out var __l) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__l, (__k)=>(string) (__k is Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString __j ? (string)(__j.ToString()) : null)) ))() : null : Datacenter;}
            {_blacklistedTable = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonArray>("blacklistedTables"), out var __jsonBlacklistedTables) ? If( __jsonBlacklistedTables as Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonArray, out var __g) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__g, (__f)=>(string) (__f is Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString __e ? (string)(__e.ToString()) : null)) ))() : null : BlacklistedTable;}
            {_repairThreadCount = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNumber>("repairThreadCount"), out var __jsonRepairThreadCount) ? (int?)__jsonRepairThreadCount : RepairThreadCount;}
            {_repairUnitId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString>("repairUnitId"), out var __jsonRepairUnitId) ? (string)__jsonRepairUnitId : (string)RepairUnitId;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICassandraReaperRunStatus.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICassandraReaperRunStatus.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICassandraReaperRunStatus FromJson(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode node)
        {
            return node is Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonObject json ? new CassandraReaperRunStatus(json) : null;
        }

        /// <summary>
        /// Serializes this instance of <see cref="CassandraReaperRunStatus" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="CassandraReaperRunStatus" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode" />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            AddIf( null != (((object)this._cause)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString(this._cause.ToString()) : null, "cause" ,container.Add );
            AddIf( null != (((object)this._owner)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString(this._owner.ToString()) : null, "owner" ,container.Add );
            AddIf( null != (((object)this._id)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString(this._id.ToString()) : null, "id" ,container.Add );
            AddIf( null != (((object)this._clusterName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString(this._clusterName.ToString()) : null, "clusterName" ,container.Add );
            if (null != this._columnFamily)
            {
                var __w = new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.XNodeArray();
                foreach( var __x in this._columnFamily )
                {
                    AddIf(null != (((object)__x)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString(__x.ToString()) : null ,__w.Add);
                }
                container.Add("columnFamilies",__w);
            }
            AddIf( null != (((object)this._keyspaceName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString(this._keyspaceName.ToString()) : null, "keyspaceName" ,container.Add );
            AddIf( null != (((object)this._repairState)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString(this._repairState.ToString()) : null, "repairState" ,container.Add );
            AddIf( null != this._intensity ? (Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNumber((double)this._intensity) : null, "intensity" ,container.Add );
            AddIf( null != this._incrementalRepair ? (Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonBoolean((bool)this._incrementalRepair) : null, "incrementalRepair" ,container.Add );
            AddIf( null != this._totalSegment ? (Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNumber((int)this._totalSegment) : null, "totalSegments" ,container.Add );
            AddIf( null != (((object)this._repairParallelism)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString(this._repairParallelism.ToString()) : null, "repairParallelism" ,container.Add );
            AddIf( null != this._segmentsRepaired ? (Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNumber((int)this._segmentsRepaired) : null, "segmentsRepaired" ,container.Add );
            AddIf( null != (((object)this._lastEvent)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString(this._lastEvent.ToString()) : null, "lastEvent" ,container.Add );
            AddIf( null != (((object)this._duration)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString(this._duration.ToString()) : null, "duration" ,container.Add );
            if (null != this._node)
            {
                var __r = new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.XNodeArray();
                foreach( var __s in this._node )
                {
                    AddIf(null != (((object)__s)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString(__s.ToString()) : null ,__r.Add);
                }
                container.Add("nodes",__r);
            }
            if (null != this._datacenter)
            {
                var __m = new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.XNodeArray();
                foreach( var __n in this._datacenter )
                {
                    AddIf(null != (((object)__n)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString(__n.ToString()) : null ,__m.Add);
                }
                container.Add("datacenters",__m);
            }
            if (null != this._blacklistedTable)
            {
                var __h = new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.XNodeArray();
                foreach( var __i in this._blacklistedTable )
                {
                    AddIf(null != (((object)__i)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString(__i.ToString()) : null ,__h.Add);
                }
                container.Add("blacklistedTables",__h);
            }
            AddIf( null != this._repairThreadCount ? (Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNumber((int)this._repairThreadCount) : null, "repairThreadCount" ,container.Add );
            AddIf( null != (((object)this._repairUnitId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString(this._repairUnitId.ToString()) : null, "repairUnitId" ,container.Add );
            AfterToJson(ref container);
            return container;
        }
    }
}