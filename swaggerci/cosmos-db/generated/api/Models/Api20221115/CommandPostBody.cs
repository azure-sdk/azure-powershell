// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115
{
    using static Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Extensions;

    /// <summary>Specification of which command to run where</summary>
    public partial class CommandPostBody :
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICommandPostBody,
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICommandPostBodyInternal
    {

        /// <summary>Backing field for <see cref="Argument" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICommandPostBodyArguments _argument;

        /// <summary>The arguments for the command to be run</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICommandPostBodyArguments Argument { get => (this._argument = this._argument ?? new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.CommandPostBodyArguments()); set => this._argument = value; }

        /// <summary>Backing field for <see cref="CassandraStopStart" /> property.</summary>
        private bool? _cassandraStopStart;

        /// <summary>If true, stops cassandra before executing the command and then start it again</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Owned)]
        public bool? CassandraStopStart { get => this._cassandraStopStart; set => this._cassandraStopStart = value; }

        /// <summary>Backing field for <see cref="Command" /> property.</summary>
        private string _command;

        /// <summary>The command which should be run</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Owned)]
        public string Command { get => this._command; set => this._command = value; }

        /// <summary>Backing field for <see cref="Host" /> property.</summary>
        private string _host;

        /// <summary>IP address of the cassandra host to run the command on</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Owned)]
        public string Host { get => this._host; set => this._host = value; }

        /// <summary>Backing field for <see cref="Readwrite" /> property.</summary>
        private bool? _readwrite;

        /// <summary>
        /// If true, allows the command to *write* to the cassandra directory, otherwise read-only.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.PropertyOrigin.Owned)]
        public bool? Readwrite { get => this._readwrite; set => this._readwrite = value; }

        /// <summary>Creates an new <see cref="CommandPostBody" /> instance.</summary>
        public CommandPostBody()
        {

        }
    }
    /// Specification of which command to run where
    public partial interface ICommandPostBody :
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.IJsonSerializable
    {
        /// <summary>The arguments for the command to be run</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The arguments for the command to be run",
        SerializedName = @"arguments",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICommandPostBodyArguments) })]
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICommandPostBodyArguments Argument { get; set; }
        /// <summary>If true, stops cassandra before executing the command and then start it again</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If true, stops cassandra before executing the command and then start it again",
        SerializedName = @"cassandra-stop-start",
        PossibleTypes = new [] { typeof(bool) })]
        bool? CassandraStopStart { get; set; }
        /// <summary>The command which should be run</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The command which should be run",
        SerializedName = @"command",
        PossibleTypes = new [] { typeof(string) })]
        string Command { get; set; }
        /// <summary>IP address of the cassandra host to run the command on</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"IP address of the cassandra host to run the command on",
        SerializedName = @"host",
        PossibleTypes = new [] { typeof(string) })]
        string Host { get; set; }
        /// <summary>
        /// If true, allows the command to *write* to the cassandra directory, otherwise read-only.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If true, allows the command to *write* to the cassandra directory, otherwise read-only.",
        SerializedName = @"readwrite",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Readwrite { get; set; }

    }
    /// Specification of which command to run where
    internal partial interface ICommandPostBodyInternal

    {
        /// <summary>The arguments for the command to be run</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICommandPostBodyArguments Argument { get; set; }
        /// <summary>If true, stops cassandra before executing the command and then start it again</summary>
        bool? CassandraStopStart { get; set; }
        /// <summary>The command which should be run</summary>
        string Command { get; set; }
        /// <summary>IP address of the cassandra host to run the command on</summary>
        string Host { get; set; }
        /// <summary>
        /// If true, allows the command to *write* to the cassandra directory, otherwise read-only.
        /// </summary>
        bool? Readwrite { get; set; }

    }
}