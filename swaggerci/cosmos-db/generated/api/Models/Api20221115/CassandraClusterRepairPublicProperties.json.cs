// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115
{
    using static Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Extensions;

    public partial class CassandraClusterRepairPublicProperties
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json serialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name= "returnNow" />
        /// output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonObject into a new instance of <see cref="CassandraClusterRepairPublicProperties" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal CassandraClusterRepairPublicProperties(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_keyspace = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString>("keyspace"), out var __jsonKeyspace) ? (string)__jsonKeyspace : (string)Keyspace;}
            {_owner = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString>("owner"), out var __jsonOwner) ? (string)__jsonOwner : (string)Owner;}
            {_cause = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString>("cause"), out var __jsonCause) ? (string)__jsonCause : (string)Cause;}
            {_table = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonArray>("tables"), out var __jsonTables) ? If( __jsonTables as Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonArray, out var __v) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__v, (__u)=>(string) (__u is Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString __t ? (string)(__t.ToString()) : null)) ))() : null : Table;}
            {_segmentCount = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNumber>("segmentCount"), out var __jsonSegmentCount) ? (int?)__jsonSegmentCount : SegmentCount;}
            {_repairParallelism = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString>("repairParallelism"), out var __jsonRepairParallelism) ? (string)__jsonRepairParallelism : (string)RepairParallelism;}
            {_intensity = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNumber>("intensity"), out var __jsonIntensity) ? (double?)__jsonIntensity : Intensity;}
            {_incrementalRepair = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonBoolean>("incrementalRepair"), out var __jsonIncrementalRepair) ? (bool?)__jsonIncrementalRepair : IncrementalRepair;}
            {_node = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonArray>("nodes"), out var __jsonNodes) ? If( __jsonNodes as Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonArray, out var __q) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__q, (__p)=>(string) (__p is Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString __o ? (string)(__o.ToString()) : null)) ))() : null : Node;}
            {_dataCenter = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonArray>("dataCenters"), out var __jsonDataCenters) ? If( __jsonDataCenters as Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonArray, out var __l) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__l, (__k)=>(string) (__k is Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString __j ? (string)(__j.ToString()) : null)) ))() : null : DataCenter;}
            {_blackListedTable = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonArray>("blackListedTables"), out var __jsonBlackListedTables) ? If( __jsonBlackListedTables as Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonArray, out var __g) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__g, (__f)=>(string) (__f is Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString __e ? (string)(__e.ToString()) : null)) ))() : null : BlackListedTable;}
            {_repairThreadCount = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNumber>("repairThreadCount"), out var __jsonRepairThreadCount) ? (int?)__jsonRepairThreadCount : RepairThreadCount;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICassandraClusterRepairPublicProperties.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICassandraClusterRepairPublicProperties.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Models.Api20221115.ICassandraClusterRepairPublicProperties FromJson(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode node)
        {
            return node is Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonObject json ? new CassandraClusterRepairPublicProperties(json) : null;
        }

        /// <summary>
        /// Serializes this instance of <see cref="CassandraClusterRepairPublicProperties" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode"
        /// />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="CassandraClusterRepairPublicProperties" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode" />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            AddIf( null != (((object)this._keyspace)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString(this._keyspace.ToString()) : null, "keyspace" ,container.Add );
            AddIf( null != (((object)this._owner)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString(this._owner.ToString()) : null, "owner" ,container.Add );
            AddIf( null != (((object)this._cause)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString(this._cause.ToString()) : null, "cause" ,container.Add );
            if (null != this._table)
            {
                var __w = new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.XNodeArray();
                foreach( var __x in this._table )
                {
                    AddIf(null != (((object)__x)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString(__x.ToString()) : null ,__w.Add);
                }
                container.Add("tables",__w);
            }
            AddIf( null != this._segmentCount ? (Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNumber((int)this._segmentCount) : null, "segmentCount" ,container.Add );
            AddIf( null != (((object)this._repairParallelism)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString(this._repairParallelism.ToString()) : null, "repairParallelism" ,container.Add );
            AddIf( null != this._intensity ? (Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNumber((double)this._intensity) : null, "intensity" ,container.Add );
            AddIf( null != this._incrementalRepair ? (Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonBoolean((bool)this._incrementalRepair) : null, "incrementalRepair" ,container.Add );
            if (null != this._node)
            {
                var __r = new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.XNodeArray();
                foreach( var __s in this._node )
                {
                    AddIf(null != (((object)__s)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString(__s.ToString()) : null ,__r.Add);
                }
                container.Add("nodes",__r);
            }
            if (null != this._dataCenter)
            {
                var __m = new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.XNodeArray();
                foreach( var __n in this._dataCenter )
                {
                    AddIf(null != (((object)__n)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString(__n.ToString()) : null ,__m.Add);
                }
                container.Add("dataCenters",__m);
            }
            if (null != this._blackListedTable)
            {
                var __h = new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.XNodeArray();
                foreach( var __i in this._blackListedTable )
                {
                    AddIf(null != (((object)__i)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonString(__i.ToString()) : null ,__h.Add);
                }
                container.Add("blackListedTables",__h);
            }
            AddIf( null != this._repairThreadCount ? (Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.CosmosDb.Runtime.Json.JsonNumber((int)this._repairThreadCount) : null, "repairThreadCount" ,container.Add );
            AfterToJson(ref container);
            return container;
        }
    }
}