// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108
{
    using static Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Extensions;

    /// <summary>Represents a cluster for update.</summary>
    public partial class ClusterForUpdate :
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterForUpdate,
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterForUpdateInternal
    {

        /// <summary>
        /// The password of the administrator login. Each cluster is created with pre-defined administrative role called ‘citus’.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Inlined)]
        public System.Security.SecureString AdministratorLoginPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).AdministratorLoginPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).AdministratorLoginPassword = value ?? null; }

        /// <summary>The Citus extension version on all cluster servers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Inlined)]
        public string CitusVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).CitusVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).CitusVersion = value ?? null; }

        /// <summary>If public access is enabled on coordinator.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Inlined)]
        public bool? CoordinatorEnablePublicIPAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).CoordinatorEnablePublicIPAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).CoordinatorEnablePublicIPAccess = value ?? default(bool); }

        /// <summary>The edition of the coordinator (default: GeneralPurpose).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Inlined)]
        public string CoordinatorServerEdition { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).CoordinatorServerEdition; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).CoordinatorServerEdition = value ?? null; }

        /// <summary>The storage of the coordinator in MB.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Inlined)]
        public long? CoordinatorStorageQuotaInMb { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).CoordinatorStorageQuotaInMb; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).CoordinatorStorageQuotaInMb = value ?? default(long); }

        /// <summary>The vCores count of the coordinator (max: 96).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Inlined)]
        public long? CoordinatorVCore { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).CoordinatorVCore; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).CoordinatorVCore = value ?? default(long); }

        /// <summary>If high availability (HA) is enabled or not for the cluster.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Inlined)]
        public bool? EnableHa { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).EnableHa; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).EnableHa = value ?? default(bool); }

        /// <summary>If shards on coordinator is enabled or not for the cluster.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Inlined)]
        public bool? EnableShardsOnCoordinator { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).EnableShardsOnCoordinator; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).EnableShardsOnCoordinator = value ?? default(bool); }

        /// <summary>Indicates whether custom maintenance window is enabled or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Inlined)]
        public string MaintenanceWindowCustomWindow { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).MaintenanceWindowCustomWindow; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).MaintenanceWindowCustomWindow = value ?? null; }

        /// <summary>Preferred day of the week for maintenance window.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Inlined)]
        public int? MaintenanceWindowDayOfWeek { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).MaintenanceWindowDayOfWeek; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).MaintenanceWindowDayOfWeek = value ?? default(int); }

        /// <summary>Start hour within preferred day of the week for maintenance window.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Inlined)]
        public int? MaintenanceWindowStartHour { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).MaintenanceWindowStartHour; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).MaintenanceWindowStartHour = value ?? default(int); }

        /// <summary>Start minute within the start hour for maintenance window.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Inlined)]
        public int? MaintenanceWindowStartMinute { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).MaintenanceWindowStartMinute; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).MaintenanceWindowStartMinute = value ?? default(int); }

        /// <summary>Internal Acessors for MaintenanceWindow</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IMaintenanceWindow Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterForUpdateInternal.MaintenanceWindow { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).MaintenanceWindow; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).MaintenanceWindow = value; }

        /// <summary>Internal Acessors for NodeEnablePublicIPAccess</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterForUpdateInternal.NodeEnablePublicIPAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).NodeEnablePublicIPAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).NodeEnablePublicIPAccess = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdate Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterForUpdateInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.ClusterPropertiesForUpdate()); set { {_property = value;} } }

        /// <summary>
        /// Worker node count of the cluster. When node count is 0, it represents a single node configuration with the ability to
        /// create distributed tables on that node. 2 or more worker nodes represent multi-node configuration. Node count value cannot
        /// be 1.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Inlined)]
        public long? NodeCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).NodeCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).NodeCount = value ?? default(long); }

        /// <summary>If public access is enabled on worker nodes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Inlined)]
        public bool? NodeEnablePublicIPAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).NodeEnablePublicIPAccess; }

        /// <summary>The edition of a node (default: MemoryOptimized).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Inlined)]
        public string NodeServerEdition { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).NodeServerEdition; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).NodeServerEdition = value ?? null; }

        /// <summary>The storage in MB on each worker node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Inlined)]
        public long? NodeStorageQuotaInMb { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).NodeStorageQuotaInMb; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).NodeStorageQuotaInMb = value ?? default(long); }

        /// <summary>The compute in vCores on each worker node (max: 104).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Inlined)]
        public long? NodeVCore { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).NodeVCore; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).NodeVCore = value ?? default(long); }

        /// <summary>The major PostgreSQL version on all cluster servers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Inlined)]
        public string PostgresqlVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).PostgresqlVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).PostgresqlVersion = value ?? null; }

        /// <summary>Preferred primary availability zone (AZ) for all cluster servers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Inlined)]
        public string PreferredPrimaryZone { get => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).PreferredPrimaryZone; set => ((Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdateInternal)Property).PreferredPrimaryZone = value ?? null; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdate _property;

        /// <summary>Properties of the cluster.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdate Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.ClusterPropertiesForUpdate()); set => this._property = value; }

        /// <summary>Backing field for <see cref="Tag" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterForUpdateTags _tag;

        /// <summary>Application-specific metadata in the form of key-value pairs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterForUpdateTags Tag { get => (this._tag = this._tag ?? new Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.ClusterForUpdateTags()); set => this._tag = value; }

        /// <summary>Creates an new <see cref="ClusterForUpdate" /> instance.</summary>
        public ClusterForUpdate()
        {

        }
    }
    /// Represents a cluster for update.
    public partial interface IClusterForUpdate :
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The password of the administrator login. Each cluster is created with pre-defined administrative role called ‘citus’.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The password of the administrator login. Each cluster is created with pre-defined administrative role called ‘citus’. ",
        SerializedName = @"administratorLoginPassword",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString AdministratorLoginPassword { get; set; }
        /// <summary>The Citus extension version on all cluster servers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Citus extension version on all cluster servers.",
        SerializedName = @"citusVersion",
        PossibleTypes = new [] { typeof(string) })]
        string CitusVersion { get; set; }
        /// <summary>If public access is enabled on coordinator.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If public access is enabled on coordinator.",
        SerializedName = @"coordinatorEnablePublicIpAccess",
        PossibleTypes = new [] { typeof(bool) })]
        bool? CoordinatorEnablePublicIPAccess { get; set; }
        /// <summary>The edition of the coordinator (default: GeneralPurpose).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The edition of the coordinator (default: GeneralPurpose).",
        SerializedName = @"coordinatorServerEdition",
        PossibleTypes = new [] { typeof(string) })]
        string CoordinatorServerEdition { get; set; }
        /// <summary>The storage of the coordinator in MB.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The storage of the coordinator in MB.",
        SerializedName = @"coordinatorStorageQuotaInMb",
        PossibleTypes = new [] { typeof(long) })]
        long? CoordinatorStorageQuotaInMb { get; set; }
        /// <summary>The vCores count of the coordinator (max: 96).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The vCores count of the coordinator (max: 96).",
        SerializedName = @"coordinatorVCores",
        PossibleTypes = new [] { typeof(long) })]
        long? CoordinatorVCore { get; set; }
        /// <summary>If high availability (HA) is enabled or not for the cluster.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If high availability (HA) is enabled or not for the cluster.",
        SerializedName = @"enableHa",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnableHa { get; set; }
        /// <summary>If shards on coordinator is enabled or not for the cluster.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If shards on coordinator is enabled or not for the cluster.",
        SerializedName = @"enableShardsOnCoordinator",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnableShardsOnCoordinator { get; set; }
        /// <summary>Indicates whether custom maintenance window is enabled or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether custom maintenance window is enabled or not.",
        SerializedName = @"customWindow",
        PossibleTypes = new [] { typeof(string) })]
        string MaintenanceWindowCustomWindow { get; set; }
        /// <summary>Preferred day of the week for maintenance window.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Preferred day of the week for maintenance window.",
        SerializedName = @"dayOfWeek",
        PossibleTypes = new [] { typeof(int) })]
        int? MaintenanceWindowDayOfWeek { get; set; }
        /// <summary>Start hour within preferred day of the week for maintenance window.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Start hour within preferred day of the week for maintenance window.",
        SerializedName = @"startHour",
        PossibleTypes = new [] { typeof(int) })]
        int? MaintenanceWindowStartHour { get; set; }
        /// <summary>Start minute within the start hour for maintenance window.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Start minute within the start hour for maintenance window.",
        SerializedName = @"startMinute",
        PossibleTypes = new [] { typeof(int) })]
        int? MaintenanceWindowStartMinute { get; set; }
        /// <summary>
        /// Worker node count of the cluster. When node count is 0, it represents a single node configuration with the ability to
        /// create distributed tables on that node. 2 or more worker nodes represent multi-node configuration. Node count value cannot
        /// be 1.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Worker node count of the cluster. When node count is 0, it represents a single node configuration with the ability to create distributed tables on that node. 2 or more worker nodes represent multi-node configuration. Node count value cannot be 1.",
        SerializedName = @"nodeCount",
        PossibleTypes = new [] { typeof(long) })]
        long? NodeCount { get; set; }
        /// <summary>If public access is enabled on worker nodes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"If public access is enabled on worker nodes.",
        SerializedName = @"nodeEnablePublicIpAccess",
        PossibleTypes = new [] { typeof(bool) })]
        bool? NodeEnablePublicIPAccess { get;  }
        /// <summary>The edition of a node (default: MemoryOptimized).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The edition of a node (default: MemoryOptimized).",
        SerializedName = @"nodeServerEdition",
        PossibleTypes = new [] { typeof(string) })]
        string NodeServerEdition { get; set; }
        /// <summary>The storage in MB on each worker node.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The storage in MB on each worker node.",
        SerializedName = @"nodeStorageQuotaInMb",
        PossibleTypes = new [] { typeof(long) })]
        long? NodeStorageQuotaInMb { get; set; }
        /// <summary>The compute in vCores on each worker node (max: 104).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The compute in vCores on each worker node (max: 104).",
        SerializedName = @"nodeVCores",
        PossibleTypes = new [] { typeof(long) })]
        long? NodeVCore { get; set; }
        /// <summary>The major PostgreSQL version on all cluster servers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The major PostgreSQL version on all cluster servers.",
        SerializedName = @"postgresqlVersion",
        PossibleTypes = new [] { typeof(string) })]
        string PostgresqlVersion { get; set; }
        /// <summary>Preferred primary availability zone (AZ) for all cluster servers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Preferred primary availability zone (AZ) for all cluster servers.",
        SerializedName = @"preferredPrimaryZone",
        PossibleTypes = new [] { typeof(string) })]
        string PreferredPrimaryZone { get; set; }
        /// <summary>Application-specific metadata in the form of key-value pairs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Application-specific metadata in the form of key-value pairs.",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterForUpdateTags) })]
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterForUpdateTags Tag { get; set; }

    }
    /// Represents a cluster for update.
    internal partial interface IClusterForUpdateInternal

    {
        /// <summary>
        /// The password of the administrator login. Each cluster is created with pre-defined administrative role called ‘citus’.
        /// </summary>
        System.Security.SecureString AdministratorLoginPassword { get; set; }
        /// <summary>The Citus extension version on all cluster servers.</summary>
        string CitusVersion { get; set; }
        /// <summary>If public access is enabled on coordinator.</summary>
        bool? CoordinatorEnablePublicIPAccess { get; set; }
        /// <summary>The edition of the coordinator (default: GeneralPurpose).</summary>
        string CoordinatorServerEdition { get; set; }
        /// <summary>The storage of the coordinator in MB.</summary>
        long? CoordinatorStorageQuotaInMb { get; set; }
        /// <summary>The vCores count of the coordinator (max: 96).</summary>
        long? CoordinatorVCore { get; set; }
        /// <summary>If high availability (HA) is enabled or not for the cluster.</summary>
        bool? EnableHa { get; set; }
        /// <summary>If shards on coordinator is enabled or not for the cluster.</summary>
        bool? EnableShardsOnCoordinator { get; set; }
        /// <summary>Maintenance window of a cluster.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IMaintenanceWindow MaintenanceWindow { get; set; }
        /// <summary>Indicates whether custom maintenance window is enabled or not.</summary>
        string MaintenanceWindowCustomWindow { get; set; }
        /// <summary>Preferred day of the week for maintenance window.</summary>
        int? MaintenanceWindowDayOfWeek { get; set; }
        /// <summary>Start hour within preferred day of the week for maintenance window.</summary>
        int? MaintenanceWindowStartHour { get; set; }
        /// <summary>Start minute within the start hour for maintenance window.</summary>
        int? MaintenanceWindowStartMinute { get; set; }
        /// <summary>
        /// Worker node count of the cluster. When node count is 0, it represents a single node configuration with the ability to
        /// create distributed tables on that node. 2 or more worker nodes represent multi-node configuration. Node count value cannot
        /// be 1.
        /// </summary>
        long? NodeCount { get; set; }
        /// <summary>If public access is enabled on worker nodes.</summary>
        bool? NodeEnablePublicIPAccess { get; set; }
        /// <summary>The edition of a node (default: MemoryOptimized).</summary>
        string NodeServerEdition { get; set; }
        /// <summary>The storage in MB on each worker node.</summary>
        long? NodeStorageQuotaInMb { get; set; }
        /// <summary>The compute in vCores on each worker node (max: 104).</summary>
        long? NodeVCore { get; set; }
        /// <summary>The major PostgreSQL version on all cluster servers.</summary>
        string PostgresqlVersion { get; set; }
        /// <summary>Preferred primary availability zone (AZ) for all cluster servers.</summary>
        string PreferredPrimaryZone { get; set; }
        /// <summary>Properties of the cluster.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterPropertiesForUpdate Property { get; set; }
        /// <summary>Application-specific metadata in the form of key-value pairs.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CosmosDbForPostgreSql.Models.Api20221108.IClusterForUpdateTags Tag { get; set; }

    }
}