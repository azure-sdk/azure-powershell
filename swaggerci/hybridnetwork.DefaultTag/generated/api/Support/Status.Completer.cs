// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.HybridNetwork.Support
{

    /// <summary>The component resource deployment status.</summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.HybridNetwork.Support.StatusTypeConverter))]
    public partial struct Status :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Unknown".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Unknown'", "Unknown", global::System.Management.Automation.CompletionResultType.ParameterValue, "Unknown");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Deployed".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Deployed'", "Deployed", global::System.Management.Automation.CompletionResultType.ParameterValue, "Deployed");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Uninstalled".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Uninstalled'", "Uninstalled", global::System.Management.Automation.CompletionResultType.ParameterValue, "Uninstalled");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Superseded".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Superseded'", "Superseded", global::System.Management.Automation.CompletionResultType.ParameterValue, "Superseded");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Failed".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Failed'", "Failed", global::System.Management.Automation.CompletionResultType.ParameterValue, "Failed");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Uninstalling".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Uninstalling'", "Uninstalling", global::System.Management.Automation.CompletionResultType.ParameterValue, "Uninstalling");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Pending-Install".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Pending-Install'", "Pending-Install", global::System.Management.Automation.CompletionResultType.ParameterValue, "Pending-Install");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Pending-Upgrade".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Pending-Upgrade'", "Pending-Upgrade", global::System.Management.Automation.CompletionResultType.ParameterValue, "Pending-Upgrade");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Pending-Rollback".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Pending-Rollback'", "Pending-Rollback", global::System.Management.Automation.CompletionResultType.ParameterValue, "Pending-Rollback");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Downloading".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Downloading'", "Downloading", global::System.Management.Automation.CompletionResultType.ParameterValue, "Downloading");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Installing".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Installing'", "Installing", global::System.Management.Automation.CompletionResultType.ParameterValue, "Installing");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Reinstalling".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Reinstalling'", "Reinstalling", global::System.Management.Automation.CompletionResultType.ParameterValue, "Reinstalling");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Rollingback".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Rollingback'", "Rollingback", global::System.Management.Automation.CompletionResultType.ParameterValue, "Rollingback");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Upgrading".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Upgrading'", "Upgrading", global::System.Management.Automation.CompletionResultType.ParameterValue, "Upgrading");
            }
        }
    }
}