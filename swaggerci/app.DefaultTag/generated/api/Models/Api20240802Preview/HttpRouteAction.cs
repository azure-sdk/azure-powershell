// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20240802Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Extensions;

    /// <summary>Action to perform once matching of routes is done</summary>
    public partial class HttpRouteAction :
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20240802Preview.IHttpRouteAction,
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20240802Preview.IHttpRouteActionInternal
    {

        /// <summary>Backing field for <see cref="PrefixRewrite" /> property.</summary>
        private string _prefixRewrite;

        /// <summary>Rewrite prefix, default is no rewrites</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Owned)]
        public string PrefixRewrite { get => this._prefixRewrite; set => this._prefixRewrite = value; }

        /// <summary>Creates an new <see cref="HttpRouteAction" /> instance.</summary>
        public HttpRouteAction()
        {

        }
    }
    /// Action to perform once matching of routes is done
    public partial interface IHttpRouteAction :
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.IJsonSerializable
    {
        /// <summary>Rewrite prefix, default is no rewrites</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Rewrite prefix, default is no rewrites",
        SerializedName = @"prefixRewrite",
        PossibleTypes = new [] { typeof(string) })]
        string PrefixRewrite { get; set; }

    }
    /// Action to perform once matching of routes is done
    internal partial interface IHttpRouteActionInternal

    {
        /// <summary>Rewrite prefix, default is no rewrites</summary>
        string PrefixRewrite { get; set; }

    }
}