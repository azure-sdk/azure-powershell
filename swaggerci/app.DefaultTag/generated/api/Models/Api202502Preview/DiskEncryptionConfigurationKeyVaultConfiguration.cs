// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api202502Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Extensions;

    /// <summary>
    /// The Key Vault that contains your key to use for disk encryption. The Key Vault must be in the same region as the Managed
    /// Environment.
    /// </summary>
    public partial class DiskEncryptionConfigurationKeyVaultConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api202502Preview.IDiskEncryptionConfigurationKeyVaultConfiguration,
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api202502Preview.IDiskEncryptionConfigurationKeyVaultConfigurationInternal
    {

        /// <summary>Backing field for <see cref="Auth" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api202502Preview.IDiskEncryptionConfigurationKeyVaultConfigurationAuth _auth;

        /// <summary>Configuration properties for the authentication to the Key Vault</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api202502Preview.IDiskEncryptionConfigurationKeyVaultConfigurationAuth Auth { get => (this._auth = this._auth ?? new Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api202502Preview.DiskEncryptionConfigurationKeyVaultConfigurationAuth()); set => this._auth = value; }

        /// <summary>
        /// Resource ID of a user-assigned managed identity to authenticate to the Key Vault. The identity must be assigned to the
        /// managed environment, in the same tenant as the Key Vault, and it must have the following key permissions on the Key Vault:
        /// wrapkey, unwrapkey, get.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Inlined)]
        public string AuthIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api202502Preview.IDiskEncryptionConfigurationKeyVaultConfigurationAuthInternal)Auth).Identity; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api202502Preview.IDiskEncryptionConfigurationKeyVaultConfigurationAuthInternal)Auth).Identity = value ?? null; }

        /// <summary>Backing field for <see cref="KeyUrl" /> property.</summary>
        private string _keyUrl;

        /// <summary>Key URL pointing to a key in KeyVault. Version segment of the Url is required.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Owned)]
        public string KeyUrl { get => this._keyUrl; set => this._keyUrl = value; }

        /// <summary>Internal Acessors for Auth</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api202502Preview.IDiskEncryptionConfigurationKeyVaultConfigurationAuth Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api202502Preview.IDiskEncryptionConfigurationKeyVaultConfigurationInternal.Auth { get => (this._auth = this._auth ?? new Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api202502Preview.DiskEncryptionConfigurationKeyVaultConfigurationAuth()); set { {_auth = value;} } }

        /// <summary>
        /// Creates an new <see cref="DiskEncryptionConfigurationKeyVaultConfiguration" /> instance.
        /// </summary>
        public DiskEncryptionConfigurationKeyVaultConfiguration()
        {

        }
    }
    /// The Key Vault that contains your key to use for disk encryption. The Key Vault must be in the same region as the Managed
    /// Environment.
    public partial interface IDiskEncryptionConfigurationKeyVaultConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Resource ID of a user-assigned managed identity to authenticate to the Key Vault. The identity must be assigned to the
        /// managed environment, in the same tenant as the Key Vault, and it must have the following key permissions on the Key Vault:
        /// wrapkey, unwrapkey, get.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource ID of a user-assigned managed identity to authenticate to the Key Vault. The identity must be assigned to the managed environment, in the same tenant as the Key Vault, and it must have the following key permissions on the Key Vault: wrapkey, unwrapkey, get.",
        SerializedName = @"identity",
        PossibleTypes = new [] { typeof(string) })]
        string AuthIdentity { get; set; }
        /// <summary>Key URL pointing to a key in KeyVault. Version segment of the Url is required.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Key URL pointing to a key in KeyVault. Version segment of the Url is required.",
        SerializedName = @"keyUrl",
        PossibleTypes = new [] { typeof(string) })]
        string KeyUrl { get; set; }

    }
    /// The Key Vault that contains your key to use for disk encryption. The Key Vault must be in the same region as the Managed
    /// Environment.
    internal partial interface IDiskEncryptionConfigurationKeyVaultConfigurationInternal

    {
        /// <summary>Configuration properties for the authentication to the Key Vault</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api202502Preview.IDiskEncryptionConfigurationKeyVaultConfigurationAuth Auth { get; set; }
        /// <summary>
        /// Resource ID of a user-assigned managed identity to authenticate to the Key Vault. The identity must be assigned to the
        /// managed environment, in the same tenant as the Key Vault, and it must have the following key permissions on the Key Vault:
        /// wrapkey, unwrapkey, get.
        /// </summary>
        string AuthIdentity { get; set; }
        /// <summary>Key URL pointing to a key in KeyVault. Version segment of the Url is required.</summary>
        string KeyUrl { get; set; }

    }
}