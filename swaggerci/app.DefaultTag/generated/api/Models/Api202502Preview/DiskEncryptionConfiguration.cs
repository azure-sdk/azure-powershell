// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api202502Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Extensions;

    /// <summary>Configuration properties for disk encryption</summary>
    public partial class DiskEncryptionConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api202502Preview.IDiskEncryptionConfiguration,
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api202502Preview.IDiskEncryptionConfigurationInternal
    {

        /// <summary>
        /// Resource ID of a user-assigned managed identity to authenticate to the Key Vault. The identity must be assigned to the
        /// managed environment, in the same tenant as the Key Vault, and it must have the following key permissions on the Key Vault:
        /// wrapkey, unwrapkey, get.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Inlined)]
        public string AuthIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api202502Preview.IDiskEncryptionConfigurationKeyVaultConfigurationInternal)KeyVaultConfiguration).AuthIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api202502Preview.IDiskEncryptionConfigurationKeyVaultConfigurationInternal)KeyVaultConfiguration).AuthIdentity = value ?? null; }

        /// <summary>Backing field for <see cref="KeyVaultConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api202502Preview.IDiskEncryptionConfigurationKeyVaultConfiguration _keyVaultConfiguration;

        /// <summary>
        /// The Key Vault that contains your key to use for disk encryption. The Key Vault must be in the same region as the Managed
        /// Environment.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api202502Preview.IDiskEncryptionConfigurationKeyVaultConfiguration KeyVaultConfiguration { get => (this._keyVaultConfiguration = this._keyVaultConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api202502Preview.DiskEncryptionConfigurationKeyVaultConfiguration()); set => this._keyVaultConfiguration = value; }

        /// <summary>Key URL pointing to a key in KeyVault. Version segment of the Url is required.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Inlined)]
        public string KeyVaultConfigurationKeyUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api202502Preview.IDiskEncryptionConfigurationKeyVaultConfigurationInternal)KeyVaultConfiguration).KeyUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api202502Preview.IDiskEncryptionConfigurationKeyVaultConfigurationInternal)KeyVaultConfiguration).KeyUrl = value ?? null; }

        /// <summary>Internal Acessors for KeyVaultConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api202502Preview.IDiskEncryptionConfigurationKeyVaultConfiguration Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api202502Preview.IDiskEncryptionConfigurationInternal.KeyVaultConfiguration { get => (this._keyVaultConfiguration = this._keyVaultConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api202502Preview.DiskEncryptionConfigurationKeyVaultConfiguration()); set { {_keyVaultConfiguration = value;} } }

        /// <summary>Internal Acessors for KeyVaultConfigurationAuth</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api202502Preview.IDiskEncryptionConfigurationKeyVaultConfigurationAuth Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api202502Preview.IDiskEncryptionConfigurationInternal.KeyVaultConfigurationAuth { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api202502Preview.IDiskEncryptionConfigurationKeyVaultConfigurationInternal)KeyVaultConfiguration).Auth; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api202502Preview.IDiskEncryptionConfigurationKeyVaultConfigurationInternal)KeyVaultConfiguration).Auth = value; }

        /// <summary>Creates an new <see cref="DiskEncryptionConfiguration" /> instance.</summary>
        public DiskEncryptionConfiguration()
        {

        }
    }
    /// Configuration properties for disk encryption
    public partial interface IDiskEncryptionConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Resource ID of a user-assigned managed identity to authenticate to the Key Vault. The identity must be assigned to the
        /// managed environment, in the same tenant as the Key Vault, and it must have the following key permissions on the Key Vault:
        /// wrapkey, unwrapkey, get.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource ID of a user-assigned managed identity to authenticate to the Key Vault. The identity must be assigned to the managed environment, in the same tenant as the Key Vault, and it must have the following key permissions on the Key Vault: wrapkey, unwrapkey, get.",
        SerializedName = @"identity",
        PossibleTypes = new [] { typeof(string) })]
        string AuthIdentity { get; set; }
        /// <summary>Key URL pointing to a key in KeyVault. Version segment of the Url is required.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Key URL pointing to a key in KeyVault. Version segment of the Url is required.",
        SerializedName = @"keyUrl",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultConfigurationKeyUrl { get; set; }

    }
    /// Configuration properties for disk encryption
    internal partial interface IDiskEncryptionConfigurationInternal

    {
        /// <summary>
        /// Resource ID of a user-assigned managed identity to authenticate to the Key Vault. The identity must be assigned to the
        /// managed environment, in the same tenant as the Key Vault, and it must have the following key permissions on the Key Vault:
        /// wrapkey, unwrapkey, get.
        /// </summary>
        string AuthIdentity { get; set; }
        /// <summary>
        /// The Key Vault that contains your key to use for disk encryption. The Key Vault must be in the same region as the Managed
        /// Environment.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api202502Preview.IDiskEncryptionConfigurationKeyVaultConfiguration KeyVaultConfiguration { get; set; }
        /// <summary>Configuration properties for the authentication to the Key Vault</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api202502Preview.IDiskEncryptionConfigurationKeyVaultConfigurationAuth KeyVaultConfigurationAuth { get; set; }
        /// <summary>Key URL pointing to a key in KeyVault. Version segment of the Url is required.</summary>
        string KeyVaultConfigurationKeyUrl { get; set; }

    }
}