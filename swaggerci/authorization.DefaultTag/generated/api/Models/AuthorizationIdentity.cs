// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Extensions;

    public partial class AuthorizationIdentity :
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.IAuthorizationIdentity,
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.IAuthorizationIdentityInternal
    {

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private string _id;

        /// <summary>Resource identity path</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string Id { get => this._id; set => this._id = value; }

        /// <summary>Backing field for <see cref="ResourceGroupName" /> property.</summary>
        private string _resourceGroupName;

        /// <summary>The name of the resource group. The name is case insensitive.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string ResourceGroupName { get => this._resourceGroupName; set => this._resourceGroupName = value; }

        /// <summary>Backing field for <see cref="ResourceName" /> property.</summary>
        private string _resourceName;

        /// <summary>The resource name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string ResourceName { get => this._resourceName; set => this._resourceName = value; }

        /// <summary>Backing field for <see cref="ResourceProviderNamespace" /> property.</summary>
        private string _resourceProviderNamespace;

        /// <summary>The namespace of the resource provider.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string ResourceProviderNamespace { get => this._resourceProviderNamespace; set => this._resourceProviderNamespace = value; }

        /// <summary>Backing field for <see cref="ResourceType" /> property.</summary>
        private string _resourceType;

        /// <summary>
        /// The resource type name. For example the type name of a web app is 'sites' (from Microsoft.Web/sites).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string ResourceType { get => this._resourceType; set => this._resourceType = value; }

        /// <summary>Backing field for <see cref="RoleAssignmentId" /> property.</summary>
        private string _roleAssignmentId;

        /// <summary>
        /// The fully qualified ID of the role assignment including scope, resource name, and resource type. Format: /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.
        /// Example: /subscriptions/<SUB_ID>/resourcegroups/<RESOURCE_GROUP>/providers/Microsoft.Authorization/roleAssignments/<ROLE_ASSIGNMENT_NAME>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string RoleAssignmentId { get => this._roleAssignmentId; set => this._roleAssignmentId = value; }

        /// <summary>Backing field for <see cref="RoleAssignmentName" /> property.</summary>
        private string _roleAssignmentName;

        /// <summary>The name of the role assignment. It can be any valid GUID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string RoleAssignmentName { get => this._roleAssignmentName; set => this._roleAssignmentName = value; }

        /// <summary>Backing field for <see cref="RoleAssignmentScheduleInstanceName" /> property.</summary>
        private string _roleAssignmentScheduleInstanceName;

        /// <summary>The name (hash of schedule name + time) of the role assignment schedule to get.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string RoleAssignmentScheduleInstanceName { get => this._roleAssignmentScheduleInstanceName; set => this._roleAssignmentScheduleInstanceName = value; }

        /// <summary>Backing field for <see cref="RoleAssignmentScheduleName" /> property.</summary>
        private string _roleAssignmentScheduleName;

        /// <summary>The name (guid) of the role assignment schedule to get.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string RoleAssignmentScheduleName { get => this._roleAssignmentScheduleName; set => this._roleAssignmentScheduleName = value; }

        /// <summary>Backing field for <see cref="RoleAssignmentScheduleRequestName" /> property.</summary>
        private string _roleAssignmentScheduleRequestName;

        /// <summary>
        /// A GUID for the role assignment to create. The name must be unique and different for each role assignment.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string RoleAssignmentScheduleRequestName { get => this._roleAssignmentScheduleRequestName; set => this._roleAssignmentScheduleRequestName = value; }

        /// <summary>Backing field for <see cref="RoleEligibilityScheduleInstanceName" /> property.</summary>
        private string _roleEligibilityScheduleInstanceName;

        /// <summary>
        /// The name (hash of schedule name + time) of the role eligibility schedule to get.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string RoleEligibilityScheduleInstanceName { get => this._roleEligibilityScheduleInstanceName; set => this._roleEligibilityScheduleInstanceName = value; }

        /// <summary>Backing field for <see cref="RoleEligibilityScheduleName" /> property.</summary>
        private string _roleEligibilityScheduleName;

        /// <summary>The name (guid) of the role eligibility schedule to get.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string RoleEligibilityScheduleName { get => this._roleEligibilityScheduleName; set => this._roleEligibilityScheduleName = value; }

        /// <summary>Backing field for <see cref="RoleEligibilityScheduleRequestName" /> property.</summary>
        private string _roleEligibilityScheduleRequestName;

        /// <summary>The name of the role eligibility to create. It can be any valid GUID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string RoleEligibilityScheduleRequestName { get => this._roleEligibilityScheduleRequestName; set => this._roleEligibilityScheduleRequestName = value; }

        /// <summary>Backing field for <see cref="RoleManagementPolicyAssignmentName" /> property.</summary>
        private string _roleManagementPolicyAssignmentName;

        /// <summary>The name of format {guid_guid} the role management policy assignment to get.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string RoleManagementPolicyAssignmentName { get => this._roleManagementPolicyAssignmentName; set => this._roleManagementPolicyAssignmentName = value; }

        /// <summary>Backing field for <see cref="RoleManagementPolicyName" /> property.</summary>
        private string _roleManagementPolicyName;

        /// <summary>The name (guid) of the role management policy to get.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string RoleManagementPolicyName { get => this._roleManagementPolicyName; set => this._roleManagementPolicyName = value; }

        /// <summary>Backing field for <see cref="Scope" /> property.</summary>
        private string _scope;

        /// <summary>
        /// The scope of the operation or resource. Valid scopes are: subscription (format: '/subscriptions/{subscriptionId}'), resource
        /// group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string Scope { get => this._scope; set => this._scope = value; }

        /// <summary>Backing field for <see cref="SubscriptionId" /> property.</summary>
        private string _subscriptionId;

        /// <summary>The ID of the target subscription. The value must be an UUID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string SubscriptionId { get => this._subscriptionId; set => this._subscriptionId = value; }

        /// <summary>Creates an new <see cref="AuthorizationIdentity" /> instance.</summary>
        public AuthorizationIdentity()
        {

        }
    }
    public partial interface IAuthorizationIdentity :
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.IJsonSerializable
    {
        /// <summary>Resource identity path</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource identity path",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string Id { get; set; }
        /// <summary>The name of the resource group. The name is case insensitive.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the resource group. The name is case insensitive.",
        SerializedName = @"resourceGroupName",
        PossibleTypes = new [] { typeof(string) })]
        string ResourceGroupName { get; set; }
        /// <summary>The resource name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource name.",
        SerializedName = @"resourceName",
        PossibleTypes = new [] { typeof(string) })]
        string ResourceName { get; set; }
        /// <summary>The namespace of the resource provider.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The namespace of the resource provider.",
        SerializedName = @"resourceProviderNamespace",
        PossibleTypes = new [] { typeof(string) })]
        string ResourceProviderNamespace { get; set; }
        /// <summary>
        /// The resource type name. For example the type name of a web app is 'sites' (from Microsoft.Web/sites).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource type name. For example the type name of a web app is 'sites' (from Microsoft.Web/sites).",
        SerializedName = @"resourceType",
        PossibleTypes = new [] { typeof(string) })]
        string ResourceType { get; set; }
        /// <summary>
        /// The fully qualified ID of the role assignment including scope, resource name, and resource type. Format: /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.
        /// Example: /subscriptions/<SUB_ID>/resourcegroups/<RESOURCE_GROUP>/providers/Microsoft.Authorization/roleAssignments/<ROLE_ASSIGNMENT_NAME>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The fully qualified ID of the role assignment including scope, resource name, and resource type. Format: /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example: /subscriptions/<SUB_ID>/resourcegroups/<RESOURCE_GROUP>/providers/Microsoft.Authorization/roleAssignments/<ROLE_ASSIGNMENT_NAME>",
        SerializedName = @"roleAssignmentId",
        PossibleTypes = new [] { typeof(string) })]
        string RoleAssignmentId { get; set; }
        /// <summary>The name of the role assignment. It can be any valid GUID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the role assignment. It can be any valid GUID.",
        SerializedName = @"roleAssignmentName",
        PossibleTypes = new [] { typeof(string) })]
        string RoleAssignmentName { get; set; }
        /// <summary>The name (hash of schedule name + time) of the role assignment schedule to get.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name (hash of schedule name + time) of the role assignment schedule to get.",
        SerializedName = @"roleAssignmentScheduleInstanceName",
        PossibleTypes = new [] { typeof(string) })]
        string RoleAssignmentScheduleInstanceName { get; set; }
        /// <summary>The name (guid) of the role assignment schedule to get.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name (guid) of the role assignment schedule to get.",
        SerializedName = @"roleAssignmentScheduleName",
        PossibleTypes = new [] { typeof(string) })]
        string RoleAssignmentScheduleName { get; set; }
        /// <summary>
        /// A GUID for the role assignment to create. The name must be unique and different for each role assignment.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A GUID for the role assignment to create. The name must be unique and different for each role assignment.",
        SerializedName = @"roleAssignmentScheduleRequestName",
        PossibleTypes = new [] { typeof(string) })]
        string RoleAssignmentScheduleRequestName { get; set; }
        /// <summary>
        /// The name (hash of schedule name + time) of the role eligibility schedule to get.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name (hash of schedule name + time) of the role eligibility schedule to get.",
        SerializedName = @"roleEligibilityScheduleInstanceName",
        PossibleTypes = new [] { typeof(string) })]
        string RoleEligibilityScheduleInstanceName { get; set; }
        /// <summary>The name (guid) of the role eligibility schedule to get.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name (guid) of the role eligibility schedule to get.",
        SerializedName = @"roleEligibilityScheduleName",
        PossibleTypes = new [] { typeof(string) })]
        string RoleEligibilityScheduleName { get; set; }
        /// <summary>The name of the role eligibility to create. It can be any valid GUID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the role eligibility to create. It can be any valid GUID.",
        SerializedName = @"roleEligibilityScheduleRequestName",
        PossibleTypes = new [] { typeof(string) })]
        string RoleEligibilityScheduleRequestName { get; set; }
        /// <summary>The name of format {guid_guid} the role management policy assignment to get.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of format {guid_guid} the role management policy assignment to get.",
        SerializedName = @"roleManagementPolicyAssignmentName",
        PossibleTypes = new [] { typeof(string) })]
        string RoleManagementPolicyAssignmentName { get; set; }
        /// <summary>The name (guid) of the role management policy to get.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name (guid) of the role management policy to get.",
        SerializedName = @"roleManagementPolicyName",
        PossibleTypes = new [] { typeof(string) })]
        string RoleManagementPolicyName { get; set; }
        /// <summary>
        /// The scope of the operation or resource. Valid scopes are: subscription (format: '/subscriptions/{subscriptionId}'), resource
        /// group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The scope of the operation or resource. Valid scopes are: subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        string Scope { get; set; }
        /// <summary>The ID of the target subscription. The value must be an UUID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ID of the target subscription. The value must be an UUID.",
        SerializedName = @"subscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        string SubscriptionId { get; set; }

    }
    internal partial interface IAuthorizationIdentityInternal

    {
        /// <summary>Resource identity path</summary>
        string Id { get; set; }
        /// <summary>The name of the resource group. The name is case insensitive.</summary>
        string ResourceGroupName { get; set; }
        /// <summary>The resource name.</summary>
        string ResourceName { get; set; }
        /// <summary>The namespace of the resource provider.</summary>
        string ResourceProviderNamespace { get; set; }
        /// <summary>
        /// The resource type name. For example the type name of a web app is 'sites' (from Microsoft.Web/sites).
        /// </summary>
        string ResourceType { get; set; }
        /// <summary>
        /// The fully qualified ID of the role assignment including scope, resource name, and resource type. Format: /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.
        /// Example: /subscriptions/<SUB_ID>/resourcegroups/<RESOURCE_GROUP>/providers/Microsoft.Authorization/roleAssignments/<ROLE_ASSIGNMENT_NAME>
        /// </summary>
        string RoleAssignmentId { get; set; }
        /// <summary>The name of the role assignment. It can be any valid GUID.</summary>
        string RoleAssignmentName { get; set; }
        /// <summary>The name (hash of schedule name + time) of the role assignment schedule to get.</summary>
        string RoleAssignmentScheduleInstanceName { get; set; }
        /// <summary>The name (guid) of the role assignment schedule to get.</summary>
        string RoleAssignmentScheduleName { get; set; }
        /// <summary>
        /// A GUID for the role assignment to create. The name must be unique and different for each role assignment.
        /// </summary>
        string RoleAssignmentScheduleRequestName { get; set; }
        /// <summary>
        /// The name (hash of schedule name + time) of the role eligibility schedule to get.
        /// </summary>
        string RoleEligibilityScheduleInstanceName { get; set; }
        /// <summary>The name (guid) of the role eligibility schedule to get.</summary>
        string RoleEligibilityScheduleName { get; set; }
        /// <summary>The name of the role eligibility to create. It can be any valid GUID.</summary>
        string RoleEligibilityScheduleRequestName { get; set; }
        /// <summary>The name of format {guid_guid} the role management policy assignment to get.</summary>
        string RoleManagementPolicyAssignmentName { get; set; }
        /// <summary>The name (guid) of the role management policy to get.</summary>
        string RoleManagementPolicyName { get; set; }
        /// <summary>
        /// The scope of the operation or resource. Valid scopes are: subscription (format: '/subscriptions/{subscriptionId}'), resource
        /// group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        /// </summary>
        string Scope { get; set; }
        /// <summary>The ID of the target subscription. The value must be an UUID.</summary>
        string SubscriptionId { get; set; }

    }
}