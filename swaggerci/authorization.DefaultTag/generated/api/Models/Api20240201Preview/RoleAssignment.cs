// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Extensions;

    /// <summary>Role Assignments</summary>
    public partial class RoleAssignment :
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignment,
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentInternal
    {

        /// <summary>
        /// The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName]
        /// StringEqualsIgnoreCase 'foo_storage_container'
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public string Condition { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentPropertiesInternal)Property).Condition; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentPropertiesInternal)Property).Condition = value ?? null; }

        /// <summary>Version of the condition. Currently accepted value is '2.0'</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public string ConditionVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentPropertiesInternal)Property).ConditionVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentPropertiesInternal)Property).ConditionVersion = value ?? null; }

        /// <summary>Id of the user who created the assignment</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public string CreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentPropertiesInternal)Property).CreatedBy; }

        /// <summary>Time it was created</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public global::System.DateTime? CreatedOn { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentPropertiesInternal)Property).CreatedOn; }

        /// <summary>Id of the delegated managed identity resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public string DelegatedManagedIdentityResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentPropertiesInternal)Property).DelegatedManagedIdentityResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentPropertiesInternal)Property).DelegatedManagedIdentityResourceId = value ?? null; }

        /// <summary>Description of role assignment</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public string Description { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentPropertiesInternal)Property).Description; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentPropertiesInternal)Property).Description = value ?? null; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private string _id;

        /// <summary>The role assignment ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string Id { get => this._id; }

        /// <summary>Internal Acessors for CreatedBy</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentInternal.CreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentPropertiesInternal)Property).CreatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentPropertiesInternal)Property).CreatedBy = value; }

        /// <summary>Internal Acessors for CreatedOn</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentInternal.CreatedOn { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentPropertiesInternal)Property).CreatedOn; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentPropertiesInternal)Property).CreatedOn = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentInternal.Id { get => this._id; set { {_id = value;} } }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentInternal.Name { get => this._name; set { {_name = value;} } }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentProperties Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.RoleAssignmentProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for Scope</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentInternal.Scope { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentPropertiesInternal)Property).Scope; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentPropertiesInternal)Property).Scope = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentInternal.Type { get => this._type; set { {_type = value;} } }

        /// <summary>Internal Acessors for UpdatedBy</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentInternal.UpdatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentPropertiesInternal)Property).UpdatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentPropertiesInternal)Property).UpdatedBy = value; }

        /// <summary>Internal Acessors for UpdatedOn</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentInternal.UpdatedOn { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentPropertiesInternal)Property).UpdatedOn; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentPropertiesInternal)Property).UpdatedOn = value; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>The role assignment name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string Name { get => this._name; }

        /// <summary>The principal ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public string PrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentPropertiesInternal)Property).PrincipalId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentPropertiesInternal)Property).PrincipalId = value ?? null; }

        /// <summary>The principal type of the assigned principal ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.PrincipalType? PrincipalType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentPropertiesInternal)Property).PrincipalType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentPropertiesInternal)Property).PrincipalType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.PrincipalType)""); }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentProperties _property;

        /// <summary>Role assignment properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.RoleAssignmentProperties()); set => this._property = value; }

        /// <summary>The role definition ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public string RoleDefinitionId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentPropertiesInternal)Property).RoleDefinitionId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentPropertiesInternal)Property).RoleDefinitionId = value ?? null; }

        /// <summary>The role assignment scope.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public string Scope { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentPropertiesInternal)Property).Scope; }

        /// <summary>Backing field for <see cref="Type" /> property.</summary>
        private string _type;

        /// <summary>The role assignment type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string Type { get => this._type; }

        /// <summary>Id of the user who updated the assignment</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public string UpdatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentPropertiesInternal)Property).UpdatedBy; }

        /// <summary>Time it was updated</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public global::System.DateTime? UpdatedOn { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentPropertiesInternal)Property).UpdatedOn; }

        /// <summary>Creates an new <see cref="RoleAssignment" /> instance.</summary>
        public RoleAssignment()
        {

        }
    }
    /// Role Assignments
    public partial interface IRoleAssignment :
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName]
        /// StringEqualsIgnoreCase 'foo_storage_container'
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'",
        SerializedName = @"condition",
        PossibleTypes = new [] { typeof(string) })]
        string Condition { get; set; }
        /// <summary>Version of the condition. Currently accepted value is '2.0'</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Version of the condition. Currently accepted value is '2.0'",
        SerializedName = @"conditionVersion",
        PossibleTypes = new [] { typeof(string) })]
        string ConditionVersion { get; set; }
        /// <summary>Id of the user who created the assignment</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Id of the user who created the assignment",
        SerializedName = @"createdBy",
        PossibleTypes = new [] { typeof(string) })]
        string CreatedBy { get;  }
        /// <summary>Time it was created</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Time it was created",
        SerializedName = @"createdOn",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? CreatedOn { get;  }
        /// <summary>Id of the delegated managed identity resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Id of the delegated managed identity resource",
        SerializedName = @"delegatedManagedIdentityResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string DelegatedManagedIdentityResourceId { get; set; }
        /// <summary>Description of role assignment</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Description of role assignment",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        string Description { get; set; }
        /// <summary>The role assignment ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The role assignment ID.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string Id { get;  }
        /// <summary>The role assignment name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The role assignment name.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get;  }
        /// <summary>The principal ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The principal ID.",
        SerializedName = @"principalId",
        PossibleTypes = new [] { typeof(string) })]
        string PrincipalId { get; set; }
        /// <summary>The principal type of the assigned principal ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The principal type of the assigned principal ID.",
        SerializedName = @"principalType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.PrincipalType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.PrincipalType? PrincipalType { get; set; }
        /// <summary>The role definition ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The role definition ID.",
        SerializedName = @"roleDefinitionId",
        PossibleTypes = new [] { typeof(string) })]
        string RoleDefinitionId { get; set; }
        /// <summary>The role assignment scope.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The role assignment scope.",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        string Scope { get;  }
        /// <summary>The role assignment type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The role assignment type.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string Type { get;  }
        /// <summary>Id of the user who updated the assignment</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Id of the user who updated the assignment",
        SerializedName = @"updatedBy",
        PossibleTypes = new [] { typeof(string) })]
        string UpdatedBy { get;  }
        /// <summary>Time it was updated</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Time it was updated",
        SerializedName = @"updatedOn",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? UpdatedOn { get;  }

    }
    /// Role Assignments
    internal partial interface IRoleAssignmentInternal

    {
        /// <summary>
        /// The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName]
        /// StringEqualsIgnoreCase 'foo_storage_container'
        /// </summary>
        string Condition { get; set; }
        /// <summary>Version of the condition. Currently accepted value is '2.0'</summary>
        string ConditionVersion { get; set; }
        /// <summary>Id of the user who created the assignment</summary>
        string CreatedBy { get; set; }
        /// <summary>Time it was created</summary>
        global::System.DateTime? CreatedOn { get; set; }
        /// <summary>Id of the delegated managed identity resource</summary>
        string DelegatedManagedIdentityResourceId { get; set; }
        /// <summary>Description of role assignment</summary>
        string Description { get; set; }
        /// <summary>The role assignment ID.</summary>
        string Id { get; set; }
        /// <summary>The role assignment name.</summary>
        string Name { get; set; }
        /// <summary>The principal ID.</summary>
        string PrincipalId { get; set; }
        /// <summary>The principal type of the assigned principal ID.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Support.PrincipalType? PrincipalType { get; set; }
        /// <summary>Role assignment properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20240201Preview.IRoleAssignmentProperties Property { get; set; }
        /// <summary>The role definition ID.</summary>
        string RoleDefinitionId { get; set; }
        /// <summary>The role assignment scope.</summary>
        string Scope { get; set; }
        /// <summary>The role assignment type.</summary>
        string Type { get; set; }
        /// <summary>Id of the user who updated the assignment</summary>
        string UpdatedBy { get; set; }
        /// <summary>Time it was updated</summary>
        global::System.DateTime? UpdatedOn { get; set; }

    }
}