// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Extensions;

    /// <summary>Deny assignment properties.</summary>
    public partial class DenyAssignmentProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentProperties,
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal
    {

        /// <summary>Backing field for <see cref="Condition" /> property.</summary>
        private string _condition;

        /// <summary>
        /// The conditions on the deny assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName]
        /// StringEqualsIgnoreCase 'foo_storage_container'
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string Condition { get => this._condition; set => this._condition = value; }

        /// <summary>Backing field for <see cref="ConditionVersion" /> property.</summary>
        private string _conditionVersion;

        /// <summary>Version of the condition.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string ConditionVersion { get => this._conditionVersion; set => this._conditionVersion = value; }

        /// <summary>Backing field for <see cref="CreatedBy" /> property.</summary>
        private string _createdBy;

        /// <summary>Id of the user who created the assignment</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string CreatedBy { get => this._createdBy; }

        /// <summary>Backing field for <see cref="CreatedOn" /> property.</summary>
        private global::System.DateTime? _createdOn;

        /// <summary>Time it was created</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public global::System.DateTime? CreatedOn { get => this._createdOn; }

        /// <summary>Backing field for <see cref="DenyAssignmentName" /> property.</summary>
        private string _denyAssignmentName;

        /// <summary>The display name of the deny assignment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string DenyAssignmentName { get => this._denyAssignmentName; set => this._denyAssignmentName = value; }

        /// <summary>Backing field for <see cref="Description" /> property.</summary>
        private string _description;

        /// <summary>The description of the deny assignment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string Description { get => this._description; set => this._description = value; }

        /// <summary>Backing field for <see cref="DoNotApplyToChildScope" /> property.</summary>
        private bool? _doNotApplyToChildScope;

        /// <summary>
        /// Determines if the deny assignment applies to child scopes. Default value is false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public bool? DoNotApplyToChildScope { get => this._doNotApplyToChildScope; set => this._doNotApplyToChildScope = value; }

        /// <summary>Backing field for <see cref="ExcludePrincipal" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20201001Preview.IPrincipal[] _excludePrincipal;

        /// <summary>Array of principals to which the deny assignment does not apply.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20201001Preview.IPrincipal[] ExcludePrincipal { get => this._excludePrincipal; set => this._excludePrincipal = value; }

        /// <summary>Backing field for <see cref="IsSystemProtected" /> property.</summary>
        private bool? _isSystemProtected;

        /// <summary>
        /// Specifies whether this deny assignment was created by Azure and cannot be edited or deleted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public bool? IsSystemProtected { get => this._isSystemProtected; set => this._isSystemProtected = value; }

        /// <summary>Internal Acessors for CreatedBy</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal.CreatedBy { get => this._createdBy; set { {_createdBy = value;} } }

        /// <summary>Internal Acessors for CreatedOn</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal.CreatedOn { get => this._createdOn; set { {_createdOn = value;} } }

        /// <summary>Internal Acessors for UpdatedBy</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal.UpdatedBy { get => this._updatedBy; set { {_updatedBy = value;} } }

        /// <summary>Internal Acessors for UpdatedOn</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal.UpdatedOn { get => this._updatedOn; set { {_updatedOn = value;} } }

        /// <summary>Backing field for <see cref="Permission" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPermission[] _permission;

        /// <summary>An array of permissions that are denied by the deny assignment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPermission[] Permission { get => this._permission; set => this._permission = value; }

        /// <summary>Backing field for <see cref="Principal" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20201001Preview.IPrincipal[] _principal;

        /// <summary>Array of principals to which the deny assignment applies.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20201001Preview.IPrincipal[] Principal { get => this._principal; set => this._principal = value; }

        /// <summary>Backing field for <see cref="Scope" /> property.</summary>
        private string _scope;

        /// <summary>The deny assignment scope.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string Scope { get => this._scope; set => this._scope = value; }

        /// <summary>Backing field for <see cref="UpdatedBy" /> property.</summary>
        private string _updatedBy;

        /// <summary>Id of the user who updated the assignment</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string UpdatedBy { get => this._updatedBy; }

        /// <summary>Backing field for <see cref="UpdatedOn" /> property.</summary>
        private global::System.DateTime? _updatedOn;

        /// <summary>Time it was updated</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public global::System.DateTime? UpdatedOn { get => this._updatedOn; }

        /// <summary>Creates an new <see cref="DenyAssignmentProperties" /> instance.</summary>
        public DenyAssignmentProperties()
        {

        }
    }
    /// Deny assignment properties.
    public partial interface IDenyAssignmentProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The conditions on the deny assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName]
        /// StringEqualsIgnoreCase 'foo_storage_container'
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The conditions on the deny assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'",
        SerializedName = @"condition",
        PossibleTypes = new [] { typeof(string) })]
        string Condition { get; set; }
        /// <summary>Version of the condition.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Version of the condition.",
        SerializedName = @"conditionVersion",
        PossibleTypes = new [] { typeof(string) })]
        string ConditionVersion { get; set; }
        /// <summary>Id of the user who created the assignment</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Id of the user who created the assignment",
        SerializedName = @"createdBy",
        PossibleTypes = new [] { typeof(string) })]
        string CreatedBy { get;  }
        /// <summary>Time it was created</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Time it was created",
        SerializedName = @"createdOn",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? CreatedOn { get;  }
        /// <summary>The display name of the deny assignment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The display name of the deny assignment.",
        SerializedName = @"denyAssignmentName",
        PossibleTypes = new [] { typeof(string) })]
        string DenyAssignmentName { get; set; }
        /// <summary>The description of the deny assignment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The description of the deny assignment.",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        string Description { get; set; }
        /// <summary>
        /// Determines if the deny assignment applies to child scopes. Default value is false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Determines if the deny assignment applies to child scopes. Default value is false.",
        SerializedName = @"doNotApplyToChildScopes",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DoNotApplyToChildScope { get; set; }
        /// <summary>Array of principals to which the deny assignment does not apply.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Array of principals to which the deny assignment does not apply.",
        SerializedName = @"excludePrincipals",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20201001Preview.IPrincipal) })]
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20201001Preview.IPrincipal[] ExcludePrincipal { get; set; }
        /// <summary>
        /// Specifies whether this deny assignment was created by Azure and cannot be edited or deleted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether this deny assignment was created by Azure and cannot be edited or deleted.",
        SerializedName = @"isSystemProtected",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsSystemProtected { get; set; }
        /// <summary>An array of permissions that are denied by the deny assignment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An array of permissions that are denied by the deny assignment.",
        SerializedName = @"permissions",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPermission) })]
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPermission[] Permission { get; set; }
        /// <summary>Array of principals to which the deny assignment applies.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Array of principals to which the deny assignment applies.",
        SerializedName = @"principals",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20201001Preview.IPrincipal) })]
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20201001Preview.IPrincipal[] Principal { get; set; }
        /// <summary>The deny assignment scope.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The deny assignment scope.",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        string Scope { get; set; }
        /// <summary>Id of the user who updated the assignment</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Id of the user who updated the assignment",
        SerializedName = @"updatedBy",
        PossibleTypes = new [] { typeof(string) })]
        string UpdatedBy { get;  }
        /// <summary>Time it was updated</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Time it was updated",
        SerializedName = @"updatedOn",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? UpdatedOn { get;  }

    }
    /// Deny assignment properties.
    internal partial interface IDenyAssignmentPropertiesInternal

    {
        /// <summary>
        /// The conditions on the deny assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName]
        /// StringEqualsIgnoreCase 'foo_storage_container'
        /// </summary>
        string Condition { get; set; }
        /// <summary>Version of the condition.</summary>
        string ConditionVersion { get; set; }
        /// <summary>Id of the user who created the assignment</summary>
        string CreatedBy { get; set; }
        /// <summary>Time it was created</summary>
        global::System.DateTime? CreatedOn { get; set; }
        /// <summary>The display name of the deny assignment.</summary>
        string DenyAssignmentName { get; set; }
        /// <summary>The description of the deny assignment.</summary>
        string Description { get; set; }
        /// <summary>
        /// Determines if the deny assignment applies to child scopes. Default value is false.
        /// </summary>
        bool? DoNotApplyToChildScope { get; set; }
        /// <summary>Array of principals to which the deny assignment does not apply.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20201001Preview.IPrincipal[] ExcludePrincipal { get; set; }
        /// <summary>
        /// Specifies whether this deny assignment was created by Azure and cannot be edited or deleted.
        /// </summary>
        bool? IsSystemProtected { get; set; }
        /// <summary>An array of permissions that are denied by the deny assignment.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPermission[] Permission { get; set; }
        /// <summary>Array of principals to which the deny assignment applies.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20201001Preview.IPrincipal[] Principal { get; set; }
        /// <summary>The deny assignment scope.</summary>
        string Scope { get; set; }
        /// <summary>Id of the user who updated the assignment</summary>
        string UpdatedBy { get; set; }
        /// <summary>Time it was updated</summary>
        global::System.DateTime? UpdatedOn { get; set; }

    }
}