// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Extensions;

    /// <summary>Deny Assignment</summary>
    public partial class DenyAssignment :
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignment,
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentInternal
    {

        /// <summary>
        /// The conditions on the deny assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName]
        /// StringEqualsIgnoreCase 'foo_storage_container'
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public string Condition { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal)Property).Condition; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal)Property).Condition = value ?? null; }

        /// <summary>Version of the condition.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public string ConditionVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal)Property).ConditionVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal)Property).ConditionVersion = value ?? null; }

        /// <summary>Id of the user who created the assignment</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public string CreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal)Property).CreatedBy; }

        /// <summary>Time it was created</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public global::System.DateTime? CreatedOn { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal)Property).CreatedOn; }

        /// <summary>The display name of the deny assignment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public string DenyAssignmentName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal)Property).DenyAssignmentName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal)Property).DenyAssignmentName = value ?? null; }

        /// <summary>The description of the deny assignment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public string Description { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal)Property).Description; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal)Property).Description = value ?? null; }

        /// <summary>
        /// Determines if the deny assignment applies to child scopes. Default value is false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public bool? DoNotApplyToChildScope { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal)Property).DoNotApplyToChildScope; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal)Property).DoNotApplyToChildScope = value ?? default(bool); }

        /// <summary>Array of principals to which the deny assignment does not apply.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IPrincipal[] ExcludePrincipal { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal)Property).ExcludePrincipal; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal)Property).ExcludePrincipal = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private string _id;

        /// <summary>The deny assignment ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string Id { get => this._id; }

        /// <summary>
        /// Specifies whether this deny assignment was created by Azure and cannot be edited or deleted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public bool? IsSystemProtected { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal)Property).IsSystemProtected; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal)Property).IsSystemProtected = value ?? default(bool); }

        /// <summary>Internal Acessors for CreatedBy</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentInternal.CreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal)Property).CreatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal)Property).CreatedBy = value; }

        /// <summary>Internal Acessors for CreatedOn</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentInternal.CreatedOn { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal)Property).CreatedOn; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal)Property).CreatedOn = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentInternal.Id { get => this._id; set { {_id = value;} } }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentInternal.Name { get => this._name; set { {_name = value;} } }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentProperties Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.DenyAssignmentProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentInternal.Type { get => this._type; set { {_type = value;} } }

        /// <summary>Internal Acessors for UpdatedBy</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentInternal.UpdatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal)Property).UpdatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal)Property).UpdatedBy = value; }

        /// <summary>Internal Acessors for UpdatedOn</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentInternal.UpdatedOn { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal)Property).UpdatedOn; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal)Property).UpdatedOn = value; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>The deny assignment name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string Name { get => this._name; }

        /// <summary>An array of permissions that are denied by the deny assignment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPermission[] Permission { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal)Property).Permission; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal)Property).Permission = value ?? null /* arrayOf */; }

        /// <summary>Array of principals to which the deny assignment applies.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IPrincipal[] Principal { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal)Property).Principal; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal)Property).Principal = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentProperties _property;

        /// <summary>Deny assignment properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.DenyAssignmentProperties()); set => this._property = value; }

        /// <summary>The deny assignment scope.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public string Scope { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal)Property).Scope; set => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal)Property).Scope = value ?? null; }

        /// <summary>Backing field for <see cref="Type" /> property.</summary>
        private string _type;

        /// <summary>The deny assignment type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Owned)]
        public string Type { get => this._type; }

        /// <summary>Id of the user who updated the assignment</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public string UpdatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal)Property).UpdatedBy; }

        /// <summary>Time it was updated</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Origin(Microsoft.Azure.PowerShell.Cmdlets.Authorization.PropertyOrigin.Inlined)]
        public global::System.DateTime? UpdatedOn { get => ((Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPropertiesInternal)Property).UpdatedOn; }

        /// <summary>Creates an new <see cref="DenyAssignment" /> instance.</summary>
        public DenyAssignment()
        {

        }
    }
    /// Deny Assignment
    public partial interface IDenyAssignment :
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The conditions on the deny assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName]
        /// StringEqualsIgnoreCase 'foo_storage_container'
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The conditions on the deny assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'",
        SerializedName = @"condition",
        PossibleTypes = new [] { typeof(string) })]
        string Condition { get; set; }
        /// <summary>Version of the condition.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Version of the condition.",
        SerializedName = @"conditionVersion",
        PossibleTypes = new [] { typeof(string) })]
        string ConditionVersion { get; set; }
        /// <summary>Id of the user who created the assignment</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Id of the user who created the assignment",
        SerializedName = @"createdBy",
        PossibleTypes = new [] { typeof(string) })]
        string CreatedBy { get;  }
        /// <summary>Time it was created</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Time it was created",
        SerializedName = @"createdOn",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? CreatedOn { get;  }
        /// <summary>The display name of the deny assignment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The display name of the deny assignment.",
        SerializedName = @"denyAssignmentName",
        PossibleTypes = new [] { typeof(string) })]
        string DenyAssignmentName { get; set; }
        /// <summary>The description of the deny assignment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The description of the deny assignment.",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        string Description { get; set; }
        /// <summary>
        /// Determines if the deny assignment applies to child scopes. Default value is false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Determines if the deny assignment applies to child scopes. Default value is false.",
        SerializedName = @"doNotApplyToChildScopes",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DoNotApplyToChildScope { get; set; }
        /// <summary>Array of principals to which the deny assignment does not apply.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Array of principals to which the deny assignment does not apply.",
        SerializedName = @"excludePrincipals",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IPrincipal) })]
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IPrincipal[] ExcludePrincipal { get; set; }
        /// <summary>The deny assignment ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The deny assignment ID.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string Id { get;  }
        /// <summary>
        /// Specifies whether this deny assignment was created by Azure and cannot be edited or deleted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether this deny assignment was created by Azure and cannot be edited or deleted.",
        SerializedName = @"isSystemProtected",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsSystemProtected { get; set; }
        /// <summary>The deny assignment name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The deny assignment name.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get;  }
        /// <summary>An array of permissions that are denied by the deny assignment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An array of permissions that are denied by the deny assignment.",
        SerializedName = @"permissions",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPermission) })]
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPermission[] Permission { get; set; }
        /// <summary>Array of principals to which the deny assignment applies.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Array of principals to which the deny assignment applies.",
        SerializedName = @"principals",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IPrincipal) })]
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IPrincipal[] Principal { get; set; }
        /// <summary>The deny assignment scope.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The deny assignment scope.",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        string Scope { get; set; }
        /// <summary>The deny assignment type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The deny assignment type.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string Type { get;  }
        /// <summary>Id of the user who updated the assignment</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Id of the user who updated the assignment",
        SerializedName = @"updatedBy",
        PossibleTypes = new [] { typeof(string) })]
        string UpdatedBy { get;  }
        /// <summary>Time it was updated</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Authorization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Time it was updated",
        SerializedName = @"updatedOn",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? UpdatedOn { get;  }

    }
    /// Deny Assignment
    internal partial interface IDenyAssignmentInternal

    {
        /// <summary>
        /// The conditions on the deny assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName]
        /// StringEqualsIgnoreCase 'foo_storage_container'
        /// </summary>
        string Condition { get; set; }
        /// <summary>Version of the condition.</summary>
        string ConditionVersion { get; set; }
        /// <summary>Id of the user who created the assignment</summary>
        string CreatedBy { get; set; }
        /// <summary>Time it was created</summary>
        global::System.DateTime? CreatedOn { get; set; }
        /// <summary>The display name of the deny assignment.</summary>
        string DenyAssignmentName { get; set; }
        /// <summary>The description of the deny assignment.</summary>
        string Description { get; set; }
        /// <summary>
        /// Determines if the deny assignment applies to child scopes. Default value is false.
        /// </summary>
        bool? DoNotApplyToChildScope { get; set; }
        /// <summary>Array of principals to which the deny assignment does not apply.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IPrincipal[] ExcludePrincipal { get; set; }
        /// <summary>The deny assignment ID.</summary>
        string Id { get; set; }
        /// <summary>
        /// Specifies whether this deny assignment was created by Azure and cannot be edited or deleted.
        /// </summary>
        bool? IsSystemProtected { get; set; }
        /// <summary>The deny assignment name.</summary>
        string Name { get; set; }
        /// <summary>An array of permissions that are denied by the deny assignment.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentPermission[] Permission { get; set; }
        /// <summary>Array of principals to which the deny assignment applies.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IPrincipal[] Principal { get; set; }
        /// <summary>Deny assignment properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Authorization.Models.Api20220401.IDenyAssignmentProperties Property { get; set; }
        /// <summary>The deny assignment scope.</summary>
        string Scope { get; set; }
        /// <summary>The deny assignment type.</summary>
        string Type { get; set; }
        /// <summary>Id of the user who updated the assignment</summary>
        string UpdatedBy { get; set; }
        /// <summary>Time it was updated</summary>
        global::System.DateTime? UpdatedOn { get; set; }

    }
}