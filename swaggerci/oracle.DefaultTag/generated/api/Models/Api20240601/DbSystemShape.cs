// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601
{
    using static Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Extensions;

    /// <summary>DbSystemShape resource definition</summary>
    public partial class DbSystemShape :
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShape,
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapeInternal,
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IResource __resource = new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.Resource();

        /// <summary>
        /// The maximum number of CPU cores that can be enabled on the DB system for this shape.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.PropertyOrigin.Inlined)]
        public int? AvailableCoreCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).AvailableCoreCount; }

        /// <summary>
        /// The maximum number of CPU cores per database node that can be enabled for this shape. Only applicable to the flex Exadata
        /// shape and ExaCC Elastic shapes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.PropertyOrigin.Inlined)]
        public int? AvailableCoreCountPerNode { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).AvailableCoreCountPerNode; }

        /// <summary>The maximum DATA storage that can be enabled for this shape.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.PropertyOrigin.Inlined)]
        public int? AvailableDataStorageInTb { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).AvailableDataStorageInTb; }

        /// <summary>
        /// The maximum data storage available per storage server for this shape. Only applicable to ExaCC Elastic shapes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.PropertyOrigin.Inlined)]
        public double? AvailableDataStoragePerServerInTb { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).AvailableDataStoragePerServerInTb; }

        /// <summary>
        /// The maximum Db Node storage available per database node for this shape. Only applicable to ExaCC Elastic shapes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.PropertyOrigin.Inlined)]
        public int? AvailableDbNodePerNodeInGb { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).AvailableDbNodePerNodeInGb; }

        /// <summary>The maximum Db Node storage that can be enabled for this shape.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.PropertyOrigin.Inlined)]
        public int? AvailableDbNodeStorageInGb { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).AvailableDbNodeStorageInGb; }

        /// <summary>The maximum memory that can be enabled for this shape.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.PropertyOrigin.Inlined)]
        public int? AvailableMemoryInGb { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).AvailableMemoryInGb; }

        /// <summary>
        /// The maximum memory available per database node for this shape. Only applicable to ExaCC Elastic shapes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.PropertyOrigin.Inlined)]
        public int? AvailableMemoryPerNodeInGb { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).AvailableMemoryPerNodeInGb; }

        /// <summary>
        /// The discrete number by which the CPU core count for this shape can be increased or decreased.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.PropertyOrigin.Inlined)]
        public int? CoreCountIncrement { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).CoreCountIncrement; }

        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IResourceInternal)__resource).Id; }

        /// <summary>
        /// The maximum number of Exadata storage servers available for the Exadata infrastructure.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.PropertyOrigin.Inlined)]
        public int? MaxStorageCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).MaxStorageCount; }

        /// <summary>The maximum number of database nodes available for this shape.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.PropertyOrigin.Inlined)]
        public int? MaximumNodeCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).MaximumNodeCount; }

        /// <summary>Internal Acessors for AvailableCoreCount</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapeInternal.AvailableCoreCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).AvailableCoreCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).AvailableCoreCount = value; }

        /// <summary>Internal Acessors for AvailableCoreCountPerNode</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapeInternal.AvailableCoreCountPerNode { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).AvailableCoreCountPerNode; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).AvailableCoreCountPerNode = value; }

        /// <summary>Internal Acessors for AvailableDataStorageInTb</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapeInternal.AvailableDataStorageInTb { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).AvailableDataStorageInTb; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).AvailableDataStorageInTb = value; }

        /// <summary>Internal Acessors for AvailableDataStoragePerServerInTb</summary>
        double? Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapeInternal.AvailableDataStoragePerServerInTb { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).AvailableDataStoragePerServerInTb; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).AvailableDataStoragePerServerInTb = value; }

        /// <summary>Internal Acessors for AvailableDbNodePerNodeInGb</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapeInternal.AvailableDbNodePerNodeInGb { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).AvailableDbNodePerNodeInGb; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).AvailableDbNodePerNodeInGb = value; }

        /// <summary>Internal Acessors for AvailableDbNodeStorageInGb</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapeInternal.AvailableDbNodeStorageInGb { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).AvailableDbNodeStorageInGb; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).AvailableDbNodeStorageInGb = value; }

        /// <summary>Internal Acessors for AvailableMemoryInGb</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapeInternal.AvailableMemoryInGb { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).AvailableMemoryInGb; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).AvailableMemoryInGb = value; }

        /// <summary>Internal Acessors for AvailableMemoryPerNodeInGb</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapeInternal.AvailableMemoryPerNodeInGb { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).AvailableMemoryPerNodeInGb; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).AvailableMemoryPerNodeInGb = value; }

        /// <summary>Internal Acessors for CoreCountIncrement</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapeInternal.CoreCountIncrement { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).CoreCountIncrement; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).CoreCountIncrement = value; }

        /// <summary>Internal Acessors for MaxStorageCount</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapeInternal.MaxStorageCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).MaxStorageCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).MaxStorageCount = value; }

        /// <summary>Internal Acessors for MaximumNodeCount</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapeInternal.MaximumNodeCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).MaximumNodeCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).MaximumNodeCount = value; }

        /// <summary>Internal Acessors for MinCoreCountPerNode</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapeInternal.MinCoreCountPerNode { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).MinCoreCountPerNode; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).MinCoreCountPerNode = value; }

        /// <summary>Internal Acessors for MinDataStorageInTb</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapeInternal.MinDataStorageInTb { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).MinDataStorageInTb; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).MinDataStorageInTb = value; }

        /// <summary>Internal Acessors for MinDbNodeStoragePerNodeInGb</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapeInternal.MinDbNodeStoragePerNodeInGb { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).MinDbNodeStoragePerNodeInGb; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).MinDbNodeStoragePerNodeInGb = value; }

        /// <summary>Internal Acessors for MinMemoryPerNodeInGb</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapeInternal.MinMemoryPerNodeInGb { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).MinMemoryPerNodeInGb; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).MinMemoryPerNodeInGb = value; }

        /// <summary>Internal Acessors for MinStorageCount</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapeInternal.MinStorageCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).MinStorageCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).MinStorageCount = value; }

        /// <summary>Internal Acessors for MinimumCoreCount</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapeInternal.MinimumCoreCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).MinimumCoreCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).MinimumCoreCount = value; }

        /// <summary>Internal Acessors for MinimumNodeCount</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapeInternal.MinimumNodeCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).MinimumNodeCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).MinimumNodeCount = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapeProperties Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapeInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.DbSystemShapeProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for RuntimeMinimumCoreCount</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapeInternal.RuntimeMinimumCoreCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).RuntimeMinimumCoreCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).RuntimeMinimumCoreCount = value; }

        /// <summary>Internal Acessors for ShapeFamily</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapeInternal.ShapeFamily { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).ShapeFamily; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).ShapeFamily = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IResourceInternal)__resource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IResourceInternal)__resource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IResourceInternal)__resource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IResourceInternal)__resource).Name = value; }

        /// <summary>Internal Acessors for SystemData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.ISystemData Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IResourceInternal.SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IResourceInternal)__resource).SystemData; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IResourceInternal)__resource).SystemData = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IResourceInternal)__resource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IResourceInternal)__resource).Type = value; }

        /// <summary>The minimum number of CPU cores that can be enabled per node for this shape.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.PropertyOrigin.Inlined)]
        public int? MinCoreCountPerNode { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).MinCoreCountPerNode; }

        /// <summary>The minimum data storage that need be allocated for this shape.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.PropertyOrigin.Inlined)]
        public int? MinDataStorageInTb { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).MinDataStorageInTb; }

        /// <summary>The minimum Db Node storage that need be allocated per node for this shape.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.PropertyOrigin.Inlined)]
        public int? MinDbNodeStoragePerNodeInGb { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).MinDbNodeStoragePerNodeInGb; }

        /// <summary>The minimum memory that need be allocated per node for this shape.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.PropertyOrigin.Inlined)]
        public int? MinMemoryPerNodeInGb { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).MinMemoryPerNodeInGb; }

        /// <summary>
        /// The minimum number of Exadata storage servers available for the Exadata infrastructure.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.PropertyOrigin.Inlined)]
        public int? MinStorageCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).MinStorageCount; }

        /// <summary>
        /// The minimum number of CPU cores that can be enabled on the DB system for this shape.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.PropertyOrigin.Inlined)]
        public int? MinimumCoreCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).MinimumCoreCount; }

        /// <summary>The minimum number of database nodes available for this shape.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.PropertyOrigin.Inlined)]
        public int? MinimumNodeCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).MinimumNodeCount; }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IResourceInternal)__resource).Name; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapeProperties _property;

        /// <summary>The resource-specific properties for this resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapeProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.DbSystemShapeProperties()); set => this._property = value; }

        /// <summary>
        /// The runtime minimum number of CPU cores that can be enabled on the DB system for this shape.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.PropertyOrigin.Inlined)]
        public int? RuntimeMinimumCoreCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).RuntimeMinimumCoreCount; }

        /// <summary>The family of the shape used for the DB system.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.PropertyOrigin.Inlined)]
        public string ShapeFamily { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapePropertiesInternal)Property).ShapeFamily; }

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.ISystemData SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IResourceInternal)__resource).SystemData; }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IResourceInternal)__resource).SystemDataCreatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IResourceInternal)__resource).SystemDataCreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.PropertyOrigin.Inherited)]
        public string SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IResourceInternal)__resource).SystemDataCreatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IResourceInternal)__resource).SystemDataCreatedBy = value ?? null; }

        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.CreatedByType? SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IResourceInternal)__resource).SystemDataCreatedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IResourceInternal)__resource).SystemDataCreatedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.CreatedByType)""); }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IResourceInternal)__resource).SystemDataLastModifiedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IResourceInternal)__resource).SystemDataLastModifiedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.PropertyOrigin.Inherited)]
        public string SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IResourceInternal)__resource).SystemDataLastModifiedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IResourceInternal)__resource).SystemDataLastModifiedBy = value ?? null; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.CreatedByType? SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IResourceInternal)__resource).SystemDataLastModifiedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IResourceInternal)__resource).SystemDataLastModifiedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.CreatedByType)""); }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IResourceInternal)__resource).Type; }

        /// <summary>Creates an new <see cref="DbSystemShape" /> instance.</summary>
        public DbSystemShape()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__resource), __resource);
            await eventListener.AssertObjectIsValid(nameof(__resource), __resource);
        }
    }
    /// DbSystemShape resource definition
    public partial interface IDbSystemShape :
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IResource
    {
        /// <summary>
        /// The maximum number of CPU cores that can be enabled on the DB system for this shape.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The maximum number of CPU cores that can be enabled on the DB system for this shape.",
        SerializedName = @"availableCoreCount",
        PossibleTypes = new [] { typeof(int) })]
        int? AvailableCoreCount { get;  }
        /// <summary>
        /// The maximum number of CPU cores per database node that can be enabled for this shape. Only applicable to the flex Exadata
        /// shape and ExaCC Elastic shapes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The maximum number of CPU cores per database node that can be enabled for this shape. Only applicable to the flex Exadata shape and ExaCC Elastic shapes.",
        SerializedName = @"availableCoreCountPerNode",
        PossibleTypes = new [] { typeof(int) })]
        int? AvailableCoreCountPerNode { get;  }
        /// <summary>The maximum DATA storage that can be enabled for this shape.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The maximum DATA storage that can be enabled for this shape.",
        SerializedName = @"availableDataStorageInTbs",
        PossibleTypes = new [] { typeof(int) })]
        int? AvailableDataStorageInTb { get;  }
        /// <summary>
        /// The maximum data storage available per storage server for this shape. Only applicable to ExaCC Elastic shapes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The maximum data storage available per storage server for this shape. Only applicable to ExaCC Elastic shapes.",
        SerializedName = @"availableDataStoragePerServerInTbs",
        PossibleTypes = new [] { typeof(double) })]
        double? AvailableDataStoragePerServerInTb { get;  }
        /// <summary>
        /// The maximum Db Node storage available per database node for this shape. Only applicable to ExaCC Elastic shapes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The maximum Db Node storage available per database node for this shape. Only applicable to ExaCC Elastic shapes.",
        SerializedName = @"availableDbNodePerNodeInGbs",
        PossibleTypes = new [] { typeof(int) })]
        int? AvailableDbNodePerNodeInGb { get;  }
        /// <summary>The maximum Db Node storage that can be enabled for this shape.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The maximum Db Node storage that can be enabled for this shape.",
        SerializedName = @"availableDbNodeStorageInGbs",
        PossibleTypes = new [] { typeof(int) })]
        int? AvailableDbNodeStorageInGb { get;  }
        /// <summary>The maximum memory that can be enabled for this shape.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The maximum memory that can be enabled for this shape.",
        SerializedName = @"availableMemoryInGbs",
        PossibleTypes = new [] { typeof(int) })]
        int? AvailableMemoryInGb { get;  }
        /// <summary>
        /// The maximum memory available per database node for this shape. Only applicable to ExaCC Elastic shapes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The maximum memory available per database node for this shape. Only applicable to ExaCC Elastic shapes.",
        SerializedName = @"availableMemoryPerNodeInGbs",
        PossibleTypes = new [] { typeof(int) })]
        int? AvailableMemoryPerNodeInGb { get;  }
        /// <summary>
        /// The discrete number by which the CPU core count for this shape can be increased or decreased.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The discrete number by which the CPU core count for this shape can be increased or decreased.",
        SerializedName = @"coreCountIncrement",
        PossibleTypes = new [] { typeof(int) })]
        int? CoreCountIncrement { get;  }
        /// <summary>
        /// The maximum number of Exadata storage servers available for the Exadata infrastructure.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The maximum number of Exadata storage servers available for the Exadata infrastructure.",
        SerializedName = @"maxStorageCount",
        PossibleTypes = new [] { typeof(int) })]
        int? MaxStorageCount { get;  }
        /// <summary>The maximum number of database nodes available for this shape.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The maximum number of database nodes available for this shape.",
        SerializedName = @"maximumNodeCount",
        PossibleTypes = new [] { typeof(int) })]
        int? MaximumNodeCount { get;  }
        /// <summary>The minimum number of CPU cores that can be enabled per node for this shape.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The minimum number of CPU cores that can be enabled per node for this shape.",
        SerializedName = @"minCoreCountPerNode",
        PossibleTypes = new [] { typeof(int) })]
        int? MinCoreCountPerNode { get;  }
        /// <summary>The minimum data storage that need be allocated for this shape.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The minimum data storage that need be allocated for this shape.",
        SerializedName = @"minDataStorageInTbs",
        PossibleTypes = new [] { typeof(int) })]
        int? MinDataStorageInTb { get;  }
        /// <summary>The minimum Db Node storage that need be allocated per node for this shape.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The minimum Db Node storage that need be allocated per node for this shape.",
        SerializedName = @"minDbNodeStoragePerNodeInGbs",
        PossibleTypes = new [] { typeof(int) })]
        int? MinDbNodeStoragePerNodeInGb { get;  }
        /// <summary>The minimum memory that need be allocated per node for this shape.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The minimum memory that need be allocated per node for this shape.",
        SerializedName = @"minMemoryPerNodeInGbs",
        PossibleTypes = new [] { typeof(int) })]
        int? MinMemoryPerNodeInGb { get;  }
        /// <summary>
        /// The minimum number of Exadata storage servers available for the Exadata infrastructure.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The minimum number of Exadata storage servers available for the Exadata infrastructure.",
        SerializedName = @"minStorageCount",
        PossibleTypes = new [] { typeof(int) })]
        int? MinStorageCount { get;  }
        /// <summary>
        /// The minimum number of CPU cores that can be enabled on the DB system for this shape.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The minimum number of CPU cores that can be enabled on the DB system for this shape.",
        SerializedName = @"minimumCoreCount",
        PossibleTypes = new [] { typeof(int) })]
        int? MinimumCoreCount { get;  }
        /// <summary>The minimum number of database nodes available for this shape.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The minimum number of database nodes available for this shape.",
        SerializedName = @"minimumNodeCount",
        PossibleTypes = new [] { typeof(int) })]
        int? MinimumNodeCount { get;  }
        /// <summary>
        /// The runtime minimum number of CPU cores that can be enabled on the DB system for this shape.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The runtime minimum number of CPU cores that can be enabled on the DB system for this shape.",
        SerializedName = @"runtimeMinimumCoreCount",
        PossibleTypes = new [] { typeof(int) })]
        int? RuntimeMinimumCoreCount { get;  }
        /// <summary>The family of the shape used for the DB system.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The family of the shape used for the DB system.",
        SerializedName = @"shapeFamily",
        PossibleTypes = new [] { typeof(string) })]
        string ShapeFamily { get;  }

    }
    /// DbSystemShape resource definition
    internal partial interface IDbSystemShapeInternal :
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IResourceInternal
    {
        /// <summary>
        /// The maximum number of CPU cores that can be enabled on the DB system for this shape.
        /// </summary>
        int? AvailableCoreCount { get; set; }
        /// <summary>
        /// The maximum number of CPU cores per database node that can be enabled for this shape. Only applicable to the flex Exadata
        /// shape and ExaCC Elastic shapes.
        /// </summary>
        int? AvailableCoreCountPerNode { get; set; }
        /// <summary>The maximum DATA storage that can be enabled for this shape.</summary>
        int? AvailableDataStorageInTb { get; set; }
        /// <summary>
        /// The maximum data storage available per storage server for this shape. Only applicable to ExaCC Elastic shapes.
        /// </summary>
        double? AvailableDataStoragePerServerInTb { get; set; }
        /// <summary>
        /// The maximum Db Node storage available per database node for this shape. Only applicable to ExaCC Elastic shapes.
        /// </summary>
        int? AvailableDbNodePerNodeInGb { get; set; }
        /// <summary>The maximum Db Node storage that can be enabled for this shape.</summary>
        int? AvailableDbNodeStorageInGb { get; set; }
        /// <summary>The maximum memory that can be enabled for this shape.</summary>
        int? AvailableMemoryInGb { get; set; }
        /// <summary>
        /// The maximum memory available per database node for this shape. Only applicable to ExaCC Elastic shapes.
        /// </summary>
        int? AvailableMemoryPerNodeInGb { get; set; }
        /// <summary>
        /// The discrete number by which the CPU core count for this shape can be increased or decreased.
        /// </summary>
        int? CoreCountIncrement { get; set; }
        /// <summary>
        /// The maximum number of Exadata storage servers available for the Exadata infrastructure.
        /// </summary>
        int? MaxStorageCount { get; set; }
        /// <summary>The maximum number of database nodes available for this shape.</summary>
        int? MaximumNodeCount { get; set; }
        /// <summary>The minimum number of CPU cores that can be enabled per node for this shape.</summary>
        int? MinCoreCountPerNode { get; set; }
        /// <summary>The minimum data storage that need be allocated for this shape.</summary>
        int? MinDataStorageInTb { get; set; }
        /// <summary>The minimum Db Node storage that need be allocated per node for this shape.</summary>
        int? MinDbNodeStoragePerNodeInGb { get; set; }
        /// <summary>The minimum memory that need be allocated per node for this shape.</summary>
        int? MinMemoryPerNodeInGb { get; set; }
        /// <summary>
        /// The minimum number of Exadata storage servers available for the Exadata infrastructure.
        /// </summary>
        int? MinStorageCount { get; set; }
        /// <summary>
        /// The minimum number of CPU cores that can be enabled on the DB system for this shape.
        /// </summary>
        int? MinimumCoreCount { get; set; }
        /// <summary>The minimum number of database nodes available for this shape.</summary>
        int? MinimumNodeCount { get; set; }
        /// <summary>The resource-specific properties for this resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDbSystemShapeProperties Property { get; set; }
        /// <summary>
        /// The runtime minimum number of CPU cores that can be enabled on the DB system for this shape.
        /// </summary>
        int? RuntimeMinimumCoreCount { get; set; }
        /// <summary>The family of the shape used for the DB system.</summary>
        string ShapeFamily { get; set; }

    }
}