// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301
{
    using static Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Extensions;

    /// <summary>ExadbVmCluster resource definition</summary>
    public partial class ExadbVMCluster :
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMCluster,
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterInternal,
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.IValidates,
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.IHeaderSerializable
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.ITrackedResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.ITrackedResource __trackedResource = new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.TrackedResource();

        /// <summary>Backing field for <see cref="AzureAsyncOperation" /> property.</summary>
        private string _azureAsyncOperation;

        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Owned)]
        public string AzureAsyncOperation { get => this._azureAsyncOperation; set => this._azureAsyncOperation = value; }

        /// <summary>Client OCI backup subnet CIDR, default is 192.168.252.0/22</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public string BackupSubnetCidr { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).BackupSubnetCidr; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).BackupSubnetCidr = value ?? null; }

        /// <summary>Cluster backup subnet ocid</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public string BackupSubnetOcid { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).BackupSubnetOcid; }

        /// <summary>
        /// The cluster name for Exadata VM cluster on Exascale Infrastructure. The cluster name must begin with an alphabetic character,
        /// and may contain hyphens (-). Underscores (_) are not permitted. The cluster name can be no longer than 11 characters and
        /// is not case sensitive.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public string ClusterName { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).ClusterName; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).ClusterName = value ?? null; }

        /// <summary>
        /// Indicates whether diagnostic collection is enabled for the VM cluster/Cloud VM cluster/VMBM DBCS.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public bool? DataCollectionOptionIsDiagnosticsEventsEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).DataCollectionOptionIsDiagnosticsEventsEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).DataCollectionOptionIsDiagnosticsEventsEnabled = value ?? default(bool); }

        /// <summary>
        /// Indicates whether health monitoring is enabled for the VM cluster / Cloud VM cluster / VMBM DBCS.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public bool? DataCollectionOptionIsHealthMonitoringEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).DataCollectionOptionIsHealthMonitoringEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).DataCollectionOptionIsHealthMonitoringEnabled = value ?? default(bool); }

        /// <summary>
        /// Indicates whether incident logs and trace collection are enabled for the VM cluster / Cloud VM cluster / VMBM DBCS.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public bool? DataCollectionOptionIsIncidentLogsEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).DataCollectionOptionIsIncidentLogsEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).DataCollectionOptionIsIncidentLogsEnabled = value ?? default(bool); }

        /// <summary>Display Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public string DisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).DisplayName; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).DisplayName = value ?? null; }

        /// <summary>A domain name used for the Exadata VM cluster on Exascale Infrastructure</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public string Domain { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).Domain; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).Domain = value ?? null; }

        /// <summary>
        /// The number of ECPUs to enable for an Exadata VM cluster on Exascale Infrastructure.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public int? EnabledEcpuCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).EnabledEcpuCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).EnabledEcpuCount = value ?? default(int); }

        /// <summary>The Azure Resource ID of the Exadata Database Storage Vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public string ExascaleDbStorageVaultId { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).ExascaleDbStorageVaultId; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).ExascaleDbStorageVaultId = value ?? null; }

        /// <summary>Oracle Grid Infrastructure (GI) software version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public string GiVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).GiVersion; }

        /// <summary>
        /// Grid Setup will be done using this Grid Image OCID. Can be obtained using giMinorVersions API
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public string GridImageOcid { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).GridImageOcid; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).GridImageOcid = value ?? null; }

        /// <summary>The type of Grid Image</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.GridImageType? GridImageType { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).GridImageType; }

        /// <summary>The hostname for the Exadata VM cluster on Exascale Infrastructure.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public string Hostname { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).Hostname; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).Hostname = value ?? null; }

        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IResourceInternal)__trackedResource).Id; }

        /// <summary>An array of IORM settings for all the database in the Exadata DB system.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IDbIormConfig[] IormConfigCacheDbPlan { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).IormConfigCacheDbPlan; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).IormConfigCacheDbPlan = value ?? null /* arrayOf */; }

        /// <summary>Additional information about the current lifecycleState.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public string IormConfigCacheLifecycleDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).IormConfigCacheLifecycleDetail; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).IormConfigCacheLifecycleDetail = value ?? null; }

        /// <summary>The current state of IORM configuration for the Exadata DB system.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.IormLifecycleState? IormConfigCacheLifecycleState { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).IormConfigCacheLifecycleState; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).IormConfigCacheLifecycleState = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.IormLifecycleState)""); }

        /// <summary>The current value for the IORM objective. The default is AUTO.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.Objective? IormConfigCacheObjective { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).IormConfigCacheObjective; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).IormConfigCacheObjective = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.Objective)""); }

        /// <summary>
        /// The Oracle license model that applies to the Exadata VM cluster on Exascale Infrastructure. The default is LICENSE_INCLUDED.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.LicenseModel? LicenseModel { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).LicenseModel; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).LicenseModel = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.LicenseModel)""); }

        /// <summary>Additional information about the current lifecycle state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public string LifecycleDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).LifecycleDetail; }

        /// <summary>CloudVmCluster lifecycle state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.ExadbVMClusterLifecycleState? LifecycleState { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).LifecycleState; }

        /// <summary>
        /// The port number configured for the listener on the Exadata VM cluster on Exascale Infrastructure.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public int? ListenerPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).ListenerPort; }

        /// <summary>The geo-location where the resource lives</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inherited)]
        public string Location { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.ITrackedResourceInternal)__trackedResource).Location; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.ITrackedResourceInternal)__trackedResource).Location = value ; }

        /// <summary>
        /// The memory that you want to be allocated in GBs. Memory is calculated based on 11 GB per VM core reserved.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public int? MemorySizeInGb { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).MemorySizeInGb; }

        /// <summary>Internal Acessors for BackupSubnetOcid</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterInternal.BackupSubnetOcid { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).BackupSubnetOcid; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).BackupSubnetOcid = value; }

        /// <summary>Internal Acessors for DataCollectionOption</summary>
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IDataCollectionOptions Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterInternal.DataCollectionOption { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).DataCollectionOption; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).DataCollectionOption = value; }

        /// <summary>Internal Acessors for GiVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterInternal.GiVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).GiVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).GiVersion = value; }

        /// <summary>Internal Acessors for GridImageType</summary>
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.GridImageType? Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterInternal.GridImageType { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).GridImageType; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).GridImageType = value; }

        /// <summary>Internal Acessors for IormConfigCache</summary>
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadataIormConfig Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterInternal.IormConfigCache { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).IormConfigCache; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).IormConfigCache = value; }

        /// <summary>Internal Acessors for LifecycleDetail</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterInternal.LifecycleDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).LifecycleDetail; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).LifecycleDetail = value; }

        /// <summary>Internal Acessors for LifecycleState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.ExadbVMClusterLifecycleState? Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterInternal.LifecycleState { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).LifecycleState; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).LifecycleState = value; }

        /// <summary>Internal Acessors for ListenerPort</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterInternal.ListenerPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).ListenerPort; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).ListenerPort = value; }

        /// <summary>Internal Acessors for MemorySizeInGb</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterInternal.MemorySizeInGb { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).MemorySizeInGb; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).MemorySizeInGb = value; }

        /// <summary>Internal Acessors for NsgUrl</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterInternal.NsgUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).NsgUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).NsgUrl = value; }

        /// <summary>Internal Acessors for OciUrl</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterInternal.OciUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).OciUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).OciUrl = value; }

        /// <summary>Internal Acessors for Ocid</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterInternal.Ocid { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).Ocid; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).Ocid = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterProperties Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.ExadbVMClusterProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.AzureResourceProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).ProvisioningState = value; }

        /// <summary>Internal Acessors for ScanDnsName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterInternal.ScanDnsName { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).ScanDnsName; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).ScanDnsName = value; }

        /// <summary>Internal Acessors for ScanDnsRecordId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterInternal.ScanDnsRecordId { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).ScanDnsRecordId; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).ScanDnsRecordId = value; }

        /// <summary>Internal Acessors for ScanIPId</summary>
        string[] Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterInternal.ScanIPId { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).ScanIPId; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).ScanIPId = value; }

        /// <summary>Internal Acessors for SnapshotFileSystemStorage</summary>
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterStorageDetails Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterInternal.SnapshotFileSystemStorage { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).SnapshotFileSystemStorage; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).SnapshotFileSystemStorage = value; }

        /// <summary>Internal Acessors for SubnetOcid</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterInternal.SubnetOcid { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).SubnetOcid; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).SubnetOcid = value; }

        /// <summary>Internal Acessors for TotalFileSystemStorage</summary>
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterStorageDetails Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterInternal.TotalFileSystemStorage { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).TotalFileSystemStorage; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).TotalFileSystemStorage = value; }

        /// <summary>Internal Acessors for VMFileSystemStorage</summary>
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterStorageDetails Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterInternal.VMFileSystemStorage { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).VMFileSystemStorage; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).VMFileSystemStorage = value; }

        /// <summary>Internal Acessors for VipId</summary>
        string[] Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterInternal.VipId { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).VipId; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).VipId = value; }

        /// <summary>Internal Acessors for ZoneOcid</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterInternal.ZoneOcid { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).ZoneOcid; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).ZoneOcid = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IResourceInternal)__trackedResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IResourceInternal)__trackedResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IResourceInternal)__trackedResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IResourceInternal)__trackedResource).Name = value; }

        /// <summary>Internal Acessors for SystemData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.ISystemData Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IResourceInternal.SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IResourceInternal)__trackedResource).SystemData; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IResourceInternal)__trackedResource).SystemData = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IResourceInternal)__trackedResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IResourceInternal)__trackedResource).Type = value; }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IResourceInternal)__trackedResource).Name; }

        /// <summary>The number of nodes in the Exadata VM cluster on Exascale Infrastructure.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public int? NodeCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).NodeCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).NodeCount = value ?? default(int); }

        /// <summary>
        /// CIDR blocks for additional NSG ingress rules. The VNET CIDRs used to provision the VM Cluster will be added by default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.INsgCidr[] NsgCidr { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).NsgCidr; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).NsgCidr = value ?? null /* arrayOf */; }

        /// <summary>
        /// HTTPS link to OCI Network Security Group exposed to Azure Customer via the Azure Interface.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public string NsgUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).NsgUrl; }

        /// <summary>HTTPS link to OCI resources exposed to Azure Customer via Azure Interface.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public string OciUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).OciUrl; }

        /// <summary>ExadbVmCluster ocid</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public string Ocid { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).Ocid; }

        /// <summary>
        /// The OCID of the zone the Exadata VM cluster on Exascale Infrastructure is associated with.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public string PrivateZoneOcid { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).PrivateZoneOcid; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).PrivateZoneOcid = value ?? null; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterProperties _property;

        /// <summary>The resource-specific properties for this resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.ExadbVMClusterProperties()); set => this._property = value; }

        /// <summary>Exadata VM cluster on Exascale Infrastructure provisioning state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.AzureResourceProvisioningState? ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).ProvisioningState; }

        /// <summary>Backing field for <see cref="RetryAfter" /> property.</summary>
        private int? _retryAfter;

        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Owned)]
        public int? RetryAfter { get => this._retryAfter; set => this._retryAfter = value; }

        /// <summary>
        /// The FQDN of the DNS record for the SCAN IP addresses that are associated with the Exadata VM cluster on Exascale Infrastructure.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public string ScanDnsName { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).ScanDnsName; }

        /// <summary>
        /// The OCID of the DNS record for the SCAN IP addresses that are associated with the Exadata VM cluster on Exascale Infrastructure.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public string ScanDnsRecordId { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).ScanDnsRecordId; }

        /// <summary>
        /// The Single Client Access Name (SCAN) IP addresses associated with the Exadata VM cluster on Exascale Infrastructure. SCAN
        /// IP addresses are typically used for load balancing and are not assigned to any interface. Oracle Clusterware directs the
        /// requests to the appropriate nodes in the cluster. **Note:** For a single-node DB system, this list is empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public string[] ScanIPId { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).ScanIPId; }

        /// <summary>The TCP Single Client Access Name (SCAN) port. The default port is 1521.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public int? ScanListenerPortTcp { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).ScanListenerPortTcp; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).ScanListenerPortTcp = value ?? default(int); }

        /// <summary>The TCPS Single Client Access Name (SCAN) port. The default port is 2484.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public int? ScanListenerPortTcpSsl { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).ScanListenerPortTcpSsl; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).ScanListenerPortTcpSsl = value ?? default(int); }

        /// <summary>The shape of the Exadata VM cluster on Exascale Infrastructure resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public string Shape { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).Shape; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).Shape = value ?? null; }

        /// <summary>Total Capacity</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public int? SnapshotFileSystemStorageTotalSizeInGb { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).SnapshotFileSystemStorageTotalSizeInGb; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).SnapshotFileSystemStorageTotalSizeInGb = value ?? default(int); }

        /// <summary>
        /// The public key portion of one or more key pairs used for SSH access to the Exadata VM cluster on Exascale Infrastructure.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public string[] SshPublicKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).SshPublicKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).SshPublicKey = value ?? null /* arrayOf */; }

        /// <summary>Client subnet</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public string SubnetId { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).SubnetId; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).SubnetId = value ?? null; }

        /// <summary>Cluster subnet ocid</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public string SubnetOcid { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).SubnetOcid; }

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.ISystemData SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IResourceInternal)__trackedResource).SystemData; }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IResourceInternal)__trackedResource).SystemDataCreatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IResourceInternal)__trackedResource).SystemDataCreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inherited)]
        public string SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IResourceInternal)__trackedResource).SystemDataCreatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IResourceInternal)__trackedResource).SystemDataCreatedBy = value ?? null; }

        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.CreatedByType? SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IResourceInternal)__trackedResource).SystemDataCreatedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IResourceInternal)__trackedResource).SystemDataCreatedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.CreatedByType)""); }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IResourceInternal)__trackedResource).SystemDataLastModifiedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IResourceInternal)__trackedResource).SystemDataLastModifiedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inherited)]
        public string SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IResourceInternal)__trackedResource).SystemDataLastModifiedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IResourceInternal)__trackedResource).SystemDataLastModifiedBy = value ?? null; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.CreatedByType? SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IResourceInternal)__trackedResource).SystemDataLastModifiedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IResourceInternal)__trackedResource).SystemDataLastModifiedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.CreatedByType)""); }

        /// <summary>Operating system version of the image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public string SystemVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).SystemVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).SystemVersion = value ?? null; }

        /// <summary>Resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.ITrackedResourceTags Tag { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.ITrackedResourceInternal)__trackedResource).Tag; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.ITrackedResourceInternal)__trackedResource).Tag = value ?? null /* model class */; }

        /// <summary>
        /// The time zone of the Exadata VM cluster on Exascale Infrastructure. For details, see [Exadata Infrastructure Time Zones](/Content/Database/References/timezones.htm).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public string TimeZone { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).TimeZone; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).TimeZone = value ?? null; }

        /// <summary>The number of Total ECPUs for an Exadata VM cluster on Exascale Infrastructure.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public int? TotalEcpuCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).TotalEcpuCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).TotalEcpuCount = value ?? default(int); }

        /// <summary>Total Capacity</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public int? TotalFileSystemStorageTotalSizeInGb { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).TotalFileSystemStorageTotalSizeInGb; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).TotalFileSystemStorageTotalSizeInGb = value ?? default(int); }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IResourceInternal)__trackedResource).Type; }

        /// <summary>Total Capacity</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public int? VMFileSystemStorageTotalSizeInGb { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).VMFileSystemStorageTotalSizeInGb; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).VMFileSystemStorageTotalSizeInGb = value ?? default(int); }

        /// <summary>
        /// The virtual IP (VIP) addresses associated with the Exadata VM cluster on Exascale Infrastructure. The Cluster Ready Services
        /// (CRS) creates and maintains one VIP address for each node in the Exadata Cloud Service instance to enable failover. If
        /// one node fails, the VIP is reassigned to another active node in the cluster. **Note:** For a single-node DB system, this
        /// list is empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public string[] VipId { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).VipId; }

        /// <summary>VNET for network connectivity</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public string VnetId { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).VnetId; set => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).VnetId = value ?? null; }

        /// <summary>Backing field for <see cref="Zone" /> property.</summary>
        private string[] _zone;

        /// <summary>The availability zones.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Owned)]
        public string[] Zone { get => this._zone; set => this._zone = value; }

        /// <summary>
        /// The OCID of the zone the Exadata VM cluster on Exascale Infrastructure is associated with.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Origin(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.PropertyOrigin.Inlined)]
        public string ZoneOcid { get => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterPropertiesInternal)Property).ZoneOcid; }

        /// <summary>Creates an new <see cref="ExadbVMCluster" /> instance.</summary>
        public ExadbVMCluster()
        {

        }

        /// <param name="headers"></param>
        void Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.IHeaderSerializable.ReadHeaders(global::System.Net.Http.Headers.HttpResponseHeaders headers)
        {
            if (headers.TryGetValues("Azure-AsyncOperation", out var __azureAsyncOperationHeader0))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterInternal)this).AzureAsyncOperation = System.Linq.Enumerable.FirstOrDefault(__azureAsyncOperationHeader0) is string __headerAzureAsyncOperationHeader0 ? __headerAzureAsyncOperationHeader0 : (string)null;
            }
            if (headers.TryGetValues("Retry-After", out var __retryAfterHeader1))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterInternal)this).RetryAfter = System.Linq.Enumerable.FirstOrDefault(__retryAfterHeader1) is string __headerRetryAfterHeader1 ? int.TryParse( __headerRetryAfterHeader1, out int __headerRetryAfterHeader1Value ) ? __headerRetryAfterHeader1Value : default(int?) : default(int?);
            }
        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__trackedResource), __trackedResource);
            await eventListener.AssertObjectIsValid(nameof(__trackedResource), __trackedResource);
        }
    }
    /// ExadbVmCluster resource definition
    public partial interface IExadbVMCluster :
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.ITrackedResource
    {
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"Azure-AsyncOperation",
        PossibleTypes = new [] { typeof(string) })]
        string AzureAsyncOperation { get; set; }
        /// <summary>Client OCI backup subnet CIDR, default is 192.168.252.0/22</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Client OCI backup subnet CIDR, default is 192.168.252.0/22",
        SerializedName = @"backupSubnetCidr",
        PossibleTypes = new [] { typeof(string) })]
        string BackupSubnetCidr { get; set; }
        /// <summary>Cluster backup subnet ocid</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Cluster backup subnet ocid",
        SerializedName = @"backupSubnetOcid",
        PossibleTypes = new [] { typeof(string) })]
        string BackupSubnetOcid { get;  }
        /// <summary>
        /// The cluster name for Exadata VM cluster on Exascale Infrastructure. The cluster name must begin with an alphabetic character,
        /// and may contain hyphens (-). Underscores (_) are not permitted. The cluster name can be no longer than 11 characters and
        /// is not case sensitive.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The cluster name for Exadata VM cluster on Exascale Infrastructure. The cluster name must begin with an alphabetic character, and may contain hyphens (-). Underscores (_) are not permitted. The cluster name can be no longer than 11 characters and is not case sensitive.",
        SerializedName = @"clusterName",
        PossibleTypes = new [] { typeof(string) })]
        string ClusterName { get; set; }
        /// <summary>
        /// Indicates whether diagnostic collection is enabled for the VM cluster/Cloud VM cluster/VMBM DBCS.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether diagnostic collection is enabled for the VM cluster/Cloud VM cluster/VMBM DBCS.",
        SerializedName = @"isDiagnosticsEventsEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DataCollectionOptionIsDiagnosticsEventsEnabled { get; set; }
        /// <summary>
        /// Indicates whether health monitoring is enabled for the VM cluster / Cloud VM cluster / VMBM DBCS.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether health monitoring is enabled for the VM cluster / Cloud VM cluster / VMBM DBCS.",
        SerializedName = @"isHealthMonitoringEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DataCollectionOptionIsHealthMonitoringEnabled { get; set; }
        /// <summary>
        /// Indicates whether incident logs and trace collection are enabled for the VM cluster / Cloud VM cluster / VMBM DBCS.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether incident logs and trace collection are enabled for the VM cluster / Cloud VM cluster / VMBM DBCS.",
        SerializedName = @"isIncidentLogsEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DataCollectionOptionIsIncidentLogsEnabled { get; set; }
        /// <summary>Display Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Display Name",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get; set; }
        /// <summary>A domain name used for the Exadata VM cluster on Exascale Infrastructure</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A domain name used for the Exadata VM cluster on Exascale Infrastructure",
        SerializedName = @"domain",
        PossibleTypes = new [] { typeof(string) })]
        string Domain { get; set; }
        /// <summary>
        /// The number of ECPUs to enable for an Exadata VM cluster on Exascale Infrastructure.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of ECPUs to enable for an Exadata VM cluster on Exascale Infrastructure.",
        SerializedName = @"enabledEcpuCount",
        PossibleTypes = new [] { typeof(int) })]
        int? EnabledEcpuCount { get; set; }
        /// <summary>The Azure Resource ID of the Exadata Database Storage Vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Azure Resource ID of the Exadata Database Storage Vault.",
        SerializedName = @"exascaleDbStorageVaultId",
        PossibleTypes = new [] { typeof(string) })]
        string ExascaleDbStorageVaultId { get; set; }
        /// <summary>Oracle Grid Infrastructure (GI) software version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Oracle Grid Infrastructure (GI) software version",
        SerializedName = @"giVersion",
        PossibleTypes = new [] { typeof(string) })]
        string GiVersion { get;  }
        /// <summary>
        /// Grid Setup will be done using this Grid Image OCID. Can be obtained using giMinorVersions API
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Grid Setup will be done using this Grid Image OCID. Can be obtained using giMinorVersions API",
        SerializedName = @"gridImageOcid",
        PossibleTypes = new [] { typeof(string) })]
        string GridImageOcid { get; set; }
        /// <summary>The type of Grid Image</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The type of Grid Image",
        SerializedName = @"gridImageType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.GridImageType) })]
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.GridImageType? GridImageType { get;  }
        /// <summary>The hostname for the Exadata VM cluster on Exascale Infrastructure.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The hostname for the  Exadata VM cluster on Exascale Infrastructure.",
        SerializedName = @"hostname",
        PossibleTypes = new [] { typeof(string) })]
        string Hostname { get; set; }
        /// <summary>An array of IORM settings for all the database in the Exadata DB system.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An array of IORM settings for all the database in the Exadata DB system.",
        SerializedName = @"dbPlans",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IDbIormConfig) })]
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IDbIormConfig[] IormConfigCacheDbPlan { get; set; }
        /// <summary>Additional information about the current lifecycleState.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Additional information about the current lifecycleState.",
        SerializedName = @"lifecycleDetails",
        PossibleTypes = new [] { typeof(string) })]
        string IormConfigCacheLifecycleDetail { get; set; }
        /// <summary>The current state of IORM configuration for the Exadata DB system.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The current state of IORM configuration for the Exadata DB system.",
        SerializedName = @"lifecycleState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.IormLifecycleState) })]
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.IormLifecycleState? IormConfigCacheLifecycleState { get; set; }
        /// <summary>The current value for the IORM objective. The default is AUTO.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The current value for the IORM objective. The default is AUTO.",
        SerializedName = @"objective",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.Objective) })]
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.Objective? IormConfigCacheObjective { get; set; }
        /// <summary>
        /// The Oracle license model that applies to the Exadata VM cluster on Exascale Infrastructure. The default is LICENSE_INCLUDED.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Oracle license model that applies to the Exadata VM cluster on Exascale Infrastructure. The default is LICENSE_INCLUDED. ",
        SerializedName = @"licenseModel",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.LicenseModel) })]
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.LicenseModel? LicenseModel { get; set; }
        /// <summary>Additional information about the current lifecycle state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Additional information about the current lifecycle state.",
        SerializedName = @"lifecycleDetails",
        PossibleTypes = new [] { typeof(string) })]
        string LifecycleDetail { get;  }
        /// <summary>CloudVmCluster lifecycle state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"CloudVmCluster lifecycle state",
        SerializedName = @"lifecycleState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.ExadbVMClusterLifecycleState) })]
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.ExadbVMClusterLifecycleState? LifecycleState { get;  }
        /// <summary>
        /// The port number configured for the listener on the Exadata VM cluster on Exascale Infrastructure.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The port number configured for the listener on the Exadata VM cluster on Exascale Infrastructure.",
        SerializedName = @"listenerPort",
        PossibleTypes = new [] { typeof(int) })]
        int? ListenerPort { get;  }
        /// <summary>
        /// The memory that you want to be allocated in GBs. Memory is calculated based on 11 GB per VM core reserved.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The memory that you want to be allocated in GBs. Memory is calculated based on 11 GB per VM core reserved.",
        SerializedName = @"memorySizeInGbs",
        PossibleTypes = new [] { typeof(int) })]
        int? MemorySizeInGb { get;  }
        /// <summary>The number of nodes in the Exadata VM cluster on Exascale Infrastructure.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of nodes in the Exadata VM cluster on Exascale Infrastructure.",
        SerializedName = @"nodeCount",
        PossibleTypes = new [] { typeof(int) })]
        int? NodeCount { get; set; }
        /// <summary>
        /// CIDR blocks for additional NSG ingress rules. The VNET CIDRs used to provision the VM Cluster will be added by default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"CIDR blocks for additional NSG ingress rules. The VNET CIDRs used to provision the VM Cluster will be added by default.",
        SerializedName = @"nsgCidrs",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.INsgCidr) })]
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.INsgCidr[] NsgCidr { get; set; }
        /// <summary>
        /// HTTPS link to OCI Network Security Group exposed to Azure Customer via the Azure Interface.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"HTTPS link to OCI Network Security Group exposed to Azure Customer via the Azure Interface.",
        SerializedName = @"nsgUrl",
        PossibleTypes = new [] { typeof(string) })]
        string NsgUrl { get;  }
        /// <summary>HTTPS link to OCI resources exposed to Azure Customer via Azure Interface.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"HTTPS link to OCI resources exposed to Azure Customer via Azure Interface.",
        SerializedName = @"ociUrl",
        PossibleTypes = new [] { typeof(string) })]
        string OciUrl { get;  }
        /// <summary>ExadbVmCluster ocid</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"ExadbVmCluster ocid",
        SerializedName = @"ocid",
        PossibleTypes = new [] { typeof(string) })]
        string Ocid { get;  }
        /// <summary>
        /// The OCID of the zone the Exadata VM cluster on Exascale Infrastructure is associated with.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The OCID of the zone the Exadata VM cluster on Exascale Infrastructure is associated with.",
        SerializedName = @"privateZoneOcid",
        PossibleTypes = new [] { typeof(string) })]
        string PrivateZoneOcid { get; set; }
        /// <summary>Exadata VM cluster on Exascale Infrastructure provisioning state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Exadata VM cluster on Exascale Infrastructure provisioning state",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.AzureResourceProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.AzureResourceProvisioningState? ProvisioningState { get;  }

        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"Retry-After",
        PossibleTypes = new [] { typeof(int) })]
        int? RetryAfter { get; set; }
        /// <summary>
        /// The FQDN of the DNS record for the SCAN IP addresses that are associated with the Exadata VM cluster on Exascale Infrastructure.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The FQDN of the DNS record for the SCAN IP addresses that are associated with the Exadata VM cluster on Exascale Infrastructure. ",
        SerializedName = @"scanDnsName",
        PossibleTypes = new [] { typeof(string) })]
        string ScanDnsName { get;  }
        /// <summary>
        /// The OCID of the DNS record for the SCAN IP addresses that are associated with the Exadata VM cluster on Exascale Infrastructure.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The OCID of the DNS record for the SCAN IP addresses that are associated with the Exadata VM cluster on Exascale Infrastructure.",
        SerializedName = @"scanDnsRecordId",
        PossibleTypes = new [] { typeof(string) })]
        string ScanDnsRecordId { get;  }
        /// <summary>
        /// The Single Client Access Name (SCAN) IP addresses associated with the Exadata VM cluster on Exascale Infrastructure. SCAN
        /// IP addresses are typically used for load balancing and are not assigned to any interface. Oracle Clusterware directs the
        /// requests to the appropriate nodes in the cluster. **Note:** For a single-node DB system, this list is empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The Single Client Access Name (SCAN) IP addresses associated with the Exadata VM cluster on Exascale Infrastructure. SCAN IP addresses are typically used for load balancing and are not assigned to any interface. Oracle Clusterware directs the requests to the appropriate nodes in the cluster. **Note:** For a single-node DB system, this list is empty.",
        SerializedName = @"scanIpIds",
        PossibleTypes = new [] { typeof(string) })]
        string[] ScanIPId { get;  }
        /// <summary>The TCP Single Client Access Name (SCAN) port. The default port is 1521.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The TCP Single Client Access Name (SCAN) port. The default port is 1521.",
        SerializedName = @"scanListenerPortTcp",
        PossibleTypes = new [] { typeof(int) })]
        int? ScanListenerPortTcp { get; set; }
        /// <summary>The TCPS Single Client Access Name (SCAN) port. The default port is 2484.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The TCPS Single Client Access Name (SCAN) port. The default port is 2484.",
        SerializedName = @"scanListenerPortTcpSsl",
        PossibleTypes = new [] { typeof(int) })]
        int? ScanListenerPortTcpSsl { get; set; }
        /// <summary>The shape of the Exadata VM cluster on Exascale Infrastructure resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The shape of the Exadata VM cluster on Exascale Infrastructure resource",
        SerializedName = @"shape",
        PossibleTypes = new [] { typeof(string) })]
        string Shape { get; set; }
        /// <summary>Total Capacity</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Total Capacity",
        SerializedName = @"totalSizeInGbs",
        PossibleTypes = new [] { typeof(int) })]
        int? SnapshotFileSystemStorageTotalSizeInGb { get; set; }
        /// <summary>
        /// The public key portion of one or more key pairs used for SSH access to the Exadata VM cluster on Exascale Infrastructure.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The public key portion of one or more key pairs used for SSH access to the Exadata VM cluster on Exascale Infrastructure.",
        SerializedName = @"sshPublicKeys",
        PossibleTypes = new [] { typeof(string) })]
        string[] SshPublicKey { get; set; }
        /// <summary>Client subnet</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Client subnet",
        SerializedName = @"subnetId",
        PossibleTypes = new [] { typeof(string) })]
        string SubnetId { get; set; }
        /// <summary>Cluster subnet ocid</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Cluster subnet ocid",
        SerializedName = @"subnetOcid",
        PossibleTypes = new [] { typeof(string) })]
        string SubnetOcid { get;  }
        /// <summary>Operating system version of the image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Operating system version of the image.",
        SerializedName = @"systemVersion",
        PossibleTypes = new [] { typeof(string) })]
        string SystemVersion { get; set; }
        /// <summary>
        /// The time zone of the Exadata VM cluster on Exascale Infrastructure. For details, see [Exadata Infrastructure Time Zones](/Content/Database/References/timezones.htm).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The time zone of the Exadata VM cluster on Exascale Infrastructure. For details, see [Exadata Infrastructure Time Zones](/Content/Database/References/timezones.htm).",
        SerializedName = @"timeZone",
        PossibleTypes = new [] { typeof(string) })]
        string TimeZone { get; set; }
        /// <summary>The number of Total ECPUs for an Exadata VM cluster on Exascale Infrastructure.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of Total ECPUs for an Exadata VM cluster on Exascale Infrastructure.",
        SerializedName = @"totalEcpuCount",
        PossibleTypes = new [] { typeof(int) })]
        int? TotalEcpuCount { get; set; }
        /// <summary>Total Capacity</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Total Capacity",
        SerializedName = @"totalSizeInGbs",
        PossibleTypes = new [] { typeof(int) })]
        int? TotalFileSystemStorageTotalSizeInGb { get; set; }
        /// <summary>Total Capacity</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Total Capacity",
        SerializedName = @"totalSizeInGbs",
        PossibleTypes = new [] { typeof(int) })]
        int? VMFileSystemStorageTotalSizeInGb { get; set; }
        /// <summary>
        /// The virtual IP (VIP) addresses associated with the Exadata VM cluster on Exascale Infrastructure. The Cluster Ready Services
        /// (CRS) creates and maintains one VIP address for each node in the Exadata Cloud Service instance to enable failover. If
        /// one node fails, the VIP is reassigned to another active node in the cluster. **Note:** For a single-node DB system, this
        /// list is empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The virtual IP (VIP) addresses associated with the Exadata VM cluster on Exascale Infrastructure. The Cluster Ready Services (CRS) creates and maintains one VIP address for each node in the Exadata Cloud Service instance to enable failover. If one node fails, the VIP is reassigned to another active node in the cluster. **Note:** For a single-node DB system, this list is empty.",
        SerializedName = @"vipIds",
        PossibleTypes = new [] { typeof(string) })]
        string[] VipId { get;  }
        /// <summary>VNET for network connectivity</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"VNET for network connectivity",
        SerializedName = @"vnetId",
        PossibleTypes = new [] { typeof(string) })]
        string VnetId { get; set; }
        /// <summary>The availability zones.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The availability zones.",
        SerializedName = @"zones",
        PossibleTypes = new [] { typeof(string) })]
        string[] Zone { get; set; }
        /// <summary>
        /// The OCID of the zone the Exadata VM cluster on Exascale Infrastructure is associated with.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The OCID of the zone the Exadata VM cluster on Exascale Infrastructure is associated with.",
        SerializedName = @"zoneOcid",
        PossibleTypes = new [] { typeof(string) })]
        string ZoneOcid { get;  }

    }
    /// ExadbVmCluster resource definition
    internal partial interface IExadbVMClusterInternal :
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.ITrackedResourceInternal
    {
        string AzureAsyncOperation { get; set; }
        /// <summary>Client OCI backup subnet CIDR, default is 192.168.252.0/22</summary>
        string BackupSubnetCidr { get; set; }
        /// <summary>Cluster backup subnet ocid</summary>
        string BackupSubnetOcid { get; set; }
        /// <summary>
        /// The cluster name for Exadata VM cluster on Exascale Infrastructure. The cluster name must begin with an alphabetic character,
        /// and may contain hyphens (-). Underscores (_) are not permitted. The cluster name can be no longer than 11 characters and
        /// is not case sensitive.
        /// </summary>
        string ClusterName { get; set; }
        /// <summary>
        /// Indicates user preferences for the various diagnostic collection options for the VM cluster/Cloud VM cluster/VMBM DBCS.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IDataCollectionOptions DataCollectionOption { get; set; }
        /// <summary>
        /// Indicates whether diagnostic collection is enabled for the VM cluster/Cloud VM cluster/VMBM DBCS.
        /// </summary>
        bool? DataCollectionOptionIsDiagnosticsEventsEnabled { get; set; }
        /// <summary>
        /// Indicates whether health monitoring is enabled for the VM cluster / Cloud VM cluster / VMBM DBCS.
        /// </summary>
        bool? DataCollectionOptionIsHealthMonitoringEnabled { get; set; }
        /// <summary>
        /// Indicates whether incident logs and trace collection are enabled for the VM cluster / Cloud VM cluster / VMBM DBCS.
        /// </summary>
        bool? DataCollectionOptionIsIncidentLogsEnabled { get; set; }
        /// <summary>Display Name</summary>
        string DisplayName { get; set; }
        /// <summary>A domain name used for the Exadata VM cluster on Exascale Infrastructure</summary>
        string Domain { get; set; }
        /// <summary>
        /// The number of ECPUs to enable for an Exadata VM cluster on Exascale Infrastructure.
        /// </summary>
        int? EnabledEcpuCount { get; set; }
        /// <summary>The Azure Resource ID of the Exadata Database Storage Vault.</summary>
        string ExascaleDbStorageVaultId { get; set; }
        /// <summary>Oracle Grid Infrastructure (GI) software version</summary>
        string GiVersion { get; set; }
        /// <summary>
        /// Grid Setup will be done using this Grid Image OCID. Can be obtained using giMinorVersions API
        /// </summary>
        string GridImageOcid { get; set; }
        /// <summary>The type of Grid Image</summary>
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.GridImageType? GridImageType { get; set; }
        /// <summary>The hostname for the Exadata VM cluster on Exascale Infrastructure.</summary>
        string Hostname { get; set; }
        /// <summary>iormConfigCache details for Exadata VM cluster on Exascale Infrastructure.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadataIormConfig IormConfigCache { get; set; }
        /// <summary>An array of IORM settings for all the database in the Exadata DB system.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IDbIormConfig[] IormConfigCacheDbPlan { get; set; }
        /// <summary>Additional information about the current lifecycleState.</summary>
        string IormConfigCacheLifecycleDetail { get; set; }
        /// <summary>The current state of IORM configuration for the Exadata DB system.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.IormLifecycleState? IormConfigCacheLifecycleState { get; set; }
        /// <summary>The current value for the IORM objective. The default is AUTO.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.Objective? IormConfigCacheObjective { get; set; }
        /// <summary>
        /// The Oracle license model that applies to the Exadata VM cluster on Exascale Infrastructure. The default is LICENSE_INCLUDED.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.LicenseModel? LicenseModel { get; set; }
        /// <summary>Additional information about the current lifecycle state.</summary>
        string LifecycleDetail { get; set; }
        /// <summary>CloudVmCluster lifecycle state</summary>
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.ExadbVMClusterLifecycleState? LifecycleState { get; set; }
        /// <summary>
        /// The port number configured for the listener on the Exadata VM cluster on Exascale Infrastructure.
        /// </summary>
        int? ListenerPort { get; set; }
        /// <summary>
        /// The memory that you want to be allocated in GBs. Memory is calculated based on 11 GB per VM core reserved.
        /// </summary>
        int? MemorySizeInGb { get; set; }
        /// <summary>The number of nodes in the Exadata VM cluster on Exascale Infrastructure.</summary>
        int? NodeCount { get; set; }
        /// <summary>
        /// CIDR blocks for additional NSG ingress rules. The VNET CIDRs used to provision the VM Cluster will be added by default.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.INsgCidr[] NsgCidr { get; set; }
        /// <summary>
        /// HTTPS link to OCI Network Security Group exposed to Azure Customer via the Azure Interface.
        /// </summary>
        string NsgUrl { get; set; }
        /// <summary>HTTPS link to OCI resources exposed to Azure Customer via Azure Interface.</summary>
        string OciUrl { get; set; }
        /// <summary>ExadbVmCluster ocid</summary>
        string Ocid { get; set; }
        /// <summary>
        /// The OCID of the zone the Exadata VM cluster on Exascale Infrastructure is associated with.
        /// </summary>
        string PrivateZoneOcid { get; set; }
        /// <summary>The resource-specific properties for this resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterProperties Property { get; set; }
        /// <summary>Exadata VM cluster on Exascale Infrastructure provisioning state</summary>
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.AzureResourceProvisioningState? ProvisioningState { get; set; }

        int? RetryAfter { get; set; }
        /// <summary>
        /// The FQDN of the DNS record for the SCAN IP addresses that are associated with the Exadata VM cluster on Exascale Infrastructure.
        /// </summary>
        string ScanDnsName { get; set; }
        /// <summary>
        /// The OCID of the DNS record for the SCAN IP addresses that are associated with the Exadata VM cluster on Exascale Infrastructure.
        /// </summary>
        string ScanDnsRecordId { get; set; }
        /// <summary>
        /// The Single Client Access Name (SCAN) IP addresses associated with the Exadata VM cluster on Exascale Infrastructure. SCAN
        /// IP addresses are typically used for load balancing and are not assigned to any interface. Oracle Clusterware directs the
        /// requests to the appropriate nodes in the cluster. **Note:** For a single-node DB system, this list is empty.
        /// </summary>
        string[] ScanIPId { get; set; }
        /// <summary>The TCP Single Client Access Name (SCAN) port. The default port is 1521.</summary>
        int? ScanListenerPortTcp { get; set; }
        /// <summary>The TCPS Single Client Access Name (SCAN) port. The default port is 2484.</summary>
        int? ScanListenerPortTcpSsl { get; set; }
        /// <summary>The shape of the Exadata VM cluster on Exascale Infrastructure resource</summary>
        string Shape { get; set; }
        /// <summary>Snapshot filesystem storage details.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterStorageDetails SnapshotFileSystemStorage { get; set; }
        /// <summary>Total Capacity</summary>
        int? SnapshotFileSystemStorageTotalSizeInGb { get; set; }
        /// <summary>
        /// The public key portion of one or more key pairs used for SSH access to the Exadata VM cluster on Exascale Infrastructure.
        /// </summary>
        string[] SshPublicKey { get; set; }
        /// <summary>Client subnet</summary>
        string SubnetId { get; set; }
        /// <summary>Cluster subnet ocid</summary>
        string SubnetOcid { get; set; }
        /// <summary>Operating system version of the image.</summary>
        string SystemVersion { get; set; }
        /// <summary>
        /// The time zone of the Exadata VM cluster on Exascale Infrastructure. For details, see [Exadata Infrastructure Time Zones](/Content/Database/References/timezones.htm).
        /// </summary>
        string TimeZone { get; set; }
        /// <summary>The number of Total ECPUs for an Exadata VM cluster on Exascale Infrastructure.</summary>
        int? TotalEcpuCount { get; set; }
        /// <summary>Total file system storage details.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterStorageDetails TotalFileSystemStorage { get; set; }
        /// <summary>Total Capacity</summary>
        int? TotalFileSystemStorageTotalSizeInGb { get; set; }
        /// <summary>Filesystem storage details.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IExadbVMClusterStorageDetails VMFileSystemStorage { get; set; }
        /// <summary>Total Capacity</summary>
        int? VMFileSystemStorageTotalSizeInGb { get; set; }
        /// <summary>
        /// The virtual IP (VIP) addresses associated with the Exadata VM cluster on Exascale Infrastructure. The Cluster Ready Services
        /// (CRS) creates and maintains one VIP address for each node in the Exadata Cloud Service instance to enable failover. If
        /// one node fails, the VIP is reassigned to another active node in the cluster. **Note:** For a single-node DB system, this
        /// list is empty.
        /// </summary>
        string[] VipId { get; set; }
        /// <summary>VNET for network connectivity</summary>
        string VnetId { get; set; }
        /// <summary>The availability zones.</summary>
        string[] Zone { get; set; }
        /// <summary>
        /// The OCID of the zone the Exadata VM cluster on Exascale Infrastructure is associated with.
        /// </summary>
        string ZoneOcid { get; set; }

    }
}