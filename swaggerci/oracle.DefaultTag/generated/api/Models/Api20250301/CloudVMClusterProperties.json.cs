// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301
{
    using static Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Extensions;

    /// <summary>CloudVmCluster resource model</summary>
    public partial class CloudVMClusterProperties
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json serialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name= "returnNow" />
        /// output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonObject into a new instance of <see cref="CloudVMClusterProperties" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal CloudVMClusterProperties(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_dataCollectionOption = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonObject>("dataCollectionOptions"), out var __jsonDataCollectionOptions) ? Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.DataCollectionOptions.FromJson(__jsonDataCollectionOptions) : DataCollectionOption;}
            {_iormConfigCache = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonObject>("iormConfigCache"), out var __jsonIormConfigCache) ? Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.ExadataIormConfig.FromJson(__jsonIormConfigCache) : IormConfigCache;}
            {_ocid = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString>("ocid"), out var __jsonOcid) ? (string)__jsonOcid : (string)Ocid;}
            {_listenerPort = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNumber>("listenerPort"), out var __jsonListenerPort) ? (long?)__jsonListenerPort : ListenerPort;}
            {_nodeCount = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNumber>("nodeCount"), out var __jsonNodeCount) ? (int?)__jsonNodeCount : NodeCount;}
            {_storageSizeInGb = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNumber>("storageSizeInGbs"), out var __jsonStorageSizeInGbs) ? (int?)__jsonStorageSizeInGbs : StorageSizeInGb;}
            {_fileSystemConfigurationDetail = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonArray>("fileSystemConfigurationDetails"), out var __jsonFileSystemConfigurationDetails) ? If( __jsonFileSystemConfigurationDetails as Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonArray, out var __v) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IFileSystemConfigurationDetails[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__v, (__u)=>(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.IFileSystemConfigurationDetails) (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.FileSystemConfigurationDetails.FromJson(__u) )) ))() : null : FileSystemConfigurationDetail;}
            {_dataStorageSizeInTb = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNumber>("dataStorageSizeInTbs"), out var __jsonDataStorageSizeInTbs) ? (double?)__jsonDataStorageSizeInTbs : DataStorageSizeInTb;}
            {_dbNodeStorageSizeInGb = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNumber>("dbNodeStorageSizeInGbs"), out var __jsonDbNodeStorageSizeInGbs) ? (int?)__jsonDbNodeStorageSizeInGbs : DbNodeStorageSizeInGb;}
            {_memorySizeInGb = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNumber>("memorySizeInGbs"), out var __jsonMemorySizeInGbs) ? (int?)__jsonMemorySizeInGbs : MemorySizeInGb;}
            {_timeCreated = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString>("timeCreated"), out var __jsonTimeCreated) ? global::System.DateTime.TryParse((string)__jsonTimeCreated, global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.AdjustToUniversal, out var __jsonTimeCreatedValue) ? __jsonTimeCreatedValue : TimeCreated : TimeCreated;}
            {_lifecycleDetail = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString>("lifecycleDetails"), out var __jsonLifecycleDetails) ? (string)__jsonLifecycleDetails : (string)LifecycleDetail;}
            {_timeZone = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString>("timeZone"), out var __jsonTimeZone) ? (string)__jsonTimeZone : (string)TimeZone;}
            {_zoneId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString>("zoneId"), out var __jsonZoneId) ? (string)__jsonZoneId : (string)ZoneId;}
            {_hostname = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString>("hostname"), out var __jsonHostname) ? (string)__jsonHostname : (string)Hostname;}
            {_domain = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString>("domain"), out var __jsonDomain) ? (string)__jsonDomain : (string)Domain;}
            {_cpuCoreCount = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNumber>("cpuCoreCount"), out var __jsonCpuCoreCount) ? (int)__jsonCpuCoreCount : CpuCoreCount;}
            {_ocpuCount = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNumber>("ocpuCount"), out var __jsonOcpuCount) ? (float?)__jsonOcpuCount : OcpuCount;}
            {_clusterName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString>("clusterName"), out var __jsonClusterName) ? (string)__jsonClusterName : (string)ClusterName;}
            {_dataStoragePercentage = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNumber>("dataStoragePercentage"), out var __jsonDataStoragePercentage) ? (int?)__jsonDataStoragePercentage : DataStoragePercentage;}
            {_isLocalBackupEnabled = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonBoolean>("isLocalBackupEnabled"), out var __jsonIsLocalBackupEnabled) ? (bool?)__jsonIsLocalBackupEnabled : IsLocalBackupEnabled;}
            {_cloudExadataInfrastructureId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString>("cloudExadataInfrastructureId"), out var __jsonCloudExadataInfrastructureId) ? (string)__jsonCloudExadataInfrastructureId : (string)CloudExadataInfrastructureId;}
            {_isSparseDiskgroupEnabled = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonBoolean>("isSparseDiskgroupEnabled"), out var __jsonIsSparseDiskgroupEnabled) ? (bool?)__jsonIsSparseDiskgroupEnabled : IsSparseDiskgroupEnabled;}
            {_systemVersion = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString>("systemVersion"), out var __jsonSystemVersion) ? (string)__jsonSystemVersion : (string)SystemVersion;}
            {_sshPublicKey = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonArray>("sshPublicKeys"), out var __jsonSshPublicKeys) ? If( __jsonSshPublicKeys as Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonArray, out var __q) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__q, (__p)=>(string) (__p is Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString __o ? (string)(__o.ToString()) : null)) ))() : null : SshPublicKey;}
            {_licenseModel = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString>("licenseModel"), out var __jsonLicenseModel) ? (string)__jsonLicenseModel : (string)LicenseModel;}
            {_diskRedundancy = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString>("diskRedundancy"), out var __jsonDiskRedundancy) ? (string)__jsonDiskRedundancy : (string)DiskRedundancy;}
            {_scanIPId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonArray>("scanIpIds"), out var __jsonScanIPIds) ? If( __jsonScanIPIds as Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonArray, out var __l) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__l, (__k)=>(string) (__k is Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString __j ? (string)(__j.ToString()) : null)) ))() : null : ScanIPId;}
            {_vipId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonArray>("vipIds"), out var __jsonVipIds) ? If( __jsonVipIds as Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonArray, out var __g) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__g, (__f)=>(string) (__f is Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString __e ? (string)(__e.ToString()) : null)) ))() : null : VipId;}
            {_scanDnsName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString>("scanDnsName"), out var __jsonScanDnsName) ? (string)__jsonScanDnsName : (string)ScanDnsName;}
            {_scanListenerPortTcp = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNumber>("scanListenerPortTcp"), out var __jsonScanListenerPortTcp) ? (int?)__jsonScanListenerPortTcp : ScanListenerPortTcp;}
            {_scanListenerPortTcpSsl = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNumber>("scanListenerPortTcpSsl"), out var __jsonScanListenerPortTcpSsl) ? (int?)__jsonScanListenerPortTcpSsl : ScanListenerPortTcpSsl;}
            {_scanDnsRecordId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString>("scanDnsRecordId"), out var __jsonScanDnsRecordId) ? (string)__jsonScanDnsRecordId : (string)ScanDnsRecordId;}
            {_shape = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString>("shape"), out var __jsonShape) ? (string)__jsonShape : (string)Shape;}
            {_provisioningState = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString>("provisioningState"), out var __jsonProvisioningState) ? (string)__jsonProvisioningState : (string)ProvisioningState;}
            {_lifecycleState = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString>("lifecycleState"), out var __jsonLifecycleState) ? (string)__jsonLifecycleState : (string)LifecycleState;}
            {_vnetId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString>("vnetId"), out var __jsonVnetId) ? (string)__jsonVnetId : (string)VnetId;}
            {_giVersion = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString>("giVersion"), out var __jsonGiVersion) ? (string)__jsonGiVersion : (string)GiVersion;}
            {_ociUrl = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString>("ociUrl"), out var __jsonOciUrl) ? (string)__jsonOciUrl : (string)OciUrl;}
            {_nsgUrl = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString>("nsgUrl"), out var __jsonNsgUrl) ? (string)__jsonNsgUrl : (string)NsgUrl;}
            {_subnetId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString>("subnetId"), out var __jsonSubnetId) ? (string)__jsonSubnetId : (string)SubnetId;}
            {_backupSubnetCidr = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString>("backupSubnetCidr"), out var __jsonBackupSubnetCidr) ? (string)__jsonBackupSubnetCidr : (string)BackupSubnetCidr;}
            {_nsgCidr = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonArray>("nsgCidrs"), out var __jsonNsgCidrs) ? If( __jsonNsgCidrs as Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonArray, out var __b) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.INsgCidr[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__b, (__a)=>(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.INsgCidr) (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.NsgCidr.FromJson(__a) )) ))() : null : NsgCidr;}
            {_displayName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString>("displayName"), out var __jsonDisplayName) ? (string)__jsonDisplayName : (string)DisplayName;}
            {_computeNode = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonArray>("computeNodes"), out var __jsonComputeNodes) ? If( __jsonComputeNodes as Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonArray, out var ___w) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(___w, (___v)=>(string) (___v is Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString ___u ? (string)(___u.ToString()) : null)) ))() : null : ComputeNode;}
            {_lastUpdateHistoryEntryId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString>("lastUpdateHistoryEntryId"), out var __jsonLastUpdateHistoryEntryId) ? (string)__jsonLastUpdateHistoryEntryId : (string)LastUpdateHistoryEntryId;}
            {_dbServer = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonArray>("dbServers"), out var __jsonDbServers) ? If( __jsonDbServers as Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonArray, out var ___r) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(___r, (___q)=>(string) (___q is Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString ___p ? (string)(___p.ToString()) : null)) ))() : null : DbServer;}
            {_compartmentId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString>("compartmentId"), out var __jsonCompartmentId) ? (string)__jsonCompartmentId : (string)CompartmentId;}
            {_subnetOcid = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString>("subnetOcid"), out var __jsonSubnetOcid) ? (string)__jsonSubnetOcid : (string)SubnetOcid;}
            {_computeModel = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString>("computeModel"), out var __jsonComputeModel) ? (string)__jsonComputeModel : (string)ComputeModel;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.ICloudVMClusterProperties.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.ICloudVMClusterProperties.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20250301.ICloudVMClusterProperties FromJson(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode node)
        {
            return node is Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonObject json ? new CloudVMClusterProperties(json) : null;
        }

        /// <summary>
        /// Serializes this instance of <see cref="CloudVMClusterProperties" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="CloudVMClusterProperties" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode" />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            AddIf( null != this._dataCollectionOption ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) this._dataCollectionOption.ToJson(null,serializationMode) : null, "dataCollectionOptions" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._iormConfigCache ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) this._iormConfigCache.ToJson(null,serializationMode) : null, "iormConfigCache" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._ocid)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(this._ocid.ToString()) : null, "ocid" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._listenerPort ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNumber((long)this._listenerPort) : null, "listenerPort" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._nodeCount ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNumber((int)this._nodeCount) : null, "nodeCount" ,container.Add );
            }
            AddIf( null != this._storageSizeInGb ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNumber((int)this._storageSizeInGb) : null, "storageSizeInGbs" ,container.Add );
            if (null != this._fileSystemConfigurationDetail)
            {
                var __w = new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.XNodeArray();
                foreach( var __x in this._fileSystemConfigurationDetail )
                {
                    AddIf(__x?.ToJson(null, serializationMode) ,__w.Add);
                }
                container.Add("fileSystemConfigurationDetails",__w);
            }
            AddIf( null != this._dataStorageSizeInTb ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNumber((double)this._dataStorageSizeInTb) : null, "dataStorageSizeInTbs" ,container.Add );
            AddIf( null != this._dbNodeStorageSizeInGb ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNumber((int)this._dbNodeStorageSizeInGb) : null, "dbNodeStorageSizeInGbs" ,container.Add );
            AddIf( null != this._memorySizeInGb ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNumber((int)this._memorySizeInGb) : null, "memorySizeInGbs" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != this._timeCreated ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(this._timeCreated?.ToString(@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK",global::System.Globalization.CultureInfo.InvariantCulture)) : null, "timeCreated" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._lifecycleDetail)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(this._lifecycleDetail.ToString()) : null, "lifecycleDetails" ,container.Add );
            }
            AddIf( null != (((object)this._timeZone)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(this._timeZone.ToString()) : null, "timeZone" ,container.Add );
            AddIf( null != (((object)this._zoneId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(this._zoneId.ToString()) : null, "zoneId" ,container.Add );
            AddIf( null != (((object)this._hostname)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(this._hostname.ToString()) : null, "hostname" ,container.Add );
            AddIf( null != (((object)this._domain)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(this._domain.ToString()) : null, "domain" ,container.Add );
            AddIf( (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNumber(this._cpuCoreCount), "cpuCoreCount" ,container.Add );
            AddIf( null != this._ocpuCount ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNumber((float)this._ocpuCount) : null, "ocpuCount" ,container.Add );
            AddIf( null != (((object)this._clusterName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(this._clusterName.ToString()) : null, "clusterName" ,container.Add );
            AddIf( null != this._dataStoragePercentage ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNumber((int)this._dataStoragePercentage) : null, "dataStoragePercentage" ,container.Add );
            AddIf( null != this._isLocalBackupEnabled ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonBoolean((bool)this._isLocalBackupEnabled) : null, "isLocalBackupEnabled" ,container.Add );
            AddIf( null != (((object)this._cloudExadataInfrastructureId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(this._cloudExadataInfrastructureId.ToString()) : null, "cloudExadataInfrastructureId" ,container.Add );
            AddIf( null != this._isSparseDiskgroupEnabled ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonBoolean((bool)this._isSparseDiskgroupEnabled) : null, "isSparseDiskgroupEnabled" ,container.Add );
            AddIf( null != (((object)this._systemVersion)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(this._systemVersion.ToString()) : null, "systemVersion" ,container.Add );
            if (null != this._sshPublicKey)
            {
                var __r = new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.XNodeArray();
                foreach( var __s in this._sshPublicKey )
                {
                    AddIf(null != (((object)__s)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(__s.ToString()) : null ,__r.Add);
                }
                container.Add("sshPublicKeys",__r);
            }
            AddIf( null != (((object)this._licenseModel)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(this._licenseModel.ToString()) : null, "licenseModel" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._diskRedundancy)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(this._diskRedundancy.ToString()) : null, "diskRedundancy" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.SerializationMode.IncludeReadOnly))
            {
                if (null != this._scanIPId)
                {
                    var __m = new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.XNodeArray();
                    foreach( var __n in this._scanIPId )
                    {
                        AddIf(null != (((object)__n)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(__n.ToString()) : null ,__m.Add);
                    }
                    container.Add("scanIpIds",__m);
                }
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.SerializationMode.IncludeReadOnly))
            {
                if (null != this._vipId)
                {
                    var __h = new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.XNodeArray();
                    foreach( var __i in this._vipId )
                    {
                        AddIf(null != (((object)__i)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(__i.ToString()) : null ,__h.Add);
                    }
                    container.Add("vipIds",__h);
                }
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._scanDnsName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(this._scanDnsName.ToString()) : null, "scanDnsName" ,container.Add );
            }
            AddIf( null != this._scanListenerPortTcp ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNumber((int)this._scanListenerPortTcp) : null, "scanListenerPortTcp" ,container.Add );
            AddIf( null != this._scanListenerPortTcpSsl ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNumber((int)this._scanListenerPortTcpSsl) : null, "scanListenerPortTcpSsl" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._scanDnsRecordId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(this._scanDnsRecordId.ToString()) : null, "scanDnsRecordId" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._shape)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(this._shape.ToString()) : null, "shape" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._provisioningState)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(this._provisioningState.ToString()) : null, "provisioningState" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._lifecycleState)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(this._lifecycleState.ToString()) : null, "lifecycleState" ,container.Add );
            }
            AddIf( null != (((object)this._vnetId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(this._vnetId.ToString()) : null, "vnetId" ,container.Add );
            AddIf( null != (((object)this._giVersion)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(this._giVersion.ToString()) : null, "giVersion" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._ociUrl)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(this._ociUrl.ToString()) : null, "ociUrl" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._nsgUrl)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(this._nsgUrl.ToString()) : null, "nsgUrl" ,container.Add );
            }
            AddIf( null != (((object)this._subnetId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(this._subnetId.ToString()) : null, "subnetId" ,container.Add );
            AddIf( null != (((object)this._backupSubnetCidr)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(this._backupSubnetCidr.ToString()) : null, "backupSubnetCidr" ,container.Add );
            if (null != this._nsgCidr)
            {
                var __c = new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.XNodeArray();
                foreach( var __d in this._nsgCidr )
                {
                    AddIf(__d?.ToJson(null, serializationMode) ,__c.Add);
                }
                container.Add("nsgCidrs",__c);
            }
            AddIf( null != (((object)this._displayName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(this._displayName.ToString()) : null, "displayName" ,container.Add );
            if (null != this._computeNode)
            {
                var ___x = new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.XNodeArray();
                foreach( var ___y in this._computeNode )
                {
                    AddIf(null != (((object)___y)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(___y.ToString()) : null ,___x.Add);
                }
                container.Add("computeNodes",___x);
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._lastUpdateHistoryEntryId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(this._lastUpdateHistoryEntryId.ToString()) : null, "lastUpdateHistoryEntryId" ,container.Add );
            }
            if (null != this._dbServer)
            {
                var ___s = new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.XNodeArray();
                foreach( var ___t in this._dbServer )
                {
                    AddIf(null != (((object)___t)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(___t.ToString()) : null ,___s.Add);
                }
                container.Add("dbServers",___s);
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._compartmentId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(this._compartmentId.ToString()) : null, "compartmentId" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._subnetOcid)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(this._subnetOcid.ToString()) : null, "subnetOcid" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.SerializationMode.IncludeReadOnly))
            {
                AddIf( null != (((object)this._computeModel)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Json.JsonString(this._computeModel.ToString()) : null, "computeModel" ,container.Add );
            }
            AfterToJson(ref container);
            return container;
        }
    }
}