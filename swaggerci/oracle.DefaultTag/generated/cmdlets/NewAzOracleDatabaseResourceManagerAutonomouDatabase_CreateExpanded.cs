// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Extensions;
    using System;

    /// <summary>Create a AutonomousDatabase</summary>
    /// <remarks>
    /// [OpenAPI] CreateOrUpdate=>PUT:"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/autonomousDatabases/{autonomousdatabasename}"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsCommon.New, @"AzOracleDatabaseResourceManagerAutonomouDatabase_CreateExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20230901.IAutonomousDatabase))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Description(@"Create a AutonomousDatabase")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Generated]
    [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.HttpPath(Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/autonomousDatabases/{autonomousdatabasename}", ApiVersion = "2023-09-01")]
    public partial class NewAzOracleDatabaseResourceManagerAutonomouDatabase_CreateExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.IEventListener
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>Autonomous Database resource model.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20230901.IAutonomousDatabase _resourceBody = new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20230901.AutonomousDatabase();

        /// <summary>Admin password.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Admin password.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Admin password.",
        SerializedName = @"adminPassword",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        public System.Security.SecureString AdminPassword { get => _resourceBody.AdminPassword ?? null; set => _resourceBody.AdminPassword = value; }

        /// <summary>when specified, runs this cmdlet as a PowerShell job</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Run the command as a job")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter AsJob { get; set; }

        /// <summary>Autonomous Database ID</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Autonomous Database ID")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Autonomous Database ID",
        SerializedName = @"autonomousDatabaseId",
        PossibleTypes = new [] { typeof(string) })]
        public string AutonomousDatabaseId { get => _resourceBody.AutonomousDatabaseId ?? null; set => _resourceBody.AutonomousDatabaseId = value; }

        /// <summary>The maintenance schedule type of the Autonomous Database Serverless.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The maintenance schedule type of the Autonomous Database Serverless.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maintenance schedule type of the Autonomous Database Serverless.",
        SerializedName = @"autonomousMaintenanceScheduleType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.AutonomousMaintenanceScheduleType) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.AutonomousMaintenanceScheduleType))]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.AutonomousMaintenanceScheduleType AutonomousMaintenanceScheduleType { get => _resourceBody.AutonomousMaintenanceScheduleType ?? ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.AutonomousMaintenanceScheduleType)""); set => _resourceBody.AutonomousMaintenanceScheduleType = value; }

        /// <summary>Backing field for <see cref="Autonomousdatabasename" /> property.</summary>
        private string _autonomousdatabasename;

        /// <summary>The database name.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The database name.")]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The database name.",
        SerializedName = @"autonomousdatabasename",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Path)]
        public string Autonomousdatabasename { get => this._autonomousdatabasename; set => this._autonomousdatabasename = value; }

        /// <summary>Retention period, in days, for long-term backups</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Retention period, in days, for long-term backups")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Retention period, in days, for long-term backups",
        SerializedName = @"backupRetentionPeriodInDays",
        PossibleTypes = new [] { typeof(int) })]
        public int BackupRetentionPeriodInDay { get => _resourceBody.BackupRetentionPeriodInDay ?? default(int); set => _resourceBody.BackupRetentionPeriodInDay = value; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>The character set for the autonomous database.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The character set for the autonomous database.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The character set for the autonomous database.",
        SerializedName = @"characterSet",
        PossibleTypes = new [] { typeof(string) })]
        public string CharacterSet { get => _resourceBody.CharacterSet ?? null; set => _resourceBody.CharacterSet = value; }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.OracleDatabaseResourceManager Client => Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Module.Instance.ClientAPI;

        /// <summary>The compute amount (CPUs) available to the database.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The compute amount (CPUs) available to the database.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The compute amount (CPUs) available to the database.",
        SerializedName = @"computeCount",
        PossibleTypes = new [] { typeof(float) })]
        public float ComputeCount { get => _resourceBody.ComputeCount ?? default(float); set => _resourceBody.ComputeCount = value; }

        /// <summary>The compute model of the Autonomous Database.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The compute model of the Autonomous Database.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The compute model of the Autonomous Database.",
        SerializedName = @"computeModel",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.ComputeModel) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.ComputeModel))]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.ComputeModel ComputeModel { get => _resourceBody.ComputeModel ?? ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.ComputeModel)""); set => _resourceBody.ComputeModel = value; }

        /// <summary>The number of CPU cores to be made available to the database.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The number of CPU cores to be made available to the database.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of CPU cores to be made available to the database.",
        SerializedName = @"cpuCoreCount",
        PossibleTypes = new [] { typeof(int) })]
        public int CpuCoreCount { get => _resourceBody.CpuCoreCount ?? default(int); set => _resourceBody.CpuCoreCount = value; }

        /// <summary>Customer Contacts.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Customer Contacts.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Customer Contacts.",
        SerializedName = @"customerContacts",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20230901.ICustomerContact) })]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20230901.ICustomerContact[] CustomerContact { get => _resourceBody.CustomerContact ?? null /* arrayOf */; set => _resourceBody.CustomerContact = value; }

        /// <summary>Database type to be created.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Database type to be created.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Database type to be created.",
        SerializedName = @"dataBaseType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.DataBaseType) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.DataBaseType))]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.DataBaseType DataBaseType { get => _resourceBody.DataBaseType ?? ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.DataBaseType)""); set => _resourceBody.DataBaseType = value; }

        /// <summary>
        /// The size, in gigabytes, of the data volume that will be created and attached to the database.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The size, in gigabytes, of the data volume that will be created and attached to the database.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The size, in gigabytes, of the data volume that will be created and attached to the database.",
        SerializedName = @"dataStorageSizeInGbs",
        PossibleTypes = new [] { typeof(int) })]
        public int DataStorageSizeInGb { get => _resourceBody.DataStorageSizeInGb ?? default(int); set => _resourceBody.DataStorageSizeInGb = value; }

        /// <summary>The quantity of data in the database, in terabytes.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The quantity of data in the database, in terabytes.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The quantity of data in the database, in terabytes.",
        SerializedName = @"dataStorageSizeInTbs",
        PossibleTypes = new [] { typeof(int) })]
        public int DataStorageSizeInTb { get => _resourceBody.DataStorageSizeInTb ?? default(int); set => _resourceBody.DataStorageSizeInTb = value; }

        /// <summary>The Oracle Database Edition that applies to the Autonomous databases.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The Oracle Database Edition that applies to the Autonomous databases.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Oracle Database Edition that applies to the Autonomous databases.",
        SerializedName = @"databaseEdition",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.DatabaseEditionType) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.DatabaseEditionType))]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.DatabaseEditionType DatabaseEdition { get => _resourceBody.DatabaseEdition ?? ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.DatabaseEditionType)""); set => _resourceBody.DatabaseEdition = value; }

        /// <summary>Name of the day of the week.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Name of the day of the week.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the day of the week.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.DayOfWeekName) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.DayOfWeekName))]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.DayOfWeekName DayOfWeekName { get => _resourceBody.DayOfWeekName ?? ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.DayOfWeekName)""); set => _resourceBody.DayOfWeekName = value; }

        /// <summary>A valid Oracle Database version for Autonomous Database.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A valid Oracle Database version for Autonomous Database.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A valid Oracle Database version for Autonomous Database.",
        SerializedName = @"dbVersion",
        PossibleTypes = new [] { typeof(string) })]
        public string DbVersion { get => _resourceBody.DbVersion ?? null; set => _resourceBody.DbVersion = value; }

        /// <summary>The Autonomous Database workload type</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The Autonomous Database workload type")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Autonomous Database workload type",
        SerializedName = @"dbWorkload",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.WorkloadType) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.WorkloadType))]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.WorkloadType DbWorkload { get => _resourceBody.DbWorkload ?? ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.WorkloadType)""); set => _resourceBody.DbWorkload = value; }

        /// <summary>
        /// The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet
        /// against a different subscription
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>The user-friendly name for the Autonomous Database.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The user-friendly name for the Autonomous Database.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The user-friendly name for the Autonomous Database.",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        public string DisplayName { get => _resourceBody.DisplayName ?? null; set => _resourceBody.DisplayName = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>
        /// Indicates if auto scaling is enabled for the Autonomous Database CPU core count.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Indicates if auto scaling is enabled for the Autonomous Database CPU core count.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates if auto scaling is enabled for the Autonomous Database CPU core count.",
        SerializedName = @"isAutoScalingEnabled",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter IsAutoScalingEnabled { get => _resourceBody.IsAutoScalingEnabled ?? default(global::System.Management.Automation.SwitchParameter); set => _resourceBody.IsAutoScalingEnabled = value; }

        /// <summary>Indicates if auto scaling is enabled for the Autonomous Database storage.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Indicates if auto scaling is enabled for the Autonomous Database storage.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates if auto scaling is enabled for the Autonomous Database storage.",
        SerializedName = @"isAutoScalingForStorageEnabled",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter IsAutoScalingForStorageEnabled { get => _resourceBody.IsAutoScalingForStorageEnabled ?? default(global::System.Management.Automation.SwitchParameter); set => _resourceBody.IsAutoScalingForStorageEnabled = value; }

        /// <summary>
        /// Indicates whether the Autonomous Database has local or called in-region Data Guard enabled.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Indicates whether the Autonomous Database has local or called in-region Data Guard enabled.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether the Autonomous Database has local or called in-region Data Guard enabled.",
        SerializedName = @"isLocalDataGuardEnabled",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter IsLocalDataGuardEnabled { get => _resourceBody.IsLocalDataGuardEnabled ?? default(global::System.Management.Automation.SwitchParameter); set => _resourceBody.IsLocalDataGuardEnabled = value; }

        /// <summary>Specifies if the Autonomous Database requires mTLS connections.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Specifies if the Autonomous Database requires mTLS connections.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies if the Autonomous Database requires mTLS connections.",
        SerializedName = @"isMtlsConnectionRequired",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter IsMtlsConnectionRequired { get => _resourceBody.IsMtlsConnectionRequired ?? default(global::System.Management.Automation.SwitchParameter); set => _resourceBody.IsMtlsConnectionRequired = value; }

        /// <summary>Specifies if the Autonomous Database preview version is being provisioned.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Specifies if the Autonomous Database preview version is being provisioned.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies if the Autonomous Database preview version is being provisioned.",
        SerializedName = @"isPreviewVersionWithServiceTermsAccepted",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter IsPreviewVersionWithServiceTermsAccepted { get => _resourceBody.IsPreviewVersionWithServiceTermsAccepted ?? default(global::System.Management.Automation.SwitchParameter); set => _resourceBody.IsPreviewVersionWithServiceTermsAccepted = value; }

        /// <summary>
        /// The Oracle license model that applies to the Oracle Autonomous Database. The default is LICENSE_INCLUDED.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The Oracle license model that applies to the Oracle Autonomous Database. The default is LICENSE_INCLUDED.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Oracle license model that applies to the Oracle Autonomous Database. The default is LICENSE_INCLUDED.",
        SerializedName = @"licenseModel",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.LicenseModel) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.LicenseModel))]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.LicenseModel LicenseModel { get => _resourceBody.LicenseModel ?? ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.LicenseModel)""); set => _resourceBody.LicenseModel = value; }

        /// <summary>
        /// Parameter that allows users to select an acceptable maximum data loss limit in seconds, up to which Automatic Failover
        /// will be triggered when necessary for a Local Autonomous Data Guard
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Parameter that allows users to select an acceptable maximum data loss limit in seconds, up to which Automatic Failover will be triggered when necessary for a Local Autonomous Data Guard")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Parameter that allows users to select an acceptable maximum data loss limit in seconds, up to which Automatic Failover will be triggered when necessary for a Local Autonomous Data Guard",
        SerializedName = @"localAdgAutoFailoverMaxDataLossLimit",
        PossibleTypes = new [] { typeof(int) })]
        public int LocalAdgAutoFailoverMaxDataLossLimit { get => _resourceBody.LocalAdgAutoFailoverMaxDataLossLimit ?? default(int); set => _resourceBody.LocalAdgAutoFailoverMaxDataLossLimit = value; }

        /// <summary>The geo-location where the resource lives</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The geo-location where the resource lives")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The geo-location where the resource lives",
        SerializedName = @"location",
        PossibleTypes = new [] { typeof(string) })]
        public string Location { get => _resourceBody.Location ?? null; set => _resourceBody.Location = value; }

        /// <summary>
        /// Indicates if the long-term backup schedule should be deleted. The default value is `FALSE`.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Indicates if the long-term backup schedule should be deleted. The default value is `FALSE`.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates if the long-term backup schedule should be deleted. The default value is `FALSE`.",
        SerializedName = @"isDisabled",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter LongTermBackupScheduleIsDisabled { get => _resourceBody.LongTermBackupScheduleIsDisabled ?? default(global::System.Management.Automation.SwitchParameter); set => _resourceBody.LongTermBackupScheduleIsDisabled = value; }

        /// <summary>The frequency of the long-term backup schedule</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The frequency of the long-term backup schedule")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The frequency of the long-term backup schedule",
        SerializedName = @"repeatCadence",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.RepeatCadenceType) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.RepeatCadenceType))]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.RepeatCadenceType LongTermBackupScheduleRepeatCadence { get => _resourceBody.LongTermBackupScheduleRepeatCadence ?? ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.RepeatCadenceType)""); set => _resourceBody.LongTermBackupScheduleRepeatCadence = value; }

        /// <summary>Retention period, in days, for backups.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Retention period, in days, for backups.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Retention period, in days, for backups.",
        SerializedName = @"retentionPeriodInDays",
        PossibleTypes = new [] { typeof(int) })]
        public int LongTermBackupScheduleRetentionPeriodInDay { get => _resourceBody.LongTermBackupScheduleRetentionPeriodInDay ?? default(int); set => _resourceBody.LongTermBackupScheduleRetentionPeriodInDay = value; }

        /// <summary>
        /// The timestamp for the long-term backup schedule. For a MONTHLY cadence, months having fewer days than the provided date
        /// will have the backup taken on the last day of that month.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The timestamp for the long-term backup schedule. For a MONTHLY cadence, months having fewer days than the provided date will have the backup taken on the last day of that month.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The timestamp for the long-term backup schedule. For a MONTHLY cadence, months having fewer days than the provided date will have the backup taken on the last day of that month.",
        SerializedName = @"timeOfBackup",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime LongTermBackupScheduleTimeOfBackup { get => _resourceBody.LongTermBackupScheduleTimeOfBackup ?? default(global::System.DateTime); set => _resourceBody.LongTermBackupScheduleTimeOfBackup = value; }

        /// <summary>
        /// <see cref="Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>The character set for the Autonomous Database.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The character set for the Autonomous Database.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The character set for the Autonomous Database.",
        SerializedName = @"ncharacterSet",
        PossibleTypes = new [] { typeof(string) })]
        public string NcharacterSet { get => _resourceBody.NcharacterSet ?? null; set => _resourceBody.NcharacterSet = value; }

        /// <summary>
        /// when specified, will make the remote call, and return an AsyncOperationResponse, letting the remote operation continue
        /// asynchronously.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Run the command asynchronously")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter NoWait { get; set; }

        /// <summary>Indicates the Autonomous Database mode.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Indicates the Autonomous Database mode.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates the Autonomous Database mode.",
        SerializedName = @"openMode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.OpenModeType) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.OpenModeType))]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.OpenModeType OpenMode { get => _resourceBody.OpenMode ?? ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.OpenModeType)""); set => _resourceBody.OpenMode = value; }

        /// <summary>
        /// The database OCID of the Disaster Recovery peer database, which is located in a different region from the current peer
        /// database.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The database OCID of the Disaster Recovery peer database, which is located in a different region from the current peer database.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The database OCID of the Disaster Recovery peer database, which is located in a different region from the current peer database.",
        SerializedName = @"peerDbId",
        PossibleTypes = new [] { typeof(string) })]
        public string PeerDbId { get => _resourceBody.PropertiesPeerDbId ?? null; set => _resourceBody.PropertiesPeerDbId = value; }

        /// <summary>The Autonomous Database permission level.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The Autonomous Database permission level.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Autonomous Database permission level.",
        SerializedName = @"permissionLevel",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.PermissionLevelType) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.PermissionLevelType))]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.PermissionLevelType PermissionLevel { get => _resourceBody.PermissionLevel ?? ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.PermissionLevelType)""); set => _resourceBody.PermissionLevel = value; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>The private endpoint Ip address for the resource.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The private endpoint Ip address for the resource.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The private endpoint Ip address for the resource.",
        SerializedName = @"privateEndpointIp",
        PossibleTypes = new [] { typeof(string) })]
        public string PrivateEndpointIP { get => _resourceBody.PrivateEndpointIP ?? null; set => _resourceBody.PrivateEndpointIP = value; }

        /// <summary>The resource's private endpoint label.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The resource's private endpoint label.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource's private endpoint label.",
        SerializedName = @"privateEndpointLabel",
        PossibleTypes = new [] { typeof(string) })]
        public string PrivateEndpointLabel { get => _resourceBody.PrivateEndpointLabel ?? null; set => _resourceBody.PrivateEndpointLabel = value; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>Backing field for <see cref="ResourceGroupName" /> property.</summary>
        private string _resourceGroupName;

        /// <summary>The name of the resource group. The name is case insensitive.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The name of the resource group. The name is case insensitive.")]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the resource group. The name is case insensitive.",
        SerializedName = @"resourceGroupName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Path)]
        public string ResourceGroupName { get => this._resourceGroupName; set => this._resourceGroupName = value; }

        /// <summary>
        /// The Data Guard role of the Autonomous Container Database or Autonomous Database, if Autonomous Data Guard is enabled.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The Data Guard role of the Autonomous Container Database or Autonomous Database, if Autonomous Data Guard is enabled.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Data Guard role of the Autonomous Container Database or Autonomous Database, if Autonomous Data Guard is enabled.",
        SerializedName = @"role",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.RoleType) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.RoleType))]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.RoleType Role { get => _resourceBody.Role ?? ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Support.RoleType)""); set => _resourceBody.Role = value; }

        /// <summary>auto start time. value must be of ISO-8601 format HH:mm</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "auto start time. value must be of ISO-8601 format HH:mm")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"auto start time. value must be of ISO-8601 format HH:mm",
        SerializedName = @"scheduledStartTime",
        PossibleTypes = new [] { typeof(string) })]
        public string ScheduledOperationScheduledStartTime { get => _resourceBody.ScheduledOperationScheduledStartTime ?? null; set => _resourceBody.ScheduledOperationScheduledStartTime = value; }

        /// <summary>auto stop time. value must be of ISO-8601 format HH:mm</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "auto stop time. value must be of ISO-8601 format HH:mm")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"auto stop time. value must be of ISO-8601 format HH:mm",
        SerializedName = @"scheduledStopTime",
        PossibleTypes = new [] { typeof(string) })]
        public string ScheduledOperationScheduledStopTime { get => _resourceBody.ScheduledOperationScheduledStopTime ?? null; set => _resourceBody.ScheduledOperationScheduledStopTime = value; }

        /// <summary>Client subnet</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Client subnet")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Client subnet",
        SerializedName = @"subnetId",
        PossibleTypes = new [] { typeof(string) })]
        public string SubnetId { get => _resourceBody.SubnetId ?? null; set => _resourceBody.SubnetId = value; }

        /// <summary>Backing field for <see cref="SubscriptionId" /> property.</summary>
        private string _subscriptionId;

        /// <summary>The ID of the target subscription. The value must be an UUID.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The ID of the target subscription. The value must be an UUID.")]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The ID of the target subscription. The value must be an UUID.",
        SerializedName = @"subscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.DefaultInfo(
        Name = @"",
        Description =@"",
        Script = @"(Get-AzContext).Subscription.Id")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Path)]
        public string SubscriptionId { get => this._subscriptionId; set => this._subscriptionId = value; }

        /// <summary>Resource tags.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ExportAs(typeof(global::System.Collections.Hashtable))]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Resource tags.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource tags.",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.ITrackedResourceTags) })]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.ITrackedResourceTags Tag { get => _resourceBody.Tag ?? null /* object */; set => _resourceBody.Tag = value; }

        /// <summary>VNET for network connectivity</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "VNET for network connectivity")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"VNET for network connectivity",
        SerializedName = @"vnetId",
        PossibleTypes = new [] { typeof(string) })]
        public string VnetId { get => _resourceBody.VnetId ?? null; set => _resourceBody.VnetId = value; }

        /// <summary>
        /// The client IP access control list (ACL). This is an array of CIDR notations and/or IP addresses. Values should be separate
        /// strings, separated by commas. Example: ['1.1.1.1','1.1.1.0/24','1.1.2.25']
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The client IP access control list (ACL). This is an array of CIDR notations and/or IP addresses. Values should be separate strings, separated by commas. Example: ['1.1.1.1','1.1.1.0/24','1.1.2.25']")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The client IP access control list (ACL). This is an array of CIDR notations and/or IP addresses. Values should be separate strings, separated by commas. Example: ['1.1.1.1','1.1.1.0/24','1.1.2.25']",
        SerializedName = @"whitelistedIps",
        PossibleTypes = new [] { typeof(string) })]
        public string[] WhitelistedIP { get => _resourceBody.WhitelistedIP ?? null /* arrayOf */; set => _resourceBody.WhitelistedIP = value; }

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IErrorResponse">Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IErrorResponse</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IErrorResponse> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20230901.IAutonomousDatabase">Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20230901.IAutonomousDatabase</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20230901.IAutonomousDatabase> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Creates a duplicate instance of this cmdlet (via JSON serialization).</summary>
        /// <returns>
        /// a duplicate instance of NewAzOracleDatabaseResourceManagerAutonomouDatabase_CreateExpanded
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Cmdlets.NewAzOracleDatabaseResourceManagerAutonomouDatabase_CreateExpanded Clone()
        {
            var clone = new NewAzOracleDatabaseResourceManagerAutonomouDatabase_CreateExpanded();
            clone.__correlationId = this.__correlationId;
            clone.__processRecordId = this.__processRecordId;
            clone.DefaultProfile = this.DefaultProfile;
            clone.InvocationInformation = this.InvocationInformation;
            clone.Proxy = this.Proxy;
            clone.Pipeline = this.Pipeline;
            clone.AsJob = this.AsJob;
            clone.Break = this.Break;
            clone.ProxyCredential = this.ProxyCredential;
            clone.ProxyUseDefaultCredentials = this.ProxyUseDefaultCredentials;
            clone.HttpPipelinePrepend = this.HttpPipelinePrepend;
            clone.HttpPipelineAppend = this.HttpPipelineAppend;
            clone._resourceBody = this._resourceBody;
            clone.SubscriptionId = this.SubscriptionId;
            clone.ResourceGroupName = this.ResourceGroupName;
            clone.Autonomousdatabasename = this.Autonomousdatabasename;
            return clone;
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {
            var telemetryInfo = Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Module.Instance.GetTelemetryInfo?.Invoke(__correlationId);
            if (telemetryInfo != null)
            {
                telemetryInfo.TryGetValue("ShowSecretsWarning", out var showSecretsWarning);
                telemetryInfo.TryGetValue("SanitizedProperties", out var sanitizedProperties);
                telemetryInfo.TryGetValue("InvocationName", out var invocationName);
                if (showSecretsWarning == "true")
                {
                    if (string.IsNullOrEmpty(sanitizedProperties))
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing secrets. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                    else
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing the following secrets: {sanitizedProperties}. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                }
            }
        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Events.Information:
                    {
                        // When an operation supports asjob, Information messages must go thru verbose.
                        WriteVerbose($"INFORMATION: {(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Events.DelayBeforePolling:
                    {
                        if (true == MyInvocation?.BoundParameters?.ContainsKey("NoWait"))
                        {
                            var data = messageData();
                            if (data.ResponseMessage is System.Net.Http.HttpResponseMessage response)
                            {
                                var asyncOperation = response.GetFirstHeader(@"Azure-AsyncOperation");
                                var location = response.GetFirstHeader(@"Location");
                                var uri = global::System.String.IsNullOrEmpty(asyncOperation) ? global::System.String.IsNullOrEmpty(location) ? response.RequestMessage.RequestUri.AbsoluteUri : location : asyncOperation;
                                WriteObject(new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.PowerShell.AsyncOperationResponse { Target = uri });
                                // do nothing more.
                                data.Cancel();
                                return;
                            }
                        }
                        break;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Module.Instance.Signal(id, token, messageData, (i,t,m) => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.IEventListener)this).Signal(i,t,()=> Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.EventDataConverter.ConvertFrom( m() ) as Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.EventData ), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>
        /// Intializes a new instance of the <see cref="NewAzOracleDatabaseResourceManagerAutonomouDatabase_CreateExpanded" /> cmdlet
        /// class.
        /// </summary>
        public NewAzOracleDatabaseResourceManagerAutonomouDatabase_CreateExpanded()
        {

        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'AutonomousDatabasesCreateOrUpdate' operation"))
                {
                    if (true == MyInvocation?.BoundParameters?.ContainsKey("AsJob"))
                    {
                        var instance = this.Clone();
                        var job = new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.PowerShell.AsyncJob(instance, this.MyInvocation.Line, this.MyInvocation.MyCommand.Name, this._cancellationTokenSource.Token, this._cancellationTokenSource.Cancel);
                        JobRepository.Add(job);
                        var task = instance.ProcessRecordAsync();
                        job.Monitor(task);
                        WriteObject(job);
                    }
                    else
                    {
                        using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.IEventListener)this).Token) )
                        {
                            asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.IEventListener)this).Token);
                        }
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    await this.Client.AutonomousDatabasesCreateOrUpdate(SubscriptionId, ResourceGroupName, Autonomousdatabasename, _resourceBody, onOk, onDefault, this, Pipeline);
                    await ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  SubscriptionId=SubscriptionId,ResourceGroupName=ResourceGroupName,Autonomousdatabasename=Autonomousdatabasename,body=_resourceBody})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <param name="sendToPipeline"></param>
        new protected void WriteObject(object sendToPipeline)
        {
            Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline);
        }

        /// <param name="sendToPipeline"></param>
        /// <param name="enumerateCollection"></param>
        new protected void WriteObject(object sendToPipeline, bool enumerateCollection)
        {
            Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline, enumerateCollection);
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IErrorResponse">Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IErrorResponse</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IErrorResponse> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.Message;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api50.IErrorResponse>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new { SubscriptionId=SubscriptionId, ResourceGroupName=ResourceGroupName, Autonomousdatabasename=Autonomousdatabasename, body=_resourceBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { SubscriptionId=SubscriptionId, ResourceGroupName=ResourceGroupName, Autonomousdatabasename=Autonomousdatabasename, body=_resourceBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20230901.IAutonomousDatabase">Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20230901.IAutonomousDatabase</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20230901.IAutonomousDatabase> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManager.Models.Api20230901.IAutonomousDatabase
                WriteObject((await response));
            }
        }
    }
}