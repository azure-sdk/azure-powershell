// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Extensions;
    using System;

    /// <summary>Update a CloudExadataInfrastructure</summary>
    /// <remarks>
    /// [OpenAPI] Update=>PATCH:"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/cloudExadataInfrastructures/{cloudexadatainfrastructurename}"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsData.Update, @"AzOracleDatabaseResourceManagerForTestingCloudExadataInfrastructure_UpdateViaIdentityExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.ICloudExadataInfrastructure))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Description(@"Update a CloudExadataInfrastructure")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Generated]
    [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.HttpPath(Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/cloudExadataInfrastructures/{cloudexadatainfrastructurename}", ApiVersion = "2024-06-01")]
    public partial class UpdateAzOracleDatabaseResourceManagerForTestingCloudExadataInfrastructure_UpdateViaIdentityExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.IEventListener
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>The type used for update operations of the CloudExadataInfrastructure.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.ICloudExadataInfrastructureUpdate _propertiesBody = new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.CloudExadataInfrastructureUpdate();

        /// <summary>when specified, runs this cmdlet as a PowerShell job</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Run the command as a job")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter AsJob { get; set; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.OracleDatabaseResourceManagerForTesting Client => Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Module.Instance.ClientAPI;

        /// <summary>The number of compute servers for the cloud Exadata infrastructure.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The number of compute servers for the cloud Exadata infrastructure.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of compute servers for the cloud Exadata infrastructure.",
        SerializedName = @"computeCount",
        PossibleTypes = new [] { typeof(int) })]
        public int ComputeCount { get => _propertiesBody.ComputeCount ?? default(int); set => _propertiesBody.ComputeCount = value; }

        /// <summary>
        /// The list of customer email addresses that receive information from Oracle about the specified OCI Database service resource.
        /// Oracle uses these email addresses to send notifications about planned and unplanned software maintenance updates, information
        /// about system hardware, and other information needed by administrators. Up to 10 email addresses can be added to the customer
        /// contacts for a cloud Exadata infrastructure instance.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The list of customer email addresses that receive information from Oracle about the specified OCI Database service resource. Oracle uses these email addresses to send notifications about planned and unplanned software maintenance updates, information about system hardware, and other information needed by administrators. Up to 10 email addresses can be added to the customer contacts for a cloud Exadata infrastructure instance. ")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of customer email addresses that receive information from Oracle about the specified OCI Database service resource. Oracle uses these email addresses to send notifications about planned and unplanned software maintenance updates, information about system hardware, and other information needed by administrators. Up to 10 email addresses can be added to the customer contacts for a cloud Exadata infrastructure instance. ",
        SerializedName = @"customerContacts",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.ICustomerContact) })]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.ICustomerContact[] CustomerContact { get => _propertiesBody.CustomerContact ?? null /* arrayOf */; set => _propertiesBody.CustomerContact = value; }

        /// <summary>
        /// The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet
        /// against a different subscription
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>The name for the Exadata infrastructure.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The name for the Exadata infrastructure.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name for the Exadata infrastructure.",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        public string DisplayName { get => _propertiesBody.DisplayName ?? null; set => _propertiesBody.DisplayName = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>Backing field for <see cref="InputObject" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.IOracleDatabaseResourceManagerForTestingIdentity _inputObject;

        /// <summary>Identity Parameter</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Identity Parameter", ValueFromPipeline = true)]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.ParameterCategory.Path)]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.IOracleDatabaseResourceManagerForTestingIdentity InputObject { get => this._inputObject; set => this._inputObject = value; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>
        /// Determines the amount of time the system will wait before the start of each database server patching operation. Custom
        /// action timeout is in minutes and valid value is between 15 to 120 (inclusive).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Determines the amount of time the system will wait before the start of each database server patching operation. Custom action timeout is in minutes and valid value is between 15 to 120 (inclusive).")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Determines the amount of time the system will wait before the start of each database server patching operation. Custom action timeout is in minutes and valid value is between 15 to 120 (inclusive).",
        SerializedName = @"customActionTimeoutInMins",
        PossibleTypes = new [] { typeof(int) })]
        public int MaintenanceWindowCustomActionTimeoutInMin { get => _propertiesBody.MaintenanceWindowCustomActionTimeoutInMin ?? default(int); set => _propertiesBody.MaintenanceWindowCustomActionTimeoutInMin = value; }

        /// <summary>Days during the week when maintenance should be performed.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Days during the week when maintenance should be performed.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Days during the week when maintenance should be performed.",
        SerializedName = @"daysOfWeek",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDayOfWeek) })]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IDayOfWeek[] MaintenanceWindowDaysOfWeek { get => _propertiesBody.MaintenanceWindowDaysOfWeek ?? null /* arrayOf */; set => _propertiesBody.MaintenanceWindowDaysOfWeek = value; }

        /// <summary>
        /// The window of hours during the day when maintenance should be performed. The window is a 4 hour slot. Valid values are
        /// - 0 - represents time slot 0:00 - 3:59 UTC - 4 - represents time slot 4:00 - 7:59 UTC - 8 - represents time slot 8:00
        /// - 11:59 UTC - 12 - represents time slot 12:00 - 15:59 UTC - 16 - represents time slot 16:00 - 19:59 UTC - 20 - represents
        /// time slot 20:00 - 23:59 UTC
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The window of hours during the day when maintenance should be performed. The window is a 4 hour slot. Valid values are - 0 - represents time slot 0:00 - 3:59 UTC - 4 - represents time slot 4:00 - 7:59 UTC - 8 - represents time slot 8:00 - 11:59 UTC - 12 - represents time slot 12:00 - 15:59 UTC - 16 - represents time slot 16:00 - 19:59 UTC - 20 - represents time slot 20:00 - 23:59 UTC")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The window of hours during the day when maintenance should be performed. The window is a 4 hour slot. Valid values are - 0 - represents time slot 0:00 - 3:59 UTC - 4 - represents time slot 4:00 - 7:59 UTC - 8 - represents time slot 8:00 - 11:59 UTC - 12 - represents time slot 12:00 - 15:59 UTC - 16 - represents time slot 16:00 - 19:59 UTC - 20 - represents time slot 20:00 - 23:59 UTC",
        SerializedName = @"hoursOfDay",
        PossibleTypes = new [] { typeof(int) })]
        public int[] MaintenanceWindowHoursOfDay { get => _propertiesBody.MaintenanceWindowHoursOfDay ?? null /* arrayOf */; set => _propertiesBody.MaintenanceWindowHoursOfDay = value; }

        /// <summary>
        /// If true, enables the configuration of a custom action timeout (waiting period) between database server patching operations.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "If true, enables the configuration of a custom action timeout (waiting period) between database server patching operations.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If true, enables the configuration of a custom action timeout (waiting period) between database server patching operations.",
        SerializedName = @"isCustomActionTimeoutEnabled",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter MaintenanceWindowIsCustomActionTimeoutEnabled { get => _propertiesBody.MaintenanceWindowIsCustomActionTimeoutEnabled ?? default(global::System.Management.Automation.SwitchParameter); set => _propertiesBody.MaintenanceWindowIsCustomActionTimeoutEnabled = value; }

        /// <summary>is Monthly Patching Enabled</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "is Monthly Patching Enabled")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"is Monthly Patching Enabled",
        SerializedName = @"isMonthlyPatchingEnabled",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter MaintenanceWindowIsMonthlyPatchingEnabled { get => _propertiesBody.MaintenanceWindowIsMonthlyPatchingEnabled ?? default(global::System.Management.Automation.SwitchParameter); set => _propertiesBody.MaintenanceWindowIsMonthlyPatchingEnabled = value; }

        /// <summary>
        /// Lead time window allows user to set a lead time to prepare for a down time. The lead time is in weeks and valid value
        /// is between 1 to 4.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Lead time window allows user to set a lead time to prepare for a down time. The lead time is in weeks and valid value is between 1 to 4. ")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Lead time window allows user to set a lead time to prepare for a down time. The lead time is in weeks and valid value is between 1 to 4. ",
        SerializedName = @"leadTimeInWeeks",
        PossibleTypes = new [] { typeof(int) })]
        public int MaintenanceWindowLeadTimeInWeek { get => _propertiesBody.MaintenanceWindowLeadTimeInWeek ?? default(int); set => _propertiesBody.MaintenanceWindowLeadTimeInWeek = value; }

        /// <summary>Months during the year when maintenance should be performed.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Months during the year when maintenance should be performed.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Months during the year when maintenance should be performed.",
        SerializedName = @"months",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IMonth) })]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IMonth[] MaintenanceWindowMonth { get => _propertiesBody.MaintenanceWindowMonth ?? null /* arrayOf */; set => _propertiesBody.MaintenanceWindowMonth = value; }

        /// <summary>Cloud Exadata infrastructure node patching method.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Cloud Exadata infrastructure node patching method.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Cloud Exadata infrastructure node patching method.",
        SerializedName = @"patchingMode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.PatchingMode) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.PatchingMode))]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.PatchingMode MaintenanceWindowPatchingMode { get => _propertiesBody.MaintenanceWindowPatchingMode ?? ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.PatchingMode)""); set => _propertiesBody.MaintenanceWindowPatchingMode = value; }

        /// <summary>The maintenance window scheduling preference.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The maintenance window scheduling preference.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maintenance window scheduling preference.",
        SerializedName = @"preference",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.Preference) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.Preference))]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.Preference MaintenanceWindowPreference { get => _propertiesBody.MaintenanceWindowPreference ?? ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.Preference)""); set => _propertiesBody.MaintenanceWindowPreference = value; }

        /// <summary>
        /// Weeks during the month when maintenance should be performed. Weeks start on the 1st, 8th, 15th, and 22nd days of the month,
        /// and have a duration of 7 days. Weeks start and end based on calendar dates, not days of the week. For example, to allow
        /// maintenance during the 2nd week of the month (from the 8th day to the 14th day of the month), use the value 2. Maintenance
        /// cannot be scheduled for the fifth week of months that contain more than 28 days. Note that this parameter works in conjunction
        /// with the daysOfWeek and hoursOfDay parameters to allow you to specify specific days of the week and hours that maintenance
        /// will be performed.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Weeks during the month when maintenance should be performed. Weeks start on the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7 days. Weeks start and end based on calendar dates, not days of the week. For example, to allow maintenance during the 2nd week of the month (from the 8th day to the 14th day of the month), use the value 2. Maintenance cannot be scheduled for the fifth week of months that contain more than 28 days. Note that this parameter works in conjunction with the daysOfWeek and hoursOfDay parameters to allow you to specify specific days of the week and hours that maintenance will be performed. ")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Weeks during the month when maintenance should be performed. Weeks start on the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7 days. Weeks start and end based on calendar dates, not days of the week. For example, to allow maintenance during the 2nd week of the month (from the 8th day to the 14th day of the month), use the value 2. Maintenance cannot be scheduled for the fifth week of months that contain more than 28 days. Note that this parameter works in conjunction with the daysOfWeek and hoursOfDay parameters to allow you to specify specific days of the week and hours that maintenance will be performed. ",
        SerializedName = @"weeksOfMonth",
        PossibleTypes = new [] { typeof(int) })]
        public int[] MaintenanceWindowWeeksOfMonth { get => _propertiesBody.MaintenanceWindowWeeksOfMonth ?? null /* arrayOf */; set => _propertiesBody.MaintenanceWindowWeeksOfMonth = value; }

        /// <summary>
        /// <see cref="Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>
        /// when specified, will make the remote call, and return an AsyncOperationResponse, letting the remote operation continue
        /// asynchronously.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Run the command asynchronously")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter NoWait { get; set; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>The number of storage servers for the cloud Exadata infrastructure.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The number of storage servers for the cloud Exadata infrastructure.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of storage servers for the cloud Exadata infrastructure.",
        SerializedName = @"storageCount",
        PossibleTypes = new [] { typeof(int) })]
        public int StorageCount { get => _propertiesBody.StorageCount ?? default(int); set => _propertiesBody.StorageCount = value; }

        /// <summary>Resource tags.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.ExportAs(typeof(global::System.Collections.Hashtable))]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Resource tags.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource tags.",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.ICloudExadataInfrastructureUpdateTags) })]
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.ICloudExadataInfrastructureUpdateTags Tag { get => _propertiesBody.Tag ?? null /* object */; set => _propertiesBody.Tag = value; }

        /// <summary>CloudExadataInfrastructure zones</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "CloudExadataInfrastructure zones")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category(global::Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"CloudExadataInfrastructure zones",
        SerializedName = @"zones",
        PossibleTypes = new [] { typeof(string) })]
        public string[] Zone { get => _propertiesBody.Zone ?? null /* arrayOf */; set => _propertiesBody.Zone = value; }

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IErrorResponse">Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IErrorResponse</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IErrorResponse> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.ICloudExadataInfrastructure">Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.ICloudExadataInfrastructure</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.ICloudExadataInfrastructure> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Creates a duplicate instance of this cmdlet (via JSON serialization).</summary>
        /// <returns>
        /// a duplicate instance of UpdateAzOracleDatabaseResourceManagerForTestingCloudExadataInfrastructure_UpdateViaIdentityExpanded
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Cmdlets.UpdateAzOracleDatabaseResourceManagerForTestingCloudExadataInfrastructure_UpdateViaIdentityExpanded Clone()
        {
            var clone = new UpdateAzOracleDatabaseResourceManagerForTestingCloudExadataInfrastructure_UpdateViaIdentityExpanded();
            clone.__correlationId = this.__correlationId;
            clone.__processRecordId = this.__processRecordId;
            clone.DefaultProfile = this.DefaultProfile;
            clone.InvocationInformation = this.InvocationInformation;
            clone.Proxy = this.Proxy;
            clone.Pipeline = this.Pipeline;
            clone.AsJob = this.AsJob;
            clone.Break = this.Break;
            clone.ProxyCredential = this.ProxyCredential;
            clone.ProxyUseDefaultCredentials = this.ProxyUseDefaultCredentials;
            clone.HttpPipelinePrepend = this.HttpPipelinePrepend;
            clone.HttpPipelineAppend = this.HttpPipelineAppend;
            clone._propertiesBody = this._propertiesBody;
            return clone;
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {
            var telemetryInfo = Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Module.Instance.GetTelemetryInfo?.Invoke(__correlationId);
            if (telemetryInfo != null)
            {
                telemetryInfo.TryGetValue("ShowSecretsWarning", out var showSecretsWarning);
                telemetryInfo.TryGetValue("SanitizedProperties", out var sanitizedProperties);
                telemetryInfo.TryGetValue("InvocationName", out var invocationName);
                if (showSecretsWarning == "true")
                {
                    if (string.IsNullOrEmpty(sanitizedProperties))
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing secrets. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                    else
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing the following secrets: {sanitizedProperties}. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                }
            }
        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Events.Information:
                    {
                        // When an operation supports asjob, Information messages must go thru verbose.
                        WriteVerbose($"INFORMATION: {(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Events.DelayBeforePolling:
                    {
                        if (true == MyInvocation?.BoundParameters?.ContainsKey("NoWait"))
                        {
                            var data = messageData();
                            if (data.ResponseMessage is System.Net.Http.HttpResponseMessage response)
                            {
                                var asyncOperation = response.GetFirstHeader(@"Azure-AsyncOperation");
                                var location = response.GetFirstHeader(@"Location");
                                var uri = global::System.String.IsNullOrEmpty(asyncOperation) ? global::System.String.IsNullOrEmpty(location) ? response.RequestMessage.RequestUri.AbsoluteUri : location : asyncOperation;
                                WriteObject(new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.PowerShell.AsyncOperationResponse { Target = uri });
                                // do nothing more.
                                data.Cancel();
                                return;
                            }
                        }
                        break;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Module.Instance.Signal(id, token, messageData, (i,t,m) => ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.IEventListener)this).Signal(i,t,()=> Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.EventDataConverter.ConvertFrom( m() ) as Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.EventData ), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'CloudExadataInfrastructuresUpdate' operation"))
                {
                    if (true == MyInvocation?.BoundParameters?.ContainsKey("AsJob"))
                    {
                        var instance = this.Clone();
                        var job = new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.PowerShell.AsyncJob(instance, this.MyInvocation.Line, this.MyInvocation.MyCommand.Name, this._cancellationTokenSource.Token, this._cancellationTokenSource.Cancel);
                        JobRepository.Add(job);
                        var task = instance.ProcessRecordAsync();
                        job.Monitor(task);
                        WriteObject(job);
                    }
                    else
                    {
                        using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.IEventListener)this).Token) )
                        {
                            asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.IEventListener)this).Token);
                        }
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    if (InputObject?.Id != null)
                    {
                        await this.Client.CloudExadataInfrastructuresUpdateViaIdentity(InputObject.Id, _propertiesBody, onOk, onDefault, this, Pipeline);
                    }
                    else
                    {
                        // try to call with PATH parameters from Input Object
                        if (null == InputObject.SubscriptionId)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InputObject has null value for InputObject.SubscriptionId"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InputObject) );
                        }
                        if (null == InputObject.ResourceGroupName)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InputObject has null value for InputObject.ResourceGroupName"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InputObject) );
                        }
                        if (null == InputObject.Cloudexadatainfrastructurename)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InputObject has null value for InputObject.Cloudexadatainfrastructurename"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InputObject) );
                        }
                        await this.Client.CloudExadataInfrastructuresUpdate(InputObject.SubscriptionId ?? null, InputObject.ResourceGroupName ?? null, InputObject.Cloudexadatainfrastructurename ?? null, _propertiesBody, onOk, onDefault, this, Pipeline);
                    }
                    await ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  body=_propertiesBody})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <summary>
        /// Intializes a new instance of the <see cref="UpdateAzOracleDatabaseResourceManagerForTestingCloudExadataInfrastructure_UpdateViaIdentityExpanded"
        /// /> cmdlet class.
        /// </summary>
        public UpdateAzOracleDatabaseResourceManagerForTestingCloudExadataInfrastructure_UpdateViaIdentityExpanded()
        {

        }

        /// <param name="sendToPipeline"></param>
        new protected void WriteObject(object sendToPipeline)
        {
            Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline);
        }

        /// <param name="sendToPipeline"></param>
        /// <param name="enumerateCollection"></param>
        new protected void WriteObject(object sendToPipeline, bool enumerateCollection)
        {
            Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline, enumerateCollection);
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IErrorResponse">Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IErrorResponse</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IErrorResponse> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.Message;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.IErrorResponse>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new { body=_propertiesBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { body=_propertiesBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.ICloudExadataInfrastructure">Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.ICloudExadataInfrastructure</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.ICloudExadataInfrastructure> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.ICloudExadataInfrastructure
                WriteObject((await response));
            }
        }
    }
}