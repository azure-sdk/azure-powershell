
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create a AutonomousDatabase
.Description
Create a AutonomousDatabase
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IAutonomousDatabase
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

CUSTOMERCONTACT <ICustomerContact[]>: Customer Contacts.
  Email <String>: The email address used by Oracle to send notifications regarding databases and infrastructure.
.Link
https://learn.microsoft.com/powershell/module/az.oracledatabaseresourcemanagerfortesting/new-azoracledatabaseresourcemanagerfortestingautonomoudatabase
#>
function New-AzOracleDatabaseResourceManagerForTestingAutonomouDatabase {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.IAutonomousDatabase])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Path')]
    [System.String]
    # The database name.
    ${Autonomousdatabasename},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    # The value must be an UUID.
    ${SubscriptionId},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [System.String]
    # The geo-location where the resource lives
    ${Location},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [System.Security.SecureString]
    # Admin password.
    ${AdminPassword},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [System.String]
    # Autonomous Database ID
    ${AutonomousDatabaseId},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.AutonomousMaintenanceScheduleType])]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.AutonomousMaintenanceScheduleType]
    # The maintenance schedule type of the Autonomous Database Serverless.
    ${AutonomousMaintenanceScheduleType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [System.Int32]
    # Retention period, in days, for long-term backups
    ${BackupRetentionPeriodInDay},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [System.String]
    # The character set for the autonomous database.
    ${CharacterSet},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [System.Single]
    # The compute amount (CPUs) available to the database.
    ${ComputeCount},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.ComputeModel])]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.ComputeModel]
    # The compute model of the Autonomous Database.
    ${ComputeModel},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [System.Int32]
    # The number of CPU cores to be made available to the database.
    ${CpuCoreCount},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api20240601.ICustomerContact[]]
    # Customer Contacts.
    # To construct, see NOTES section for CUSTOMERCONTACT properties and create a hash table.
    ${CustomerContact},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.DataBaseType])]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.DataBaseType]
    # Database type to be created.
    ${DataBaseType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [System.Int32]
    # The size, in gigabytes, of the data volume that will be created and attached to the database.
    ${DataStorageSizeInGb},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [System.Int32]
    # The quantity of data in the database, in terabytes.
    ${DataStorageSizeInTb},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.DatabaseEditionType])]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.DatabaseEditionType]
    # The Oracle Database Edition that applies to the Autonomous databases.
    ${DatabaseEdition},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.DayOfWeekName])]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.DayOfWeekName]
    # Name of the day of the week.
    ${DayOfWeekName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [System.String]
    # A valid Oracle Database version for Autonomous Database.
    ${DbVersion},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.WorkloadType])]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.WorkloadType]
    # The Autonomous Database workload type
    ${DbWorkload},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [System.String]
    # The user-friendly name for the Autonomous Database.
    ${DisplayName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Indicates if auto scaling is enabled for the Autonomous Database CPU core count.
    ${IsAutoScalingEnabled},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Indicates if auto scaling is enabled for the Autonomous Database storage.
    ${IsAutoScalingForStorageEnabled},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Indicates whether the Autonomous Database has local or called in-region Data Guard enabled.
    ${IsLocalDataGuardEnabled},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Specifies if the Autonomous Database requires mTLS connections.
    ${IsMtlsConnectionRequired},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Specifies if the Autonomous Database preview version is being provisioned.
    ${IsPreviewVersionWithServiceTermsAccepted},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.LicenseModel])]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.LicenseModel]
    # The Oracle license model that applies to the Oracle Autonomous Database.
    # The default is LICENSE_INCLUDED.
    ${LicenseModel},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [System.Int32]
    # Parameter that allows users to select an acceptable maximum data loss limit in seconds, up to which Automatic Failover will be triggered when necessary for a Local Autonomous Data Guard
    ${LocalAdgAutoFailoverMaxDataLossLimit},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Indicates if the long-term backup schedule should be deleted.
    # The default value is `FALSE`.
    ${LongTermBackupScheduleIsDisabled},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.RepeatCadenceType])]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.RepeatCadenceType]
    # The frequency of the long-term backup schedule
    ${LongTermBackupScheduleRepeatCadence},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [System.Int32]
    # Retention period, in days, for backups.
    ${LongTermBackupScheduleRetentionPeriodInDay},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [System.DateTime]
    # The timestamp for the long-term backup schedule.
    # For a MONTHLY cadence, months having fewer days than the provided date will have the backup taken on the last day of that month.
    ${LongTermBackupScheduleTimeOfBackup},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [System.String]
    # The character set for the Autonomous Database.
    ${NcharacterSet},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.OpenModeType])]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.OpenModeType]
    # Indicates the Autonomous Database mode.
    ${OpenMode},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [System.String]
    # The database OCID of the Disaster Recovery peer database, which is located in a different region from the current peer database.
    ${PeerDbId},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.PermissionLevelType])]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.PermissionLevelType]
    # The Autonomous Database permission level.
    ${PermissionLevel},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [System.String]
    # The private endpoint Ip address for the resource.
    ${PrivateEndpointIP},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [System.String]
    # The resource's private endpoint label.
    ${PrivateEndpointLabel},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.RoleType])]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Support.RoleType]
    # The Data Guard role of the Autonomous Container Database or Autonomous Database, if Autonomous Data Guard is enabled.
    ${Role},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [System.String]
    # auto start time.
    # value must be of ISO-8601 format HH:mm
    ${ScheduledOperationScheduledStartTime},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [System.String]
    # auto stop time.
    # value must be of ISO-8601 format HH:mm
    ${ScheduledOperationScheduledStopTime},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [System.String]
    # Client subnet
    ${SubnetId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Models.Api50.ITrackedResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [System.String]
    # VNET for network connectivity
    ${VnetId},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Body')]
    [System.String[]]
    # The client IP access control list (ACL).
    # This is an array of CIDR notations and/or IP addresses.
    # Values should be separate strings, separated by commas.
    # Example: ['1.1.1.1','1.1.1.0/24','1.1.2.25']
    ${WhitelistedIP},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.OracleDatabaseResourceManagerForTesting.private\New-AzOracleDatabaseResourceManagerForTestingAutonomouDatabase_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $testPlayback = $false
            $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.OracleDatabaseResourceManagerForTesting.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
