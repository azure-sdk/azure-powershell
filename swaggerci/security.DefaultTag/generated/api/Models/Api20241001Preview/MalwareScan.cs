// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Runtime.Extensions;

    /// <summary>Describes the state of a malware scan operation.</summary>
    public partial class MalwareScan :
        Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScan,
        Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanInternal
    {

        /// <summary>The number of malicious blobs that were detected during the scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.PropertyOrigin.Inlined)]
        public long? BlobMaliciousBlobsCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanPropertiesInternal)Property).BlobMaliciousBlobsCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanPropertiesInternal)Property).BlobMaliciousBlobsCount = value ?? default(long); }

        /// <summary>The number of gigabytes of data that were scanned.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.PropertyOrigin.Inlined)]
        public double? BlobScannedBlobsInGb { get => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanPropertiesInternal)Property).BlobScannedBlobsInGb; set => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanPropertiesInternal)Property).BlobScannedBlobsInGb = value ?? default(double); }

        /// <summary>The number of blobs that were skipped.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.PropertyOrigin.Inlined)]
        public long? BlobSkippedBlobsCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanPropertiesInternal)Property).BlobSkippedBlobsCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanPropertiesInternal)Property).BlobSkippedBlobsCount = value ?? default(long); }

        /// <summary>The total number of blobs that were scanned.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.PropertyOrigin.Inlined)]
        public long? BlobTotalBlobsScanned { get => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanPropertiesInternal)Property).BlobTotalBlobsScanned; set => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanPropertiesInternal)Property).BlobTotalBlobsScanned = value ?? default(long); }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanProperties Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.MalwareScanProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ScanSummary</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IScanSummary Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanInternal.ScanSummary { get => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanPropertiesInternal)Property).ScanSummary; set => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanPropertiesInternal)Property).ScanSummary = value; }

        /// <summary>Internal Acessors for ScanSummaryBlob</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IBlobsScanSummary Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanInternal.ScanSummaryBlob { get => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanPropertiesInternal)Property).ScanSummaryBlob; set => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanPropertiesInternal)Property).ScanSummaryBlob = value; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanProperties _property;

        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.MalwareScanProperties()); set => this._property = value; }

        /// <summary>
        /// The time at which the scan has ended. Only available for a scan which has terminated.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.PropertyOrigin.Inlined)]
        public string ScanEndTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanPropertiesInternal)Property).ScanEndTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanPropertiesInternal)Property).ScanEndTime = value ?? null; }

        /// <summary>The identifier of the scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.PropertyOrigin.Inlined)]
        public string ScanId { get => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanPropertiesInternal)Property).ScanId; set => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanPropertiesInternal)Property).ScanId = value ?? null; }

        /// <summary>The time at which the scan had been initiated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.PropertyOrigin.Inlined)]
        public string ScanStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanPropertiesInternal)Property).ScanStartTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanPropertiesInternal)Property).ScanStartTime = value ?? null; }

        /// <summary>A status code of the scan operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.PropertyOrigin.Inlined)]
        public string ScanStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanPropertiesInternal)Property).ScanStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanPropertiesInternal)Property).ScanStatus = value ?? null; }

        /// <summary>A description of the status of the scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.PropertyOrigin.Inlined)]
        public string ScanStatusMessage { get => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanPropertiesInternal)Property).ScanStatusMessage; set => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanPropertiesInternal)Property).ScanStatusMessage = value ?? null; }

        /// <summary>The estimated cost of the scan. Only available for a scan which has terminated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.PropertyOrigin.Inlined)]
        public double? ScanSummaryEstimatedScanCostUsd { get => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanPropertiesInternal)Property).ScanSummaryEstimatedScanCostUsd; set => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanPropertiesInternal)Property).ScanSummaryEstimatedScanCostUsd = value ?? default(double); }

        /// <summary>Creates an new <see cref="MalwareScan" /> instance.</summary>
        public MalwareScan()
        {

        }
    }
    /// Describes the state of a malware scan operation.
    public partial interface IMalwareScan :
        Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Runtime.IJsonSerializable
    {
        /// <summary>The number of malicious blobs that were detected during the scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of malicious blobs that were detected during the scan.",
        SerializedName = @"maliciousBlobsCount",
        PossibleTypes = new [] { typeof(long) })]
        long? BlobMaliciousBlobsCount { get; set; }
        /// <summary>The number of gigabytes of data that were scanned.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of gigabytes of data that were scanned.",
        SerializedName = @"scannedBlobsInGB",
        PossibleTypes = new [] { typeof(double) })]
        double? BlobScannedBlobsInGb { get; set; }
        /// <summary>The number of blobs that were skipped.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of blobs that were skipped.",
        SerializedName = @"skippedBlobsCount",
        PossibleTypes = new [] { typeof(long) })]
        long? BlobSkippedBlobsCount { get; set; }
        /// <summary>The total number of blobs that were scanned.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The total number of blobs that were scanned.",
        SerializedName = @"totalBlobsScanned",
        PossibleTypes = new [] { typeof(long) })]
        long? BlobTotalBlobsScanned { get; set; }
        /// <summary>
        /// The time at which the scan has ended. Only available for a scan which has terminated.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The time at which the scan has ended. Only available for a scan which has terminated.",
        SerializedName = @"scanEndTime",
        PossibleTypes = new [] { typeof(string) })]
        string ScanEndTime { get; set; }
        /// <summary>The identifier of the scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The identifier of the scan.",
        SerializedName = @"scanId",
        PossibleTypes = new [] { typeof(string) })]
        string ScanId { get; set; }
        /// <summary>The time at which the scan had been initiated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The time at which the scan had been initiated.",
        SerializedName = @"scanStartTime",
        PossibleTypes = new [] { typeof(string) })]
        string ScanStartTime { get; set; }
        /// <summary>A status code of the scan operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A status code of the scan operation.",
        SerializedName = @"scanStatus",
        PossibleTypes = new [] { typeof(string) })]
        string ScanStatus { get; set; }
        /// <summary>A description of the status of the scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A description of the status of the scan.",
        SerializedName = @"scanStatusMessage",
        PossibleTypes = new [] { typeof(string) })]
        string ScanStatusMessage { get; set; }
        /// <summary>The estimated cost of the scan. Only available for a scan which has terminated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The estimated cost of the scan. Only available for a scan which has terminated.",
        SerializedName = @"estimatedScanCostUSD",
        PossibleTypes = new [] { typeof(double) })]
        double? ScanSummaryEstimatedScanCostUsd { get; set; }

    }
    /// Describes the state of a malware scan operation.
    internal partial interface IMalwareScanInternal

    {
        /// <summary>The number of malicious blobs that were detected during the scan.</summary>
        long? BlobMaliciousBlobsCount { get; set; }
        /// <summary>The number of gigabytes of data that were scanned.</summary>
        double? BlobScannedBlobsInGb { get; set; }
        /// <summary>The number of blobs that were skipped.</summary>
        long? BlobSkippedBlobsCount { get; set; }
        /// <summary>The total number of blobs that were scanned.</summary>
        long? BlobTotalBlobsScanned { get; set; }

        Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanProperties Property { get; set; }
        /// <summary>
        /// The time at which the scan has ended. Only available for a scan which has terminated.
        /// </summary>
        string ScanEndTime { get; set; }
        /// <summary>The identifier of the scan.</summary>
        string ScanId { get; set; }
        /// <summary>The time at which the scan had been initiated.</summary>
        string ScanStartTime { get; set; }
        /// <summary>A status code of the scan operation.</summary>
        string ScanStatus { get; set; }
        /// <summary>A description of the status of the scan.</summary>
        string ScanStatusMessage { get; set; }
        /// <summary>A summary of the scan results.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IScanSummary ScanSummary { get; set; }
        /// <summary>A summary of the scan results of the blobs that were scanned.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IBlobsScanSummary ScanSummaryBlob { get; set; }
        /// <summary>The estimated cost of the scan. Only available for a scan which has terminated.</summary>
        double? ScanSummaryEstimatedScanCostUsd { get; set; }

    }
}