// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Runtime.Extensions;

    /// <summary>A summary of the scan results.</summary>
    public partial class ScanSummary :
        Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IScanSummary,
        Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IScanSummaryInternal
    {

        /// <summary>Backing field for <see cref="Blob" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IBlobsScanSummary _blob;

        /// <summary>A summary of the scan results of the blobs that were scanned.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IBlobsScanSummary Blob { get => (this._blob = this._blob ?? new Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.BlobsScanSummary()); set => this._blob = value; }

        /// <summary>The number of malicious blobs that were detected during the scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.PropertyOrigin.Inlined)]
        public long? BlobMaliciousBlobsCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IBlobsScanSummaryInternal)Blob).MaliciousBlobsCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IBlobsScanSummaryInternal)Blob).MaliciousBlobsCount = value ?? default(long); }

        /// <summary>The number of gigabytes of data that were scanned.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.PropertyOrigin.Inlined)]
        public double? BlobScannedBlobsInGb { get => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IBlobsScanSummaryInternal)Blob).ScannedBlobsInGb; set => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IBlobsScanSummaryInternal)Blob).ScannedBlobsInGb = value ?? default(double); }

        /// <summary>The number of blobs that were skipped.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.PropertyOrigin.Inlined)]
        public long? BlobSkippedBlobsCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IBlobsScanSummaryInternal)Blob).SkippedBlobsCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IBlobsScanSummaryInternal)Blob).SkippedBlobsCount = value ?? default(long); }

        /// <summary>The total number of blobs that were scanned.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.PropertyOrigin.Inlined)]
        public long? BlobTotalBlobsScanned { get => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IBlobsScanSummaryInternal)Blob).TotalBlobsScanned; set => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IBlobsScanSummaryInternal)Blob).TotalBlobsScanned = value ?? default(long); }

        /// <summary>Backing field for <see cref="EstimatedScanCostUsd" /> property.</summary>
        private double? _estimatedScanCostUsd;

        /// <summary>The estimated cost of the scan. Only available for a scan which has terminated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.PropertyOrigin.Owned)]
        public double? EstimatedScanCostUsd { get => this._estimatedScanCostUsd; set => this._estimatedScanCostUsd = value; }

        /// <summary>Internal Acessors for Blob</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IBlobsScanSummary Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IScanSummaryInternal.Blob { get => (this._blob = this._blob ?? new Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.BlobsScanSummary()); set { {_blob = value;} } }

        /// <summary>Creates an new <see cref="ScanSummary" /> instance.</summary>
        public ScanSummary()
        {

        }
    }
    /// A summary of the scan results.
    public partial interface IScanSummary :
        Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Runtime.IJsonSerializable
    {
        /// <summary>The number of malicious blobs that were detected during the scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of malicious blobs that were detected during the scan.",
        SerializedName = @"maliciousBlobsCount",
        PossibleTypes = new [] { typeof(long) })]
        long? BlobMaliciousBlobsCount { get; set; }
        /// <summary>The number of gigabytes of data that were scanned.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of gigabytes of data that were scanned.",
        SerializedName = @"scannedBlobsInGB",
        PossibleTypes = new [] { typeof(double) })]
        double? BlobScannedBlobsInGb { get; set; }
        /// <summary>The number of blobs that were skipped.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of blobs that were skipped.",
        SerializedName = @"skippedBlobsCount",
        PossibleTypes = new [] { typeof(long) })]
        long? BlobSkippedBlobsCount { get; set; }
        /// <summary>The total number of blobs that were scanned.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The total number of blobs that were scanned.",
        SerializedName = @"totalBlobsScanned",
        PossibleTypes = new [] { typeof(long) })]
        long? BlobTotalBlobsScanned { get; set; }
        /// <summary>The estimated cost of the scan. Only available for a scan which has terminated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The estimated cost of the scan. Only available for a scan which has terminated.",
        SerializedName = @"estimatedScanCostUSD",
        PossibleTypes = new [] { typeof(double) })]
        double? EstimatedScanCostUsd { get; set; }

    }
    /// A summary of the scan results.
    internal partial interface IScanSummaryInternal

    {
        /// <summary>A summary of the scan results of the blobs that were scanned.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IBlobsScanSummary Blob { get; set; }
        /// <summary>The number of malicious blobs that were detected during the scan.</summary>
        long? BlobMaliciousBlobsCount { get; set; }
        /// <summary>The number of gigabytes of data that were scanned.</summary>
        double? BlobScannedBlobsInGb { get; set; }
        /// <summary>The number of blobs that were skipped.</summary>
        long? BlobSkippedBlobsCount { get; set; }
        /// <summary>The total number of blobs that were scanned.</summary>
        long? BlobTotalBlobsScanned { get; set; }
        /// <summary>The estimated cost of the scan. Only available for a scan which has terminated.</summary>
        double? EstimatedScanCostUsd { get; set; }

    }
}