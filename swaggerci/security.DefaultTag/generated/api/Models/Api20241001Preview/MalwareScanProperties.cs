// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Runtime.Extensions;

    public partial class MalwareScanProperties :
        Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanProperties,
        Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanPropertiesInternal
    {

        /// <summary>The number of malicious blobs that were detected during the scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.PropertyOrigin.Inlined)]
        public long? BlobMaliciousBlobsCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IScanSummaryInternal)ScanSummary).BlobMaliciousBlobsCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IScanSummaryInternal)ScanSummary).BlobMaliciousBlobsCount = value ?? default(long); }

        /// <summary>The number of gigabytes of data that were scanned.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.PropertyOrigin.Inlined)]
        public double? BlobScannedBlobsInGb { get => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IScanSummaryInternal)ScanSummary).BlobScannedBlobsInGb; set => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IScanSummaryInternal)ScanSummary).BlobScannedBlobsInGb = value ?? default(double); }

        /// <summary>The number of blobs that were skipped.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.PropertyOrigin.Inlined)]
        public long? BlobSkippedBlobsCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IScanSummaryInternal)ScanSummary).BlobSkippedBlobsCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IScanSummaryInternal)ScanSummary).BlobSkippedBlobsCount = value ?? default(long); }

        /// <summary>The total number of blobs that were scanned.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.PropertyOrigin.Inlined)]
        public long? BlobTotalBlobsScanned { get => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IScanSummaryInternal)ScanSummary).BlobTotalBlobsScanned; set => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IScanSummaryInternal)ScanSummary).BlobTotalBlobsScanned = value ?? default(long); }

        /// <summary>Internal Acessors for ScanSummary</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IScanSummary Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanPropertiesInternal.ScanSummary { get => (this._scanSummary = this._scanSummary ?? new Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.ScanSummary()); set { {_scanSummary = value;} } }

        /// <summary>Internal Acessors for ScanSummaryBlob</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IBlobsScanSummary Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IMalwareScanPropertiesInternal.ScanSummaryBlob { get => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IScanSummaryInternal)ScanSummary).Blob; set => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IScanSummaryInternal)ScanSummary).Blob = value; }

        /// <summary>Backing field for <see cref="ScanEndTime" /> property.</summary>
        private string _scanEndTime;

        /// <summary>
        /// The time at which the scan has ended. Only available for a scan which has terminated.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.PropertyOrigin.Owned)]
        public string ScanEndTime { get => this._scanEndTime; set => this._scanEndTime = value; }

        /// <summary>Backing field for <see cref="ScanId" /> property.</summary>
        private string _scanId;

        /// <summary>The identifier of the scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.PropertyOrigin.Owned)]
        public string ScanId { get => this._scanId; set => this._scanId = value; }

        /// <summary>Backing field for <see cref="ScanStartTime" /> property.</summary>
        private string _scanStartTime;

        /// <summary>The time at which the scan had been initiated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.PropertyOrigin.Owned)]
        public string ScanStartTime { get => this._scanStartTime; set => this._scanStartTime = value; }

        /// <summary>Backing field for <see cref="ScanStatus" /> property.</summary>
        private string _scanStatus;

        /// <summary>A status code of the scan operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.PropertyOrigin.Owned)]
        public string ScanStatus { get => this._scanStatus; set => this._scanStatus = value; }

        /// <summary>Backing field for <see cref="ScanStatusMessage" /> property.</summary>
        private string _scanStatusMessage;

        /// <summary>A description of the status of the scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.PropertyOrigin.Owned)]
        public string ScanStatusMessage { get => this._scanStatusMessage; set => this._scanStatusMessage = value; }

        /// <summary>Backing field for <see cref="ScanSummary" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IScanSummary _scanSummary;

        /// <summary>A summary of the scan results.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IScanSummary ScanSummary { get => (this._scanSummary = this._scanSummary ?? new Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.ScanSummary()); set => this._scanSummary = value; }

        /// <summary>The estimated cost of the scan. Only available for a scan which has terminated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.PropertyOrigin.Inlined)]
        public double? ScanSummaryEstimatedScanCostUsd { get => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IScanSummaryInternal)ScanSummary).EstimatedScanCostUsd; set => ((Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IScanSummaryInternal)ScanSummary).EstimatedScanCostUsd = value ?? default(double); }

        /// <summary>Creates an new <see cref="MalwareScanProperties" /> instance.</summary>
        public MalwareScanProperties()
        {

        }
    }
    public partial interface IMalwareScanProperties :
        Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Runtime.IJsonSerializable
    {
        /// <summary>The number of malicious blobs that were detected during the scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of malicious blobs that were detected during the scan.",
        SerializedName = @"maliciousBlobsCount",
        PossibleTypes = new [] { typeof(long) })]
        long? BlobMaliciousBlobsCount { get; set; }
        /// <summary>The number of gigabytes of data that were scanned.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of gigabytes of data that were scanned.",
        SerializedName = @"scannedBlobsInGB",
        PossibleTypes = new [] { typeof(double) })]
        double? BlobScannedBlobsInGb { get; set; }
        /// <summary>The number of blobs that were skipped.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of blobs that were skipped.",
        SerializedName = @"skippedBlobsCount",
        PossibleTypes = new [] { typeof(long) })]
        long? BlobSkippedBlobsCount { get; set; }
        /// <summary>The total number of blobs that were scanned.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The total number of blobs that were scanned.",
        SerializedName = @"totalBlobsScanned",
        PossibleTypes = new [] { typeof(long) })]
        long? BlobTotalBlobsScanned { get; set; }
        /// <summary>
        /// The time at which the scan has ended. Only available for a scan which has terminated.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The time at which the scan has ended. Only available for a scan which has terminated.",
        SerializedName = @"scanEndTime",
        PossibleTypes = new [] { typeof(string) })]
        string ScanEndTime { get; set; }
        /// <summary>The identifier of the scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The identifier of the scan.",
        SerializedName = @"scanId",
        PossibleTypes = new [] { typeof(string) })]
        string ScanId { get; set; }
        /// <summary>The time at which the scan had been initiated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The time at which the scan had been initiated.",
        SerializedName = @"scanStartTime",
        PossibleTypes = new [] { typeof(string) })]
        string ScanStartTime { get; set; }
        /// <summary>A status code of the scan operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A status code of the scan operation.",
        SerializedName = @"scanStatus",
        PossibleTypes = new [] { typeof(string) })]
        string ScanStatus { get; set; }
        /// <summary>A description of the status of the scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A description of the status of the scan.",
        SerializedName = @"scanStatusMessage",
        PossibleTypes = new [] { typeof(string) })]
        string ScanStatusMessage { get; set; }
        /// <summary>The estimated cost of the scan. Only available for a scan which has terminated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The estimated cost of the scan. Only available for a scan which has terminated.",
        SerializedName = @"estimatedScanCostUSD",
        PossibleTypes = new [] { typeof(double) })]
        double? ScanSummaryEstimatedScanCostUsd { get; set; }

    }
    internal partial interface IMalwareScanPropertiesInternal

    {
        /// <summary>The number of malicious blobs that were detected during the scan.</summary>
        long? BlobMaliciousBlobsCount { get; set; }
        /// <summary>The number of gigabytes of data that were scanned.</summary>
        double? BlobScannedBlobsInGb { get; set; }
        /// <summary>The number of blobs that were skipped.</summary>
        long? BlobSkippedBlobsCount { get; set; }
        /// <summary>The total number of blobs that were scanned.</summary>
        long? BlobTotalBlobsScanned { get; set; }
        /// <summary>
        /// The time at which the scan has ended. Only available for a scan which has terminated.
        /// </summary>
        string ScanEndTime { get; set; }
        /// <summary>The identifier of the scan.</summary>
        string ScanId { get; set; }
        /// <summary>The time at which the scan had been initiated.</summary>
        string ScanStartTime { get; set; }
        /// <summary>A status code of the scan operation.</summary>
        string ScanStatus { get; set; }
        /// <summary>A description of the status of the scan.</summary>
        string ScanStatusMessage { get; set; }
        /// <summary>A summary of the scan results.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IScanSummary ScanSummary { get; set; }
        /// <summary>A summary of the scan results of the blobs that were scanned.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SecurityCenter.Models.Api20241001Preview.IBlobsScanSummary ScanSummaryBlob { get; set; }
        /// <summary>The estimated cost of the scan. Only available for a scan which has terminated.</summary>
        double? ScanSummaryEstimatedScanCostUsd { get; set; }

    }
}