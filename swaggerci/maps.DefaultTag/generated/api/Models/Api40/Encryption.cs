// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Maps.Runtime.Extensions;

    /// <summary>
    /// (Optional) Discouraged to include in resource definition. Only needed where it is possible to disable platform (AKA infrastructure)
    /// encryption. Azure SQL TDE is an example of this. Values are enabled and disabled.
    /// </summary>
    public partial class Encryption :
        Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.IEncryption,
        Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.IEncryptionInternal
    {

        /// <summary>Backing field for <see cref="CustomerManagedKeyEncryption" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.ICustomerManagedKeyEncryption _customerManagedKeyEncryption;

        /// <summary>All Customer-managed key encryption properties for the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maps.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.ICustomerManagedKeyEncryption CustomerManagedKeyEncryption { get => (this._customerManagedKeyEncryption = this._customerManagedKeyEncryption ?? new Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.CustomerManagedKeyEncryption()); set => this._customerManagedKeyEncryption = value; }

        /// <summary>
        /// key encryption key Url, versioned or non-versioned. Ex: https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78
        /// or https://contosovault.vault.azure.net/keys/contosokek.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maps.PropertyOrigin.Inlined)]
        public string CustomerManagedKeyEncryptionKeyUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.ICustomerManagedKeyEncryptionInternal)CustomerManagedKeyEncryption).KeyEncryptionKeyUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.ICustomerManagedKeyEncryptionInternal)CustomerManagedKeyEncryption).KeyEncryptionKeyUrl = value ?? null; }

        /// <summary>Backing field for <see cref="InfrastructureEncryption" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Maps.Support.InfrastructureEncryption? _infrastructureEncryption;

        /// <summary>Values are enabled and disabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maps.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Maps.Support.InfrastructureEncryption? InfrastructureEncryption { get => this._infrastructureEncryption; set => this._infrastructureEncryption = value; }

        /// <summary>
        /// delegated identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource
        /// group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity
        /// and userAssignedIdentity - internal use only.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maps.PropertyOrigin.Inlined)]
        public string KeyEncryptionKeyIdentityDelegatedIdentityClientId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.ICustomerManagedKeyEncryptionInternal)CustomerManagedKeyEncryption).KeyEncryptionKeyIdentityDelegatedIdentityClientId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.ICustomerManagedKeyEncryptionInternal)CustomerManagedKeyEncryption).KeyEncryptionKeyIdentityDelegatedIdentityClientId = value ?? null; }

        /// <summary>Values can be systemAssignedIdentity or userAssignedIdentity</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maps.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Maps.Support.IdentityType? KeyEncryptionKeyIdentityType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.ICustomerManagedKeyEncryptionInternal)CustomerManagedKeyEncryption).KeyEncryptionKeyIdentityType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.ICustomerManagedKeyEncryptionInternal)CustomerManagedKeyEncryption).KeyEncryptionKeyIdentityType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Maps.Support.IdentityType)""); }

        /// <summary>
        /// user assigned identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource
        /// group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity
        /// and delegatedResourceIdentity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maps.PropertyOrigin.Inlined)]
        public string KeyEncryptionKeyIdentityUserAssignedIdentityResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.ICustomerManagedKeyEncryptionInternal)CustomerManagedKeyEncryption).KeyEncryptionKeyIdentityUserAssignedIdentityResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.ICustomerManagedKeyEncryptionInternal)CustomerManagedKeyEncryption).KeyEncryptionKeyIdentityUserAssignedIdentityResourceId = value ?? null; }

        /// <summary>Internal Acessors for CustomerManagedKeyEncryption</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.ICustomerManagedKeyEncryption Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.IEncryptionInternal.CustomerManagedKeyEncryption { get => (this._customerManagedKeyEncryption = this._customerManagedKeyEncryption ?? new Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.CustomerManagedKeyEncryption()); set { {_customerManagedKeyEncryption = value;} } }

        /// <summary>Internal Acessors for CustomerManagedKeyEncryptionKeyIdentity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.ICustomerManagedKeyEncryptionKeyIdentity Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.IEncryptionInternal.CustomerManagedKeyEncryptionKeyIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.ICustomerManagedKeyEncryptionInternal)CustomerManagedKeyEncryption).KeyEncryptionKeyIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.ICustomerManagedKeyEncryptionInternal)CustomerManagedKeyEncryption).KeyEncryptionKeyIdentity = value; }

        /// <summary>Creates an new <see cref="Encryption" /> instance.</summary>
        public Encryption()
        {

        }
    }
    /// (Optional) Discouraged to include in resource definition. Only needed where it is possible to disable platform (AKA infrastructure)
    /// encryption. Azure SQL TDE is an example of this. Values are enabled and disabled.
    public partial interface IEncryption :
        Microsoft.Azure.PowerShell.Cmdlets.Maps.Runtime.IJsonSerializable
    {
        /// <summary>
        /// key encryption key Url, versioned or non-versioned. Ex: https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78
        /// or https://contosovault.vault.azure.net/keys/contosokek.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"key encryption key Url, versioned or non-versioned. Ex: https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78 or https://contosovault.vault.azure.net/keys/contosokek.",
        SerializedName = @"keyEncryptionKeyUrl",
        PossibleTypes = new [] { typeof(string) })]
        string CustomerManagedKeyEncryptionKeyUrl { get; set; }
        /// <summary>Values are enabled and disabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Values are enabled and disabled.",
        SerializedName = @"infrastructureEncryption",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Maps.Support.InfrastructureEncryption) })]
        Microsoft.Azure.PowerShell.Cmdlets.Maps.Support.InfrastructureEncryption? InfrastructureEncryption { get; set; }
        /// <summary>
        /// delegated identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource
        /// group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity
        /// and userAssignedIdentity - internal use only.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"delegated identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity and userAssignedIdentity - internal use only.",
        SerializedName = @"delegatedIdentityClientId",
        PossibleTypes = new [] { typeof(string) })]
        string KeyEncryptionKeyIdentityDelegatedIdentityClientId { get; set; }
        /// <summary>Values can be systemAssignedIdentity or userAssignedIdentity</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Values can be systemAssignedIdentity or userAssignedIdentity",
        SerializedName = @"identityType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Maps.Support.IdentityType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Maps.Support.IdentityType? KeyEncryptionKeyIdentityType { get; set; }
        /// <summary>
        /// user assigned identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource
        /// group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity
        /// and delegatedResourceIdentity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"user assigned identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity and delegatedResourceIdentity.",
        SerializedName = @"userAssignedIdentityResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string KeyEncryptionKeyIdentityUserAssignedIdentityResourceId { get; set; }

    }
    /// (Optional) Discouraged to include in resource definition. Only needed where it is possible to disable platform (AKA infrastructure)
    /// encryption. Azure SQL TDE is an example of this. Values are enabled and disabled.
    internal partial interface IEncryptionInternal

    {
        /// <summary>All Customer-managed key encryption properties for the resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.ICustomerManagedKeyEncryption CustomerManagedKeyEncryption { get; set; }
        /// <summary>
        /// All identity configuration for Customer-managed key settings defining which identity should be used to auth to Key Vault.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.ICustomerManagedKeyEncryptionKeyIdentity CustomerManagedKeyEncryptionKeyIdentity { get; set; }
        /// <summary>
        /// key encryption key Url, versioned or non-versioned. Ex: https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78
        /// or https://contosovault.vault.azure.net/keys/contosokek.
        /// </summary>
        string CustomerManagedKeyEncryptionKeyUrl { get; set; }
        /// <summary>Values are enabled and disabled.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maps.Support.InfrastructureEncryption? InfrastructureEncryption { get; set; }
        /// <summary>
        /// delegated identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource
        /// group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity
        /// and userAssignedIdentity - internal use only.
        /// </summary>
        string KeyEncryptionKeyIdentityDelegatedIdentityClientId { get; set; }
        /// <summary>Values can be systemAssignedIdentity or userAssignedIdentity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maps.Support.IdentityType? KeyEncryptionKeyIdentityType { get; set; }
        /// <summary>
        /// user assigned identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource
        /// group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity
        /// and delegatedResourceIdentity.
        /// </summary>
        string KeyEncryptionKeyIdentityUserAssignedIdentityResourceId { get; set; }

    }
}