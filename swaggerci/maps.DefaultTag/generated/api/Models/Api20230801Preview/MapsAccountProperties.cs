// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api20230801Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Maps.Runtime.Extensions;

    /// <summary>Additional Map account properties</summary>
    public partial class MapsAccountProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api20230801Preview.IMapsAccountProperties,
        Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api20230801Preview.IMapsAccountPropertiesInternal
    {

        /// <summary>Backing field for <see cref="Cor" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api20230801Preview.ICorsRules _cor;

        /// <summary>
        /// Specifies CORS rules for the Blob service. You can include up to five CorsRule elements in the request. If no CorsRule
        /// elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for the Blob service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maps.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api20230801Preview.ICorsRules Cor { get => (this._cor = this._cor ?? new Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api20230801Preview.CorsRules()); set => this._cor = value; }

        /// <summary>
        /// The list of CORS rules. You can include up to five CorsRule elements in the request.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maps.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api20230801Preview.ICorsRule[] CorCorsRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api20230801Preview.ICorsRulesInternal)Cor).CorsRule; set => ((Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api20230801Preview.ICorsRulesInternal)Cor).CorsRule = value ?? null /* arrayOf */; }

        /// <summary>
        /// key encryption key Url, versioned or non-versioned. Ex: https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78
        /// or https://contosovault.vault.azure.net/keys/contosokek.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maps.PropertyOrigin.Inlined)]
        public string CustomerManagedKeyEncryptionKeyUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.IEncryptionInternal)Encryption).CustomerManagedKeyEncryptionKeyUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.IEncryptionInternal)Encryption).CustomerManagedKeyEncryptionKeyUrl = value ?? null; }

        /// <summary>Backing field for <see cref="DisableLocalAuth" /> property.</summary>
        private bool? _disableLocalAuth;

        /// <summary>
        /// Allows toggle functionality on Azure Policy to disable Azure Maps local authentication support. This will disable Shared
        /// Keys and Shared Access Signature Token authentication from any usage.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maps.PropertyOrigin.Owned)]
        public bool? DisableLocalAuth { get => this._disableLocalAuth; set => this._disableLocalAuth = value; }

        /// <summary>Backing field for <see cref="Encryption" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.IEncryption _encryption;

        /// <summary>
        /// (Optional) Discouraged to include in resource definition. Only needed where it is possible to disable platform (AKA infrastructure)
        /// encryption. Azure SQL TDE is an example of this. Values are enabled and disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maps.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.IEncryption Encryption { get => (this._encryption = this._encryption ?? new Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.Encryption()); set => this._encryption = value; }

        /// <summary>Values are enabled and disabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maps.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Maps.Support.InfrastructureEncryption? EncryptionInfrastructureEncryption { get => ((Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.IEncryptionInternal)Encryption).InfrastructureEncryption; set => ((Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.IEncryptionInternal)Encryption).InfrastructureEncryption = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Maps.Support.InfrastructureEncryption)""); }

        /// <summary>
        /// delegated identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource
        /// group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity
        /// and userAssignedIdentity - internal use only.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maps.PropertyOrigin.Inlined)]
        public string KeyEncryptionKeyIdentityDelegatedIdentityClientId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.IEncryptionInternal)Encryption).KeyEncryptionKeyIdentityDelegatedIdentityClientId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.IEncryptionInternal)Encryption).KeyEncryptionKeyIdentityDelegatedIdentityClientId = value ?? null; }

        /// <summary>Values can be systemAssignedIdentity or userAssignedIdentity</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maps.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Maps.Support.IdentityType? KeyEncryptionKeyIdentityType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.IEncryptionInternal)Encryption).KeyEncryptionKeyIdentityType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.IEncryptionInternal)Encryption).KeyEncryptionKeyIdentityType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Maps.Support.IdentityType)""); }

        /// <summary>
        /// user assigned identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource
        /// group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity
        /// and delegatedResourceIdentity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maps.PropertyOrigin.Inlined)]
        public string KeyEncryptionKeyIdentityUserAssignedIdentityResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.IEncryptionInternal)Encryption).KeyEncryptionKeyIdentityUserAssignedIdentityResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.IEncryptionInternal)Encryption).KeyEncryptionKeyIdentityUserAssignedIdentityResourceId = value ?? null; }

        /// <summary>Backing field for <see cref="LinkedResource" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api20230801Preview.ILinkedResource[] _linkedResource;

        /// <summary>
        /// The array of associated resources to the Map account. Linked resource in the array cannot individually update, you must
        /// update all linked resources in the array together. These resources may be used on operations on the Azure Maps REST API.
        /// Access is controlled by the Map Account Managed Identity(s) permissions to those resource(s).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maps.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api20230801Preview.ILinkedResource[] LinkedResource { get => this._linkedResource; set => this._linkedResource = value; }

        /// <summary>Internal Acessors for Cor</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api20230801Preview.ICorsRules Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api20230801Preview.IMapsAccountPropertiesInternal.Cor { get => (this._cor = this._cor ?? new Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api20230801Preview.CorsRules()); set { {_cor = value;} } }

        /// <summary>Internal Acessors for CustomerManagedKeyEncryptionKeyIdentity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.ICustomerManagedKeyEncryptionKeyIdentity Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api20230801Preview.IMapsAccountPropertiesInternal.CustomerManagedKeyEncryptionKeyIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.IEncryptionInternal)Encryption).CustomerManagedKeyEncryptionKeyIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.IEncryptionInternal)Encryption).CustomerManagedKeyEncryptionKeyIdentity = value; }

        /// <summary>Internal Acessors for Encryption</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.IEncryption Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api20230801Preview.IMapsAccountPropertiesInternal.Encryption { get => (this._encryption = this._encryption ?? new Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.Encryption()); set { {_encryption = value;} } }

        /// <summary>Internal Acessors for EncryptionCustomerManagedKeyEncryption</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.ICustomerManagedKeyEncryption Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api20230801Preview.IMapsAccountPropertiesInternal.EncryptionCustomerManagedKeyEncryption { get => ((Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.IEncryptionInternal)Encryption).CustomerManagedKeyEncryption; set => ((Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.IEncryptionInternal)Encryption).CustomerManagedKeyEncryption = value; }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api20230801Preview.IMapsAccountPropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Internal Acessors for UniqueId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api20230801Preview.IMapsAccountPropertiesInternal.UniqueId { get => this._uniqueId; set { {_uniqueId = value;} } }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private string _provisioningState;

        /// <summary>
        /// The provisioning state of the Map account resource, Account updates can only be performed on terminal states. Terminal
        /// states: `Succeeded` and `Failed`
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maps.PropertyOrigin.Owned)]
        public string ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="UniqueId" /> property.</summary>
        private string _uniqueId;

        /// <summary>A unique identifier for the maps account</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Origin(Microsoft.Azure.PowerShell.Cmdlets.Maps.PropertyOrigin.Owned)]
        public string UniqueId { get => this._uniqueId; }

        /// <summary>Creates an new <see cref="MapsAccountProperties" /> instance.</summary>
        public MapsAccountProperties()
        {

        }
    }
    /// Additional Map account properties
    public partial interface IMapsAccountProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Maps.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The list of CORS rules. You can include up to five CorsRule elements in the request.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of CORS rules. You can include up to five CorsRule elements in the request. ",
        SerializedName = @"corsRules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api20230801Preview.ICorsRule) })]
        Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api20230801Preview.ICorsRule[] CorCorsRule { get; set; }
        /// <summary>
        /// key encryption key Url, versioned or non-versioned. Ex: https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78
        /// or https://contosovault.vault.azure.net/keys/contosokek.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"key encryption key Url, versioned or non-versioned. Ex: https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78 or https://contosovault.vault.azure.net/keys/contosokek.",
        SerializedName = @"keyEncryptionKeyUrl",
        PossibleTypes = new [] { typeof(string) })]
        string CustomerManagedKeyEncryptionKeyUrl { get; set; }
        /// <summary>
        /// Allows toggle functionality on Azure Policy to disable Azure Maps local authentication support. This will disable Shared
        /// Keys and Shared Access Signature Token authentication from any usage.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Allows toggle functionality on Azure Policy to disable Azure Maps local authentication support. This will disable Shared Keys and Shared Access Signature Token authentication from any usage.",
        SerializedName = @"disableLocalAuth",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DisableLocalAuth { get; set; }
        /// <summary>Values are enabled and disabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Values are enabled and disabled.",
        SerializedName = @"infrastructureEncryption",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Maps.Support.InfrastructureEncryption) })]
        Microsoft.Azure.PowerShell.Cmdlets.Maps.Support.InfrastructureEncryption? EncryptionInfrastructureEncryption { get; set; }
        /// <summary>
        /// delegated identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource
        /// group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity
        /// and userAssignedIdentity - internal use only.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"delegated identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity and userAssignedIdentity - internal use only.",
        SerializedName = @"delegatedIdentityClientId",
        PossibleTypes = new [] { typeof(string) })]
        string KeyEncryptionKeyIdentityDelegatedIdentityClientId { get; set; }
        /// <summary>Values can be systemAssignedIdentity or userAssignedIdentity</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Values can be systemAssignedIdentity or userAssignedIdentity",
        SerializedName = @"identityType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Maps.Support.IdentityType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Maps.Support.IdentityType? KeyEncryptionKeyIdentityType { get; set; }
        /// <summary>
        /// user assigned identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource
        /// group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity
        /// and delegatedResourceIdentity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"user assigned identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity and delegatedResourceIdentity.",
        SerializedName = @"userAssignedIdentityResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string KeyEncryptionKeyIdentityUserAssignedIdentityResourceId { get; set; }
        /// <summary>
        /// The array of associated resources to the Map account. Linked resource in the array cannot individually update, you must
        /// update all linked resources in the array together. These resources may be used on operations on the Azure Maps REST API.
        /// Access is controlled by the Map Account Managed Identity(s) permissions to those resource(s).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The array of associated resources to the Map account. Linked resource in the array cannot individually update, you must update all linked resources in the array together. These resources may be used on operations on the Azure Maps REST API. Access is controlled by the Map Account Managed Identity(s) permissions to those resource(s).",
        SerializedName = @"linkedResources",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api20230801Preview.ILinkedResource) })]
        Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api20230801Preview.ILinkedResource[] LinkedResource { get; set; }
        /// <summary>
        /// The provisioning state of the Map account resource, Account updates can only be performed on terminal states. Terminal
        /// states: `Succeeded` and `Failed`
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The provisioning state of the Map account resource, Account updates can only be performed on terminal states. Terminal states: `Succeeded` and `Failed`",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        string ProvisioningState { get;  }
        /// <summary>A unique identifier for the maps account</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Maps.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"A unique identifier for the maps account",
        SerializedName = @"uniqueId",
        PossibleTypes = new [] { typeof(string) })]
        string UniqueId { get;  }

    }
    /// Additional Map account properties
    internal partial interface IMapsAccountPropertiesInternal

    {
        /// <summary>
        /// Specifies CORS rules for the Blob service. You can include up to five CorsRule elements in the request. If no CorsRule
        /// elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for the Blob service.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api20230801Preview.ICorsRules Cor { get; set; }
        /// <summary>
        /// The list of CORS rules. You can include up to five CorsRule elements in the request.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api20230801Preview.ICorsRule[] CorCorsRule { get; set; }
        /// <summary>
        /// All identity configuration for Customer-managed key settings defining which identity should be used to auth to Key Vault.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.ICustomerManagedKeyEncryptionKeyIdentity CustomerManagedKeyEncryptionKeyIdentity { get; set; }
        /// <summary>
        /// key encryption key Url, versioned or non-versioned. Ex: https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78
        /// or https://contosovault.vault.azure.net/keys/contosokek.
        /// </summary>
        string CustomerManagedKeyEncryptionKeyUrl { get; set; }
        /// <summary>
        /// Allows toggle functionality on Azure Policy to disable Azure Maps local authentication support. This will disable Shared
        /// Keys and Shared Access Signature Token authentication from any usage.
        /// </summary>
        bool? DisableLocalAuth { get; set; }
        /// <summary>
        /// (Optional) Discouraged to include in resource definition. Only needed where it is possible to disable platform (AKA infrastructure)
        /// encryption. Azure SQL TDE is an example of this. Values are enabled and disabled.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.IEncryption Encryption { get; set; }
        /// <summary>All Customer-managed key encryption properties for the resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api40.ICustomerManagedKeyEncryption EncryptionCustomerManagedKeyEncryption { get; set; }
        /// <summary>Values are enabled and disabled.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maps.Support.InfrastructureEncryption? EncryptionInfrastructureEncryption { get; set; }
        /// <summary>
        /// delegated identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource
        /// group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity
        /// and userAssignedIdentity - internal use only.
        /// </summary>
        string KeyEncryptionKeyIdentityDelegatedIdentityClientId { get; set; }
        /// <summary>Values can be systemAssignedIdentity or userAssignedIdentity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maps.Support.IdentityType? KeyEncryptionKeyIdentityType { get; set; }
        /// <summary>
        /// user assigned identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource
        /// group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity
        /// and delegatedResourceIdentity.
        /// </summary>
        string KeyEncryptionKeyIdentityUserAssignedIdentityResourceId { get; set; }
        /// <summary>
        /// The array of associated resources to the Map account. Linked resource in the array cannot individually update, you must
        /// update all linked resources in the array together. These resources may be used on operations on the Azure Maps REST API.
        /// Access is controlled by the Map Account Managed Identity(s) permissions to those resource(s).
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Maps.Models.Api20230801Preview.ILinkedResource[] LinkedResource { get; set; }
        /// <summary>
        /// The provisioning state of the Map account resource, Account updates can only be performed on terminal states. Terminal
        /// states: `Succeeded` and `Failed`
        /// </summary>
        string ProvisioningState { get; set; }
        /// <summary>A unique identifier for the maps account</summary>
        string UniqueId { get; set; }

    }
}