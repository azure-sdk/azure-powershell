// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Search.Support
{

    /// <summary>
    /// Possible origins of inbound traffic that can bypass the rules defined in the 'ipRules' section.
    /// </summary>
    public partial struct SearchBypass :
        System.IEquatable<SearchBypass>
    {
        /// <summary>
        /// Indicates that requests originating from the Azure portal can bypass the rules defined in the 'ipRules' section.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.Search.Support.SearchBypass AzurePortal = @"AzurePortal";

        /// <summary>
        /// Indicates that no origin can bypass the rules defined in the 'ipRules' section. This is the default.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.Search.Support.SearchBypass None = @"None";

        /// <summary>the value for an instance of the <see cref="SearchBypass" /> Enum.</summary>
        private string _value { get; set; }

        /// <summary>Conversion from arbitrary object to SearchBypass</summary>
        /// <param name="value">the value to convert to an instance of <see cref="SearchBypass" />.</param>
        internal static object CreateFrom(object value)
        {
            return new SearchBypass(global::System.Convert.ToString(value));
        }

        /// <summary>Compares values of enum type SearchBypass</summary>
        /// <param name="e">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public bool Equals(Microsoft.Azure.PowerShell.Cmdlets.Search.Support.SearchBypass e)
        {
            return _value.Equals(e._value);
        }

        /// <summary>Compares values of enum type SearchBypass (override for Object)</summary>
        /// <param name="obj">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public override bool Equals(object obj)
        {
            return obj is SearchBypass && Equals((SearchBypass)obj);
        }

        /// <summary>Returns hashCode for enum SearchBypass</summary>
        /// <returns>The hashCode of the value</returns>
        public override int GetHashCode()
        {
            return this._value.GetHashCode();
        }

        /// <summary>Creates an instance of the <see cref="SearchBypass"/> Enum class.</summary>
        /// <param name="underlyingValue">the value to create an instance for.</param>
        private SearchBypass(string underlyingValue)
        {
            this._value = underlyingValue;
        }

        /// <summary>Returns string representation for SearchBypass</summary>
        /// <returns>A string for this value.</returns>
        public override string ToString()
        {
            return this._value;
        }

        /// <summary>Implicit operator to convert string to SearchBypass</summary>
        /// <param name="value">the value to convert to an instance of <see cref="SearchBypass" />.</param>

        public static implicit operator SearchBypass(string value)
        {
            return new SearchBypass(value);
        }

        /// <summary>Implicit operator to convert SearchBypass to string</summary>
        /// <param name="e">the value to convert to an instance of <see cref="SearchBypass" />.</param>

        public static implicit operator string(Microsoft.Azure.PowerShell.Cmdlets.Search.Support.SearchBypass e)
        {
            return e._value;
        }

        /// <summary>Overriding != operator for enum SearchBypass</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are not equal to the same value</returns>
        public static bool operator !=(Microsoft.Azure.PowerShell.Cmdlets.Search.Support.SearchBypass e1, Microsoft.Azure.PowerShell.Cmdlets.Search.Support.SearchBypass e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>Overriding == operator for enum SearchBypass</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public static bool operator ==(Microsoft.Azure.PowerShell.Cmdlets.Search.Support.SearchBypass e1, Microsoft.Azure.PowerShell.Cmdlets.Search.Support.SearchBypass e2)
        {
            return e2.Equals(e1);
        }
    }
}