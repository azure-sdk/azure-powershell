// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Extensions;

    public partial class SkuOffering :
        Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview.ISkuOffering,
        Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview.ISkuOfferingInternal
    {

        /// <summary>Backing field for <see cref="Limit" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview.ISkuOfferingLimits _limit;

        /// <summary>The limits associated with this SKU offered in this region.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Origin(Microsoft.Azure.PowerShell.Cmdlets.Search.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview.ISkuOfferingLimits Limit { get => (this._limit = this._limit ?? new Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview.SkuOfferingLimits()); set => this._limit = value; }

        /// <summary>The maximum number of indexes available for this SKU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Origin(Microsoft.Azure.PowerShell.Cmdlets.Search.PropertyOrigin.Inlined)]
        public int? LimitIndex { get => ((Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview.ISkuOfferingLimitsInternal)Limit).Index; set => ((Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview.ISkuOfferingLimitsInternal)Limit).Index = value ?? default(int); }

        /// <summary>The maximum number of indexers available for this SKU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Origin(Microsoft.Azure.PowerShell.Cmdlets.Search.PropertyOrigin.Inlined)]
        public int? LimitIndexer { get => ((Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview.ISkuOfferingLimitsInternal)Limit).Indexer; set => ((Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview.ISkuOfferingLimitsInternal)Limit).Indexer = value ?? default(int); }

        /// <summary>The maximum number of partitions available for this SKU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Origin(Microsoft.Azure.PowerShell.Cmdlets.Search.PropertyOrigin.Inlined)]
        public int? LimitPartition { get => ((Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview.ISkuOfferingLimitsInternal)Limit).Partition; set => ((Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview.ISkuOfferingLimitsInternal)Limit).Partition = value ?? default(int); }

        /// <summary>The maximum storage size in Gigabytes available for this SKU per partition.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Origin(Microsoft.Azure.PowerShell.Cmdlets.Search.PropertyOrigin.Inlined)]
        public float? LimitPartitionStorageInGigabyte { get => ((Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview.ISkuOfferingLimitsInternal)Limit).PartitionStorageInGigabyte; set => ((Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview.ISkuOfferingLimitsInternal)Limit).PartitionStorageInGigabyte = value ?? default(float); }

        /// <summary>
        /// The maximum vector storage size in Gigabytes available for this SKU per partition.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Origin(Microsoft.Azure.PowerShell.Cmdlets.Search.PropertyOrigin.Inlined)]
        public float? LimitPartitionVectorStorageInGigabyte { get => ((Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview.ISkuOfferingLimitsInternal)Limit).PartitionVectorStorageInGigabyte; set => ((Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview.ISkuOfferingLimitsInternal)Limit).PartitionVectorStorageInGigabyte = value ?? default(float); }

        /// <summary>The maximum number of replicas available for this SKU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Origin(Microsoft.Azure.PowerShell.Cmdlets.Search.PropertyOrigin.Inlined)]
        public int? LimitReplica { get => ((Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview.ISkuOfferingLimitsInternal)Limit).Replica; set => ((Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview.ISkuOfferingLimitsInternal)Limit).Replica = value ?? default(int); }

        /// <summary>The maximum number of search units available for this SKU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Origin(Microsoft.Azure.PowerShell.Cmdlets.Search.PropertyOrigin.Inlined)]
        public int? LimitSearchUnit { get => ((Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview.ISkuOfferingLimitsInternal)Limit).SearchUnit; set => ((Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview.ISkuOfferingLimitsInternal)Limit).SearchUnit = value ?? default(int); }

        /// <summary>Internal Acessors for Limit</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview.ISkuOfferingLimits Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview.ISkuOfferingInternal.Limit { get => (this._limit = this._limit ?? new Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview.SkuOfferingLimits()); set { {_limit = value;} } }

        /// <summary>Internal Acessors for Sku</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview.ISku Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview.ISkuOfferingInternal.Sku { get => (this._sku = this._sku ?? new Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview.Sku()); set { {_sku = value;} } }

        /// <summary>Backing field for <see cref="Sku" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview.ISku _sku;

        /// <summary>
        /// Defines the SKU of a search service, which determines billing rate and capacity limits.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Origin(Microsoft.Azure.PowerShell.Cmdlets.Search.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview.ISku Sku { get => (this._sku = this._sku ?? new Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview.Sku()); set => this._sku = value; }

        /// <summary>
        /// The SKU of the search service. Valid values include: 'free': Shared service. 'basic': Dedicated service with up to 3 replicas.
        /// 'standard': Dedicated service with up to 12 partitions and 12 replicas. 'standard2': Similar to standard, but with more
        /// capacity per search unit. 'standard3': The largest Standard offering with up to 12 partitions and 12 replicas (or up to
        /// 3 partitions with more indexes if you also set the hostingMode property to 'highDensity'). 'storage_optimized_l1': Supports
        /// 1TB per partition, up to 12 partitions. 'storage_optimized_l2': Supports 2TB per partition, up to 12 partitions.'
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Origin(Microsoft.Azure.PowerShell.Cmdlets.Search.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Search.Support.SkuName? SkuName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview.ISkuInternal)Sku).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview.ISkuInternal)Sku).Name = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Search.Support.SkuName)""); }

        /// <summary>Creates an new <see cref="SkuOffering" /> instance.</summary>
        public SkuOffering()
        {

        }
    }
    public partial interface ISkuOffering :
        Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.IJsonSerializable
    {
        /// <summary>The maximum number of indexes available for this SKU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum number of indexes available for this SKU.",
        SerializedName = @"indexes",
        PossibleTypes = new [] { typeof(int) })]
        int? LimitIndex { get; set; }
        /// <summary>The maximum number of indexers available for this SKU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum number of indexers available for this SKU.",
        SerializedName = @"indexers",
        PossibleTypes = new [] { typeof(int) })]
        int? LimitIndexer { get; set; }
        /// <summary>The maximum number of partitions available for this SKU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum number of partitions available for this SKU.",
        SerializedName = @"partitions",
        PossibleTypes = new [] { typeof(int) })]
        int? LimitPartition { get; set; }
        /// <summary>The maximum storage size in Gigabytes available for this SKU per partition.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum storage size in Gigabytes available for this SKU per partition.",
        SerializedName = @"partitionStorageInGigabytes",
        PossibleTypes = new [] { typeof(float) })]
        float? LimitPartitionStorageInGigabyte { get; set; }
        /// <summary>
        /// The maximum vector storage size in Gigabytes available for this SKU per partition.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum vector storage size in Gigabytes available for this SKU per partition.",
        SerializedName = @"partitionVectorStorageInGigabytes",
        PossibleTypes = new [] { typeof(float) })]
        float? LimitPartitionVectorStorageInGigabyte { get; set; }
        /// <summary>The maximum number of replicas available for this SKU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum number of replicas available for this SKU.",
        SerializedName = @"replicas",
        PossibleTypes = new [] { typeof(int) })]
        int? LimitReplica { get; set; }
        /// <summary>The maximum number of search units available for this SKU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum number of search units available for this SKU.",
        SerializedName = @"searchUnits",
        PossibleTypes = new [] { typeof(int) })]
        int? LimitSearchUnit { get; set; }
        /// <summary>
        /// The SKU of the search service. Valid values include: 'free': Shared service. 'basic': Dedicated service with up to 3 replicas.
        /// 'standard': Dedicated service with up to 12 partitions and 12 replicas. 'standard2': Similar to standard, but with more
        /// capacity per search unit. 'standard3': The largest Standard offering with up to 12 partitions and 12 replicas (or up to
        /// 3 partitions with more indexes if you also set the hostingMode property to 'highDensity'). 'storage_optimized_l1': Supports
        /// 1TB per partition, up to 12 partitions. 'storage_optimized_l2': Supports 2TB per partition, up to 12 partitions.'
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Search.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The SKU of the search service. Valid values include: 'free': Shared service. 'basic': Dedicated service with up to 3 replicas. 'standard': Dedicated service with up to 12 partitions and 12 replicas. 'standard2': Similar to standard, but with more capacity per search unit. 'standard3': The largest Standard offering with up to 12 partitions and 12 replicas (or up to 3 partitions with more indexes if you also set the hostingMode property to 'highDensity'). 'storage_optimized_l1': Supports 1TB per partition, up to 12 partitions. 'storage_optimized_l2': Supports 2TB per partition, up to 12 partitions.'",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Search.Support.SkuName) })]
        Microsoft.Azure.PowerShell.Cmdlets.Search.Support.SkuName? SkuName { get; set; }

    }
    internal partial interface ISkuOfferingInternal

    {
        /// <summary>The limits associated with this SKU offered in this region.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview.ISkuOfferingLimits Limit { get; set; }
        /// <summary>The maximum number of indexes available for this SKU.</summary>
        int? LimitIndex { get; set; }
        /// <summary>The maximum number of indexers available for this SKU.</summary>
        int? LimitIndexer { get; set; }
        /// <summary>The maximum number of partitions available for this SKU.</summary>
        int? LimitPartition { get; set; }
        /// <summary>The maximum storage size in Gigabytes available for this SKU per partition.</summary>
        float? LimitPartitionStorageInGigabyte { get; set; }
        /// <summary>
        /// The maximum vector storage size in Gigabytes available for this SKU per partition.
        /// </summary>
        float? LimitPartitionVectorStorageInGigabyte { get; set; }
        /// <summary>The maximum number of replicas available for this SKU.</summary>
        int? LimitReplica { get; set; }
        /// <summary>The maximum number of search units available for this SKU.</summary>
        int? LimitSearchUnit { get; set; }
        /// <summary>
        /// Defines the SKU of a search service, which determines billing rate and capacity limits.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Search.Models.Api20250201Preview.ISku Sku { get; set; }
        /// <summary>
        /// The SKU of the search service. Valid values include: 'free': Shared service. 'basic': Dedicated service with up to 3 replicas.
        /// 'standard': Dedicated service with up to 12 partitions and 12 replicas. 'standard2': Similar to standard, but with more
        /// capacity per search unit. 'standard3': The largest Standard offering with up to 12 partitions and 12 replicas (or up to
        /// 3 partitions with more indexes if you also set the hostingMode property to 'highDensity'). 'storage_optimized_l1': Supports
        /// 1TB per partition, up to 12 partitions. 'storage_optimized_l2': Supports 2TB per partition, up to 12 partitions.'
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Search.Support.SkuName? SkuName { get; set; }

    }
}