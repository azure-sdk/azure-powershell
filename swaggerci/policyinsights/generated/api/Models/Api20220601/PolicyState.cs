// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601
{
    using static Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Extensions;

    /// <summary>Policy state record.</summary>
    public partial class PolicyState :
        Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IPolicyState,
        Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IPolicyStateInternal
    {

        /// <summary>Backing field for <see cref="ComplianceState" /> property.</summary>
        private string _complianceState;

        /// <summary>Compliance state of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public string ComplianceState { get => this._complianceState; set => this._complianceState = value; }

        /// <summary>Backing field for <see cref="Component" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IComponentStateDetails[] _component;

        /// <summary>
        /// Components state compliance records populated only when URL contains $expand=components clause.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IComponentStateDetails[] Component { get => this._component; set => this._component = value; }

        /// <summary>Backing field for <see cref="EffectiveParameter" /> property.</summary>
        private string _effectiveParameter;

        /// <summary>Effective parameters for the policy assignment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public string EffectiveParameter { get => this._effectiveParameter; set => this._effectiveParameter = value; }

        /// <summary>ID of the last evaluated resource for IfNotExists effect.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Inlined)]
        public string IfNotExistDetailResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IPolicyEvaluationDetailsInternal)PolicyEvaluationDetail).IfNotExistDetailResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IPolicyEvaluationDetailsInternal)PolicyEvaluationDetail).IfNotExistDetailResourceId = value ?? null; }

        /// <summary>Total number of resources to which the existence condition is applicable.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Inlined)]
        public int? IfNotExistDetailTotalResource { get => ((Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IPolicyEvaluationDetailsInternal)PolicyEvaluationDetail).IfNotExistDetailTotalResource; set => ((Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IPolicyEvaluationDetailsInternal)PolicyEvaluationDetail).IfNotExistDetailTotalResource = value ?? default(int); }

        /// <summary>Backing field for <see cref="IsCompliant" /> property.</summary>
        private bool? _isCompliant;

        /// <summary>
        /// Flag which states whether the resource is compliant against the policy assignment it was evaluated against. This property
        /// is deprecated; please use ComplianceState instead.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public bool? IsCompliant { get => this._isCompliant; set => this._isCompliant = value; }

        /// <summary>Backing field for <see cref="ManagementGroupId" /> property.</summary>
        private string _managementGroupId;

        /// <summary>
        /// Comma separated list of management group IDs, which represent the hierarchy of the management groups the resource is under.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public string ManagementGroupId { get => this._managementGroupId; set => this._managementGroupId = value; }

        /// <summary>Internal Acessors for PolicyAssignmentVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IPolicyStateInternal.PolicyAssignmentVersion { get => this._policyAssignmentVersion; set { {_policyAssignmentVersion = value;} } }

        /// <summary>Internal Acessors for PolicyDefinitionVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IPolicyStateInternal.PolicyDefinitionVersion { get => this._policyDefinitionVersion; set { {_policyDefinitionVersion = value;} } }

        /// <summary>Internal Acessors for PolicyEvaluationDetail</summary>
        Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IPolicyEvaluationDetails Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IPolicyStateInternal.PolicyEvaluationDetail { get => (this._policyEvaluationDetail = this._policyEvaluationDetail ?? new Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.PolicyEvaluationDetails()); set { {_policyEvaluationDetail = value;} } }

        /// <summary>Internal Acessors for PolicyEvaluationDetailIfNotExistsDetail</summary>
        Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20191001.IIfNotExistsEvaluationDetails Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IPolicyStateInternal.PolicyEvaluationDetailIfNotExistsDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IPolicyEvaluationDetailsInternal)PolicyEvaluationDetail).IfNotExistsDetail; set => ((Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IPolicyEvaluationDetailsInternal)PolicyEvaluationDetail).IfNotExistsDetail = value; }

        /// <summary>Internal Acessors for PolicySetDefinitionVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IPolicyStateInternal.PolicySetDefinitionVersion { get => this._policySetDefinitionVersion; set { {_policySetDefinitionVersion = value;} } }

        /// <summary>Backing field for <see cref="OdataContext" /> property.</summary>
        private string _odataContext;

        /// <summary>
        /// OData context string; used by OData clients to resolve type information based on metadata.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public string OdataContext { get => this._odataContext; set => this._odataContext = value; }

        /// <summary>Backing field for <see cref="OdataId" /> property.</summary>
        private string _odataId;

        /// <summary>
        /// OData entity ID; always set to null since policy state records do not have an entity ID.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public string OdataId { get => this._odataId; set => this._odataId = value; }

        /// <summary>Backing field for <see cref="PolicyAssignmentId" /> property.</summary>
        private string _policyAssignmentId;

        /// <summary>Policy assignment ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public string PolicyAssignmentId { get => this._policyAssignmentId; set => this._policyAssignmentId = value; }

        /// <summary>Backing field for <see cref="PolicyAssignmentName" /> property.</summary>
        private string _policyAssignmentName;

        /// <summary>Policy assignment name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public string PolicyAssignmentName { get => this._policyAssignmentName; set => this._policyAssignmentName = value; }

        /// <summary>Backing field for <see cref="PolicyAssignmentOwner" /> property.</summary>
        private string _policyAssignmentOwner;

        /// <summary>Policy assignment owner.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public string PolicyAssignmentOwner { get => this._policyAssignmentOwner; set => this._policyAssignmentOwner = value; }

        /// <summary>Backing field for <see cref="PolicyAssignmentParameter" /> property.</summary>
        private string _policyAssignmentParameter;

        /// <summary>Policy assignment parameters.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public string PolicyAssignmentParameter { get => this._policyAssignmentParameter; set => this._policyAssignmentParameter = value; }

        /// <summary>Backing field for <see cref="PolicyAssignmentScope" /> property.</summary>
        private string _policyAssignmentScope;

        /// <summary>Policy assignment scope.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public string PolicyAssignmentScope { get => this._policyAssignmentScope; set => this._policyAssignmentScope = value; }

        /// <summary>Backing field for <see cref="PolicyAssignmentVersion" /> property.</summary>
        private string _policyAssignmentVersion;

        /// <summary>Evaluated policy assignment version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public string PolicyAssignmentVersion { get => this._policyAssignmentVersion; }

        /// <summary>Backing field for <see cref="PolicyDefinitionAction" /> property.</summary>
        private string _policyDefinitionAction;

        /// <summary>Policy definition action, i.e. effect.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public string PolicyDefinitionAction { get => this._policyDefinitionAction; set => this._policyDefinitionAction = value; }

        /// <summary>Backing field for <see cref="PolicyDefinitionCategory" /> property.</summary>
        private string _policyDefinitionCategory;

        /// <summary>Policy definition category.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public string PolicyDefinitionCategory { get => this._policyDefinitionCategory; set => this._policyDefinitionCategory = value; }

        /// <summary>Backing field for <see cref="PolicyDefinitionGroupName" /> property.</summary>
        private string[] _policyDefinitionGroupName;

        /// <summary>Policy definition group names.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public string[] PolicyDefinitionGroupName { get => this._policyDefinitionGroupName; set => this._policyDefinitionGroupName = value; }

        /// <summary>Backing field for <see cref="PolicyDefinitionId" /> property.</summary>
        private string _policyDefinitionId;

        /// <summary>Policy definition ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public string PolicyDefinitionId { get => this._policyDefinitionId; set => this._policyDefinitionId = value; }

        /// <summary>Backing field for <see cref="PolicyDefinitionName" /> property.</summary>
        private string _policyDefinitionName;

        /// <summary>Policy definition name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public string PolicyDefinitionName { get => this._policyDefinitionName; set => this._policyDefinitionName = value; }

        /// <summary>Backing field for <see cref="PolicyDefinitionReferenceId" /> property.</summary>
        private string _policyDefinitionReferenceId;

        /// <summary>
        /// Reference ID for the policy definition inside the policy set, if the policy assignment is for a policy set.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public string PolicyDefinitionReferenceId { get => this._policyDefinitionReferenceId; set => this._policyDefinitionReferenceId = value; }

        /// <summary>Backing field for <see cref="PolicyDefinitionVersion" /> property.</summary>
        private string _policyDefinitionVersion;

        /// <summary>Evaluated policy definition version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public string PolicyDefinitionVersion { get => this._policyDefinitionVersion; }

        /// <summary>Backing field for <see cref="PolicyEvaluationDetail" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IPolicyEvaluationDetails _policyEvaluationDetail;

        /// <summary>Policy evaluation details.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IPolicyEvaluationDetails PolicyEvaluationDetail { get => (this._policyEvaluationDetail = this._policyEvaluationDetail ?? new Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.PolicyEvaluationDetails()); set => this._policyEvaluationDetail = value; }

        /// <summary>Details of the evaluated expressions.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20191001.IExpressionEvaluationDetails[] PolicyEvaluationDetailEvaluatedExpression { get => ((Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IPolicyEvaluationDetailsInternal)PolicyEvaluationDetail).EvaluatedExpression; set => ((Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IPolicyEvaluationDetailsInternal)PolicyEvaluationDetail).EvaluatedExpression = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="PolicySetDefinitionCategory" /> property.</summary>
        private string _policySetDefinitionCategory;

        /// <summary>Policy set definition category, if the policy assignment is for a policy set.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public string PolicySetDefinitionCategory { get => this._policySetDefinitionCategory; set => this._policySetDefinitionCategory = value; }

        /// <summary>Backing field for <see cref="PolicySetDefinitionId" /> property.</summary>
        private string _policySetDefinitionId;

        /// <summary>Policy set definition ID, if the policy assignment is for a policy set.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public string PolicySetDefinitionId { get => this._policySetDefinitionId; set => this._policySetDefinitionId = value; }

        /// <summary>Backing field for <see cref="PolicySetDefinitionName" /> property.</summary>
        private string _policySetDefinitionName;

        /// <summary>Policy set definition name, if the policy assignment is for a policy set.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public string PolicySetDefinitionName { get => this._policySetDefinitionName; set => this._policySetDefinitionName = value; }

        /// <summary>Backing field for <see cref="PolicySetDefinitionOwner" /> property.</summary>
        private string _policySetDefinitionOwner;

        /// <summary>Policy set definition owner, if the policy assignment is for a policy set.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public string PolicySetDefinitionOwner { get => this._policySetDefinitionOwner; set => this._policySetDefinitionOwner = value; }

        /// <summary>Backing field for <see cref="PolicySetDefinitionParameter" /> property.</summary>
        private string _policySetDefinitionParameter;

        /// <summary>Policy set definition parameters, if the policy assignment is for a policy set.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public string PolicySetDefinitionParameter { get => this._policySetDefinitionParameter; set => this._policySetDefinitionParameter = value; }

        /// <summary>Backing field for <see cref="PolicySetDefinitionVersion" /> property.</summary>
        private string _policySetDefinitionVersion;

        /// <summary>Evaluated policy set definition version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public string PolicySetDefinitionVersion { get => this._policySetDefinitionVersion; }

        /// <summary>Backing field for <see cref="ResourceGroup" /> property.</summary>
        private string _resourceGroup;

        /// <summary>Resource group name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public string ResourceGroup { get => this._resourceGroup; set => this._resourceGroup = value; }

        /// <summary>Backing field for <see cref="ResourceId" /> property.</summary>
        private string _resourceId;

        /// <summary>Resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public string ResourceId { get => this._resourceId; set => this._resourceId = value; }

        /// <summary>Backing field for <see cref="ResourceLocation" /> property.</summary>
        private string _resourceLocation;

        /// <summary>Resource location.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public string ResourceLocation { get => this._resourceLocation; set => this._resourceLocation = value; }

        /// <summary>Backing field for <see cref="ResourceTag" /> property.</summary>
        private string _resourceTag;

        /// <summary>List of resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public string ResourceTag { get => this._resourceTag; set => this._resourceTag = value; }

        /// <summary>Backing field for <see cref="ResourceType" /> property.</summary>
        private string _resourceType;

        /// <summary>Resource type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public string ResourceType { get => this._resourceType; set => this._resourceType = value; }

        /// <summary>Backing field for <see cref="SubscriptionId" /> property.</summary>
        private string _subscriptionId;

        /// <summary>Subscription ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public string SubscriptionId { get => this._subscriptionId; set => this._subscriptionId = value; }

        /// <summary>Backing field for <see cref="Timestamp" /> property.</summary>
        private global::System.DateTime? _timestamp;

        /// <summary>Timestamp for the policy state record.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PropertyOrigin.Owned)]
        public global::System.DateTime? Timestamp { get => this._timestamp; set => this._timestamp = value; }

        /// <summary>Creates an new <see cref="PolicyState" /> instance.</summary>
        public PolicyState()
        {

        }
    }
    /// Policy state record.
    public partial interface IPolicyState :
        Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.IAssociativeArray<global::System.Object>
    {
        /// <summary>Compliance state of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Compliance state of the resource.",
        SerializedName = @"complianceState",
        PossibleTypes = new [] { typeof(string) })]
        string ComplianceState { get; set; }
        /// <summary>
        /// Components state compliance records populated only when URL contains $expand=components clause.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Components state compliance records populated only when URL contains $expand=components clause.",
        SerializedName = @"components",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IComponentStateDetails) })]
        Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IComponentStateDetails[] Component { get; set; }
        /// <summary>Effective parameters for the policy assignment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Effective parameters for the policy assignment.",
        SerializedName = @"effectiveParameters",
        PossibleTypes = new [] { typeof(string) })]
        string EffectiveParameter { get; set; }
        /// <summary>ID of the last evaluated resource for IfNotExists effect.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"ID of the last evaluated resource for IfNotExists effect.",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        string IfNotExistDetailResourceId { get; set; }
        /// <summary>Total number of resources to which the existence condition is applicable.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Total number of resources to which the existence condition is applicable.",
        SerializedName = @"totalResources",
        PossibleTypes = new [] { typeof(int) })]
        int? IfNotExistDetailTotalResource { get; set; }
        /// <summary>
        /// Flag which states whether the resource is compliant against the policy assignment it was evaluated against. This property
        /// is deprecated; please use ComplianceState instead.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag which states whether the resource is compliant against the policy assignment it was evaluated against. This property is deprecated; please use ComplianceState instead.",
        SerializedName = @"isCompliant",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsCompliant { get; set; }
        /// <summary>
        /// Comma separated list of management group IDs, which represent the hierarchy of the management groups the resource is under.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Comma separated list of management group IDs, which represent the hierarchy of the management groups the resource is under.",
        SerializedName = @"managementGroupIds",
        PossibleTypes = new [] { typeof(string) })]
        string ManagementGroupId { get; set; }
        /// <summary>
        /// OData context string; used by OData clients to resolve type information based on metadata.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"OData context string; used by OData clients to resolve type information based on metadata.",
        SerializedName = @"@odata.context",
        PossibleTypes = new [] { typeof(string) })]
        string OdataContext { get; set; }
        /// <summary>
        /// OData entity ID; always set to null since policy state records do not have an entity ID.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"OData entity ID; always set to null since policy state records do not have an entity ID.",
        SerializedName = @"@odata.id",
        PossibleTypes = new [] { typeof(string) })]
        string OdataId { get; set; }
        /// <summary>Policy assignment ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Policy assignment ID.",
        SerializedName = @"policyAssignmentId",
        PossibleTypes = new [] { typeof(string) })]
        string PolicyAssignmentId { get; set; }
        /// <summary>Policy assignment name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Policy assignment name.",
        SerializedName = @"policyAssignmentName",
        PossibleTypes = new [] { typeof(string) })]
        string PolicyAssignmentName { get; set; }
        /// <summary>Policy assignment owner.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Policy assignment owner.",
        SerializedName = @"policyAssignmentOwner",
        PossibleTypes = new [] { typeof(string) })]
        string PolicyAssignmentOwner { get; set; }
        /// <summary>Policy assignment parameters.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Policy assignment parameters.",
        SerializedName = @"policyAssignmentParameters",
        PossibleTypes = new [] { typeof(string) })]
        string PolicyAssignmentParameter { get; set; }
        /// <summary>Policy assignment scope.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Policy assignment scope.",
        SerializedName = @"policyAssignmentScope",
        PossibleTypes = new [] { typeof(string) })]
        string PolicyAssignmentScope { get; set; }
        /// <summary>Evaluated policy assignment version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Evaluated policy assignment version.",
        SerializedName = @"policyAssignmentVersion",
        PossibleTypes = new [] { typeof(string) })]
        string PolicyAssignmentVersion { get;  }
        /// <summary>Policy definition action, i.e. effect.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Policy definition action, i.e. effect.",
        SerializedName = @"policyDefinitionAction",
        PossibleTypes = new [] { typeof(string) })]
        string PolicyDefinitionAction { get; set; }
        /// <summary>Policy definition category.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Policy definition category.",
        SerializedName = @"policyDefinitionCategory",
        PossibleTypes = new [] { typeof(string) })]
        string PolicyDefinitionCategory { get; set; }
        /// <summary>Policy definition group names.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Policy definition group names.",
        SerializedName = @"policyDefinitionGroupNames",
        PossibleTypes = new [] { typeof(string) })]
        string[] PolicyDefinitionGroupName { get; set; }
        /// <summary>Policy definition ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Policy definition ID.",
        SerializedName = @"policyDefinitionId",
        PossibleTypes = new [] { typeof(string) })]
        string PolicyDefinitionId { get; set; }
        /// <summary>Policy definition name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Policy definition name.",
        SerializedName = @"policyDefinitionName",
        PossibleTypes = new [] { typeof(string) })]
        string PolicyDefinitionName { get; set; }
        /// <summary>
        /// Reference ID for the policy definition inside the policy set, if the policy assignment is for a policy set.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Reference ID for the policy definition inside the policy set, if the policy assignment is for a policy set.",
        SerializedName = @"policyDefinitionReferenceId",
        PossibleTypes = new [] { typeof(string) })]
        string PolicyDefinitionReferenceId { get; set; }
        /// <summary>Evaluated policy definition version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Evaluated policy definition version.",
        SerializedName = @"policyDefinitionVersion",
        PossibleTypes = new [] { typeof(string) })]
        string PolicyDefinitionVersion { get;  }
        /// <summary>Details of the evaluated expressions.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Details of the evaluated expressions.",
        SerializedName = @"evaluatedExpressions",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20191001.IExpressionEvaluationDetails) })]
        Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20191001.IExpressionEvaluationDetails[] PolicyEvaluationDetailEvaluatedExpression { get; set; }
        /// <summary>Policy set definition category, if the policy assignment is for a policy set.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Policy set definition category, if the policy assignment is for a policy set.",
        SerializedName = @"policySetDefinitionCategory",
        PossibleTypes = new [] { typeof(string) })]
        string PolicySetDefinitionCategory { get; set; }
        /// <summary>Policy set definition ID, if the policy assignment is for a policy set.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Policy set definition ID, if the policy assignment is for a policy set.",
        SerializedName = @"policySetDefinitionId",
        PossibleTypes = new [] { typeof(string) })]
        string PolicySetDefinitionId { get; set; }
        /// <summary>Policy set definition name, if the policy assignment is for a policy set.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Policy set definition name, if the policy assignment is for a policy set.",
        SerializedName = @"policySetDefinitionName",
        PossibleTypes = new [] { typeof(string) })]
        string PolicySetDefinitionName { get; set; }
        /// <summary>Policy set definition owner, if the policy assignment is for a policy set.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Policy set definition owner, if the policy assignment is for a policy set.",
        SerializedName = @"policySetDefinitionOwner",
        PossibleTypes = new [] { typeof(string) })]
        string PolicySetDefinitionOwner { get; set; }
        /// <summary>Policy set definition parameters, if the policy assignment is for a policy set.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Policy set definition parameters, if the policy assignment is for a policy set.",
        SerializedName = @"policySetDefinitionParameters",
        PossibleTypes = new [] { typeof(string) })]
        string PolicySetDefinitionParameter { get; set; }
        /// <summary>Evaluated policy set definition version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Evaluated policy set definition version.",
        SerializedName = @"policySetDefinitionVersion",
        PossibleTypes = new [] { typeof(string) })]
        string PolicySetDefinitionVersion { get;  }
        /// <summary>Resource group name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource group name.",
        SerializedName = @"resourceGroup",
        PossibleTypes = new [] { typeof(string) })]
        string ResourceGroup { get; set; }
        /// <summary>Resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource ID.",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        string ResourceId { get; set; }
        /// <summary>Resource location.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource location.",
        SerializedName = @"resourceLocation",
        PossibleTypes = new [] { typeof(string) })]
        string ResourceLocation { get; set; }
        /// <summary>List of resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of resource tags.",
        SerializedName = @"resourceTags",
        PossibleTypes = new [] { typeof(string) })]
        string ResourceTag { get; set; }
        /// <summary>Resource type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource type.",
        SerializedName = @"resourceType",
        PossibleTypes = new [] { typeof(string) })]
        string ResourceType { get; set; }
        /// <summary>Subscription ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Subscription ID.",
        SerializedName = @"subscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        string SubscriptionId { get; set; }
        /// <summary>Timestamp for the policy state record.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Timestamp for the policy state record.",
        SerializedName = @"timestamp",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? Timestamp { get; set; }

    }
    /// Policy state record.
    internal partial interface IPolicyStateInternal

    {
        /// <summary>Compliance state of the resource.</summary>
        string ComplianceState { get; set; }
        /// <summary>
        /// Components state compliance records populated only when URL contains $expand=components clause.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IComponentStateDetails[] Component { get; set; }
        /// <summary>Effective parameters for the policy assignment.</summary>
        string EffectiveParameter { get; set; }
        /// <summary>ID of the last evaluated resource for IfNotExists effect.</summary>
        string IfNotExistDetailResourceId { get; set; }
        /// <summary>Total number of resources to which the existence condition is applicable.</summary>
        int? IfNotExistDetailTotalResource { get; set; }
        /// <summary>
        /// Flag which states whether the resource is compliant against the policy assignment it was evaluated against. This property
        /// is deprecated; please use ComplianceState instead.
        /// </summary>
        bool? IsCompliant { get; set; }
        /// <summary>
        /// Comma separated list of management group IDs, which represent the hierarchy of the management groups the resource is under.
        /// </summary>
        string ManagementGroupId { get; set; }
        /// <summary>
        /// OData context string; used by OData clients to resolve type information based on metadata.
        /// </summary>
        string OdataContext { get; set; }
        /// <summary>
        /// OData entity ID; always set to null since policy state records do not have an entity ID.
        /// </summary>
        string OdataId { get; set; }
        /// <summary>Policy assignment ID.</summary>
        string PolicyAssignmentId { get; set; }
        /// <summary>Policy assignment name.</summary>
        string PolicyAssignmentName { get; set; }
        /// <summary>Policy assignment owner.</summary>
        string PolicyAssignmentOwner { get; set; }
        /// <summary>Policy assignment parameters.</summary>
        string PolicyAssignmentParameter { get; set; }
        /// <summary>Policy assignment scope.</summary>
        string PolicyAssignmentScope { get; set; }
        /// <summary>Evaluated policy assignment version.</summary>
        string PolicyAssignmentVersion { get; set; }
        /// <summary>Policy definition action, i.e. effect.</summary>
        string PolicyDefinitionAction { get; set; }
        /// <summary>Policy definition category.</summary>
        string PolicyDefinitionCategory { get; set; }
        /// <summary>Policy definition group names.</summary>
        string[] PolicyDefinitionGroupName { get; set; }
        /// <summary>Policy definition ID.</summary>
        string PolicyDefinitionId { get; set; }
        /// <summary>Policy definition name.</summary>
        string PolicyDefinitionName { get; set; }
        /// <summary>
        /// Reference ID for the policy definition inside the policy set, if the policy assignment is for a policy set.
        /// </summary>
        string PolicyDefinitionReferenceId { get; set; }
        /// <summary>Evaluated policy definition version.</summary>
        string PolicyDefinitionVersion { get; set; }
        /// <summary>Policy evaluation details.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IPolicyEvaluationDetails PolicyEvaluationDetail { get; set; }
        /// <summary>Details of the evaluated expressions.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20191001.IExpressionEvaluationDetails[] PolicyEvaluationDetailEvaluatedExpression { get; set; }
        /// <summary>Evaluation details of IfNotExists effect.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20191001.IIfNotExistsEvaluationDetails PolicyEvaluationDetailIfNotExistsDetail { get; set; }
        /// <summary>Policy set definition category, if the policy assignment is for a policy set.</summary>
        string PolicySetDefinitionCategory { get; set; }
        /// <summary>Policy set definition ID, if the policy assignment is for a policy set.</summary>
        string PolicySetDefinitionId { get; set; }
        /// <summary>Policy set definition name, if the policy assignment is for a policy set.</summary>
        string PolicySetDefinitionName { get; set; }
        /// <summary>Policy set definition owner, if the policy assignment is for a policy set.</summary>
        string PolicySetDefinitionOwner { get; set; }
        /// <summary>Policy set definition parameters, if the policy assignment is for a policy set.</summary>
        string PolicySetDefinitionParameter { get; set; }
        /// <summary>Evaluated policy set definition version.</summary>
        string PolicySetDefinitionVersion { get; set; }
        /// <summary>Resource group name.</summary>
        string ResourceGroup { get; set; }
        /// <summary>Resource ID.</summary>
        string ResourceId { get; set; }
        /// <summary>Resource location.</summary>
        string ResourceLocation { get; set; }
        /// <summary>List of resource tags.</summary>
        string ResourceTag { get; set; }
        /// <summary>Resource type.</summary>
        string ResourceType { get; set; }
        /// <summary>Subscription ID.</summary>
        string SubscriptionId { get; set; }
        /// <summary>Timestamp for the policy state record.</summary>
        global::System.DateTime? Timestamp { get; set; }

    }
}