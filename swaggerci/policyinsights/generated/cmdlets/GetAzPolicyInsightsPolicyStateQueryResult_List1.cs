// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Extensions;
    using System;

    /// <summary>Queries policy states for the resources under the subscription.</summary>
    /// <remarks>
    /// [OpenAPI] ListQueryResultsForSubscription=>POST:"/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsCommon.Get, @"AzPolicyInsightsPolicyStateQueryResult_List1", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IPolicyState))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Description(@"Queries policy states for the resources under the subscription.")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Generated]
    public partial class GetAzPolicyInsightsPolicyStateQueryResult_List1 : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.IEventListener
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>A flag to tell whether it is the first onOK call.</summary>
        private bool _isFirst = true;

        /// <summary>Link to retrieve next page.</summary>
        private string _nextLink;

        /// <summary>Backing field for <see cref="Apply" /> property.</summary>
        private string _apply;

        /// <summary>OData apply expression for aggregations.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "OData apply expression for aggregations.")]
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"OData apply expression for aggregations.",
        SerializedName = @"$apply",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.ParameterCategory.Query)]
        public string Apply { get => this._apply; set => this._apply = value; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.PolicyInsightsClient Client => Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Module.Instance.ClientAPI;

        /// <summary>
        /// The credentials, account, tenant, and subscription used for communication with Azure
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The credentials, account, tenant, and subscription used for communication with Azure.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>Backing field for <see cref="Filter" /> property.</summary>
        private string _filter;

        /// <summary>OData filter expression.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "OData filter expression.")]
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"OData filter expression.",
        SerializedName = @"$filter",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.ParameterCategory.Query)]
        public string Filter { get => this._filter; set => this._filter = value; }

        /// <summary>Backing field for <see cref="From" /> property.</summary>
        private global::System.DateTime _from;

        /// <summary>
        /// ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses
        /// ($to - 1-day).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")]
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).",
        SerializedName = @"$from",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.ParameterCategory.Query)]
        public global::System.DateTime From { get => this._from; set => this._from = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>
        /// <see cref="Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>Backing field for <see cref="OrderBy" /> property.</summary>
        private string _orderBy;

        /// <summary>
        /// Ordering expression using OData notation. One or more comma-separated column names with an optional "desc" (the default)
        /// or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".")]
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Ordering expression using OData notation. One or more comma-separated column names with an optional ""desc"" (the default) or ""asc"", e.g. ""$orderby=PolicyAssignmentId, ResourceId asc"".",
        SerializedName = @"$orderby",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.ParameterCategory.Query)]
        public string OrderBy { get => this._orderBy; set => this._orderBy = value; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>Backing field for <see cref="PolicyStatesResource" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Support.PolicyStatesResource _policyStatesResource;

        /// <summary>
        /// The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s),
        /// whereas 'default' represents all policy state(s).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).")]
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).",
        SerializedName = @"policyStatesResource",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Support.PolicyStatesResource) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.ParameterCategory.Path)]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Support.PolicyStatesResource))]
        public Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Support.PolicyStatesResource PolicyStatesResource { get => this._policyStatesResource; set => this._policyStatesResource = value; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>Backing field for <see cref="Select" /> property.</summary>
        private string _select;

        /// <summary>
        /// Select expression using OData notation. Limits the columns on each record to just those requested, e.g. "$select=PolicyAssignmentId,
        /// ResourceId".
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".")]
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Select expression using OData notation. Limits the columns on each record to just those requested, e.g. ""$select=PolicyAssignmentId, ResourceId"".",
        SerializedName = @"$select",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.ParameterCategory.Query)]
        public string Select { get => this._select; set => this._select = value; }

        /// <summary>Backing field for <see cref="SkipToken" /> property.</summary>
        private string _skipToken;

        /// <summary>
        /// Skiptoken is only provided if a previous response returned a partial result as a part of nextLink element.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Skiptoken is only provided if a previous response returned a partial result as a part of nextLink element.")]
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Skiptoken is only provided if a previous response returned a partial result as a part of nextLink element.",
        SerializedName = @"$skiptoken",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.ParameterCategory.Query)]
        public string SkipToken { get => this._skipToken; set => this._skipToken = value; }

        /// <summary>Backing field for <see cref="SubscriptionId" /> property.</summary>
        private string[] _subscriptionId;

        /// <summary>Microsoft Azure subscription ID.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Microsoft Azure subscription ID.")]
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Microsoft Azure subscription ID.",
        SerializedName = @"subscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.DefaultInfo(
        Name = @"",
        Description =@"",
        Script = @"(Get-AzContext).Subscription.Id")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.ParameterCategory.Path)]
        public string[] SubscriptionId { get => this._subscriptionId; set => this._subscriptionId = value; }

        /// <summary>Backing field for <see cref="To" /> property.</summary>
        private global::System.DateTime _to;

        /// <summary>
        /// ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request
        /// time.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")]
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.",
        SerializedName = @"$to",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.ParameterCategory.Query)]
        public global::System.DateTime To { get => this._to; set => this._to = value; }

        /// <summary>Backing field for <see cref="Top" /> property.</summary>
        private int _top;

        /// <summary>Maximum number of records to returned, paginated for top greater than 1000</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Maximum number of records to returned, paginated for top greater than 1000")]
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Maximum number of records to returned, paginated for top greater than 1000",
        SerializedName = @"$top",
        PossibleTypes = new [] { typeof(int) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category(global::Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.ParameterCategory.Query)]
        public int Top { get => this._top; set => this._top = value; }

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20180701Preview.IQueryFailure">Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20180701Preview.IQueryFailure</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20180701Preview.IQueryFailure> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IPolicyStatesQueryResults">Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IPolicyStatesQueryResults</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IPolicyStatesQueryResults> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {

        }

        /// <summary>
        /// Intializes a new instance of the <see cref="GetAzPolicyInsightsPolicyStateQueryResult_List1" /> cmdlet class.
        /// </summary>
        public GetAzPolicyInsightsPolicyStateQueryResult_List1()
        {

        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Events.Information:
                    {
                        var data = messageData();
                        WriteInformation(data.Message, new string[]{});
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Module.Instance.Signal(id, token, messageData, (i,t,m) => ((Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.IEventListener)this).Signal(i,t,()=> Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.EventDataConverter.ConvertFrom( m() ) as Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.EventData ), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'PolicyStatesListQueryResultsForSubscription' operation"))
                {
                    using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.IEventListener)this).Token) )
                    {
                        asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.IEventListener)this).Token);
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    foreach( var SubscriptionId in this.SubscriptionId )
                    {
                        await ((Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                        await this.Client.PolicyStatesListQueryResultsForSubscription(PolicyStatesResource, SubscriptionId, this.InvocationInformation.BoundParameters.ContainsKey("Top") ? Top : default(int?), this.InvocationInformation.BoundParameters.ContainsKey("OrderBy") ? OrderBy : null, this.InvocationInformation.BoundParameters.ContainsKey("Select") ? Select : null, this.InvocationInformation.BoundParameters.ContainsKey("From") ? From : default(global::System.DateTime?), this.InvocationInformation.BoundParameters.ContainsKey("To") ? To : default(global::System.DateTime?), this.InvocationInformation.BoundParameters.ContainsKey("Filter") ? Filter : null, this.InvocationInformation.BoundParameters.ContainsKey("Apply") ? Apply : null, this.InvocationInformation.BoundParameters.ContainsKey("SkipToken") ? SkipToken : null, onOk, onDefault, this, Pipeline);
                        await ((Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  PolicyStatesResource=PolicyStatesResource,SubscriptionId=SubscriptionId,Top=this.InvocationInformation.BoundParameters.ContainsKey("Top") ? Top : default(int?),OrderBy=this.InvocationInformation.BoundParameters.ContainsKey("OrderBy") ? OrderBy : null,Select=this.InvocationInformation.BoundParameters.ContainsKey("Select") ? Select : null,From=this.InvocationInformation.BoundParameters.ContainsKey("From") ? From : default(global::System.DateTime?),To=this.InvocationInformation.BoundParameters.ContainsKey("To") ? To : default(global::System.DateTime?),Filter=this.InvocationInformation.BoundParameters.ContainsKey("Filter") ? Filter : null,Apply=this.InvocationInformation.BoundParameters.ContainsKey("Apply") ? Apply : null,SkipToken=this.InvocationInformation.BoundParameters.ContainsKey("SkipToken") ? SkipToken : null})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20180701Preview.IQueryFailure">Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20180701Preview.IQueryFailure</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20180701Preview.IQueryFailure> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.Message;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20180701Preview.IQueryFailure>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new { PolicyStatesResource=PolicyStatesResource, SubscriptionId=SubscriptionId, Top=this.InvocationInformation.BoundParameters.ContainsKey("Top") ? Top : default(int?), OrderBy=this.InvocationInformation.BoundParameters.ContainsKey("OrderBy") ? OrderBy : null, Select=this.InvocationInformation.BoundParameters.ContainsKey("Select") ? Select : null, From=this.InvocationInformation.BoundParameters.ContainsKey("From") ? From : default(global::System.DateTime?), To=this.InvocationInformation.BoundParameters.ContainsKey("To") ? To : default(global::System.DateTime?), Filter=this.InvocationInformation.BoundParameters.ContainsKey("Filter") ? Filter : null, Apply=this.InvocationInformation.BoundParameters.ContainsKey("Apply") ? Apply : null, SkipToken=this.InvocationInformation.BoundParameters.ContainsKey("SkipToken") ? SkipToken : null })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { PolicyStatesResource=PolicyStatesResource, SubscriptionId=SubscriptionId, Top=this.InvocationInformation.BoundParameters.ContainsKey("Top") ? Top : default(int?), OrderBy=this.InvocationInformation.BoundParameters.ContainsKey("OrderBy") ? OrderBy : null, Select=this.InvocationInformation.BoundParameters.ContainsKey("Select") ? Select : null, From=this.InvocationInformation.BoundParameters.ContainsKey("From") ? From : default(global::System.DateTime?), To=this.InvocationInformation.BoundParameters.ContainsKey("To") ? To : default(global::System.DateTime?), Filter=this.InvocationInformation.BoundParameters.ContainsKey("Filter") ? Filter : null, Apply=this.InvocationInformation.BoundParameters.ContainsKey("Apply") ? Apply : null, SkipToken=this.InvocationInformation.BoundParameters.ContainsKey("SkipToken") ? SkipToken : null })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IPolicyStatesQueryResults">Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IPolicyStatesQueryResults</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IPolicyStatesQueryResults> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // response should be returning an array of some kind. +Pageable
                // pageable / value / @odata.nextLink
                var result = await response;
                WriteObject(result.Value,true);
                _nextLink = result.OdataNextLink;
                if (_isFirst)
                {
                    _isFirst = false;
                    while (_nextLink != null)
                    {
                        if (responseMessage.RequestMessage is System.Net.Http.HttpRequestMessage requestMessage )
                        {
                            requestMessage = requestMessage.Clone(new global::System.Uri( _nextLink ),Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Method.Get );
                            await ((Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.Events.FollowingNextLink); if( ((Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                            await this.Client.PolicyStatesListQueryResultsForSubscription_Call(requestMessage, onOk, onDefault, this, Pipeline);
                        }
                    }
                }
            }
        }
    }
}