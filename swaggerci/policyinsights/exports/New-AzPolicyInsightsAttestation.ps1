
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Creates or updates an attestation at resource group scope.
.Description
Creates or updates an attestation at resource group scope.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api202101.IAttestation
.Inputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.IPolicyInsightsIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api202101.IAttestation
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

EVIDENCE <IAttestationEvidence[]>: The evidence supporting the compliance state set in this attestation.
  [Description <String>]: The description for this piece of evidence.
  [SourceUri <String>]: The URI location of the evidence.

INPUTOBJECT <IPolicyInsightsIdentity>: Identity Parameter
  [AttestationName <String>]: The name of the attestation.
  [AuthorizationNamespace <String>]: The namespace for Microsoft Authorization resource provider; only "Microsoft.Authorization" is allowed.
  [Id <String>]: Resource identity path
  [ManagementGroupId <String>]: Management group ID.
  [ManagementGroupName <String>]: Management group name.
  [ManagementGroupsNamespace <ManagementGroupsNamespaceType?>]: The namespace for Microsoft Management RP; only "Microsoft.Management" is allowed.
  [PolicyAssignmentName <String>]: Policy assignment name.
  [PolicyDefinitionName <String>]: Policy definition name.
  [PolicyEventsResource <String>]: The name of the virtual resource under PolicyEvents resource type; only "default" is allowed.
  [PolicySetDefinitionName <String>]: Policy set definition name.
  [PolicyStatesResource <PolicyStatesResource?>]: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
  [PolicyStatesSummaryResource <String>]: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
  [PolicyTrackedResourcesResource <PolicyTrackedResourcesResourceType?>]: The name of the virtual resource under PolicyTrackedResources resource type; only "default" is allowed.
  [RemediationName <String>]: The name of the remediation.
  [ResourceGroupName <String>]: Resource group name.
  [ResourceId <String>]: Resource ID.
  [ResourceName <String>]: The name of the policy metadata resource.
  [SubscriptionId <String>]: Microsoft Azure subscription ID.

PARAMETER <IAttestation>: An attestation resource.
  PolicyAssignmentId <String>: The resource ID of the policy assignment that the attestation is setting the state for.
  [Comment <String>]: Comments describing why this attestation was created.
  [ComplianceState <ComplianceState?>]: The compliance state that should be set on the resource.
  [Evidence <IAttestationEvidence[]>]: The evidence supporting the compliance state set in this attestation.
    [Description <String>]: The description for this piece of evidence.
    [SourceUri <String>]: The URI location of the evidence.
  [ExpiresOn <DateTime?>]: The time the compliance state should expire.
  [Owner <String>]: The person responsible for setting the state of the resource. This value is typically an Azure Active Directory object ID.
  [PolicyDefinitionReferenceId <String>]: The policy definition reference ID from a policy set definition that the attestation is setting the state for. If the policy assignment assigns a policy set definition the attestation can choose a definition within the set definition with this property or omit this and set the state for the entire set definition.
  [SystemDataCreatedAt <DateTime?>]: The timestamp of resource creation (UTC).
  [SystemDataCreatedBy <String>]: The identity that created the resource.
  [SystemDataCreatedByType <CreatedByType?>]: The type of identity that created the resource.
  [SystemDataLastModifiedAt <DateTime?>]: The timestamp of resource last modification (UTC)
  [SystemDataLastModifiedBy <String>]: The identity that last modified the resource.
  [SystemDataLastModifiedByType <CreatedByType?>]: The type of identity that last modified the resource.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.policyinsights/new-azpolicyinsightsattestation
#>
function New-AzPolicyInsightsAttestation {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api202101.IAttestation])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Create1', Mandatory)]
    [Parameter(ParameterSetName='Create2', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded1', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded2', Mandatory)]
    [Alias('AttestationName')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # The name of the attestation.
    ${Name},

    [Parameter(ParameterSetName='Create1', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded1', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='Create1')]
    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateExpanded1')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # Microsoft Azure subscription ID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='Create2', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded2', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Resource ID.
    ${ResourceId},

    [Parameter(ParameterSetName='CreateViaIdentity1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentity2', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded2', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.IPolicyInsightsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Create1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='Create2', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentity1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentity2', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api202101.IAttestation]
    # An attestation resource.
    # To construct, see NOTES section for PARAMETER properties and create a hash table.
    ${Parameter},

    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded1', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded2', Mandatory)]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1', Mandatory)]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded2', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Body')]
    [System.String]
    # The resource ID of the policy assignment that the attestation is setting the state for.
    ${PolicyAssignmentId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateExpanded1')]
    [Parameter(ParameterSetName='CreateExpanded2')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded2')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Body')]
    [System.String]
    # Comments describing why this attestation was created.
    ${Comment},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateExpanded1')]
    [Parameter(ParameterSetName='CreateExpanded2')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded2')]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Support.ComplianceState])]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Support.ComplianceState]
    # The compliance state that should be set on the resource.
    ${ComplianceState},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateExpanded1')]
    [Parameter(ParameterSetName='CreateExpanded2')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded2')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api202101.IAttestationEvidence[]]
    # The evidence supporting the compliance state set in this attestation.
    # To construct, see NOTES section for EVIDENCE properties and create a hash table.
    ${Evidence},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateExpanded1')]
    [Parameter(ParameterSetName='CreateExpanded2')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded2')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Body')]
    [System.DateTime]
    # The time the compliance state should expire.
    ${ExpiresOn},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateExpanded1')]
    [Parameter(ParameterSetName='CreateExpanded2')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded2')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Body')]
    [System.String]
    # The person responsible for setting the state of the resource.
    # This value is typically an Azure Active Directory object ID.
    ${Owner},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateExpanded1')]
    [Parameter(ParameterSetName='CreateExpanded2')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded2')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Body')]
    [System.String]
    # The policy definition reference ID from a policy set definition that the attestation is setting the state for.
    # If the policy assignment assigns a policy set definition the attestation can choose a definition within the set definition with this property or omit this and set the state for the entire set definition.
    ${PolicyDefinitionReferenceId},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Create1 = 'Az.PolicyInsights.private\New-AzPolicyInsightsAttestation_Create1';
            Create2 = 'Az.PolicyInsights.private\New-AzPolicyInsightsAttestation_Create2';
            CreateExpanded = 'Az.PolicyInsights.private\New-AzPolicyInsightsAttestation_CreateExpanded';
            CreateExpanded1 = 'Az.PolicyInsights.private\New-AzPolicyInsightsAttestation_CreateExpanded1';
            CreateExpanded2 = 'Az.PolicyInsights.private\New-AzPolicyInsightsAttestation_CreateExpanded2';
            CreateViaIdentity1 = 'Az.PolicyInsights.private\New-AzPolicyInsightsAttestation_CreateViaIdentity1';
            CreateViaIdentity2 = 'Az.PolicyInsights.private\New-AzPolicyInsightsAttestation_CreateViaIdentity2';
            CreateViaIdentityExpanded1 = 'Az.PolicyInsights.private\New-AzPolicyInsightsAttestation_CreateViaIdentityExpanded1';
            CreateViaIdentityExpanded2 = 'Az.PolicyInsights.private\New-AzPolicyInsightsAttestation_CreateViaIdentityExpanded2';
        }
        if (('Create1', 'CreateExpanded', 'CreateExpanded1') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
