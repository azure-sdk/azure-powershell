
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Gets an existing attestation at subscription scope.
.Description
Gets an existing attestation at subscription scope.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.IPolicyInsightsIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api202101.IAttestation
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IPolicyInsightsIdentity>: Identity Parameter
  [AttestationName <String>]: The name of the attestation.
  [AuthorizationNamespace <String>]: The namespace for Microsoft Authorization resource provider; only "Microsoft.Authorization" is allowed.
  [Id <String>]: Resource identity path
  [ManagementGroupId <String>]: Management group ID.
  [ManagementGroupName <String>]: Management group name.
  [ManagementGroupsNamespace <ManagementGroupsNamespaceType?>]: The namespace for Microsoft Management RP; only "Microsoft.Management" is allowed.
  [PolicyAssignmentName <String>]: Policy assignment name.
  [PolicyDefinitionName <String>]: Policy definition name.
  [PolicyEventsResource <String>]: The name of the virtual resource under PolicyEvents resource type; only "default" is allowed.
  [PolicySetDefinitionName <String>]: Policy set definition name.
  [PolicyStatesResource <PolicyStatesResource?>]: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
  [PolicyStatesSummaryResource <String>]: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
  [PolicyTrackedResourcesResource <PolicyTrackedResourcesResourceType?>]: The name of the virtual resource under PolicyTrackedResources resource type; only "default" is allowed.
  [RemediationName <String>]: The name of the remediation.
  [ResourceGroupName <String>]: Resource group name.
  [ResourceId <String>]: Resource ID.
  [ResourceName <String>]: The name of the policy metadata resource.
  [SubscriptionId <String>]: Microsoft Azure subscription ID.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.policyinsights/get-azpolicyinsightsattestation
#>
function Get-AzPolicyInsightsAttestation {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api202101.IAttestation])]
[CmdletBinding(DefaultParameterSetName='List', PositionalBinding=$false)]
param(
    [Parameter(ParameterSetName='Get', Mandatory)]
    [Parameter(ParameterSetName='Get1', Mandatory)]
    [Parameter(ParameterSetName='Get2', Mandatory)]
    [Alias('AttestationName')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # The name of the attestation.
    ${Name},

    [Parameter(ParameterSetName='Get')]
    [Parameter(ParameterSetName='Get1')]
    [Parameter(ParameterSetName='List')]
    [Parameter(ParameterSetName='List1')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String[]]
    # Microsoft Azure subscription ID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='Get1', Mandatory)]
    [Parameter(ParameterSetName='List1', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='Get2', Mandatory)]
    [Parameter(ParameterSetName='List2', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Resource ID.
    ${ResourceId},

    [Parameter(ParameterSetName='GetViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='GetViaIdentity1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='GetViaIdentity2', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.IPolicyInsightsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='List')]
    [Parameter(ParameterSetName='List1')]
    [Parameter(ParameterSetName='List2')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.String]
    # OData filter expression.
    ${Filter},

    [Parameter(ParameterSetName='List')]
    [Parameter(ParameterSetName='List1')]
    [Parameter(ParameterSetName='List2')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.Int32]
    # Maximum number of records to return.
    ${Top},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Get = 'Az.PolicyInsights.private\Get-AzPolicyInsightsAttestation_Get';
            Get1 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsAttestation_Get1';
            Get2 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsAttestation_Get2';
            GetViaIdentity = 'Az.PolicyInsights.private\Get-AzPolicyInsightsAttestation_GetViaIdentity';
            GetViaIdentity1 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsAttestation_GetViaIdentity1';
            GetViaIdentity2 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsAttestation_GetViaIdentity2';
            List = 'Az.PolicyInsights.private\Get-AzPolicyInsightsAttestation_List';
            List1 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsAttestation_List1';
            List2 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsAttestation_List2';
        }
        if (('Get', 'Get1', 'List', 'List1') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}

<#
.Synopsis
Queries policy events for the resources under the management group.
.Description
Queries policy events for the resources under the management group.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IPolicyEvent
.Link
https://docs.microsoft.com/en-us/powershell/module/az.policyinsights/get-azpolicyinsightspolicyeventqueryresult
#>
function Get-AzPolicyInsightsPolicyEventQueryResult {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IPolicyEvent])]
[CmdletBinding(DefaultParameterSetName='List1', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='List', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Management group name.
    ${ManagementGroupName},

    [Parameter(ParameterSetName='List1')]
    [Parameter(ParameterSetName='List2')]
    [Parameter(ParameterSetName='List4')]
    [Parameter(ParameterSetName='List5')]
    [Parameter(ParameterSetName='List6')]
    [Parameter(ParameterSetName='List7')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String[]]
    # Microsoft Azure subscription ID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='List2', Mandatory)]
    [Parameter(ParameterSetName='List7', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Resource group name.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='List3', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Resource ID.
    ${ResourceId},

    [Parameter(ParameterSetName='List4', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Policy set definition name.
    ${PolicySetDefinitionName},

    [Parameter(ParameterSetName='List5', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Policy definition name.
    ${PolicyDefinitionName},

    [Parameter(ParameterSetName='List6', Mandatory)]
    [Parameter(ParameterSetName='List7', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Policy assignment name.
    ${PolicyAssignmentName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.String]
    # OData apply expression for aggregations.
    ${Apply},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.String]
    # OData filter expression.
    ${Filter},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.DateTime]
    # ISO 8601 formatted timestamp specifying the start time of the interval to query.
    # When not specified, the service uses ($to - 1-day).
    ${From},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.String]
    # Ordering expression using OData notation.
    # One or more comma-separated column names with an optional "desc" (the default) or "asc", e.g.
    # "$orderby=PolicyAssignmentId, ResourceId asc".
    ${OrderBy},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.String]
    # Select expression using OData notation.
    # Limits the columns on each record to just those requested, e.g.
    # "$select=PolicyAssignmentId, ResourceId".
    ${Select},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.String]
    # Skiptoken is only provided if a previous response returned a partial result as a part of nextLink element.
    ${SkipToken},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.DateTime]
    # ISO 8601 formatted timestamp specifying the end time of the interval to query.
    # When not specified, the service uses request time.
    ${To},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.Int32]
    # Maximum number of records to return, paginated for top greater than 1000
    ${Top},

    [Parameter(ParameterSetName='List3')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.String]
    # The $expand query parameter.
    # For example, to expand components use $expand=components
    ${Expand},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            List = 'Az.PolicyInsights.private\Get-AzPolicyInsightsPolicyEventQueryResult_List';
            List1 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsPolicyEventQueryResult_List1';
            List2 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsPolicyEventQueryResult_List2';
            List3 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsPolicyEventQueryResult_List3';
            List4 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsPolicyEventQueryResult_List4';
            List5 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsPolicyEventQueryResult_List5';
            List6 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsPolicyEventQueryResult_List6';
            List7 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsPolicyEventQueryResult_List7';
        }
        if (('List1', 'List2', 'List4', 'List5', 'List6', 'List7') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}

<#
.Synopsis
Get policy metadata resource.
.Description
Get policy metadata resource.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.IPolicyInsightsIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20191001.IPolicyMetadata
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IPolicyInsightsIdentity>: Identity Parameter
  [AttestationName <String>]: The name of the attestation.
  [AuthorizationNamespace <String>]: The namespace for Microsoft Authorization resource provider; only "Microsoft.Authorization" is allowed.
  [Id <String>]: Resource identity path
  [ManagementGroupId <String>]: Management group ID.
  [ManagementGroupName <String>]: Management group name.
  [ManagementGroupsNamespace <ManagementGroupsNamespaceType?>]: The namespace for Microsoft Management RP; only "Microsoft.Management" is allowed.
  [PolicyAssignmentName <String>]: Policy assignment name.
  [PolicyDefinitionName <String>]: Policy definition name.
  [PolicyEventsResource <String>]: The name of the virtual resource under PolicyEvents resource type; only "default" is allowed.
  [PolicySetDefinitionName <String>]: Policy set definition name.
  [PolicyStatesResource <PolicyStatesResource?>]: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
  [PolicyStatesSummaryResource <String>]: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
  [PolicyTrackedResourcesResource <PolicyTrackedResourcesResourceType?>]: The name of the virtual resource under PolicyTrackedResources resource type; only "default" is allowed.
  [RemediationName <String>]: The name of the remediation.
  [ResourceGroupName <String>]: Resource group name.
  [ResourceId <String>]: Resource ID.
  [ResourceName <String>]: The name of the policy metadata resource.
  [SubscriptionId <String>]: Microsoft Azure subscription ID.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.policyinsights/get-azpolicyinsightspolicymetadataresource
#>
function Get-AzPolicyInsightsPolicyMetadataResource {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20191001.IPolicyMetadata])]
[CmdletBinding(DefaultParameterSetName='Get', PositionalBinding=$false)]
param(
    [Parameter(ParameterSetName='Get', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # The name of the policy metadata resource.
    ${ResourceName},

    [Parameter(ParameterSetName='GetViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.IPolicyInsightsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Get = 'Az.PolicyInsights.private\Get-AzPolicyInsightsPolicyMetadataResource_Get';
            GetViaIdentity = 'Az.PolicyInsights.private\Get-AzPolicyInsightsPolicyMetadataResource_GetViaIdentity';
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}

<#
.Synopsis
Get a list of the policy metadata resources.
.Description
Get a list of the policy metadata resources.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20191001.ISlimPolicyMetadata
.Link
https://docs.microsoft.com/en-us/powershell/module/az.policyinsights/get-azpolicyinsightspolicymetadata
#>
function Get-AzPolicyInsightsPolicyMetadata {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20191001.ISlimPolicyMetadata])]
[CmdletBinding(DefaultParameterSetName='List', PositionalBinding=$false)]
param(
    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.Int32]
    # Maximum number of records to return.
    ${Top},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            List = 'Az.PolicyInsights.private\Get-AzPolicyInsightsPolicyMetadata_List';
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}

<#
.Synopsis
Queries policy states for the resources under the management group.
.Description
Queries policy states for the resources under the management group.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IPolicyState
.Link
https://docs.microsoft.com/en-us/powershell/module/az.policyinsights/get-azpolicyinsightspolicystatequeryresult
#>
function Get-AzPolicyInsightsPolicyStateQueryResult {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IPolicyState])]
[CmdletBinding(DefaultParameterSetName='List1', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Support.PolicyStatesResource])]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Support.PolicyStatesResource]
    # The virtual resource under PolicyStates resource type.
    # In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
    ${PolicyStatesResource},

    [Parameter(ParameterSetName='List', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Management group name.
    ${ManagementGroupName},

    [Parameter(ParameterSetName='List1')]
    [Parameter(ParameterSetName='List2')]
    [Parameter(ParameterSetName='List4')]
    [Parameter(ParameterSetName='List5')]
    [Parameter(ParameterSetName='List6')]
    [Parameter(ParameterSetName='List7')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String[]]
    # Microsoft Azure subscription ID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='List2', Mandatory)]
    [Parameter(ParameterSetName='List7', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Resource group name.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='List3', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Resource ID.
    ${ResourceId},

    [Parameter(ParameterSetName='List4', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Policy set definition name.
    ${PolicySetDefinitionName},

    [Parameter(ParameterSetName='List5', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Policy definition name.
    ${PolicyDefinitionName},

    [Parameter(ParameterSetName='List6', Mandatory)]
    [Parameter(ParameterSetName='List7', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Policy assignment name.
    ${PolicyAssignmentName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.String]
    # OData apply expression for aggregations.
    ${Apply},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.String]
    # OData filter expression.
    ${Filter},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.DateTime]
    # ISO 8601 formatted timestamp specifying the start time of the interval to query.
    # When not specified, the service uses ($to - 1-day).
    ${From},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.String]
    # Ordering expression using OData notation.
    # One or more comma-separated column names with an optional "desc" (the default) or "asc", e.g.
    # "$orderby=PolicyAssignmentId, ResourceId asc".
    ${OrderBy},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.String]
    # Select expression using OData notation.
    # Limits the columns on each record to just those requested, e.g.
    # "$select=PolicyAssignmentId, ResourceId".
    ${Select},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.String]
    # Skiptoken is only provided if a previous response returned a partial result as a part of nextLink element.
    ${SkipToken},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.DateTime]
    # ISO 8601 formatted timestamp specifying the end time of the interval to query.
    # When not specified, the service uses request time.
    ${To},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.Int32]
    # Maximum number of records to returned, paginated for top greater than 1000
    ${Top},

    [Parameter(ParameterSetName='List3')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.String]
    # The $expand query parameter.
    # For example, to expand components use $expand=components
    ${Expand},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            List = 'Az.PolicyInsights.private\Get-AzPolicyInsightsPolicyStateQueryResult_List';
            List1 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsPolicyStateQueryResult_List1';
            List2 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsPolicyStateQueryResult_List2';
            List3 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsPolicyStateQueryResult_List3';
            List4 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsPolicyStateQueryResult_List4';
            List5 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsPolicyStateQueryResult_List5';
            List6 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsPolicyStateQueryResult_List6';
            List7 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsPolicyStateQueryResult_List7';
        }
        if (('List1', 'List2', 'List4', 'List5', 'List6', 'List7') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}

<#
.Synopsis
Queries policy tracked resources under the management group.
.Description
Queries policy tracked resources under the management group.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20180701Preview.IPolicyTrackedResource
.Link
https://docs.microsoft.com/en-us/powershell/module/az.policyinsights/get-azpolicyinsightspolicytrackedresourcequeryresult
#>
function Get-AzPolicyInsightsPolicyTrackedResourceQueryResult {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20180701Preview.IPolicyTrackedResource])]
[CmdletBinding(DefaultParameterSetName='List1', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='List', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Management group name.
    ${ManagementGroupName},

    [Parameter(ParameterSetName='List1')]
    [Parameter(ParameterSetName='List2')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String[]]
    # Microsoft Azure subscription ID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='List2', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Resource group name.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='List3', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Resource ID.
    ${ResourceId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.String]
    # OData filter expression.
    ${Filter},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.Int32]
    # Maximum number of records to return.
    ${Top},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            List = 'Az.PolicyInsights.private\Get-AzPolicyInsightsPolicyTrackedResourceQueryResult_List';
            List1 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsPolicyTrackedResourceQueryResult_List1';
            List2 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsPolicyTrackedResourceQueryResult_List2';
            List3 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsPolicyTrackedResourceQueryResult_List3';
        }
        if (('List1', 'List2') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}

<#
.Synopsis
Gets all deployments for a remediation at management group scope.
.Description
Gets all deployments for a remediation at management group scope.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20211001.IRemediationDeployment
.Link
https://docs.microsoft.com/en-us/powershell/module/az.policyinsights/get-azpolicyinsightsremediationdeployment
#>
function Get-AzPolicyInsightsRemediationDeployment {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20211001.IRemediationDeployment])]
[CmdletBinding(DefaultParameterSetName='List1', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # The name of the remediation.
    ${RemediationName},

    [Parameter(ParameterSetName='List', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Management group ID.
    ${ManagementGroupId},

    [Parameter(ParameterSetName='List1')]
    [Parameter(ParameterSetName='List2')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String[]]
    # Microsoft Azure subscription ID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='List2', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Resource group name.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='List3', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Resource ID.
    ${ResourceId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.Int32]
    # Maximum number of records to return.
    ${Top},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            List = 'Az.PolicyInsights.private\Get-AzPolicyInsightsRemediationDeployment_List';
            List1 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsRemediationDeployment_List1';
            List2 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsRemediationDeployment_List2';
            List3 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsRemediationDeployment_List3';
        }
        if (('List1', 'List2') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}

<#
.Synopsis
Gets an existing remediation at management group scope.
.Description
Gets an existing remediation at management group scope.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.IPolicyInsightsIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20211001.IRemediation
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IPolicyInsightsIdentity>: Identity Parameter
  [AttestationName <String>]: The name of the attestation.
  [AuthorizationNamespace <String>]: The namespace for Microsoft Authorization resource provider; only "Microsoft.Authorization" is allowed.
  [Id <String>]: Resource identity path
  [ManagementGroupId <String>]: Management group ID.
  [ManagementGroupName <String>]: Management group name.
  [ManagementGroupsNamespace <ManagementGroupsNamespaceType?>]: The namespace for Microsoft Management RP; only "Microsoft.Management" is allowed.
  [PolicyAssignmentName <String>]: Policy assignment name.
  [PolicyDefinitionName <String>]: Policy definition name.
  [PolicyEventsResource <String>]: The name of the virtual resource under PolicyEvents resource type; only "default" is allowed.
  [PolicySetDefinitionName <String>]: Policy set definition name.
  [PolicyStatesResource <PolicyStatesResource?>]: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
  [PolicyStatesSummaryResource <String>]: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
  [PolicyTrackedResourcesResource <PolicyTrackedResourcesResourceType?>]: The name of the virtual resource under PolicyTrackedResources resource type; only "default" is allowed.
  [RemediationName <String>]: The name of the remediation.
  [ResourceGroupName <String>]: Resource group name.
  [ResourceId <String>]: Resource ID.
  [ResourceName <String>]: The name of the policy metadata resource.
  [SubscriptionId <String>]: Microsoft Azure subscription ID.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.policyinsights/get-azpolicyinsightsremediation
#>
function Get-AzPolicyInsightsRemediation {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20211001.IRemediation])]
[CmdletBinding(DefaultParameterSetName='List1', PositionalBinding=$false)]
param(
    [Parameter(ParameterSetName='Get', Mandatory)]
    [Parameter(ParameterSetName='List', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Management group ID.
    ${ManagementGroupId},

    [Parameter(ParameterSetName='Get', Mandatory)]
    [Parameter(ParameterSetName='Get1', Mandatory)]
    [Parameter(ParameterSetName='Get2', Mandatory)]
    [Parameter(ParameterSetName='Get3', Mandatory)]
    [Alias('RemediationName')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # The name of the remediation.
    ${Name},

    [Parameter(ParameterSetName='Get1')]
    [Parameter(ParameterSetName='Get2')]
    [Parameter(ParameterSetName='List1')]
    [Parameter(ParameterSetName='List2')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String[]]
    # Microsoft Azure subscription ID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='Get2', Mandatory)]
    [Parameter(ParameterSetName='List2', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Resource group name.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='Get3', Mandatory)]
    [Parameter(ParameterSetName='List3', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Resource ID.
    ${ResourceId},

    [Parameter(ParameterSetName='GetViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='GetViaIdentity1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='GetViaIdentity2', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='GetViaIdentity3', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.IPolicyInsightsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='List')]
    [Parameter(ParameterSetName='List1')]
    [Parameter(ParameterSetName='List2')]
    [Parameter(ParameterSetName='List3')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.String]
    # OData filter expression.
    ${Filter},

    [Parameter(ParameterSetName='List')]
    [Parameter(ParameterSetName='List1')]
    [Parameter(ParameterSetName='List2')]
    [Parameter(ParameterSetName='List3')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.Int32]
    # Maximum number of records to return.
    ${Top},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Get = 'Az.PolicyInsights.private\Get-AzPolicyInsightsRemediation_Get';
            Get1 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsRemediation_Get1';
            Get2 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsRemediation_Get2';
            Get3 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsRemediation_Get3';
            GetViaIdentity = 'Az.PolicyInsights.private\Get-AzPolicyInsightsRemediation_GetViaIdentity';
            GetViaIdentity1 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsRemediation_GetViaIdentity1';
            GetViaIdentity2 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsRemediation_GetViaIdentity2';
            GetViaIdentity3 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsRemediation_GetViaIdentity3';
            List = 'Az.PolicyInsights.private\Get-AzPolicyInsightsRemediation_List';
            List1 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsRemediation_List1';
            List2 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsRemediation_List2';
            List3 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsRemediation_List3';
        }
        if (('Get1', 'Get2', 'List1', 'List2') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}

<#
.Synopsis
Summarizes policy states for the resources under the management group.
.Description
Summarizes policy states for the resources under the management group.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.IPolicyInsightsIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.ISummarizeResults
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IPolicyInsightsIdentity>: Identity Parameter
  [AttestationName <String>]: The name of the attestation.
  [AuthorizationNamespace <String>]: The namespace for Microsoft Authorization resource provider; only "Microsoft.Authorization" is allowed.
  [Id <String>]: Resource identity path
  [ManagementGroupId <String>]: Management group ID.
  [ManagementGroupName <String>]: Management group name.
  [ManagementGroupsNamespace <ManagementGroupsNamespaceType?>]: The namespace for Microsoft Management RP; only "Microsoft.Management" is allowed.
  [PolicyAssignmentName <String>]: Policy assignment name.
  [PolicyDefinitionName <String>]: Policy definition name.
  [PolicyEventsResource <String>]: The name of the virtual resource under PolicyEvents resource type; only "default" is allowed.
  [PolicySetDefinitionName <String>]: Policy set definition name.
  [PolicyStatesResource <PolicyStatesResource?>]: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
  [PolicyStatesSummaryResource <String>]: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
  [PolicyTrackedResourcesResource <PolicyTrackedResourcesResourceType?>]: The name of the virtual resource under PolicyTrackedResources resource type; only "default" is allowed.
  [RemediationName <String>]: The name of the remediation.
  [ResourceGroupName <String>]: Resource group name.
  [ResourceId <String>]: Resource ID.
  [ResourceName <String>]: The name of the policy metadata resource.
  [SubscriptionId <String>]: Microsoft Azure subscription ID.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.policyinsights/invoke-azpolicyinsightssummarizepolicystate
#>
function Invoke-AzPolicyInsightsSummarizePolicyState {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.ISummarizeResults])]
[CmdletBinding(DefaultParameterSetName='Summarize1', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Summarize', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Management group name.
    ${ManagementGroupName},

    [Parameter(ParameterSetName='Summarize1')]
    [Parameter(ParameterSetName='Summarize2')]
    [Parameter(ParameterSetName='Summarize4')]
    [Parameter(ParameterSetName='Summarize5')]
    [Parameter(ParameterSetName='Summarize6')]
    [Parameter(ParameterSetName='Summarize7')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # Microsoft Azure subscription ID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='Summarize2', Mandatory)]
    [Parameter(ParameterSetName='Summarize7', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Resource group name.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='Summarize3', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Resource ID.
    ${ResourceId},

    [Parameter(ParameterSetName='Summarize4', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Policy set definition name.
    ${PolicySetDefinitionName},

    [Parameter(ParameterSetName='Summarize5', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Policy definition name.
    ${PolicyDefinitionName},

    [Parameter(ParameterSetName='Summarize6', Mandatory)]
    [Parameter(ParameterSetName='Summarize7', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Policy assignment name.
    ${PolicyAssignmentName},

    [Parameter(ParameterSetName='SummarizeViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='SummarizeViaIdentity1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='SummarizeViaIdentity2', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='SummarizeViaIdentity3', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='SummarizeViaIdentity4', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='SummarizeViaIdentity5', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='SummarizeViaIdentity6', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='SummarizeViaIdentity7', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.IPolicyInsightsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.String]
    # OData filter expression.
    ${Filter},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.DateTime]
    # ISO 8601 formatted timestamp specifying the start time of the interval to query.
    # When not specified, the service uses ($to - 1-day).
    ${From},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.DateTime]
    # ISO 8601 formatted timestamp specifying the end time of the interval to query.
    # When not specified, the service uses request time.
    ${To},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.Int32]
    # Maximum number of records to returned, paginated for top greater than 1000
    ${Top},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Summarize = 'Az.PolicyInsights.private\Invoke-AzPolicyInsightsSummarizePolicyState_Summarize';
            Summarize1 = 'Az.PolicyInsights.private\Invoke-AzPolicyInsightsSummarizePolicyState_Summarize1';
            Summarize2 = 'Az.PolicyInsights.private\Invoke-AzPolicyInsightsSummarizePolicyState_Summarize2';
            Summarize3 = 'Az.PolicyInsights.private\Invoke-AzPolicyInsightsSummarizePolicyState_Summarize3';
            Summarize4 = 'Az.PolicyInsights.private\Invoke-AzPolicyInsightsSummarizePolicyState_Summarize4';
            Summarize5 = 'Az.PolicyInsights.private\Invoke-AzPolicyInsightsSummarizePolicyState_Summarize5';
            Summarize6 = 'Az.PolicyInsights.private\Invoke-AzPolicyInsightsSummarizePolicyState_Summarize6';
            Summarize7 = 'Az.PolicyInsights.private\Invoke-AzPolicyInsightsSummarizePolicyState_Summarize7';
            SummarizeViaIdentity = 'Az.PolicyInsights.private\Invoke-AzPolicyInsightsSummarizePolicyState_SummarizeViaIdentity';
            SummarizeViaIdentity1 = 'Az.PolicyInsights.private\Invoke-AzPolicyInsightsSummarizePolicyState_SummarizeViaIdentity1';
            SummarizeViaIdentity2 = 'Az.PolicyInsights.private\Invoke-AzPolicyInsightsSummarizePolicyState_SummarizeViaIdentity2';
            SummarizeViaIdentity3 = 'Az.PolicyInsights.private\Invoke-AzPolicyInsightsSummarizePolicyState_SummarizeViaIdentity3';
            SummarizeViaIdentity4 = 'Az.PolicyInsights.private\Invoke-AzPolicyInsightsSummarizePolicyState_SummarizeViaIdentity4';
            SummarizeViaIdentity5 = 'Az.PolicyInsights.private\Invoke-AzPolicyInsightsSummarizePolicyState_SummarizeViaIdentity5';
            SummarizeViaIdentity6 = 'Az.PolicyInsights.private\Invoke-AzPolicyInsightsSummarizePolicyState_SummarizeViaIdentity6';
            SummarizeViaIdentity7 = 'Az.PolicyInsights.private\Invoke-AzPolicyInsightsSummarizePolicyState_SummarizeViaIdentity7';
        }
        if (('Summarize1', 'Summarize2', 'Summarize4', 'Summarize5', 'Summarize6', 'Summarize7') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}

<#
.Synopsis
Creates or updates an attestation at resource group scope.
.Description
Creates or updates an attestation at resource group scope.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api202101.IAttestation
.Inputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.IPolicyInsightsIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api202101.IAttestation
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

EVIDENCE <IAttestationEvidence[]>: The evidence supporting the compliance state set in this attestation.
  [Description <String>]: The description for this piece of evidence.
  [SourceUri <String>]: The URI location of the evidence.

INPUTOBJECT <IPolicyInsightsIdentity>: Identity Parameter
  [AttestationName <String>]: The name of the attestation.
  [AuthorizationNamespace <String>]: The namespace for Microsoft Authorization resource provider; only "Microsoft.Authorization" is allowed.
  [Id <String>]: Resource identity path
  [ManagementGroupId <String>]: Management group ID.
  [ManagementGroupName <String>]: Management group name.
  [ManagementGroupsNamespace <ManagementGroupsNamespaceType?>]: The namespace for Microsoft Management RP; only "Microsoft.Management" is allowed.
  [PolicyAssignmentName <String>]: Policy assignment name.
  [PolicyDefinitionName <String>]: Policy definition name.
  [PolicyEventsResource <String>]: The name of the virtual resource under PolicyEvents resource type; only "default" is allowed.
  [PolicySetDefinitionName <String>]: Policy set definition name.
  [PolicyStatesResource <PolicyStatesResource?>]: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
  [PolicyStatesSummaryResource <String>]: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
  [PolicyTrackedResourcesResource <PolicyTrackedResourcesResourceType?>]: The name of the virtual resource under PolicyTrackedResources resource type; only "default" is allowed.
  [RemediationName <String>]: The name of the remediation.
  [ResourceGroupName <String>]: Resource group name.
  [ResourceId <String>]: Resource ID.
  [ResourceName <String>]: The name of the policy metadata resource.
  [SubscriptionId <String>]: Microsoft Azure subscription ID.

PARAMETER <IAttestation>: An attestation resource.
  PolicyAssignmentId <String>: The resource ID of the policy assignment that the attestation is setting the state for.
  [Comment <String>]: Comments describing why this attestation was created.
  [ComplianceState <ComplianceState?>]: The compliance state that should be set on the resource.
  [Evidence <IAttestationEvidence[]>]: The evidence supporting the compliance state set in this attestation.
    [Description <String>]: The description for this piece of evidence.
    [SourceUri <String>]: The URI location of the evidence.
  [ExpiresOn <DateTime?>]: The time the compliance state should expire.
  [Owner <String>]: The person responsible for setting the state of the resource. This value is typically an Azure Active Directory object ID.
  [PolicyDefinitionReferenceId <String>]: The policy definition reference ID from a policy set definition that the attestation is setting the state for. If the policy assignment assigns a policy set definition the attestation can choose a definition within the set definition with this property or omit this and set the state for the entire set definition.
  [SystemDataCreatedAt <DateTime?>]: The timestamp of resource creation (UTC).
  [SystemDataCreatedBy <String>]: The identity that created the resource.
  [SystemDataCreatedByType <CreatedByType?>]: The type of identity that created the resource.
  [SystemDataLastModifiedAt <DateTime?>]: The timestamp of resource last modification (UTC)
  [SystemDataLastModifiedBy <String>]: The identity that last modified the resource.
  [SystemDataLastModifiedByType <CreatedByType?>]: The type of identity that last modified the resource.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.policyinsights/new-azpolicyinsightsattestation
#>
function New-AzPolicyInsightsAttestation {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api202101.IAttestation])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Create1', Mandatory)]
    [Parameter(ParameterSetName='Create2', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded1', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded2', Mandatory)]
    [Alias('AttestationName')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # The name of the attestation.
    ${Name},

    [Parameter(ParameterSetName='Create1', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded1', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='Create1')]
    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateExpanded1')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # Microsoft Azure subscription ID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='Create2', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded2', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Resource ID.
    ${ResourceId},

    [Parameter(ParameterSetName='CreateViaIdentity1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentity2', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded2', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.IPolicyInsightsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Create1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='Create2', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentity1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentity2', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api202101.IAttestation]
    # An attestation resource.
    # To construct, see NOTES section for PARAMETER properties and create a hash table.
    ${Parameter},

    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded1', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded2', Mandatory)]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1', Mandatory)]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded2', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Body')]
    [System.String]
    # The resource ID of the policy assignment that the attestation is setting the state for.
    ${PolicyAssignmentId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateExpanded1')]
    [Parameter(ParameterSetName='CreateExpanded2')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded2')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Body')]
    [System.String]
    # Comments describing why this attestation was created.
    ${Comment},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateExpanded1')]
    [Parameter(ParameterSetName='CreateExpanded2')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded2')]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Support.ComplianceState])]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Support.ComplianceState]
    # The compliance state that should be set on the resource.
    ${ComplianceState},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateExpanded1')]
    [Parameter(ParameterSetName='CreateExpanded2')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded2')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api202101.IAttestationEvidence[]]
    # The evidence supporting the compliance state set in this attestation.
    # To construct, see NOTES section for EVIDENCE properties and create a hash table.
    ${Evidence},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateExpanded1')]
    [Parameter(ParameterSetName='CreateExpanded2')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded2')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Body')]
    [System.DateTime]
    # The time the compliance state should expire.
    ${ExpiresOn},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateExpanded1')]
    [Parameter(ParameterSetName='CreateExpanded2')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded2')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Body')]
    [System.String]
    # The person responsible for setting the state of the resource.
    # This value is typically an Azure Active Directory object ID.
    ${Owner},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateExpanded1')]
    [Parameter(ParameterSetName='CreateExpanded2')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded2')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Body')]
    [System.String]
    # The policy definition reference ID from a policy set definition that the attestation is setting the state for.
    # If the policy assignment assigns a policy set definition the attestation can choose a definition within the set definition with this property or omit this and set the state for the entire set definition.
    ${PolicyDefinitionReferenceId},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Create1 = 'Az.PolicyInsights.private\New-AzPolicyInsightsAttestation_Create1';
            Create2 = 'Az.PolicyInsights.private\New-AzPolicyInsightsAttestation_Create2';
            CreateExpanded = 'Az.PolicyInsights.private\New-AzPolicyInsightsAttestation_CreateExpanded';
            CreateExpanded1 = 'Az.PolicyInsights.private\New-AzPolicyInsightsAttestation_CreateExpanded1';
            CreateExpanded2 = 'Az.PolicyInsights.private\New-AzPolicyInsightsAttestation_CreateExpanded2';
            CreateViaIdentity1 = 'Az.PolicyInsights.private\New-AzPolicyInsightsAttestation_CreateViaIdentity1';
            CreateViaIdentity2 = 'Az.PolicyInsights.private\New-AzPolicyInsightsAttestation_CreateViaIdentity2';
            CreateViaIdentityExpanded1 = 'Az.PolicyInsights.private\New-AzPolicyInsightsAttestation_CreateViaIdentityExpanded1';
            CreateViaIdentityExpanded2 = 'Az.PolicyInsights.private\New-AzPolicyInsightsAttestation_CreateViaIdentityExpanded2';
        }
        if (('Create1', 'CreateExpanded', 'CreateExpanded1') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}

<#
.Synopsis
Creates or updates a remediation at subscription scope.
.Description
Creates or updates a remediation at subscription scope.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20211001.IRemediation
.Inputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.IPolicyInsightsIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20211001.IRemediation
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IPolicyInsightsIdentity>: Identity Parameter
  [AttestationName <String>]: The name of the attestation.
  [AuthorizationNamespace <String>]: The namespace for Microsoft Authorization resource provider; only "Microsoft.Authorization" is allowed.
  [Id <String>]: Resource identity path
  [ManagementGroupId <String>]: Management group ID.
  [ManagementGroupName <String>]: Management group name.
  [ManagementGroupsNamespace <ManagementGroupsNamespaceType?>]: The namespace for Microsoft Management RP; only "Microsoft.Management" is allowed.
  [PolicyAssignmentName <String>]: Policy assignment name.
  [PolicyDefinitionName <String>]: Policy definition name.
  [PolicyEventsResource <String>]: The name of the virtual resource under PolicyEvents resource type; only "default" is allowed.
  [PolicySetDefinitionName <String>]: Policy set definition name.
  [PolicyStatesResource <PolicyStatesResource?>]: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
  [PolicyStatesSummaryResource <String>]: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
  [PolicyTrackedResourcesResource <PolicyTrackedResourcesResourceType?>]: The name of the virtual resource under PolicyTrackedResources resource type; only "default" is allowed.
  [RemediationName <String>]: The name of the remediation.
  [ResourceGroupName <String>]: Resource group name.
  [ResourceId <String>]: Resource ID.
  [ResourceName <String>]: The name of the policy metadata resource.
  [SubscriptionId <String>]: Microsoft Azure subscription ID.

PARAMETER <IRemediation>: The remediation definition.
  [FailureThresholdPercentage <Single?>]: A number between 0.0 to 1.0 representing the percentage failure threshold. The remediation will fail if the percentage of failed remediation operations (i.e. failed deployments) exceeds this threshold.
  [FilterLocation <String[]>]: The resource locations that will be remediated.
  [ParallelDeployment <Int32?>]: Determines how many resources to remediate at any given time. Can be used to increase or reduce the pace of the remediation. If not provided, the default parallel deployments value is used.
  [PolicyAssignmentId <String>]: The resource ID of the policy assignment that should be remediated.
  [PolicyDefinitionReferenceId <String>]: The policy definition reference ID of the individual definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
  [ResourceCount <Int32?>]: Determines the max number of resources that can be remediated by the remediation job. If not provided, the default resource count is used.
  [ResourceDiscoveryMode <ResourceDiscoveryMode?>]: The way resources to remediate are discovered. Defaults to ExistingNonCompliant if not specified.
  [SystemDataCreatedAt <DateTime?>]: The timestamp of resource creation (UTC).
  [SystemDataCreatedBy <String>]: The identity that created the resource.
  [SystemDataCreatedByType <CreatedByType?>]: The type of identity that created the resource.
  [SystemDataLastModifiedAt <DateTime?>]: The timestamp of resource last modification (UTC)
  [SystemDataLastModifiedBy <String>]: The identity that last modified the resource.
  [SystemDataLastModifiedByType <CreatedByType?>]: The type of identity that last modified the resource.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.policyinsights/new-azpolicyinsightsremediation
#>
function New-AzPolicyInsightsRemediation {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20211001.IRemediation])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded1', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Create1', Mandatory)]
    [Parameter(ParameterSetName='Create2', Mandatory)]
    [Parameter(ParameterSetName='Create3', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded1', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded2', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded3', Mandatory)]
    [Alias('RemediationName')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # The name of the remediation.
    ${Name},

    [Parameter(ParameterSetName='Create1')]
    [Parameter(ParameterSetName='Create2')]
    [Parameter(ParameterSetName='CreateExpanded1')]
    [Parameter(ParameterSetName='CreateExpanded2')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # Microsoft Azure subscription ID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='Create2', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded2', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Resource group name.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='Create3', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded3', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Resource ID.
    ${ResourceId},

    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Management group ID.
    ${ManagementGroupId},

    [Parameter(ParameterSetName='CreateViaIdentity1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentity2', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentity3', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded2', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded3', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.IPolicyInsightsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Create1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='Create2', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='Create3', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentity1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentity2', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentity3', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20211001.IRemediation]
    # The remediation definition.
    # To construct, see NOTES section for PARAMETER properties and create a hash table.
    ${Parameter},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateExpanded1')]
    [Parameter(ParameterSetName='CreateExpanded2')]
    [Parameter(ParameterSetName='CreateExpanded3')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded2')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded3')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Body')]
    [System.Single]
    # A number between 0.0 to 1.0 representing the percentage failure threshold.
    # The remediation will fail if the percentage of failed remediation operations (i.e.
    # failed deployments) exceeds this threshold.
    ${FailureThresholdPercentage},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateExpanded1')]
    [Parameter(ParameterSetName='CreateExpanded2')]
    [Parameter(ParameterSetName='CreateExpanded3')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded2')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded3')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Body')]
    [System.String[]]
    # The resource locations that will be remediated.
    ${FilterLocation},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateExpanded1')]
    [Parameter(ParameterSetName='CreateExpanded2')]
    [Parameter(ParameterSetName='CreateExpanded3')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded2')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded3')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Body')]
    [System.Int32]
    # Determines how many resources to remediate at any given time.
    # Can be used to increase or reduce the pace of the remediation.
    # If not provided, the default parallel deployments value is used.
    ${ParallelDeployment},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateExpanded1')]
    [Parameter(ParameterSetName='CreateExpanded2')]
    [Parameter(ParameterSetName='CreateExpanded3')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded2')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded3')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Body')]
    [System.String]
    # The resource ID of the policy assignment that should be remediated.
    ${PolicyAssignmentId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateExpanded1')]
    [Parameter(ParameterSetName='CreateExpanded2')]
    [Parameter(ParameterSetName='CreateExpanded3')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded2')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded3')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Body')]
    [System.String]
    # The policy definition reference ID of the individual definition that should be remediated.
    # Required when the policy assignment being remediated assigns a policy set definition.
    ${PolicyDefinitionReferenceId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateExpanded1')]
    [Parameter(ParameterSetName='CreateExpanded2')]
    [Parameter(ParameterSetName='CreateExpanded3')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded2')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded3')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Body')]
    [System.Int32]
    # Determines the max number of resources that can be remediated by the remediation job.
    # If not provided, the default resource count is used.
    ${ResourceCount},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateExpanded1')]
    [Parameter(ParameterSetName='CreateExpanded2')]
    [Parameter(ParameterSetName='CreateExpanded3')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded1')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded2')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded3')]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Support.ResourceDiscoveryMode])]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Support.ResourceDiscoveryMode]
    # The way resources to remediate are discovered.
    # Defaults to ExistingNonCompliant if not specified.
    ${ResourceDiscoveryMode},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Create1 = 'Az.PolicyInsights.private\New-AzPolicyInsightsRemediation_Create1';
            Create2 = 'Az.PolicyInsights.private\New-AzPolicyInsightsRemediation_Create2';
            Create3 = 'Az.PolicyInsights.private\New-AzPolicyInsightsRemediation_Create3';
            CreateExpanded = 'Az.PolicyInsights.private\New-AzPolicyInsightsRemediation_CreateExpanded';
            CreateExpanded1 = 'Az.PolicyInsights.private\New-AzPolicyInsightsRemediation_CreateExpanded1';
            CreateExpanded2 = 'Az.PolicyInsights.private\New-AzPolicyInsightsRemediation_CreateExpanded2';
            CreateExpanded3 = 'Az.PolicyInsights.private\New-AzPolicyInsightsRemediation_CreateExpanded3';
            CreateViaIdentity1 = 'Az.PolicyInsights.private\New-AzPolicyInsightsRemediation_CreateViaIdentity1';
            CreateViaIdentity2 = 'Az.PolicyInsights.private\New-AzPolicyInsightsRemediation_CreateViaIdentity2';
            CreateViaIdentity3 = 'Az.PolicyInsights.private\New-AzPolicyInsightsRemediation_CreateViaIdentity3';
            CreateViaIdentityExpanded1 = 'Az.PolicyInsights.private\New-AzPolicyInsightsRemediation_CreateViaIdentityExpanded1';
            CreateViaIdentityExpanded2 = 'Az.PolicyInsights.private\New-AzPolicyInsightsRemediation_CreateViaIdentityExpanded2';
            CreateViaIdentityExpanded3 = 'Az.PolicyInsights.private\New-AzPolicyInsightsRemediation_CreateViaIdentityExpanded3';
        }
        if (('Create1', 'Create2', 'CreateExpanded1', 'CreateExpanded2') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}

<#
.Synopsis
Deletes an existing attestation at subscription scope.
.Description
Deletes an existing attestation at subscription scope.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.IPolicyInsightsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IPolicyInsightsIdentity>: Identity Parameter
  [AttestationName <String>]: The name of the attestation.
  [AuthorizationNamespace <String>]: The namespace for Microsoft Authorization resource provider; only "Microsoft.Authorization" is allowed.
  [Id <String>]: Resource identity path
  [ManagementGroupId <String>]: Management group ID.
  [ManagementGroupName <String>]: Management group name.
  [ManagementGroupsNamespace <ManagementGroupsNamespaceType?>]: The namespace for Microsoft Management RP; only "Microsoft.Management" is allowed.
  [PolicyAssignmentName <String>]: Policy assignment name.
  [PolicyDefinitionName <String>]: Policy definition name.
  [PolicyEventsResource <String>]: The name of the virtual resource under PolicyEvents resource type; only "default" is allowed.
  [PolicySetDefinitionName <String>]: Policy set definition name.
  [PolicyStatesResource <PolicyStatesResource?>]: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
  [PolicyStatesSummaryResource <String>]: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
  [PolicyTrackedResourcesResource <PolicyTrackedResourcesResourceType?>]: The name of the virtual resource under PolicyTrackedResources resource type; only "default" is allowed.
  [RemediationName <String>]: The name of the remediation.
  [ResourceGroupName <String>]: Resource group name.
  [ResourceId <String>]: Resource ID.
  [ResourceName <String>]: The name of the policy metadata resource.
  [SubscriptionId <String>]: Microsoft Azure subscription ID.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.policyinsights/remove-azpolicyinsightsattestation
#>
function Remove-AzPolicyInsightsAttestation {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Delete', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Delete', Mandatory)]
    [Parameter(ParameterSetName='Delete1', Mandatory)]
    [Parameter(ParameterSetName='Delete2', Mandatory)]
    [Alias('AttestationName')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # The name of the attestation.
    ${Name},

    [Parameter(ParameterSetName='Delete')]
    [Parameter(ParameterSetName='Delete1')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # Microsoft Azure subscription ID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='Delete1', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='Delete2', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Resource ID.
    ${ResourceId},

    [Parameter(ParameterSetName='DeleteViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='DeleteViaIdentity1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='DeleteViaIdentity2', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.IPolicyInsightsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Delete = 'Az.PolicyInsights.private\Remove-AzPolicyInsightsAttestation_Delete';
            Delete1 = 'Az.PolicyInsights.private\Remove-AzPolicyInsightsAttestation_Delete1';
            Delete2 = 'Az.PolicyInsights.private\Remove-AzPolicyInsightsAttestation_Delete2';
            DeleteViaIdentity = 'Az.PolicyInsights.private\Remove-AzPolicyInsightsAttestation_DeleteViaIdentity';
            DeleteViaIdentity1 = 'Az.PolicyInsights.private\Remove-AzPolicyInsightsAttestation_DeleteViaIdentity1';
            DeleteViaIdentity2 = 'Az.PolicyInsights.private\Remove-AzPolicyInsightsAttestation_DeleteViaIdentity2';
        }
        if (('Delete', 'Delete1') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}

<#
.Synopsis
Deletes an existing remediation at management group scope.
.Description
Deletes an existing remediation at management group scope.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.IPolicyInsightsIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20211001.IRemediation
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IPolicyInsightsIdentity>: Identity Parameter
  [AttestationName <String>]: The name of the attestation.
  [AuthorizationNamespace <String>]: The namespace for Microsoft Authorization resource provider; only "Microsoft.Authorization" is allowed.
  [Id <String>]: Resource identity path
  [ManagementGroupId <String>]: Management group ID.
  [ManagementGroupName <String>]: Management group name.
  [ManagementGroupsNamespace <ManagementGroupsNamespaceType?>]: The namespace for Microsoft Management RP; only "Microsoft.Management" is allowed.
  [PolicyAssignmentName <String>]: Policy assignment name.
  [PolicyDefinitionName <String>]: Policy definition name.
  [PolicyEventsResource <String>]: The name of the virtual resource under PolicyEvents resource type; only "default" is allowed.
  [PolicySetDefinitionName <String>]: Policy set definition name.
  [PolicyStatesResource <PolicyStatesResource?>]: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
  [PolicyStatesSummaryResource <String>]: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
  [PolicyTrackedResourcesResource <PolicyTrackedResourcesResourceType?>]: The name of the virtual resource under PolicyTrackedResources resource type; only "default" is allowed.
  [RemediationName <String>]: The name of the remediation.
  [ResourceGroupName <String>]: Resource group name.
  [ResourceId <String>]: Resource ID.
  [ResourceName <String>]: The name of the policy metadata resource.
  [SubscriptionId <String>]: Microsoft Azure subscription ID.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.policyinsights/remove-azpolicyinsightsremediation
#>
function Remove-AzPolicyInsightsRemediation {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20211001.IRemediation])]
[CmdletBinding(DefaultParameterSetName='Delete1', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Delete', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Management group ID.
    ${ManagementGroupId},

    [Parameter(ParameterSetName='Delete', Mandatory)]
    [Parameter(ParameterSetName='Delete1', Mandatory)]
    [Parameter(ParameterSetName='Delete2', Mandatory)]
    [Parameter(ParameterSetName='Delete3', Mandatory)]
    [Alias('RemediationName')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # The name of the remediation.
    ${Name},

    [Parameter(ParameterSetName='Delete1')]
    [Parameter(ParameterSetName='Delete2')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # Microsoft Azure subscription ID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='Delete2', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Resource group name.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='Delete3', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Resource ID.
    ${ResourceId},

    [Parameter(ParameterSetName='DeleteViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='DeleteViaIdentity1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='DeleteViaIdentity2', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='DeleteViaIdentity3', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.IPolicyInsightsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Delete = 'Az.PolicyInsights.private\Remove-AzPolicyInsightsRemediation_Delete';
            Delete1 = 'Az.PolicyInsights.private\Remove-AzPolicyInsightsRemediation_Delete1';
            Delete2 = 'Az.PolicyInsights.private\Remove-AzPolicyInsightsRemediation_Delete2';
            Delete3 = 'Az.PolicyInsights.private\Remove-AzPolicyInsightsRemediation_Delete3';
            DeleteViaIdentity = 'Az.PolicyInsights.private\Remove-AzPolicyInsightsRemediation_DeleteViaIdentity';
            DeleteViaIdentity1 = 'Az.PolicyInsights.private\Remove-AzPolicyInsightsRemediation_DeleteViaIdentity1';
            DeleteViaIdentity2 = 'Az.PolicyInsights.private\Remove-AzPolicyInsightsRemediation_DeleteViaIdentity2';
            DeleteViaIdentity3 = 'Az.PolicyInsights.private\Remove-AzPolicyInsightsRemediation_DeleteViaIdentity3';
        }
        if (('Delete1', 'Delete2') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}

<#
.Synopsis
Triggers a policy evaluation scan for all the resources under the resource group.
.Description
Triggers a policy evaluation scan for all the resources under the resource group.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.IPolicyInsightsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IPolicyInsightsIdentity>: Identity Parameter
  [AttestationName <String>]: The name of the attestation.
  [AuthorizationNamespace <String>]: The namespace for Microsoft Authorization resource provider; only "Microsoft.Authorization" is allowed.
  [Id <String>]: Resource identity path
  [ManagementGroupId <String>]: Management group ID.
  [ManagementGroupName <String>]: Management group name.
  [ManagementGroupsNamespace <ManagementGroupsNamespaceType?>]: The namespace for Microsoft Management RP; only "Microsoft.Management" is allowed.
  [PolicyAssignmentName <String>]: Policy assignment name.
  [PolicyDefinitionName <String>]: Policy definition name.
  [PolicyEventsResource <String>]: The name of the virtual resource under PolicyEvents resource type; only "default" is allowed.
  [PolicySetDefinitionName <String>]: Policy set definition name.
  [PolicyStatesResource <PolicyStatesResource?>]: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
  [PolicyStatesSummaryResource <String>]: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
  [PolicyTrackedResourcesResource <PolicyTrackedResourcesResourceType?>]: The name of the virtual resource under PolicyTrackedResources resource type; only "default" is allowed.
  [RemediationName <String>]: The name of the remediation.
  [ResourceGroupName <String>]: Resource group name.
  [ResourceId <String>]: Resource ID.
  [ResourceName <String>]: The name of the policy metadata resource.
  [SubscriptionId <String>]: Microsoft Azure subscription ID.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.policyinsights/start-azpolicyinsightspolicystateresourcegroupevaluation
#>
function Start-AzPolicyInsightsPolicyStateResourceGroupEvaluation {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Trigger', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Trigger', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Resource group name.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='Trigger')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # Microsoft Azure subscription ID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='TriggerViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.IPolicyInsightsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Trigger = 'Az.PolicyInsights.private\Start-AzPolicyInsightsPolicyStateResourceGroupEvaluation_Trigger';
            TriggerViaIdentity = 'Az.PolicyInsights.private\Start-AzPolicyInsightsPolicyStateResourceGroupEvaluation_TriggerViaIdentity';
        }
        if (('Trigger') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}

<#
.Synopsis
Triggers a policy evaluation scan for all the resources under the subscription
.Description
Triggers a policy evaluation scan for all the resources under the subscription
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.IPolicyInsightsIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IPolicyInsightsIdentity>: Identity Parameter
  [AttestationName <String>]: The name of the attestation.
  [AuthorizationNamespace <String>]: The namespace for Microsoft Authorization resource provider; only "Microsoft.Authorization" is allowed.
  [Id <String>]: Resource identity path
  [ManagementGroupId <String>]: Management group ID.
  [ManagementGroupName <String>]: Management group name.
  [ManagementGroupsNamespace <ManagementGroupsNamespaceType?>]: The namespace for Microsoft Management RP; only "Microsoft.Management" is allowed.
  [PolicyAssignmentName <String>]: Policy assignment name.
  [PolicyDefinitionName <String>]: Policy definition name.
  [PolicyEventsResource <String>]: The name of the virtual resource under PolicyEvents resource type; only "default" is allowed.
  [PolicySetDefinitionName <String>]: Policy set definition name.
  [PolicyStatesResource <PolicyStatesResource?>]: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
  [PolicyStatesSummaryResource <String>]: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
  [PolicyTrackedResourcesResource <PolicyTrackedResourcesResourceType?>]: The name of the virtual resource under PolicyTrackedResources resource type; only "default" is allowed.
  [RemediationName <String>]: The name of the remediation.
  [ResourceGroupName <String>]: Resource group name.
  [ResourceId <String>]: Resource ID.
  [ResourceName <String>]: The name of the policy metadata resource.
  [SubscriptionId <String>]: Microsoft Azure subscription ID.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.policyinsights/start-azpolicyinsightspolicystatesubscriptionevaluation
#>
function Start-AzPolicyInsightsPolicyStateSubscriptionEvaluation {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Trigger', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Trigger')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # Microsoft Azure subscription ID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='TriggerViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.IPolicyInsightsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Trigger = 'Az.PolicyInsights.private\Start-AzPolicyInsightsPolicyStateSubscriptionEvaluation_Trigger';
            TriggerViaIdentity = 'Az.PolicyInsights.private\Start-AzPolicyInsightsPolicyStateSubscriptionEvaluation_TriggerViaIdentity';
        }
        if (('Trigger') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}

<#
.Synopsis
Cancels a remediation at management group scope.
.Description
Cancels a remediation at management group scope.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.IPolicyInsightsIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20211001.IRemediation
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IPolicyInsightsIdentity>: Identity Parameter
  [AttestationName <String>]: The name of the attestation.
  [AuthorizationNamespace <String>]: The namespace for Microsoft Authorization resource provider; only "Microsoft.Authorization" is allowed.
  [Id <String>]: Resource identity path
  [ManagementGroupId <String>]: Management group ID.
  [ManagementGroupName <String>]: Management group name.
  [ManagementGroupsNamespace <ManagementGroupsNamespaceType?>]: The namespace for Microsoft Management RP; only "Microsoft.Management" is allowed.
  [PolicyAssignmentName <String>]: Policy assignment name.
  [PolicyDefinitionName <String>]: Policy definition name.
  [PolicyEventsResource <String>]: The name of the virtual resource under PolicyEvents resource type; only "default" is allowed.
  [PolicySetDefinitionName <String>]: Policy set definition name.
  [PolicyStatesResource <PolicyStatesResource?>]: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
  [PolicyStatesSummaryResource <String>]: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
  [PolicyTrackedResourcesResource <PolicyTrackedResourcesResourceType?>]: The name of the virtual resource under PolicyTrackedResources resource type; only "default" is allowed.
  [RemediationName <String>]: The name of the remediation.
  [ResourceGroupName <String>]: Resource group name.
  [ResourceId <String>]: Resource ID.
  [ResourceName <String>]: The name of the policy metadata resource.
  [SubscriptionId <String>]: Microsoft Azure subscription ID.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.policyinsights/stop-azpolicyinsightsremediation
#>
function Stop-AzPolicyInsightsRemediation {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20211001.IRemediation])]
[CmdletBinding(DefaultParameterSetName='Cancel1', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Cancel', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Management group ID.
    ${ManagementGroupId},

    [Parameter(ParameterSetName='Cancel', Mandatory)]
    [Parameter(ParameterSetName='Cancel1', Mandatory)]
    [Parameter(ParameterSetName='Cancel2', Mandatory)]
    [Parameter(ParameterSetName='Cancel3', Mandatory)]
    [Alias('RemediationName')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # The name of the remediation.
    ${Name},

    [Parameter(ParameterSetName='Cancel1')]
    [Parameter(ParameterSetName='Cancel2')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # Microsoft Azure subscription ID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='Cancel2', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Resource group name.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='Cancel3', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Resource ID.
    ${ResourceId},

    [Parameter(ParameterSetName='CancelViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CancelViaIdentity1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CancelViaIdentity2', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CancelViaIdentity3', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.IPolicyInsightsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Cancel = 'Az.PolicyInsights.private\Stop-AzPolicyInsightsRemediation_Cancel';
            Cancel1 = 'Az.PolicyInsights.private\Stop-AzPolicyInsightsRemediation_Cancel1';
            Cancel2 = 'Az.PolicyInsights.private\Stop-AzPolicyInsightsRemediation_Cancel2';
            Cancel3 = 'Az.PolicyInsights.private\Stop-AzPolicyInsightsRemediation_Cancel3';
            CancelViaIdentity = 'Az.PolicyInsights.private\Stop-AzPolicyInsightsRemediation_CancelViaIdentity';
            CancelViaIdentity1 = 'Az.PolicyInsights.private\Stop-AzPolicyInsightsRemediation_CancelViaIdentity1';
            CancelViaIdentity2 = 'Az.PolicyInsights.private\Stop-AzPolicyInsightsRemediation_CancelViaIdentity2';
            CancelViaIdentity3 = 'Az.PolicyInsights.private\Stop-AzPolicyInsightsRemediation_CancelViaIdentity3';
        }
        if (('Cancel1', 'Cancel2') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}

<#
.Synopsis
Checks what restrictions Azure Policy will place on a resource within a subscription.
.Description
Checks what restrictions Azure Policy will place on a resource within a subscription.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20200701.ICheckRestrictionsRequest
.Inputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.IPolicyInsightsIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20200701.ICheckRestrictionsResult
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IPolicyInsightsIdentity>: Identity Parameter
  [AttestationName <String>]: The name of the attestation.
  [AuthorizationNamespace <String>]: The namespace for Microsoft Authorization resource provider; only "Microsoft.Authorization" is allowed.
  [Id <String>]: Resource identity path
  [ManagementGroupId <String>]: Management group ID.
  [ManagementGroupName <String>]: Management group name.
  [ManagementGroupsNamespace <ManagementGroupsNamespaceType?>]: The namespace for Microsoft Management RP; only "Microsoft.Management" is allowed.
  [PolicyAssignmentName <String>]: Policy assignment name.
  [PolicyDefinitionName <String>]: Policy definition name.
  [PolicyEventsResource <String>]: The name of the virtual resource under PolicyEvents resource type; only "default" is allowed.
  [PolicySetDefinitionName <String>]: Policy set definition name.
  [PolicyStatesResource <PolicyStatesResource?>]: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
  [PolicyStatesSummaryResource <String>]: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
  [PolicyTrackedResourcesResource <PolicyTrackedResourcesResourceType?>]: The name of the virtual resource under PolicyTrackedResources resource type; only "default" is allowed.
  [RemediationName <String>]: The name of the remediation.
  [ResourceGroupName <String>]: Resource group name.
  [ResourceId <String>]: Resource ID.
  [ResourceName <String>]: The name of the policy metadata resource.
  [SubscriptionId <String>]: Microsoft Azure subscription ID.

PARAMETER <ICheckRestrictionsRequest>: The check policy restrictions parameters describing the resource that is being evaluated.
  ResourceDetailResourceContent <IAny>: The resource content. This should include whatever properties are already known and can be a partial set of all resource properties.
  [PendingField <IPendingField[]>]: The list of fields and values that should be evaluated for potential restrictions.
    Field <String>: The name of the field. This can be a top-level property like 'name' or 'type' or an Azure Policy field alias.
    [Value <String[]>]: The list of potential values for the field that should be evaluated against Azure Policy.
  [ResourceDetailApiVersion <String>]: The api-version of the resource content.
  [ResourceDetailScope <String>]: The scope where the resource is being created. For example, if the resource is a child resource this would be the parent resource's resource ID.

PENDINGFIELD <IPendingField[]>: The list of fields and values that should be evaluated for potential restrictions.
  Field <String>: The name of the field. This can be a top-level property like 'name' or 'type' or an Azure Policy field alias.
  [Value <String[]>]: The list of potential values for the field that should be evaluated against Azure Policy.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.policyinsights/test-azpolicyinsightspolicyrestriction
#>
function Test-AzPolicyInsightsPolicyRestriction {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20200701.ICheckRestrictionsResult])]
[CmdletBinding(DefaultParameterSetName='Check', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Check')]
    [Parameter(ParameterSetName='Check1')]
    [Parameter(ParameterSetName='CheckExpanded')]
    [Parameter(ParameterSetName='CheckExpanded1')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # Microsoft Azure subscription ID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='Check1', Mandatory)]
    [Parameter(ParameterSetName='CheckExpanded1', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='CheckViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CheckViaIdentity1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CheckViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CheckViaIdentityExpanded1', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.IPolicyInsightsIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Check', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='Check1', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CheckViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CheckViaIdentity1', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20200701.ICheckRestrictionsRequest]
    # The check policy restrictions parameters describing the resource that is being evaluated.
    # To construct, see NOTES section for PARAMETER properties and create a hash table.
    ${Parameter},

    [Parameter(ParameterSetName='CheckExpanded', Mandatory)]
    [Parameter(ParameterSetName='CheckExpanded1', Mandatory)]
    [Parameter(ParameterSetName='CheckViaIdentityExpanded', Mandatory)]
    [Parameter(ParameterSetName='CheckViaIdentityExpanded1', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.IAny]
    # The resource content.
    # This should include whatever properties are already known and can be a partial set of all resource properties.
    ${ResourceDetailResourceContent},

    [Parameter(ParameterSetName='CheckExpanded')]
    [Parameter(ParameterSetName='CheckExpanded1')]
    [Parameter(ParameterSetName='CheckViaIdentityExpanded')]
    [Parameter(ParameterSetName='CheckViaIdentityExpanded1')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20200701.IPendingField[]]
    # The list of fields and values that should be evaluated for potential restrictions.
    # To construct, see NOTES section for PENDINGFIELD properties and create a hash table.
    ${PendingField},

    [Parameter(ParameterSetName='CheckExpanded')]
    [Parameter(ParameterSetName='CheckExpanded1')]
    [Parameter(ParameterSetName='CheckViaIdentityExpanded')]
    [Parameter(ParameterSetName='CheckViaIdentityExpanded1')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Body')]
    [System.String]
    # The api-version of the resource content.
    ${ResourceDetailApiVersion},

    [Parameter(ParameterSetName='CheckExpanded')]
    [Parameter(ParameterSetName='CheckExpanded1')]
    [Parameter(ParameterSetName='CheckViaIdentityExpanded')]
    [Parameter(ParameterSetName='CheckViaIdentityExpanded1')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Body')]
    [System.String]
    # The scope where the resource is being created.
    # For example, if the resource is a child resource this would be the parent resource's resource ID.
    ${ResourceDetailScope},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Check = 'Az.PolicyInsights.private\Test-AzPolicyInsightsPolicyRestriction_Check';
            Check1 = 'Az.PolicyInsights.private\Test-AzPolicyInsightsPolicyRestriction_Check1';
            CheckExpanded = 'Az.PolicyInsights.private\Test-AzPolicyInsightsPolicyRestriction_CheckExpanded';
            CheckExpanded1 = 'Az.PolicyInsights.private\Test-AzPolicyInsightsPolicyRestriction_CheckExpanded1';
            CheckViaIdentity = 'Az.PolicyInsights.private\Test-AzPolicyInsightsPolicyRestriction_CheckViaIdentity';
            CheckViaIdentity1 = 'Az.PolicyInsights.private\Test-AzPolicyInsightsPolicyRestriction_CheckViaIdentity1';
            CheckViaIdentityExpanded = 'Az.PolicyInsights.private\Test-AzPolicyInsightsPolicyRestriction_CheckViaIdentityExpanded';
            CheckViaIdentityExpanded1 = 'Az.PolicyInsights.private\Test-AzPolicyInsightsPolicyRestriction_CheckViaIdentityExpanded1';
        }
        if (('Check', 'Check1', 'CheckExpanded', 'CheckExpanded1') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
