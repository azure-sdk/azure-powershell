
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Queries policy events for the resources under the management group.
.Description
Queries policy events for the resources under the management group.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IPolicyEvent
.Link
https://docs.microsoft.com/en-us/powershell/module/az.policyinsights/get-azpolicyinsightspolicyeventqueryresult
#>
function Get-AzPolicyInsightsPolicyEventQueryResult {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Models.Api20220601.IPolicyEvent])]
[CmdletBinding(DefaultParameterSetName='List1', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='List', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Management group name.
    ${ManagementGroupName},

    [Parameter(ParameterSetName='List1')]
    [Parameter(ParameterSetName='List2')]
    [Parameter(ParameterSetName='List4')]
    [Parameter(ParameterSetName='List5')]
    [Parameter(ParameterSetName='List6')]
    [Parameter(ParameterSetName='List7')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String[]]
    # Microsoft Azure subscription ID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='List2', Mandatory)]
    [Parameter(ParameterSetName='List7', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Resource group name.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='List3', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Resource ID.
    ${ResourceId},

    [Parameter(ParameterSetName='List4', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Policy set definition name.
    ${PolicySetDefinitionName},

    [Parameter(ParameterSetName='List5', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Policy definition name.
    ${PolicyDefinitionName},

    [Parameter(ParameterSetName='List6', Mandatory)]
    [Parameter(ParameterSetName='List7', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Path')]
    [System.String]
    # Policy assignment name.
    ${PolicyAssignmentName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.String]
    # OData apply expression for aggregations.
    ${Apply},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.String]
    # OData filter expression.
    ${Filter},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.DateTime]
    # ISO 8601 formatted timestamp specifying the start time of the interval to query.
    # When not specified, the service uses ($to - 1-day).
    ${From},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.String]
    # Ordering expression using OData notation.
    # One or more comma-separated column names with an optional "desc" (the default) or "asc", e.g.
    # "$orderby=PolicyAssignmentId, ResourceId asc".
    ${OrderBy},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.String]
    # Select expression using OData notation.
    # Limits the columns on each record to just those requested, e.g.
    # "$select=PolicyAssignmentId, ResourceId".
    ${Select},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.String]
    # Skiptoken is only provided if a previous response returned a partial result as a part of nextLink element.
    ${SkipToken},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.DateTime]
    # ISO 8601 formatted timestamp specifying the end time of the interval to query.
    # When not specified, the service uses request time.
    ${To},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.Int32]
    # Maximum number of records to return, paginated for top greater than 1000
    ${Top},

    [Parameter(ParameterSetName='List3')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Query')]
    [System.String]
    # The $expand query parameter.
    # For example, to expand components use $expand=components
    ${Expand},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            List = 'Az.PolicyInsights.private\Get-AzPolicyInsightsPolicyEventQueryResult_List';
            List1 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsPolicyEventQueryResult_List1';
            List2 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsPolicyEventQueryResult_List2';
            List3 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsPolicyEventQueryResult_List3';
            List4 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsPolicyEventQueryResult_List4';
            List5 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsPolicyEventQueryResult_List5';
            List6 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsPolicyEventQueryResult_List6';
            List7 = 'Az.PolicyInsights.private\Get-AzPolicyInsightsPolicyEventQueryResult_List7';
        }
        if (('List1', 'List2', 'List4', 'List5', 'List6', 'List7') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.PolicyInsights.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
