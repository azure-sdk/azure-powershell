// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Extensions;

    /// <summary>
    /// Input for the task that migrates MySQL databases to Azure Database for MySQL for offline migrations
    /// </summary>
    public partial class MigrateMySqlAzureDbForMySqlOfflineTaskInput :
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMigrateMySqlAzureDbForMySqlOfflineTaskInput,
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMigrateMySqlAzureDbForMySqlOfflineTaskInputInternal
    {

        /// <summary>Backing field for <see cref="EncryptedKeyForSecureField" /> property.</summary>
        private string _encryptedKeyForSecureField;

        /// <summary>encrypted key for secure fields</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string EncryptedKeyForSecureField { get => this._encryptedKeyForSecureField; set => this._encryptedKeyForSecureField = value; }

        /// <summary>Backing field for <see cref="MakeSourceServerReadOnly" /> property.</summary>
        private bool? _makeSourceServerReadOnly;

        /// <summary>Setting to set the source server read only</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public bool? MakeSourceServerReadOnly { get => this._makeSourceServerReadOnly; set => this._makeSourceServerReadOnly = value; }

        /// <summary>Internal Acessors for SourceConnectionInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMySqlConnectionInfo Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMigrateMySqlAzureDbForMySqlOfflineTaskInputInternal.SourceConnectionInfo { get => (this._sourceConnectionInfo = this._sourceConnectionInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.MySqlConnectionInfo()); set { {_sourceConnectionInfo = value;} } }

        /// <summary>Internal Acessors for TargetConnectionInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMySqlConnectionInfo Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMigrateMySqlAzureDbForMySqlOfflineTaskInputInternal.TargetConnectionInfo { get => (this._targetConnectionInfo = this._targetConnectionInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.MySqlConnectionInfo()); set { {_targetConnectionInfo = value;} } }

        /// <summary>Backing field for <see cref="MigrateAllEvent" /> property.</summary>
        private bool? _migrateAllEvent;

        /// <summary>If true, all event definitions will be migrated in the selected databases</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public bool? MigrateAllEvent { get => this._migrateAllEvent; set => this._migrateAllEvent = value; }

        /// <summary>Backing field for <see cref="MigrateAllRoutine" /> property.</summary>
        private bool? _migrateAllRoutine;

        /// <summary>If true, all routine definitions will be migrated in the selected databases</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public bool? MigrateAllRoutine { get => this._migrateAllRoutine; set => this._migrateAllRoutine = value; }

        /// <summary>Backing field for <see cref="MigrateAllTablesSchema" /> property.</summary>
        private bool? _migrateAllTablesSchema;

        /// <summary>If true, all table's schemas will be migrated</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public bool? MigrateAllTablesSchema { get => this._migrateAllTablesSchema; set => this._migrateAllTablesSchema = value; }

        /// <summary>Backing field for <see cref="MigrateAllTrigger" /> property.</summary>
        private bool? _migrateAllTrigger;

        /// <summary>If true, all trigger definitions will be migrated in the selected databases</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public bool? MigrateAllTrigger { get => this._migrateAllTrigger; set => this._migrateAllTrigger = value; }

        /// <summary>Backing field for <see cref="MigrateAllView" /> property.</summary>
        private bool? _migrateAllView;

        /// <summary>If true, all view definitions will be migrated in the selected databases</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public bool? MigrateAllView { get => this._migrateAllView; set => this._migrateAllView = value; }

        /// <summary>Backing field for <see cref="MigrateUserSystemTable" /> property.</summary>
        private bool? _migrateUserSystemTable;

        /// <summary>If true, all users/grants will be migrated</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public bool? MigrateUserSystemTable { get => this._migrateUserSystemTable; set => this._migrateUserSystemTable = value; }

        /// <summary>Backing field for <see cref="OptionalAgentSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMigrateMySqlAzureDbForMySqlOfflineTaskInputOptionalAgentSettings1 _optionalAgentSetting;

        /// <summary>Optional parameters for fine tuning the data migration</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMigrateMySqlAzureDbForMySqlOfflineTaskInputOptionalAgentSettings1 OptionalAgentSetting { get => (this._optionalAgentSetting = this._optionalAgentSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.MigrateMySqlAzureDbForMySqlOfflineTaskInputOptionalAgentSettings1()); set => this._optionalAgentSetting = value; }

        /// <summary>Backing field for <see cref="SelectedDatabase" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMigrateMySqlAzureDbForMySqlOfflineDatabaseInput[] _selectedDatabase;

        /// <summary>Databases to migrate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMigrateMySqlAzureDbForMySqlOfflineDatabaseInput[] SelectedDatabase { get => this._selectedDatabase; set => this._selectedDatabase = value; }

        /// <summary>Backing field for <see cref="SourceConnectionInfo" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMySqlConnectionInfo _sourceConnectionInfo;

        /// <summary>Connection information for source MySQL</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMySqlConnectionInfo SourceConnectionInfo { get => (this._sourceConnectionInfo = this._sourceConnectionInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.MySqlConnectionInfo()); set => this._sourceConnectionInfo = value; }

        /// <summary>Additional connection settings</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string SourceConnectionInfoAdditionalSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMySqlConnectionInfoInternal)SourceConnectionInfo).AdditionalSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMySqlConnectionInfoInternal)SourceConnectionInfo).AdditionalSetting = value ?? null; }

        /// <summary>Authentication type to use for connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType? SourceConnectionInfoAuthentication { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMySqlConnectionInfoInternal)SourceConnectionInfo).Authentication; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMySqlConnectionInfoInternal)SourceConnectionInfo).Authentication = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType)""); }

        /// <summary>Data source</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string SourceConnectionInfoDataSource { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMySqlConnectionInfoInternal)SourceConnectionInfo).DataSource; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMySqlConnectionInfoInternal)SourceConnectionInfo).DataSource = value ?? null; }

        /// <summary>Whether to encrypt the connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public bool? SourceConnectionInfoEncryptConnection { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMySqlConnectionInfoInternal)SourceConnectionInfo).EncryptConnection; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMySqlConnectionInfoInternal)SourceConnectionInfo).EncryptConnection = value ?? default(bool); }

        /// <summary>Password credential.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string SourceConnectionInfoPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IConnectionInfoInternal)SourceConnectionInfo).Password; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IConnectionInfoInternal)SourceConnectionInfo).Password = value ?? null; }

        /// <summary>Port for Server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public int SourceConnectionInfoPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMySqlConnectionInfoInternal)SourceConnectionInfo).Port; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMySqlConnectionInfoInternal)SourceConnectionInfo).Port = value ; }

        /// <summary>Name of the server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string SourceConnectionInfoServerName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMySqlConnectionInfoInternal)SourceConnectionInfo).ServerName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMySqlConnectionInfoInternal)SourceConnectionInfo).ServerName = value ; }

        /// <summary>Type of connection info</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string SourceConnectionInfoType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IConnectionInfoInternal)SourceConnectionInfo).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IConnectionInfoInternal)SourceConnectionInfo).Type = value ; }

        /// <summary>User name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string SourceConnectionInfoUserName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IConnectionInfoInternal)SourceConnectionInfo).UserName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IConnectionInfoInternal)SourceConnectionInfo).UserName = value ?? null; }

        /// <summary>Backing field for <see cref="SourceServerResourceId" /> property.</summary>
        private string _sourceServerResourceId;

        /// <summary>Optional resource Id of the source server if it is an azure instance</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string SourceServerResourceId { get => this._sourceServerResourceId; set => this._sourceServerResourceId = value; }

        /// <summary>Backing field for <see cref="StartedOn" /> property.</summary>
        private global::System.DateTime? _startedOn;

        /// <summary>Parameter to specify when the migration started</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public global::System.DateTime? StartedOn { get => this._startedOn; set => this._startedOn = value; }

        /// <summary>Backing field for <see cref="TargetConnectionInfo" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMySqlConnectionInfo _targetConnectionInfo;

        /// <summary>Connection information for target Azure Database for MySQL</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMySqlConnectionInfo TargetConnectionInfo { get => (this._targetConnectionInfo = this._targetConnectionInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.MySqlConnectionInfo()); set => this._targetConnectionInfo = value; }

        /// <summary>Additional connection settings</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetConnectionInfoAdditionalSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMySqlConnectionInfoInternal)TargetConnectionInfo).AdditionalSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMySqlConnectionInfoInternal)TargetConnectionInfo).AdditionalSetting = value ?? null; }

        /// <summary>Authentication type to use for connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType? TargetConnectionInfoAuthentication { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMySqlConnectionInfoInternal)TargetConnectionInfo).Authentication; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMySqlConnectionInfoInternal)TargetConnectionInfo).Authentication = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType)""); }

        /// <summary>Data source</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetConnectionInfoDataSource { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMySqlConnectionInfoInternal)TargetConnectionInfo).DataSource; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMySqlConnectionInfoInternal)TargetConnectionInfo).DataSource = value ?? null; }

        /// <summary>Whether to encrypt the connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public bool? TargetConnectionInfoEncryptConnection { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMySqlConnectionInfoInternal)TargetConnectionInfo).EncryptConnection; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMySqlConnectionInfoInternal)TargetConnectionInfo).EncryptConnection = value ?? default(bool); }

        /// <summary>Password credential.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetConnectionInfoPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IConnectionInfoInternal)TargetConnectionInfo).Password; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IConnectionInfoInternal)TargetConnectionInfo).Password = value ?? null; }

        /// <summary>Port for Server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public int TargetConnectionInfoPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMySqlConnectionInfoInternal)TargetConnectionInfo).Port; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMySqlConnectionInfoInternal)TargetConnectionInfo).Port = value ; }

        /// <summary>Name of the server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetConnectionInfoServerName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMySqlConnectionInfoInternal)TargetConnectionInfo).ServerName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMySqlConnectionInfoInternal)TargetConnectionInfo).ServerName = value ; }

        /// <summary>Type of connection info</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetConnectionInfoType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IConnectionInfoInternal)TargetConnectionInfo).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IConnectionInfoInternal)TargetConnectionInfo).Type = value ; }

        /// <summary>User name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetConnectionInfoUserName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IConnectionInfoInternal)TargetConnectionInfo).UserName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IConnectionInfoInternal)TargetConnectionInfo).UserName = value ?? null; }

        /// <summary>Backing field for <see cref="TargetServerResourceId" /> property.</summary>
        private string _targetServerResourceId;

        /// <summary>Optional resource Id of the target server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string TargetServerResourceId { get => this._targetServerResourceId; set => this._targetServerResourceId = value; }

        /// <summary>
        /// Creates an new <see cref="MigrateMySqlAzureDbForMySqlOfflineTaskInput" /> instance.
        /// </summary>
        public MigrateMySqlAzureDbForMySqlOfflineTaskInput()
        {

        }
    }
    /// Input for the task that migrates MySQL databases to Azure Database for MySQL for offline migrations
    public partial interface IMigrateMySqlAzureDbForMySqlOfflineTaskInput :
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.IJsonSerializable
    {
        /// <summary>encrypted key for secure fields</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"encrypted key for secure fields",
        SerializedName = @"encryptedKeyForSecureFields",
        PossibleTypes = new [] { typeof(string) })]
        string EncryptedKeyForSecureField { get; set; }
        /// <summary>Setting to set the source server read only</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Setting to set the source server read only",
        SerializedName = @"makeSourceServerReadOnly",
        PossibleTypes = new [] { typeof(bool) })]
        bool? MakeSourceServerReadOnly { get; set; }
        /// <summary>If true, all event definitions will be migrated in the selected databases</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If true, all event definitions will be migrated in the selected databases",
        SerializedName = @"migrateAllEvents",
        PossibleTypes = new [] { typeof(bool) })]
        bool? MigrateAllEvent { get; set; }
        /// <summary>If true, all routine definitions will be migrated in the selected databases</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If true, all routine definitions will be migrated in the selected databases",
        SerializedName = @"migrateAllRoutines",
        PossibleTypes = new [] { typeof(bool) })]
        bool? MigrateAllRoutine { get; set; }
        /// <summary>If true, all table's schemas will be migrated</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If true, all table's schemas will be migrated",
        SerializedName = @"migrateAllTablesSchema",
        PossibleTypes = new [] { typeof(bool) })]
        bool? MigrateAllTablesSchema { get; set; }
        /// <summary>If true, all trigger definitions will be migrated in the selected databases</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If true, all trigger definitions will be migrated in the selected databases",
        SerializedName = @"migrateAllTriggers",
        PossibleTypes = new [] { typeof(bool) })]
        bool? MigrateAllTrigger { get; set; }
        /// <summary>If true, all view definitions will be migrated in the selected databases</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If true, all view definitions will be migrated in the selected databases",
        SerializedName = @"migrateAllViews",
        PossibleTypes = new [] { typeof(bool) })]
        bool? MigrateAllView { get; set; }
        /// <summary>If true, all users/grants will be migrated</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If true, all users/grants will be migrated",
        SerializedName = @"migrateUserSystemTables",
        PossibleTypes = new [] { typeof(bool) })]
        bool? MigrateUserSystemTable { get; set; }
        /// <summary>Optional parameters for fine tuning the data migration</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Optional parameters for fine tuning the data migration",
        SerializedName = @"optionalAgentSettings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMigrateMySqlAzureDbForMySqlOfflineTaskInputOptionalAgentSettings1) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMigrateMySqlAzureDbForMySqlOfflineTaskInputOptionalAgentSettings1 OptionalAgentSetting { get; set; }
        /// <summary>Databases to migrate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Databases to migrate",
        SerializedName = @"selectedDatabases",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMigrateMySqlAzureDbForMySqlOfflineDatabaseInput) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMigrateMySqlAzureDbForMySqlOfflineDatabaseInput[] SelectedDatabase { get; set; }
        /// <summary>Additional connection settings</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Additional connection settings",
        SerializedName = @"additionalSettings",
        PossibleTypes = new [] { typeof(string) })]
        string SourceConnectionInfoAdditionalSetting { get; set; }
        /// <summary>Authentication type to use for connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Authentication type to use for connection",
        SerializedName = @"authentication",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType? SourceConnectionInfoAuthentication { get; set; }
        /// <summary>Data source</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Data source ",
        SerializedName = @"dataSource",
        PossibleTypes = new [] { typeof(string) })]
        string SourceConnectionInfoDataSource { get; set; }
        /// <summary>Whether to encrypt the connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether to encrypt the connection",
        SerializedName = @"encryptConnection",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SourceConnectionInfoEncryptConnection { get; set; }
        /// <summary>Password credential.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Password credential.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(string) })]
        string SourceConnectionInfoPassword { get; set; }
        /// <summary>Port for Server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Port for Server",
        SerializedName = @"port",
        PossibleTypes = new [] { typeof(int) })]
        int SourceConnectionInfoPort { get; set; }
        /// <summary>Name of the server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Name of the server",
        SerializedName = @"serverName",
        PossibleTypes = new [] { typeof(string) })]
        string SourceConnectionInfoServerName { get; set; }
        /// <summary>Type of connection info</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Type of connection info",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string SourceConnectionInfoType { get; set; }
        /// <summary>User name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"User name",
        SerializedName = @"userName",
        PossibleTypes = new [] { typeof(string) })]
        string SourceConnectionInfoUserName { get; set; }
        /// <summary>Optional resource Id of the source server if it is an azure instance</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Optional resource Id of the source server if it is an azure instance",
        SerializedName = @"sourceServerResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string SourceServerResourceId { get; set; }
        /// <summary>Parameter to specify when the migration started</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Parameter to specify when the migration started",
        SerializedName = @"startedOn",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? StartedOn { get; set; }
        /// <summary>Additional connection settings</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Additional connection settings",
        SerializedName = @"additionalSettings",
        PossibleTypes = new [] { typeof(string) })]
        string TargetConnectionInfoAdditionalSetting { get; set; }
        /// <summary>Authentication type to use for connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Authentication type to use for connection",
        SerializedName = @"authentication",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType? TargetConnectionInfoAuthentication { get; set; }
        /// <summary>Data source</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Data source ",
        SerializedName = @"dataSource",
        PossibleTypes = new [] { typeof(string) })]
        string TargetConnectionInfoDataSource { get; set; }
        /// <summary>Whether to encrypt the connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether to encrypt the connection",
        SerializedName = @"encryptConnection",
        PossibleTypes = new [] { typeof(bool) })]
        bool? TargetConnectionInfoEncryptConnection { get; set; }
        /// <summary>Password credential.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Password credential.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(string) })]
        string TargetConnectionInfoPassword { get; set; }
        /// <summary>Port for Server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Port for Server",
        SerializedName = @"port",
        PossibleTypes = new [] { typeof(int) })]
        int TargetConnectionInfoPort { get; set; }
        /// <summary>Name of the server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Name of the server",
        SerializedName = @"serverName",
        PossibleTypes = new [] { typeof(string) })]
        string TargetConnectionInfoServerName { get; set; }
        /// <summary>Type of connection info</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Type of connection info",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string TargetConnectionInfoType { get; set; }
        /// <summary>User name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"User name",
        SerializedName = @"userName",
        PossibleTypes = new [] { typeof(string) })]
        string TargetConnectionInfoUserName { get; set; }
        /// <summary>Optional resource Id of the target server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Optional resource Id of the target server",
        SerializedName = @"targetServerResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string TargetServerResourceId { get; set; }

    }
    /// Input for the task that migrates MySQL databases to Azure Database for MySQL for offline migrations
    internal partial interface IMigrateMySqlAzureDbForMySqlOfflineTaskInputInternal

    {
        /// <summary>encrypted key for secure fields</summary>
        string EncryptedKeyForSecureField { get; set; }
        /// <summary>Setting to set the source server read only</summary>
        bool? MakeSourceServerReadOnly { get; set; }
        /// <summary>If true, all event definitions will be migrated in the selected databases</summary>
        bool? MigrateAllEvent { get; set; }
        /// <summary>If true, all routine definitions will be migrated in the selected databases</summary>
        bool? MigrateAllRoutine { get; set; }
        /// <summary>If true, all table's schemas will be migrated</summary>
        bool? MigrateAllTablesSchema { get; set; }
        /// <summary>If true, all trigger definitions will be migrated in the selected databases</summary>
        bool? MigrateAllTrigger { get; set; }
        /// <summary>If true, all view definitions will be migrated in the selected databases</summary>
        bool? MigrateAllView { get; set; }
        /// <summary>If true, all users/grants will be migrated</summary>
        bool? MigrateUserSystemTable { get; set; }
        /// <summary>Optional parameters for fine tuning the data migration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMigrateMySqlAzureDbForMySqlOfflineTaskInputOptionalAgentSettings1 OptionalAgentSetting { get; set; }
        /// <summary>Databases to migrate</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMigrateMySqlAzureDbForMySqlOfflineDatabaseInput[] SelectedDatabase { get; set; }
        /// <summary>Connection information for source MySQL</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMySqlConnectionInfo SourceConnectionInfo { get; set; }
        /// <summary>Additional connection settings</summary>
        string SourceConnectionInfoAdditionalSetting { get; set; }
        /// <summary>Authentication type to use for connection</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType? SourceConnectionInfoAuthentication { get; set; }
        /// <summary>Data source</summary>
        string SourceConnectionInfoDataSource { get; set; }
        /// <summary>Whether to encrypt the connection</summary>
        bool? SourceConnectionInfoEncryptConnection { get; set; }
        /// <summary>Password credential.</summary>
        string SourceConnectionInfoPassword { get; set; }
        /// <summary>Port for Server</summary>
        int SourceConnectionInfoPort { get; set; }
        /// <summary>Name of the server</summary>
        string SourceConnectionInfoServerName { get; set; }
        /// <summary>Type of connection info</summary>
        string SourceConnectionInfoType { get; set; }
        /// <summary>User name</summary>
        string SourceConnectionInfoUserName { get; set; }
        /// <summary>Optional resource Id of the source server if it is an azure instance</summary>
        string SourceServerResourceId { get; set; }
        /// <summary>Parameter to specify when the migration started</summary>
        global::System.DateTime? StartedOn { get; set; }
        /// <summary>Connection information for target Azure Database for MySQL</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221130Preview.IMySqlConnectionInfo TargetConnectionInfo { get; set; }
        /// <summary>Additional connection settings</summary>
        string TargetConnectionInfoAdditionalSetting { get; set; }
        /// <summary>Authentication type to use for connection</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthenticationType? TargetConnectionInfoAuthentication { get; set; }
        /// <summary>Data source</summary>
        string TargetConnectionInfoDataSource { get; set; }
        /// <summary>Whether to encrypt the connection</summary>
        bool? TargetConnectionInfoEncryptConnection { get; set; }
        /// <summary>Password credential.</summary>
        string TargetConnectionInfoPassword { get; set; }
        /// <summary>Port for Server</summary>
        int TargetConnectionInfoPort { get; set; }
        /// <summary>Name of the server</summary>
        string TargetConnectionInfoServerName { get; set; }
        /// <summary>Type of connection info</summary>
        string TargetConnectionInfoType { get; set; }
        /// <summary>User name</summary>
        string TargetConnectionInfoUserName { get; set; }
        /// <summary>Optional resource Id of the target server</summary>
        string TargetServerResourceId { get; set; }

    }
}