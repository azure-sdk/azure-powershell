// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Extensions;

    /// <summary>IR validations for MI / VM</summary>
    public partial class ValidateIr :
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IValidateIr,
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IValidateIrInternal
    {

        /// <summary>Storage Account Key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string AzureBlobAccountKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IBackupConfigurationInternal)BackupConfiguration).AzureBlobAccountKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IBackupConfigurationInternal)BackupConfiguration).AzureBlobAccountKey = value ?? null; }

        /// <summary>Blob container name where backups are stored.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string AzureBlobContainerName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IBackupConfigurationInternal)BackupConfiguration).AzureBlobContainerName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IBackupConfigurationInternal)BackupConfiguration).AzureBlobContainerName = value ?? null; }

        /// <summary>Resource Id of the storage account where backups are stored.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string AzureBlobStorageAccountResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IBackupConfigurationInternal)BackupConfiguration).AzureBlobStorageAccountResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IBackupConfigurationInternal)BackupConfiguration).AzureBlobStorageAccountResourceId = value ?? null; }

        /// <summary>Backing field for <see cref="BackupConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IBackupConfiguration _backupConfiguration;

        /// <summary>Backup configuration info.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IBackupConfiguration BackupConfiguration { get => (this._backupConfiguration = this._backupConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.BackupConfiguration()); set => this._backupConfiguration = value; }

        /// <summary>Backing field for <see cref="Error" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ITestConnectivityData[] _error;

        /// <summary>Validation errors.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ITestConnectivityData[] Error { get => this._error; set => this._error = value; }

        /// <summary>Password for username to access file share location.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public System.Security.SecureString FileSharePassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IBackupConfigurationInternal)BackupConfiguration).FileSharePassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IBackupConfigurationInternal)BackupConfiguration).FileSharePassword = value ?? null; }

        /// <summary>Location as SMB share or local drive where backups are placed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string FileSharePath { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IBackupConfigurationInternal)BackupConfiguration).FileSharePath; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IBackupConfigurationInternal)BackupConfiguration).FileSharePath = value ?? null; }

        /// <summary>Username to access the file share location for backups.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string FileShareUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IBackupConfigurationInternal)BackupConfiguration).FileShareUsername; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IBackupConfigurationInternal)BackupConfiguration).FileShareUsername = value ?? null; }

        /// <summary>Backing field for <see cref="Kind" /> property.</summary>
        private string _kind;

        /// <summary>Resource Type</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string Kind { get => this._kind; set => this._kind = value; }

        /// <summary>Internal Acessors for BackupConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IBackupConfiguration Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IValidateIrInternal.BackupConfiguration { get => (this._backupConfiguration = this._backupConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.BackupConfiguration()); set { {_backupConfiguration = value;} } }

        /// <summary>Internal Acessors for BackupConfigurationSourceLocation</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISourceLocation Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IValidateIrInternal.BackupConfigurationSourceLocation { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IBackupConfigurationInternal)BackupConfiguration).SourceLocation; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IBackupConfigurationInternal)BackupConfiguration).SourceLocation = value; }

        /// <summary>Internal Acessors for BackupConfigurationTargetLocation</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ITargetLocation Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IValidateIrInternal.BackupConfigurationTargetLocation { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IBackupConfigurationInternal)BackupConfiguration).TargetLocation; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IBackupConfigurationInternal)BackupConfiguration).TargetLocation = value; }

        /// <summary>Internal Acessors for SourceLocationAzureBlob</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IAzureBlob Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IValidateIrInternal.SourceLocationAzureBlob { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IBackupConfigurationInternal)BackupConfiguration).SourceLocationAzureBlob; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IBackupConfigurationInternal)BackupConfiguration).SourceLocationAzureBlob = value; }

        /// <summary>Internal Acessors for SourceLocationFileShare</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlFileShare Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IValidateIrInternal.SourceLocationFileShare { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IBackupConfigurationInternal)BackupConfiguration).SourceLocationFileShare; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IBackupConfigurationInternal)BackupConfiguration).SourceLocationFileShare = value; }

        /// <summary>Internal Acessors for SourceLocationFileStorageType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IValidateIrInternal.SourceLocationFileStorageType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IBackupConfigurationInternal)BackupConfiguration).SourceLocationFileStorageType; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IBackupConfigurationInternal)BackupConfiguration).SourceLocationFileStorageType = value; }

        /// <summary>Internal Acessors for SourceSqlConnection</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlConnectionInformation Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IValidateIrInternal.SourceSqlConnection { get => (this._sourceSqlConnection = this._sourceSqlConnection ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.SqlConnectionInformation()); set { {_sourceSqlConnection = value;} } }

        /// <summary>Internal Acessors for TargetSqlConnection</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlConnectionInformation Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IValidateIrInternal.TargetSqlConnection { get => (this._targetSqlConnection = this._targetSqlConnection ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.SqlConnectionInformation()); set { {_targetSqlConnection = value;} } }

        /// <summary>Backing field for <see cref="SourceDatabaseName" /> property.</summary>
        private string _sourceDatabaseName;

        /// <summary>Name of the source database.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string SourceDatabaseName { get => this._sourceDatabaseName; set => this._sourceDatabaseName = value; }

        /// <summary>Backup storage Type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string SourceLocationFileStorageType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IBackupConfigurationInternal)BackupConfiguration).SourceLocationFileStorageType; }

        /// <summary>Backing field for <see cref="SourceSqlConnection" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlConnectionInformation _sourceSqlConnection;

        /// <summary>Source SQL Server connection details.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlConnectionInformation SourceSqlConnection { get => (this._sourceSqlConnection = this._sourceSqlConnection ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.SqlConnectionInformation()); set => this._sourceSqlConnection = value; }

        /// <summary>Authentication type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string SourceSqlConnectionAuthentication { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlConnectionInformationInternal)SourceSqlConnection).Authentication; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlConnectionInformationInternal)SourceSqlConnection).Authentication = value ?? null; }

        /// <summary>Data source.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string SourceSqlConnectionDataSource { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlConnectionInformationInternal)SourceSqlConnection).DataSource; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlConnectionInformationInternal)SourceSqlConnection).DataSource = value ?? null; }

        /// <summary>Whether to encrypt connection or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public bool? SourceSqlConnectionEncryptConnection { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlConnectionInformationInternal)SourceSqlConnection).EncryptConnection; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlConnectionInformationInternal)SourceSqlConnection).EncryptConnection = value ?? default(bool); }

        /// <summary>Password to connect to source SQL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public System.Security.SecureString SourceSqlConnectionPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlConnectionInformationInternal)SourceSqlConnection).Password; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlConnectionInformationInternal)SourceSqlConnection).Password = value ?? null; }

        /// <summary>Whether to trust server certificate or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public bool? SourceSqlConnectionTrustServerCertificate { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlConnectionInformationInternal)SourceSqlConnection).TrustServerCertificate; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlConnectionInformationInternal)SourceSqlConnection).TrustServerCertificate = value ?? default(bool); }

        /// <summary>User name to connect to source SQL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string SourceSqlConnectionUserName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlConnectionInformationInternal)SourceSqlConnection).UserName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlConnectionInformationInternal)SourceSqlConnection).UserName = value ?? null; }

        /// <summary>Backing field for <see cref="Succeeded" /> property.</summary>
        private bool? _succeeded;

        /// <summary>Validation result.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public bool? Succeeded { get => this._succeeded; set => this._succeeded = value; }

        /// <summary>Backing field for <see cref="TargetDatabaseName" /> property.</summary>
        private string _targetDatabaseName;

        /// <summary>Name of the target database.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string TargetDatabaseName { get => this._targetDatabaseName; set => this._targetDatabaseName = value; }

        /// <summary>Storage Account Key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetLocationAccountKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IBackupConfigurationInternal)BackupConfiguration).TargetLocationAccountKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IBackupConfigurationInternal)BackupConfiguration).TargetLocationAccountKey = value ?? null; }

        /// <summary>Resource Id of the storage account copying backups.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetLocationStorageAccountResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IBackupConfigurationInternal)BackupConfiguration).TargetLocationStorageAccountResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IBackupConfigurationInternal)BackupConfiguration).TargetLocationStorageAccountResourceId = value ?? null; }

        /// <summary>Backing field for <see cref="TargetSqlConnection" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlConnectionInformation _targetSqlConnection;

        /// <summary>Target SQL Server connection details.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlConnectionInformation TargetSqlConnection { get => (this._targetSqlConnection = this._targetSqlConnection ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.SqlConnectionInformation()); set => this._targetSqlConnection = value; }

        /// <summary>Authentication type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetSqlConnectionAuthentication { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlConnectionInformationInternal)TargetSqlConnection).Authentication; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlConnectionInformationInternal)TargetSqlConnection).Authentication = value ?? null; }

        /// <summary>Data source.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetSqlConnectionDataSource { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlConnectionInformationInternal)TargetSqlConnection).DataSource; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlConnectionInformationInternal)TargetSqlConnection).DataSource = value ?? null; }

        /// <summary>Whether to encrypt connection or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public bool? TargetSqlConnectionEncryptConnection { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlConnectionInformationInternal)TargetSqlConnection).EncryptConnection; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlConnectionInformationInternal)TargetSqlConnection).EncryptConnection = value ?? default(bool); }

        /// <summary>Password to connect to source SQL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public System.Security.SecureString TargetSqlConnectionPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlConnectionInformationInternal)TargetSqlConnection).Password; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlConnectionInformationInternal)TargetSqlConnection).Password = value ?? null; }

        /// <summary>Whether to trust server certificate or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public bool? TargetSqlConnectionTrustServerCertificate { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlConnectionInformationInternal)TargetSqlConnection).TrustServerCertificate; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlConnectionInformationInternal)TargetSqlConnection).TrustServerCertificate = value ?? default(bool); }

        /// <summary>User name to connect to source SQL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetSqlConnectionUserName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlConnectionInformationInternal)TargetSqlConnection).UserName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlConnectionInformationInternal)TargetSqlConnection).UserName = value ?? null; }

        /// <summary>Creates an new <see cref="ValidateIr" /> instance.</summary>
        public ValidateIr()
        {

        }
    }
    /// IR validations for MI / VM
    public partial interface IValidateIr :
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.IJsonSerializable
    {
        /// <summary>Storage Account Key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Storage Account Key.",
        SerializedName = @"accountKey",
        PossibleTypes = new [] { typeof(string) })]
        string AzureBlobAccountKey { get; set; }
        /// <summary>Blob container name where backups are stored.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Blob container name where backups are stored.",
        SerializedName = @"blobContainerName",
        PossibleTypes = new [] { typeof(string) })]
        string AzureBlobContainerName { get; set; }
        /// <summary>Resource Id of the storage account where backups are stored.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource Id of the storage account where backups are stored.",
        SerializedName = @"storageAccountResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string AzureBlobStorageAccountResourceId { get; set; }
        /// <summary>Validation errors.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Validation errors.",
        SerializedName = @"errors",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ITestConnectivityData) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ITestConnectivityData[] Error { get; set; }
        /// <summary>Password for username to access file share location.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Password for username to access file share location.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString FileSharePassword { get; set; }
        /// <summary>Location as SMB share or local drive where backups are placed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Location as SMB share or local drive where backups are placed.",
        SerializedName = @"path",
        PossibleTypes = new [] { typeof(string) })]
        string FileSharePath { get; set; }
        /// <summary>Username to access the file share location for backups.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Username to access the file share location for backups.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string FileShareUsername { get; set; }
        /// <summary>Resource Type</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource Type",
        SerializedName = @"kind",
        PossibleTypes = new [] { typeof(string) })]
        string Kind { get; set; }
        /// <summary>Name of the source database.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the source database.",
        SerializedName = @"sourceDatabaseName",
        PossibleTypes = new [] { typeof(string) })]
        string SourceDatabaseName { get; set; }
        /// <summary>Backup storage Type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Backup storage Type.",
        SerializedName = @"fileStorageType",
        PossibleTypes = new [] { typeof(string) })]
        string SourceLocationFileStorageType { get;  }
        /// <summary>Authentication type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Authentication type.",
        SerializedName = @"authentication",
        PossibleTypes = new [] { typeof(string) })]
        string SourceSqlConnectionAuthentication { get; set; }
        /// <summary>Data source.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Data source.",
        SerializedName = @"dataSource",
        PossibleTypes = new [] { typeof(string) })]
        string SourceSqlConnectionDataSource { get; set; }
        /// <summary>Whether to encrypt connection or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether to encrypt connection or not.",
        SerializedName = @"encryptConnection",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SourceSqlConnectionEncryptConnection { get; set; }
        /// <summary>Password to connect to source SQL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Password to connect to source SQL.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString SourceSqlConnectionPassword { get; set; }
        /// <summary>Whether to trust server certificate or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether to trust server certificate or not.",
        SerializedName = @"trustServerCertificate",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SourceSqlConnectionTrustServerCertificate { get; set; }
        /// <summary>User name to connect to source SQL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"User name to connect to source SQL.",
        SerializedName = @"userName",
        PossibleTypes = new [] { typeof(string) })]
        string SourceSqlConnectionUserName { get; set; }
        /// <summary>Validation result.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Validation result.",
        SerializedName = @"succeeded",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Succeeded { get; set; }
        /// <summary>Name of the target database.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the target database.",
        SerializedName = @"targetDatabaseName",
        PossibleTypes = new [] { typeof(string) })]
        string TargetDatabaseName { get; set; }
        /// <summary>Storage Account Key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Storage Account Key.",
        SerializedName = @"accountKey",
        PossibleTypes = new [] { typeof(string) })]
        string TargetLocationAccountKey { get; set; }
        /// <summary>Resource Id of the storage account copying backups.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource Id of the storage account copying backups.",
        SerializedName = @"storageAccountResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string TargetLocationStorageAccountResourceId { get; set; }
        /// <summary>Authentication type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Authentication type.",
        SerializedName = @"authentication",
        PossibleTypes = new [] { typeof(string) })]
        string TargetSqlConnectionAuthentication { get; set; }
        /// <summary>Data source.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Data source.",
        SerializedName = @"dataSource",
        PossibleTypes = new [] { typeof(string) })]
        string TargetSqlConnectionDataSource { get; set; }
        /// <summary>Whether to encrypt connection or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether to encrypt connection or not.",
        SerializedName = @"encryptConnection",
        PossibleTypes = new [] { typeof(bool) })]
        bool? TargetSqlConnectionEncryptConnection { get; set; }
        /// <summary>Password to connect to source SQL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Password to connect to source SQL.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString TargetSqlConnectionPassword { get; set; }
        /// <summary>Whether to trust server certificate or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether to trust server certificate or not.",
        SerializedName = @"trustServerCertificate",
        PossibleTypes = new [] { typeof(bool) })]
        bool? TargetSqlConnectionTrustServerCertificate { get; set; }
        /// <summary>User name to connect to source SQL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"User name to connect to source SQL.",
        SerializedName = @"userName",
        PossibleTypes = new [] { typeof(string) })]
        string TargetSqlConnectionUserName { get; set; }

    }
    /// IR validations for MI / VM
    internal partial interface IValidateIrInternal

    {
        /// <summary>Storage Account Key.</summary>
        string AzureBlobAccountKey { get; set; }
        /// <summary>Blob container name where backups are stored.</summary>
        string AzureBlobContainerName { get; set; }
        /// <summary>Resource Id of the storage account where backups are stored.</summary>
        string AzureBlobStorageAccountResourceId { get; set; }
        /// <summary>Backup configuration info.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IBackupConfiguration BackupConfiguration { get; set; }
        /// <summary>Source location of backups.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISourceLocation BackupConfigurationSourceLocation { get; set; }
        /// <summary>Target location for copying backups.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ITargetLocation BackupConfigurationTargetLocation { get; set; }
        /// <summary>Validation errors.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ITestConnectivityData[] Error { get; set; }
        /// <summary>Password for username to access file share location.</summary>
        System.Security.SecureString FileSharePassword { get; set; }
        /// <summary>Location as SMB share or local drive where backups are placed.</summary>
        string FileSharePath { get; set; }
        /// <summary>Username to access the file share location for backups.</summary>
        string FileShareUsername { get; set; }
        /// <summary>Resource Type</summary>
        string Kind { get; set; }
        /// <summary>Name of the source database.</summary>
        string SourceDatabaseName { get; set; }
        /// <summary>Source Azure Blob.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.IAzureBlob SourceLocationAzureBlob { get; set; }
        /// <summary>Source File share.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlFileShare SourceLocationFileShare { get; set; }
        /// <summary>Backup storage Type.</summary>
        string SourceLocationFileStorageType { get; set; }
        /// <summary>Source SQL Server connection details.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlConnectionInformation SourceSqlConnection { get; set; }
        /// <summary>Authentication type.</summary>
        string SourceSqlConnectionAuthentication { get; set; }
        /// <summary>Data source.</summary>
        string SourceSqlConnectionDataSource { get; set; }
        /// <summary>Whether to encrypt connection or not.</summary>
        bool? SourceSqlConnectionEncryptConnection { get; set; }
        /// <summary>Password to connect to source SQL.</summary>
        System.Security.SecureString SourceSqlConnectionPassword { get; set; }
        /// <summary>Whether to trust server certificate or not.</summary>
        bool? SourceSqlConnectionTrustServerCertificate { get; set; }
        /// <summary>User name to connect to source SQL.</summary>
        string SourceSqlConnectionUserName { get; set; }
        /// <summary>Validation result.</summary>
        bool? Succeeded { get; set; }
        /// <summary>Name of the target database.</summary>
        string TargetDatabaseName { get; set; }
        /// <summary>Storage Account Key.</summary>
        string TargetLocationAccountKey { get; set; }
        /// <summary>Resource Id of the storage account copying backups.</summary>
        string TargetLocationStorageAccountResourceId { get; set; }
        /// <summary>Target SQL Server connection details.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20221031Preview.ISqlConnectionInformation TargetSqlConnection { get; set; }
        /// <summary>Authentication type.</summary>
        string TargetSqlConnectionAuthentication { get; set; }
        /// <summary>Data source.</summary>
        string TargetSqlConnectionDataSource { get; set; }
        /// <summary>Whether to encrypt connection or not.</summary>
        bool? TargetSqlConnectionEncryptConnection { get; set; }
        /// <summary>Password to connect to source SQL.</summary>
        System.Security.SecureString TargetSqlConnectionPassword { get; set; }
        /// <summary>Whether to trust server certificate or not.</summary>
        bool? TargetSqlConnectionTrustServerCertificate { get; set; }
        /// <summary>User name to connect to source SQL.</summary>
        string TargetSqlConnectionUserName { get; set; }

    }
}