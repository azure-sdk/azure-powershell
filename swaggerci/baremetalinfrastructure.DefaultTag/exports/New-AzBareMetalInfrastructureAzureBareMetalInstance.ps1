
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Creates an Azure Bare Metal Instance for the specified subscription, resource group, and instance name.
.Description
Creates an Azure Bare Metal Instance for the specified subscription, resource group, and instance name.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Models.Api20240801Preview.IAzureBareMetalInstance
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

NETWORKPROFILENETWORKINTERFACE <INetworkInterface[]>: Specifies the network interfaces for the Azure Bare Metal Instance.
  [IPAddress <String>]: Specifies the IP address of the network interface.

STORAGEPROFILEOSDISK <IDisk[]>: Specifies information about the operating system disk used by bare metal instance.
  [Name <String>]: The disk name.
  [SizeGb <Int32?>]: Specifies the size of an empty data disk in gigabytes.
.Link
https://learn.microsoft.com/powershell/module/az.baremetalinfrastructure/new-azbaremetalinfrastructureazurebaremetalinstance
#>
function New-AzBareMetalInfrastructureAzureBareMetalInstance {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Models.Api20240801Preview.IAzureBareMetalInstance])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Alias('AzureBareMetalInstanceName')]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Path')]
    [System.String]
    # Name of the Azure Bare Metal Instance, also known as the ResourceName.
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    # The value must be an UUID.
    ${SubscriptionId},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Body')]
    [System.String]
    # The geo-location where the resource lives
    ${Location},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Body')]
    [System.String]
    # Specifies the Azure Bare Metal Instance unique ID.
    ${AzureBareMetalInstanceId},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Support.AzureBareMetalInstanceSizeNamesEnum])]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Support.AzureBareMetalInstanceSizeNamesEnum]
    # Specifies the Azure Bare Metal Instance SKU.
    ${HardwareProfileAzureBareMetalInstanceSize},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Support.AzureBareMetalHardwareTypeNamesEnum])]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Support.AzureBareMetalHardwareTypeNamesEnum]
    # Name of the hardware type (vendor and/or their product name)
    ${HardwareProfileHardwareType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Body')]
    [System.String]
    # Hardware revision of an Azure Bare Metal Instance
    ${HwRevision},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Body')]
    [System.String]
    # Specifies the circuit id for connecting to express route.
    ${NetworkProfileCircuitId},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Models.Api20240801Preview.INetworkInterface[]]
    # Specifies the network interfaces for the Azure Bare Metal Instance.
    # To construct, see NOTES section for NETWORKPROFILENETWORKINTERFACE properties and create a hash table.
    ${NetworkProfileNetworkInterface},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Body')]
    [System.String]
    # Specifies the host OS name of the Azure Bare Metal instance.
    ${OSProfileComputerName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Body')]
    [System.String]
    # This property allows you to specify the type of the OS.
    ${OSProfileOstype},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Body')]
    [System.String]
    # Specifies the SSH public key used to access the operating system.
    ${OSProfileSshPublicKey},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Body')]
    [System.String]
    # Specifies version of operating system.
    ${OSProfileVersion},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Body')]
    [System.String]
    # ARM ID of another AzureBareMetalInstance that will share a network with this AzureBareMetalInstance
    ${PartnerNodeId},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Support.AzureBareMetalInstancePowerStateEnum])]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Support.AzureBareMetalInstancePowerStateEnum]
    # Resource power state
    ${PowerState},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Body')]
    [System.String]
    # Resource proximity placement group
    ${ProximityPlacementGroup},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Body')]
    [System.String]
    # IP Address to connect to storage.
    ${StorageProfileNfsIPAddress},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Models.Api20240801Preview.IDisk[]]
    # Specifies information about the operating system disk used by bare metal instance.
    # To construct, see NOTES section for STORAGEPROFILEOSDISK properties and create a hash table.
    ${StorageProfileOSDisk},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Models.Api50.ITrackedResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.BareMetalInfrastructure.private\New-AzBareMetalInfrastructureAzureBareMetalInstance_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $testPlayback = $false
            $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
