
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Creates an Azure Bare Metal Storage Instance for the specified subscription, resource group, and instance name.
.Description
Creates an Azure Bare Metal Storage Instance for the specified subscription, resource group, and instance name.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Models.Api20240801Preview.IAzureBareMetalStorageInstance
.Link
https://learn.microsoft.com/powershell/module/az.baremetalinfrastructure/new-azbaremetalinfrastructureazurebaremetalstorageinstance
#>
function New-AzBareMetalInfrastructureAzureBareMetalStorageInstance {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Models.Api20240801Preview.IAzureBareMetalStorageInstance])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Alias('AzureBareMetalStorageInstanceName')]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Path')]
    [System.String]
    # Name of the Azure Bare Metal Storage Instance, also known as the ResourceName.
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    # The value must be an UUID.
    ${SubscriptionId},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Body')]
    [System.String]
    # The geo-location where the resource lives
    ${Location},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Body')]
    [System.String]
    # Specifies the AzureBareMetaStorageInstance unique ID.
    ${AzureBareMetalStorageInstanceUniqueIdentifier},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Support.ResourceIdentityType])]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Support.ResourceIdentityType]
    # The type of identity used for the Azure Bare Metal Storage Instance.
    # The type 'SystemAssigned' refers to an implicitly created identity.
    # The type 'None' will remove any identities from the Azure Bare Metal Storage Instance.
    ${IdentityType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Body')]
    [System.String]
    # the SKU type that is provisioned
    ${StorageBillingPropertyAzureBareMetalStorageInstanceSize},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Body')]
    [System.String]
    # the billing mode for the storage instance
    ${StorageBillingPropertyBillingMode},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Body')]
    [System.String]
    # the kind of storage instance
    ${StoragePropertyGeneration},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Body')]
    [System.String]
    # the hardware type of the storage instance
    ${StoragePropertyHardwareType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Body')]
    [System.String]
    # the offering type for which the resource is getting provisioned
    ${StoragePropertyOfferingType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Body')]
    [System.String]
    # the storage protocol for which the resource is getting provisioned
    ${StoragePropertyStorageType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Body')]
    [System.String]
    # the workload for which the resource is getting provisioned
    ${StoragePropertyWorkloadType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Models.Api50.ITrackedResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.BareMetalInfrastructure.private\New-AzBareMetalInfrastructureAzureBareMetalStorageInstance_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $testPlayback = $false
            $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.BareMetalInfrastructure.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
