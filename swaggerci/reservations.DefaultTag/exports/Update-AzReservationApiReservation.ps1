
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Updates the applied scopes of the `Reservation`.
.Description
Updates the applied scopes of the `Reservation`.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Models.IReservationApiIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Models.Api20221101.IReservationResponse
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IReservationApiIdentity>: Identity Parameter
  [Id <String>]: Quota Request ID.
  [Id1 <String>]: Resource identity path
  [Location <String>]: Azure region.
  [ProviderId <String>]: Azure resource provider ID.
  [ReservationId <String>]: Id of the reservation item
  [ReservationOrderId <String>]: Order Id of the reservation
  [ResourceName <String>]: The resource name for a resource provider, such as SKU name for Microsoft.Compute, Sku or TotalLowPriorityCores for Microsoft.MachineLearningServices
  [SubscriptionId <String>]: Id of the subscription
.Link
https://learn.microsoft.com/powershell/module/az.reservationapi/update-azreservationapireservation
#>
function Update-AzReservationApiReservation {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Models.Api20221101.IReservationResponse])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Alias('ReservationId')]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Path')]
    [System.String]
    # Id of the reservation item
    ${Id},

    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Alias('ReservationOrderId')]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Path')]
    [System.String]
    # Order Id of the reservation
    ${OrderId},

    [Parameter(ParameterSetName='UpdateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Models.IReservationApiIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Body')]
    [System.String[]]
    # List of the subscriptions that the benefit will be applied.
    # Do not specify if AppliedScopeType is Shared.
    # This property will be deprecated and replaced by appliedScopeProperties instead for Single AppliedScopeType.
    ${AppliedScope},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Body')]
    [System.String]
    # Display name
    ${AppliedScopePropertiesDisplayName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Body')]
    [System.String]
    # Fully-qualified identifier of the management group where the benefit must be applied.
    ${AppliedScopePropertiesManagementGroupId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Body')]
    [System.String]
    # Fully-qualified identifier of the resource group.
    ${AppliedScopePropertiesResourceGroupId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Body')]
    [System.String]
    # Fully-qualified identifier of the subscription.
    ${AppliedScopePropertiesSubscriptionId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Body')]
    [System.String]
    # Tenant ID where the savings plan should apply benefit.
    ${AppliedScopePropertiesTenantId},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Support.AppliedScopeType])]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Support.AppliedScopeType]
    # Type of the Applied Scope.
    ${AppliedScopeType},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Support.ReservationBillingPlan])]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Support.ReservationBillingPlan]
    # Represent the billing plans.
    ${BillingPlan},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Body')]
    [System.String]
    # Subscription that will be charged for purchasing reservation or savings plan
    ${BillingScopeId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Body')]
    [System.String]
    # Friendly name of the reservation
    ${DisplayName},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Support.InstanceFlexibility])]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Support.InstanceFlexibility]
    # Turning this on will apply the reservation discount to other VMs in the same VM size group.
    # Only specify for VirtualMachines reserved resource type.
    ${InstanceFlexibility},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Body')]
    [System.String]
    # Display name of the reservation
    ${Name},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Body')]
    [System.String]
    # The Azure region where the reserved resource lives.
    ${PurchasePropertyLocation},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Body')]
    [System.Int32]
    # Quantity of the skus that are part of the reservation.
    ${Quantity},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Setting this to true will automatically purchase a new reservation on the expiration date time.
    ${Renew},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Body')]
    [System.String[]]
    # List of the subscriptions that the benefit will be applied.
    # Do not specify if AppliedScopeType is Shared.
    # This property will be deprecated and replaced by appliedScopeProperties instead for Single AppliedScopeType.
    ${RenewPropertiesPurchasePropertiesAppliedScope},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Body')]
    [System.String]
    # Display name
    ${RenewPropertiesPurchasePropertiesAppliedScopePropertiesDisplayName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Body')]
    [System.String]
    # Fully-qualified identifier of the management group where the benefit must be applied.
    ${RenewPropertiesPurchasePropertiesAppliedScopePropertiesManagementGroupId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Body')]
    [System.String]
    # Fully-qualified identifier of the resource group.
    ${RenewPropertiesPurchasePropertiesAppliedScopePropertiesResourceGroupId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Body')]
    [System.String]
    # Fully-qualified identifier of the subscription.
    ${RenewPropertiesPurchasePropertiesAppliedScopePropertiesSubscriptionId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Body')]
    [System.String]
    # Tenant ID where the savings plan should apply benefit.
    ${RenewPropertiesPurchasePropertiesAppliedScopePropertiesTenantId},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Support.AppliedScopeType])]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Support.AppliedScopeType]
    # Type of the Applied Scope.
    ${RenewPropertiesPurchasePropertiesAppliedScopeType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Setting this to true will automatically purchase a new reservation on the expiration date time.
    ${RenewPropertiesPurchasePropertiesRenew},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Body')]
    [System.DateTime]
    # This is the date-time when the Azure hybrid benefit needs to be reviewed.
    ${RenewPropertiesPurchasePropertiesReviewDateTime},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Support.InstanceFlexibility])]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Support.InstanceFlexibility]
    # Turning this on will apply the reservation discount to other VMs in the same VM size group.
    # Only specify for VirtualMachines reserved resource type.
    ${ReservedResourcePropertyInstanceFlexibility},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Support.ReservedResourceType])]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Support.ReservedResourceType]
    # The type of the resource that is being reserved.
    ${ReservedResourceType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Body')]
    [System.DateTime]
    # This is the date-time when the Azure hybrid benefit needs to be reviewed.
    ${ReviewDateTime},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Body')]
    [System.String]
    # .
    ${SkuName},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Support.ReservationTerm])]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Support.ReservationTerm]
    # Represent the term of reservation.
    ${Term},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            UpdateExpanded = 'Az.ReservationApi.private\Update-AzReservationApiReservation_UpdateExpanded';
            UpdateViaIdentityExpanded = 'Az.ReservationApi.private\Update-AzReservationApiReservation_UpdateViaIdentityExpanded';
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.ReservationApi.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
