// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Extensions;

    /// <summary>Resource properties.</summary>
    public partial class MachineProperties :
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachineProperties,
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal
    {

        /// <summary>Backing field for <see cref="Agent" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IAgentConfiguration _agent;

        /// <summary>Dependency Agent configuration.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IAgentConfiguration Agent { get => (this._agent = this._agent ?? new Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.AgentConfiguration()); set => this._agent = value; }

        /// <summary>Machine clock granularity in milliseconds.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public int? AgentClockGranularity { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IAgentConfigurationInternal)Agent).ClockGranularity; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IAgentConfigurationInternal)Agent).ClockGranularity = value ?? default(int); }

        /// <summary>Dependency Agent unique identifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string AgentDependencyAgentId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IAgentConfigurationInternal)Agent).DependencyAgentId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IAgentConfigurationInternal)Agent).DependencyAgentId = value ?? null; }

        /// <summary>Dependency Agent revision number.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string AgentDependencyAgentRevision { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IAgentConfigurationInternal)Agent).DependencyAgentRevision; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IAgentConfigurationInternal)Agent).DependencyAgentRevision = value ?? null; }

        /// <summary>Dependency Agent version number.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string AgentDependencyAgentVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IAgentConfigurationInternal)Agent).DependencyAgentVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IAgentConfigurationInternal)Agent).DependencyAgentVersion = value ?? null; }

        /// <summary>Health Service Agent unique identifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string AgentId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IAgentConfigurationInternal)Agent).AgentId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IAgentConfigurationInternal)Agent).AgentId = value ?? null; }

        /// <summary>
        /// Specifies whether the machine has been rebooted since the Dependency Agent installation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.MachineRebootStatus? AgentRebootStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IAgentConfigurationInternal)Agent).RebootStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IAgentConfigurationInternal)Agent).RebootStatus = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.MachineRebootStatus)""); }

        /// <summary>Backing field for <see cref="BootTime" /> property.</summary>
        private global::System.DateTime? _bootTime;

        /// <summary>UTC date and time when the machine last booted</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Owned)]
        public global::System.DateTime? BootTime { get => this._bootTime; set => this._bootTime = value; }

        /// <summary>Backing field for <see cref="ComputerName" /> property.</summary>
        private string _computerName;

        /// <summary>Name of the machine, e.g., server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Owned)]
        public string ComputerName { get => this._computerName; set => this._computerName = value; }

        /// <summary>Backing field for <see cref="DisplayName" /> property.</summary>
        private string _displayName;

        /// <summary>Name to use for display purposes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Owned)]
        public string DisplayName { get => this._displayName; set => this._displayName = value; }

        /// <summary>Backing field for <see cref="FullyQualifiedDomainName" /> property.</summary>
        private string _fullyQualifiedDomainName;

        /// <summary>Fully-qualified name of the machine, e.g., server.company.com</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Owned)]
        public string FullyQualifiedDomainName { get => this._fullyQualifiedDomainName; set => this._fullyQualifiedDomainName = value; }

        /// <summary>Backing field for <see cref="Hosting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IHostingConfiguration _hosting;

        /// <summary>
        /// Hosting-related configuration. Present if hosting information is discovered for the VM.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IHostingConfiguration Hosting { get => (this._hosting = this._hosting ?? new Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.HostingConfiguration()); set => this._hosting = value; }

        /// <summary>Additional hosting configuration type qualifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string HostingKind { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IHostingConfigurationInternal)Hosting).Kind; }

        /// <summary>The hosting provider of the VM.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string HostingProvider { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IHostingConfigurationInternal)Hosting).Provider; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IHostingConfigurationInternal)Hosting).Provider = value ?? null; }

        /// <summary>Backing field for <see cref="Hypervisor" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IHypervisorConfiguration _hypervisor;

        /// <summary>
        /// Hypervisor-related configuration. Present only when 'virtualizationState' is `hypervisor`.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IHypervisorConfiguration Hypervisor { get => (this._hypervisor = this._hypervisor ?? new Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.HypervisorConfiguration()); set => this._hypervisor = value; }

        /// <summary>
        /// The unique identifier of the hypervisor machine as reported by the underlying virtualization system.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string HypervisorNativeHostMachineId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IHypervisorConfigurationInternal)Hypervisor).NativeHostMachineId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IHypervisorConfigurationInternal)Hypervisor).NativeHostMachineId = value ?? null; }

        /// <summary>
        /// Specifies the virtualization technology used by the hypervisor (hyperv, vmware, etc.)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.HypervisorType? HypervisorType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IHypervisorConfigurationInternal)Hypervisor).HypervisorType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IHypervisorConfigurationInternal)Hypervisor).HypervisorType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.HypervisorType)""); }

        /// <summary>Internal Acessors for Agent</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IAgentConfiguration Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal.Agent { get => (this._agent = this._agent ?? new Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.AgentConfiguration()); set { {_agent = value;} } }

        /// <summary>Internal Acessors for Hosting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IHostingConfiguration Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal.Hosting { get => (this._hosting = this._hosting ?? new Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.HostingConfiguration()); set { {_hosting = value;} } }

        /// <summary>Internal Acessors for HostingKind</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal.HostingKind { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IHostingConfigurationInternal)Hosting).Kind; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IHostingConfigurationInternal)Hosting).Kind = value; }

        /// <summary>Internal Acessors for Hypervisor</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IHypervisorConfiguration Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal.Hypervisor { get => (this._hypervisor = this._hypervisor ?? new Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.HypervisorConfiguration()); set { {_hypervisor = value;} } }

        /// <summary>Internal Acessors for Networking</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.INetworkConfiguration Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal.Networking { get => (this._networking = this._networking ?? new Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.NetworkConfiguration()); set { {_networking = value;} } }

        /// <summary>Internal Acessors for OperatingSystem</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IOperatingSystemConfiguration Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal.OperatingSystem { get => (this._operatingSystem = this._operatingSystem ?? new Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.OperatingSystemConfiguration()); set { {_operatingSystem = value;} } }

        /// <summary>Internal Acessors for Resource</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachineResourcesConfiguration Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal.Resource { get => (this._resource = this._resource ?? new Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.MachineResourcesConfiguration()); set { {_resource = value;} } }

        /// <summary>Internal Acessors for Timezone</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ITimezone Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal.Timezone { get => (this._timezone = this._timezone ?? new Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.Timezone()); set { {_timezone = value;} } }

        /// <summary>Internal Acessors for VirtualMachine</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IVirtualMachineConfiguration Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal.VirtualMachine { get => (this._virtualMachine = this._virtualMachine ?? new Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.VirtualMachineConfiguration()); set { {_virtualMachine = value;} } }

        /// <summary>Backing field for <see cref="MonitoringState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.MonitoringState? _monitoringState;

        /// <summary>Specifies whether the machine is actively monitored or discovered.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.MonitoringState? MonitoringState { get => this._monitoringState; set => this._monitoringState = value; }

        /// <summary>Backing field for <see cref="Networking" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.INetworkConfiguration _networking;

        /// <summary>Network configuration (ips, gateways, dns, etc.)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.INetworkConfiguration Networking { get => (this._networking = this._networking ?? new Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.NetworkConfiguration()); set => this._networking = value; }

        /// <summary>Default IPv4 gateways.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string[] NetworkingDefaultIpv4Gateway { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.INetworkConfigurationInternal)Networking).DefaultIpv4Gateway; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.INetworkConfigurationInternal)Networking).DefaultIpv4Gateway = value ?? null /* arrayOf */; }

        /// <summary>DNS names associated with the machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string[] NetworkingDnsName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.INetworkConfigurationInternal)Networking).DnsName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.INetworkConfigurationInternal)Networking).DnsName = value ?? null /* arrayOf */; }

        /// <summary>IPv4 interfaces.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IIpv4NetworkInterface[] NetworkingIpv4Interface { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.INetworkConfigurationInternal)Networking).Ipv4Interface; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.INetworkConfigurationInternal)Networking).Ipv4Interface = value ?? null /* arrayOf */; }

        /// <summary>IPv6 interfaces.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IIpv6NetworkInterface[] NetworkingIpv6Interface { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.INetworkConfigurationInternal)Networking).Ipv6Interface; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.INetworkConfigurationInternal)Networking).Ipv6Interface = value ?? null /* arrayOf */; }

        /// <summary>MAC addresses of all active network interfaces.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string[] NetworkingMacAddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.INetworkConfigurationInternal)Networking).MacAddress; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.INetworkConfigurationInternal)Networking).MacAddress = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="OperatingSystem" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IOperatingSystemConfiguration _operatingSystem;

        /// <summary>Operating system information.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IOperatingSystemConfiguration OperatingSystem { get => (this._operatingSystem = this._operatingSystem ?? new Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.OperatingSystemConfiguration()); set => this._operatingSystem = value; }

        /// <summary>Operating system bitness (32-bit or 64-bit).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.Bitness? OperatingSystemBitness { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IOperatingSystemConfigurationInternal)OperatingSystem).Bitness; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IOperatingSystemConfigurationInternal)OperatingSystem).Bitness = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.Bitness)""); }

        /// <summary>Windows, Linux, etc.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.OperatingSystemFamily? OperatingSystemFamily { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IOperatingSystemConfigurationInternal)OperatingSystem).Family; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IOperatingSystemConfigurationInternal)OperatingSystem).Family = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.OperatingSystemFamily)""); }

        /// <summary>Operating system full name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string OperatingSystemFullName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IOperatingSystemConfigurationInternal)OperatingSystem).FullName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IOperatingSystemConfigurationInternal)OperatingSystem).FullName = value ?? null; }

        /// <summary>Backing field for <see cref="Resource" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachineResourcesConfiguration _resource;

        /// <summary>Machine resources (memory, cpu, etc.).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachineResourcesConfiguration Resource { get => (this._resource = this._resource ?? new Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.MachineResourcesConfiguration()); set => this._resource = value; }

        /// <summary>Number of CPUs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public int? ResourceCpu { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachineResourcesConfigurationInternal)Resource).Cpu; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachineResourcesConfigurationInternal)Resource).Cpu = value ?? default(int); }

        /// <summary>CPU speed in megahertz (Mhz).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public int? ResourceCpuSpeed { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachineResourcesConfigurationInternal)Resource).CpuSpeed; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachineResourcesConfigurationInternal)Resource).CpuSpeed = value ?? default(int); }

        /// <summary>Describes the accuracy of the cpuSpeed field.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.Accuracy? ResourceCpuSpeedAccuracy { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachineResourcesConfigurationInternal)Resource).CpuSpeedAccuracy; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachineResourcesConfigurationInternal)Resource).CpuSpeedAccuracy = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.Accuracy)""); }

        /// <summary>Physical memory in megabytes (MB).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public int? ResourcePhysicalMemory { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachineResourcesConfigurationInternal)Resource).PhysicalMemory; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachineResourcesConfigurationInternal)Resource).PhysicalMemory = value ?? default(int); }

        /// <summary>Backing field for <see cref="Timestamp" /> property.</summary>
        private global::System.DateTime? _timestamp;

        /// <summary>UTC date and time when this resource was updated in the system.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Owned)]
        public global::System.DateTime? Timestamp { get => this._timestamp; set => this._timestamp = value; }

        /// <summary>Backing field for <see cref="Timezone" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ITimezone _timezone;

        /// <summary>Timezone of the machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ITimezone Timezone { get => (this._timezone = this._timezone ?? new Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.Timezone()); set => this._timezone = value; }

        /// <summary>Timezone full name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string TimezoneFullName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ITimezoneInternal)Timezone).FullName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ITimezoneInternal)Timezone).FullName = value ?? null; }

        /// <summary>Backing field for <see cref="VirtualMachine" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IVirtualMachineConfiguration _virtualMachine;

        /// <summary>
        /// Virtualization-related configuration. Present only when `virtualizationState` is `virtual`.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IVirtualMachineConfiguration VirtualMachine { get => (this._virtualMachine = this._virtualMachine ?? new Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.VirtualMachineConfiguration()); set => this._virtualMachine = value; }

        /// <summary>The Name of the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string VirtualMachineName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IVirtualMachineConfigurationInternal)VirtualMachine).VirtualMachineName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IVirtualMachineConfigurationInternal)VirtualMachine).VirtualMachineName = value ?? null; }

        /// <summary>
        /// The unique identifier of the host of this virtual machine as reported by the underlying virtualization system.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string VirtualMachineNativeHostMachineId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IVirtualMachineConfigurationInternal)VirtualMachine).NativeHostMachineId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IVirtualMachineConfigurationInternal)VirtualMachine).NativeHostMachineId = value ?? null; }

        /// <summary>
        /// The unique identifier of the virtual machine as reported by the underlying virtualization system.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string VirtualMachineNativeMachineId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IVirtualMachineConfigurationInternal)VirtualMachine).NativeMachineId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IVirtualMachineConfigurationInternal)VirtualMachine).NativeMachineId = value ?? null; }

        /// <summary>
        /// Specifies the virtualization technology used by the machine (hyperv, vmware, etc.)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.VirtualMachineType? VirtualMachineType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IVirtualMachineConfigurationInternal)VirtualMachine).VirtualMachineType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IVirtualMachineConfigurationInternal)VirtualMachine).VirtualMachineType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.VirtualMachineType)""); }

        /// <summary>Backing field for <see cref="VirtualizationState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.VirtualizationState? _virtualizationState;

        /// <summary>Specifies whether the machine is virtualized.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.VirtualizationState? VirtualizationState { get => this._virtualizationState; set => this._virtualizationState = value; }

        /// <summary>Creates an new <see cref="MachineProperties" /> instance.</summary>
        public MachineProperties()
        {

        }
    }
    /// Resource properties.
    public partial interface IMachineProperties :
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.IJsonSerializable
    {
        /// <summary>Machine clock granularity in milliseconds.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Machine clock granularity in milliseconds.",
        SerializedName = @"clockGranularity",
        PossibleTypes = new [] { typeof(int) })]
        int? AgentClockGranularity { get; set; }
        /// <summary>Dependency Agent unique identifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Dependency Agent unique identifier.",
        SerializedName = @"dependencyAgentId",
        PossibleTypes = new [] { typeof(string) })]
        string AgentDependencyAgentId { get; set; }
        /// <summary>Dependency Agent revision number.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Dependency Agent revision number.",
        SerializedName = @"dependencyAgentRevision",
        PossibleTypes = new [] { typeof(string) })]
        string AgentDependencyAgentRevision { get; set; }
        /// <summary>Dependency Agent version number.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Dependency Agent version number.",
        SerializedName = @"dependencyAgentVersion",
        PossibleTypes = new [] { typeof(string) })]
        string AgentDependencyAgentVersion { get; set; }
        /// <summary>Health Service Agent unique identifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Health Service Agent unique identifier.",
        SerializedName = @"agentId",
        PossibleTypes = new [] { typeof(string) })]
        string AgentId { get; set; }
        /// <summary>
        /// Specifies whether the machine has been rebooted since the Dependency Agent installation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether the machine has been rebooted since the Dependency Agent installation.",
        SerializedName = @"rebootStatus",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.MachineRebootStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.MachineRebootStatus? AgentRebootStatus { get; set; }
        /// <summary>UTC date and time when the machine last booted</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"UTC date and time when the machine last booted",
        SerializedName = @"bootTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? BootTime { get; set; }
        /// <summary>Name of the machine, e.g., server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the machine, e.g., server",
        SerializedName = @"computerName",
        PossibleTypes = new [] { typeof(string) })]
        string ComputerName { get; set; }
        /// <summary>Name to use for display purposes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name to use for display purposes",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get; set; }
        /// <summary>Fully-qualified name of the machine, e.g., server.company.com</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Fully-qualified name of the machine, e.g., server.company.com",
        SerializedName = @"fullyQualifiedDomainName",
        PossibleTypes = new [] { typeof(string) })]
        string FullyQualifiedDomainName { get; set; }
        /// <summary>Additional hosting configuration type qualifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Additional hosting configuration type qualifier.",
        SerializedName = @"kind",
        PossibleTypes = new [] { typeof(string) })]
        string HostingKind { get;  }
        /// <summary>The hosting provider of the VM.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The hosting provider of the VM.",
        SerializedName = @"provider",
        PossibleTypes = new [] { typeof(string) })]
        string HostingProvider { get; set; }
        /// <summary>
        /// The unique identifier of the hypervisor machine as reported by the underlying virtualization system.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The unique identifier of the hypervisor machine as reported by the underlying virtualization system.",
        SerializedName = @"nativeHostMachineId",
        PossibleTypes = new [] { typeof(string) })]
        string HypervisorNativeHostMachineId { get; set; }
        /// <summary>
        /// Specifies the virtualization technology used by the hypervisor (hyperv, vmware, etc.)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the virtualization technology used by the hypervisor (hyperv, vmware, etc.)",
        SerializedName = @"hypervisorType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.HypervisorType) })]
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.HypervisorType? HypervisorType { get; set; }
        /// <summary>Specifies whether the machine is actively monitored or discovered.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether the machine is actively monitored or discovered.",
        SerializedName = @"monitoringState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.MonitoringState) })]
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.MonitoringState? MonitoringState { get; set; }
        /// <summary>Default IPv4 gateways.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Default IPv4 gateways.",
        SerializedName = @"defaultIpv4Gateways",
        PossibleTypes = new [] { typeof(string) })]
        string[] NetworkingDefaultIpv4Gateway { get; set; }
        /// <summary>DNS names associated with the machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"DNS names associated with the machine.",
        SerializedName = @"dnsNames",
        PossibleTypes = new [] { typeof(string) })]
        string[] NetworkingDnsName { get; set; }
        /// <summary>IPv4 interfaces.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"IPv4 interfaces.",
        SerializedName = @"ipv4Interfaces",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IIpv4NetworkInterface) })]
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IIpv4NetworkInterface[] NetworkingIpv4Interface { get; set; }
        /// <summary>IPv6 interfaces.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"IPv6 interfaces.",
        SerializedName = @"ipv6Interfaces",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IIpv6NetworkInterface) })]
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IIpv6NetworkInterface[] NetworkingIpv6Interface { get; set; }
        /// <summary>MAC addresses of all active network interfaces.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"MAC addresses of all active network interfaces.",
        SerializedName = @"macAddresses",
        PossibleTypes = new [] { typeof(string) })]
        string[] NetworkingMacAddress { get; set; }
        /// <summary>Operating system bitness (32-bit or 64-bit).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Operating system bitness (32-bit or 64-bit).",
        SerializedName = @"bitness",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.Bitness) })]
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.Bitness? OperatingSystemBitness { get; set; }
        /// <summary>Windows, Linux, etc.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Windows, Linux, etc.",
        SerializedName = @"family",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.OperatingSystemFamily) })]
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.OperatingSystemFamily? OperatingSystemFamily { get; set; }
        /// <summary>Operating system full name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Operating system full name.",
        SerializedName = @"fullName",
        PossibleTypes = new [] { typeof(string) })]
        string OperatingSystemFullName { get; set; }
        /// <summary>Number of CPUs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of CPUs.",
        SerializedName = @"cpus",
        PossibleTypes = new [] { typeof(int) })]
        int? ResourceCpu { get; set; }
        /// <summary>CPU speed in megahertz (Mhz).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"CPU speed in megahertz (Mhz).",
        SerializedName = @"cpuSpeed",
        PossibleTypes = new [] { typeof(int) })]
        int? ResourceCpuSpeed { get; set; }
        /// <summary>Describes the accuracy of the cpuSpeed field.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Describes the accuracy of the cpuSpeed field.",
        SerializedName = @"cpuSpeedAccuracy",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.Accuracy) })]
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.Accuracy? ResourceCpuSpeedAccuracy { get; set; }
        /// <summary>Physical memory in megabytes (MB).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Physical memory in megabytes (MB).",
        SerializedName = @"physicalMemory",
        PossibleTypes = new [] { typeof(int) })]
        int? ResourcePhysicalMemory { get; set; }
        /// <summary>UTC date and time when this resource was updated in the system.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"UTC date and time when this resource was updated in the system.",
        SerializedName = @"timestamp",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? Timestamp { get; set; }
        /// <summary>Timezone full name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Timezone full name.",
        SerializedName = @"fullName",
        PossibleTypes = new [] { typeof(string) })]
        string TimezoneFullName { get; set; }
        /// <summary>The Name of the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Name of the virtual machine.",
        SerializedName = @"virtualMachineName",
        PossibleTypes = new [] { typeof(string) })]
        string VirtualMachineName { get; set; }
        /// <summary>
        /// The unique identifier of the host of this virtual machine as reported by the underlying virtualization system.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The unique identifier of the host of this virtual machine as reported by the underlying virtualization system.",
        SerializedName = @"nativeHostMachineId",
        PossibleTypes = new [] { typeof(string) })]
        string VirtualMachineNativeHostMachineId { get; set; }
        /// <summary>
        /// The unique identifier of the virtual machine as reported by the underlying virtualization system.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The unique identifier of the virtual machine as reported by the underlying virtualization system.",
        SerializedName = @"nativeMachineId",
        PossibleTypes = new [] { typeof(string) })]
        string VirtualMachineNativeMachineId { get; set; }
        /// <summary>
        /// Specifies the virtualization technology used by the machine (hyperv, vmware, etc.)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the virtualization technology used by the machine (hyperv, vmware, etc.)",
        SerializedName = @"virtualMachineType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.VirtualMachineType) })]
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.VirtualMachineType? VirtualMachineType { get; set; }
        /// <summary>Specifies whether the machine is virtualized.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether the machine is virtualized.",
        SerializedName = @"virtualizationState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.VirtualizationState) })]
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.VirtualizationState? VirtualizationState { get; set; }

    }
    /// Resource properties.
    internal partial interface IMachinePropertiesInternal

    {
        /// <summary>Dependency Agent configuration.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IAgentConfiguration Agent { get; set; }
        /// <summary>Machine clock granularity in milliseconds.</summary>
        int? AgentClockGranularity { get; set; }
        /// <summary>Dependency Agent unique identifier.</summary>
        string AgentDependencyAgentId { get; set; }
        /// <summary>Dependency Agent revision number.</summary>
        string AgentDependencyAgentRevision { get; set; }
        /// <summary>Dependency Agent version number.</summary>
        string AgentDependencyAgentVersion { get; set; }
        /// <summary>Health Service Agent unique identifier.</summary>
        string AgentId { get; set; }
        /// <summary>
        /// Specifies whether the machine has been rebooted since the Dependency Agent installation.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.MachineRebootStatus? AgentRebootStatus { get; set; }
        /// <summary>UTC date and time when the machine last booted</summary>
        global::System.DateTime? BootTime { get; set; }
        /// <summary>Name of the machine, e.g., server</summary>
        string ComputerName { get; set; }
        /// <summary>Name to use for display purposes</summary>
        string DisplayName { get; set; }
        /// <summary>Fully-qualified name of the machine, e.g., server.company.com</summary>
        string FullyQualifiedDomainName { get; set; }
        /// <summary>
        /// Hosting-related configuration. Present if hosting information is discovered for the VM.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IHostingConfiguration Hosting { get; set; }
        /// <summary>Additional hosting configuration type qualifier.</summary>
        string HostingKind { get; set; }
        /// <summary>The hosting provider of the VM.</summary>
        string HostingProvider { get; set; }
        /// <summary>
        /// Hypervisor-related configuration. Present only when 'virtualizationState' is `hypervisor`.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IHypervisorConfiguration Hypervisor { get; set; }
        /// <summary>
        /// The unique identifier of the hypervisor machine as reported by the underlying virtualization system.
        /// </summary>
        string HypervisorNativeHostMachineId { get; set; }
        /// <summary>
        /// Specifies the virtualization technology used by the hypervisor (hyperv, vmware, etc.)
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.HypervisorType? HypervisorType { get; set; }
        /// <summary>Specifies whether the machine is actively monitored or discovered.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.MonitoringState? MonitoringState { get; set; }
        /// <summary>Network configuration (ips, gateways, dns, etc.)</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.INetworkConfiguration Networking { get; set; }
        /// <summary>Default IPv4 gateways.</summary>
        string[] NetworkingDefaultIpv4Gateway { get; set; }
        /// <summary>DNS names associated with the machine.</summary>
        string[] NetworkingDnsName { get; set; }
        /// <summary>IPv4 interfaces.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IIpv4NetworkInterface[] NetworkingIpv4Interface { get; set; }
        /// <summary>IPv6 interfaces.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IIpv6NetworkInterface[] NetworkingIpv6Interface { get; set; }
        /// <summary>MAC addresses of all active network interfaces.</summary>
        string[] NetworkingMacAddress { get; set; }
        /// <summary>Operating system information.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IOperatingSystemConfiguration OperatingSystem { get; set; }
        /// <summary>Operating system bitness (32-bit or 64-bit).</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.Bitness? OperatingSystemBitness { get; set; }
        /// <summary>Windows, Linux, etc.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.OperatingSystemFamily? OperatingSystemFamily { get; set; }
        /// <summary>Operating system full name.</summary>
        string OperatingSystemFullName { get; set; }
        /// <summary>Machine resources (memory, cpu, etc.).</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachineResourcesConfiguration Resource { get; set; }
        /// <summary>Number of CPUs.</summary>
        int? ResourceCpu { get; set; }
        /// <summary>CPU speed in megahertz (Mhz).</summary>
        int? ResourceCpuSpeed { get; set; }
        /// <summary>Describes the accuracy of the cpuSpeed field.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.Accuracy? ResourceCpuSpeedAccuracy { get; set; }
        /// <summary>Physical memory in megabytes (MB).</summary>
        int? ResourcePhysicalMemory { get; set; }
        /// <summary>UTC date and time when this resource was updated in the system.</summary>
        global::System.DateTime? Timestamp { get; set; }
        /// <summary>Timezone of the machine.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ITimezone Timezone { get; set; }
        /// <summary>Timezone full name.</summary>
        string TimezoneFullName { get; set; }
        /// <summary>
        /// Virtualization-related configuration. Present only when `virtualizationState` is `virtual`.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IVirtualMachineConfiguration VirtualMachine { get; set; }
        /// <summary>The Name of the virtual machine.</summary>
        string VirtualMachineName { get; set; }
        /// <summary>
        /// The unique identifier of the host of this virtual machine as reported by the underlying virtualization system.
        /// </summary>
        string VirtualMachineNativeHostMachineId { get; set; }
        /// <summary>
        /// The unique identifier of the virtual machine as reported by the underlying virtualization system.
        /// </summary>
        string VirtualMachineNativeMachineId { get; set; }
        /// <summary>
        /// Specifies the virtualization technology used by the machine (hyperv, vmware, etc.)
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.VirtualMachineType? VirtualMachineType { get; set; }
        /// <summary>Specifies whether the machine is virtualized.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.VirtualizationState? VirtualizationState { get; set; }

    }
}