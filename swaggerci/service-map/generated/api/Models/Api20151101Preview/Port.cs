// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Extensions;

    /// <summary>
    /// A port resource represents a server port on a machine. The port may be actively *monitored*, i.e., a Dependency Agent
    /// is running on its machine, or *discovered*, i.e., its existence was inferred by observing the data stream from monitored
    /// machines. A port is live during an interval of time, if that port had associated activity during (parts) of that interval.
    /// </summary>
    public partial class Port :
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IPort,
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IPortInternal,
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ICoreResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ICoreResource __coreResource = new Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.CoreResource();

        /// <summary>Name to use for display purposes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string DisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IPortPropertiesInternal)Property).DisplayName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IPortPropertiesInternal)Property).DisplayName = value ?? null; }

        /// <summary>Resource ETAG.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inherited)]
        public string Etag { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ICoreResourceInternal)__coreResource).Etag; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ICoreResourceInternal)__coreResource).Etag = value ?? null; }

        /// <summary>
        /// IP address associated with the port. At present only IPv4 addresses are supported.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string IPAddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IPortPropertiesInternal)Property).IPAddress; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IPortPropertiesInternal)Property).IPAddress = value ?? null; }

        /// <summary>Resource identifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal)__coreResource).Id; }

        /// <summary>Additional resource type qualifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inherited)]
        public string Kind { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ICoreResourceInternal)__coreResource).Kind; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ICoreResourceInternal)__coreResource).Kind = value ; }

        /// <summary>Resource URI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string MachineId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IPortPropertiesInternal)Property).MachineId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IPortPropertiesInternal)Property).MachineId = value ?? null; }

        /// <summary>Specifies the sub-class of the reference.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string MachineKind { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IPortPropertiesInternal)Property).MachineKind; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IPortPropertiesInternal)Property).MachineKind = value ?? null; }

        /// <summary>Resource name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string MachineName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IPortPropertiesInternal)Property).MachineName; }

        /// <summary>Resource type qualifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string MachineType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IPortPropertiesInternal)Property).MachineType; }

        /// <summary>Internal Acessors for Machine</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceReference Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IPortInternal.Machine { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IPortPropertiesInternal)Property).Machine; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IPortPropertiesInternal)Property).Machine = value; }

        /// <summary>Internal Acessors for MachineName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IPortInternal.MachineName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IPortPropertiesInternal)Property).MachineName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IPortPropertiesInternal)Property).MachineName = value; }

        /// <summary>Internal Acessors for MachineType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IPortInternal.MachineType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IPortPropertiesInternal)Property).MachineType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IPortPropertiesInternal)Property).MachineType = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IPortProperties Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IPortInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.PortProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal)__coreResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal)__coreResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal)__coreResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal)__coreResource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal)__coreResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal)__coreResource).Type = value; }

        /// <summary>Specifies whether the port is actively monitored or discovered.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.MonitoringState? MonitoringState { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IPortPropertiesInternal)Property).MonitoringState; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IPortPropertiesInternal)Property).MonitoringState = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.MonitoringState)""); }

        /// <summary>Resource name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal)__coreResource).Name; }

        /// <summary>Port number.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public int? Number { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IPortPropertiesInternal)Property).PortNumber; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IPortPropertiesInternal)Property).PortNumber = value ?? default(int); }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IPortProperties _property;

        /// <summary>Resource properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IPortProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.PortProperties()); set => this._property = value; }

        /// <summary>Resource type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal)__coreResource).Type; }

        /// <summary>Creates an new <see cref="Port" /> instance.</summary>
        public Port()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A < see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__coreResource), __coreResource);
            await eventListener.AssertObjectIsValid(nameof(__coreResource), __coreResource);
        }
    }
    /// A port resource represents a server port on a machine. The port may be actively *monitored*, i.e., a Dependency Agent
    /// is running on its machine, or *discovered*, i.e., its existence was inferred by observing the data stream from monitored
    /// machines. A port is live during an interval of time, if that port had associated activity during (parts) of that interval.
    public partial interface IPort :
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ICoreResource
    {
        /// <summary>Name to use for display purposes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name to use for display purposes.",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get; set; }
        /// <summary>
        /// IP address associated with the port. At present only IPv4 addresses are supported.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"IP address associated with the port. At present only IPv4 addresses are supported.",
        SerializedName = @"ipAddress",
        PossibleTypes = new [] { typeof(string) })]
        string IPAddress { get; set; }
        /// <summary>Resource URI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource URI.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string MachineId { get; set; }
        /// <summary>Specifies the sub-class of the reference.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the sub-class of the reference.",
        SerializedName = @"kind",
        PossibleTypes = new [] { typeof(string) })]
        string MachineKind { get; set; }
        /// <summary>Resource name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Resource name.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string MachineName { get;  }
        /// <summary>Resource type qualifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Resource type qualifier.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string MachineType { get;  }
        /// <summary>Specifies whether the port is actively monitored or discovered.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether the port is actively monitored or discovered.",
        SerializedName = @"monitoringState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.MonitoringState) })]
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.MonitoringState? MonitoringState { get; set; }
        /// <summary>Port number.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Port number.",
        SerializedName = @"portNumber",
        PossibleTypes = new [] { typeof(int) })]
        int? Number { get; set; }

    }
    /// A port resource represents a server port on a machine. The port may be actively *monitored*, i.e., a Dependency Agent
    /// is running on its machine, or *discovered*, i.e., its existence was inferred by observing the data stream from monitored
    /// machines. A port is live during an interval of time, if that port had associated activity during (parts) of that interval.
    internal partial interface IPortInternal :
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ICoreResourceInternal
    {
        /// <summary>Name to use for display purposes.</summary>
        string DisplayName { get; set; }
        /// <summary>
        /// IP address associated with the port. At present only IPv4 addresses are supported.
        /// </summary>
        string IPAddress { get; set; }
        /// <summary>Machine hosting this port.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceReference Machine { get; set; }
        /// <summary>Resource URI.</summary>
        string MachineId { get; set; }
        /// <summary>Specifies the sub-class of the reference.</summary>
        string MachineKind { get; set; }
        /// <summary>Resource name.</summary>
        string MachineName { get; set; }
        /// <summary>Resource type qualifier.</summary>
        string MachineType { get; set; }
        /// <summary>Specifies whether the port is actively monitored or discovered.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.MonitoringState? MonitoringState { get; set; }
        /// <summary>Port number.</summary>
        int? Number { get; set; }
        /// <summary>Resource properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IPortProperties Property { get; set; }

    }
}