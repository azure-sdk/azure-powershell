// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Extensions;

    /// <summary>
    /// A machine resource represents a discovered computer system. It can be *monitored*, i.e., a Dependency Agent is running
    /// on it, or *discovered*, i.e., its existence was inferred by observing the data stream from monitored machines. As machines
    /// change, prior versions of the machine resource are preserved and available for access. A machine is live during an interval
    /// of time, if either its Dependency Agent has reported data during (parts) of that interval, or a Dependency agent running
    /// on other machines has reported activity associated with the machine.
    /// </summary>
    public partial class Machine :
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachine,
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachineInternal,
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ICoreResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ICoreResource __coreResource = new Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.CoreResource();

        /// <summary>Machine clock granularity in milliseconds.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public int? AgentClockGranularity { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).AgentClockGranularity; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).AgentClockGranularity = value ?? default(int); }

        /// <summary>Dependency Agent unique identifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string AgentDependencyAgentId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).AgentDependencyAgentId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).AgentDependencyAgentId = value ?? null; }

        /// <summary>Dependency Agent revision number.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string AgentDependencyAgentRevision { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).AgentDependencyAgentRevision; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).AgentDependencyAgentRevision = value ?? null; }

        /// <summary>Dependency Agent version number.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string AgentDependencyAgentVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).AgentDependencyAgentVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).AgentDependencyAgentVersion = value ?? null; }

        /// <summary>Health Service Agent unique identifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string AgentId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).AgentId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).AgentId = value ?? null; }

        /// <summary>
        /// Specifies whether the machine has been rebooted since the Dependency Agent installation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.MachineRebootStatus? AgentRebootStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).AgentRebootStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).AgentRebootStatus = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.MachineRebootStatus)""); }

        /// <summary>UTC date and time when the machine last booted</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public global::System.DateTime? BootTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).BootTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).BootTime = value ?? default(global::System.DateTime); }

        /// <summary>Name of the machine, e.g., server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string ComputerName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).ComputerName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).ComputerName = value ?? null; }

        /// <summary>Name to use for display purposes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string DisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).DisplayName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).DisplayName = value ?? null; }

        /// <summary>Resource ETAG.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inherited)]
        public string Etag { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ICoreResourceInternal)__coreResource).Etag; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ICoreResourceInternal)__coreResource).Etag = value ?? null; }

        /// <summary>Fully-qualified name of the machine, e.g., server.company.com</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string FullyQualifiedDomainName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).FullyQualifiedDomainName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).FullyQualifiedDomainName = value ?? null; }

        /// <summary>Additional hosting configuration type qualifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string HostingKind { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).HostingKind; }

        /// <summary>The hosting provider of the VM.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string HostingProvider { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).HostingProvider; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).HostingProvider = value ?? null; }

        /// <summary>
        /// The unique identifier of the hypervisor machine as reported by the underlying virtualization system.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string HypervisorNativeHostMachineId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).HypervisorNativeHostMachineId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).HypervisorNativeHostMachineId = value ?? null; }

        /// <summary>
        /// Specifies the virtualization technology used by the hypervisor (hyperv, vmware, etc.)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.HypervisorType? HypervisorType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).HypervisorType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).HypervisorType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.HypervisorType)""); }

        /// <summary>Resource identifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal)__coreResource).Id; }

        /// <summary>Additional resource type qualifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inherited)]
        public string Kind { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ICoreResourceInternal)__coreResource).Kind; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ICoreResourceInternal)__coreResource).Kind = value ; }

        /// <summary>Internal Acessors for Agent</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IAgentConfiguration Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachineInternal.Agent { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).Agent; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).Agent = value; }

        /// <summary>Internal Acessors for Hosting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IHostingConfiguration Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachineInternal.Hosting { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).Hosting; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).Hosting = value; }

        /// <summary>Internal Acessors for HostingKind</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachineInternal.HostingKind { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).HostingKind; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).HostingKind = value; }

        /// <summary>Internal Acessors for Hypervisor</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IHypervisorConfiguration Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachineInternal.Hypervisor { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).Hypervisor; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).Hypervisor = value; }

        /// <summary>Internal Acessors for Networking</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.INetworkConfiguration Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachineInternal.Networking { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).Networking; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).Networking = value; }

        /// <summary>Internal Acessors for OperatingSystem</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IOperatingSystemConfiguration Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachineInternal.OperatingSystem { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).OperatingSystem; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).OperatingSystem = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachineProperties Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachineInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.MachineProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for Resource</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachineResourcesConfiguration Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachineInternal.Resource { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).Resource; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).Resource = value; }

        /// <summary>Internal Acessors for Timezone</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ITimezone Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachineInternal.Timezone { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).Timezone; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).Timezone = value; }

        /// <summary>Internal Acessors for VirtualMachine</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IVirtualMachineConfiguration Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachineInternal.VirtualMachine { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).VirtualMachine; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).VirtualMachine = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal)__coreResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal)__coreResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal)__coreResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal)__coreResource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal)__coreResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal)__coreResource).Type = value; }

        /// <summary>Specifies whether the machine is actively monitored or discovered.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.MonitoringState? MonitoringState { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).MonitoringState; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).MonitoringState = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.MonitoringState)""); }

        /// <summary>Resource name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal)__coreResource).Name; }

        /// <summary>Default IPv4 gateways.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string[] NetworkingDefaultIpv4Gateway { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).NetworkingDefaultIpv4Gateway; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).NetworkingDefaultIpv4Gateway = value ?? null /* arrayOf */; }

        /// <summary>DNS names associated with the machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string[] NetworkingDnsName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).NetworkingDnsName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).NetworkingDnsName = value ?? null /* arrayOf */; }

        /// <summary>IPv4 interfaces.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IIpv4NetworkInterface[] NetworkingIpv4Interface { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).NetworkingIpv4Interface; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).NetworkingIpv4Interface = value ?? null /* arrayOf */; }

        /// <summary>IPv6 interfaces.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IIpv6NetworkInterface[] NetworkingIpv6Interface { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).NetworkingIpv6Interface; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).NetworkingIpv6Interface = value ?? null /* arrayOf */; }

        /// <summary>MAC addresses of all active network interfaces.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string[] NetworkingMacAddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).NetworkingMacAddress; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).NetworkingMacAddress = value ?? null /* arrayOf */; }

        /// <summary>Operating system bitness (32-bit or 64-bit).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.Bitness? OperatingSystemBitness { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).OperatingSystemBitness; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).OperatingSystemBitness = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.Bitness)""); }

        /// <summary>Windows, Linux, etc.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.OperatingSystemFamily? OperatingSystemFamily { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).OperatingSystemFamily; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).OperatingSystemFamily = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.OperatingSystemFamily)""); }

        /// <summary>Operating system full name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string OperatingSystemFullName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).OperatingSystemFullName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).OperatingSystemFullName = value ?? null; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachineProperties _property;

        /// <summary>Resource properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachineProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.MachineProperties()); set => this._property = value; }

        /// <summary>Number of CPUs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public int? ResourceCpu { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).ResourceCpu; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).ResourceCpu = value ?? default(int); }

        /// <summary>CPU speed in megahertz (Mhz).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public int? ResourceCpuSpeed { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).ResourceCpuSpeed; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).ResourceCpuSpeed = value ?? default(int); }

        /// <summary>Describes the accuracy of the cpuSpeed field.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.Accuracy? ResourceCpuSpeedAccuracy { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).ResourceCpuSpeedAccuracy; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).ResourceCpuSpeedAccuracy = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.Accuracy)""); }

        /// <summary>Physical memory in megabytes (MB).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public int? ResourcePhysicalMemory { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).ResourcePhysicalMemory; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).ResourcePhysicalMemory = value ?? default(int); }

        /// <summary>UTC date and time when this resource was updated in the system.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public global::System.DateTime? Timestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).Timestamp; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).Timestamp = value ?? default(global::System.DateTime); }

        /// <summary>Timezone full name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string TimezoneFullName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).TimezoneFullName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).TimezoneFullName = value ?? null; }

        /// <summary>Resource type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal)__coreResource).Type; }

        /// <summary>The Name of the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string VirtualMachineName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).VirtualMachineName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).VirtualMachineName = value ?? null; }

        /// <summary>
        /// The unique identifier of the host of this virtual machine as reported by the underlying virtualization system.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string VirtualMachineNativeHostMachineId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).VirtualMachineNativeHostMachineId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).VirtualMachineNativeHostMachineId = value ?? null; }

        /// <summary>
        /// The unique identifier of the virtual machine as reported by the underlying virtualization system.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string VirtualMachineNativeMachineId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).VirtualMachineNativeMachineId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).VirtualMachineNativeMachineId = value ?? null; }

        /// <summary>
        /// Specifies the virtualization technology used by the machine (hyperv, vmware, etc.)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.VirtualMachineType? VirtualMachineType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).VirtualMachineType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).VirtualMachineType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.VirtualMachineType)""); }

        /// <summary>Specifies whether the machine is virtualized.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.VirtualizationState? VirtualizationState { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).VirtualizationState; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachinePropertiesInternal)Property).VirtualizationState = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.VirtualizationState)""); }

        /// <summary>Creates an new <see cref="Machine" /> instance.</summary>
        public Machine()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A < see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__coreResource), __coreResource);
            await eventListener.AssertObjectIsValid(nameof(__coreResource), __coreResource);
        }
    }
    /// A machine resource represents a discovered computer system. It can be *monitored*, i.e., a Dependency Agent is running
    /// on it, or *discovered*, i.e., its existence was inferred by observing the data stream from monitored machines. As machines
    /// change, prior versions of the machine resource are preserved and available for access. A machine is live during an interval
    /// of time, if either its Dependency Agent has reported data during (parts) of that interval, or a Dependency agent running
    /// on other machines has reported activity associated with the machine.
    public partial interface IMachine :
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ICoreResource
    {
        /// <summary>Machine clock granularity in milliseconds.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Machine clock granularity in milliseconds.",
        SerializedName = @"clockGranularity",
        PossibleTypes = new [] { typeof(int) })]
        int? AgentClockGranularity { get; set; }
        /// <summary>Dependency Agent unique identifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Dependency Agent unique identifier.",
        SerializedName = @"dependencyAgentId",
        PossibleTypes = new [] { typeof(string) })]
        string AgentDependencyAgentId { get; set; }
        /// <summary>Dependency Agent revision number.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Dependency Agent revision number.",
        SerializedName = @"dependencyAgentRevision",
        PossibleTypes = new [] { typeof(string) })]
        string AgentDependencyAgentRevision { get; set; }
        /// <summary>Dependency Agent version number.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Dependency Agent version number.",
        SerializedName = @"dependencyAgentVersion",
        PossibleTypes = new [] { typeof(string) })]
        string AgentDependencyAgentVersion { get; set; }
        /// <summary>Health Service Agent unique identifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Health Service Agent unique identifier.",
        SerializedName = @"agentId",
        PossibleTypes = new [] { typeof(string) })]
        string AgentId { get; set; }
        /// <summary>
        /// Specifies whether the machine has been rebooted since the Dependency Agent installation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether the machine has been rebooted since the Dependency Agent installation.",
        SerializedName = @"rebootStatus",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.MachineRebootStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.MachineRebootStatus? AgentRebootStatus { get; set; }
        /// <summary>UTC date and time when the machine last booted</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"UTC date and time when the machine last booted",
        SerializedName = @"bootTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? BootTime { get; set; }
        /// <summary>Name of the machine, e.g., server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the machine, e.g., server",
        SerializedName = @"computerName",
        PossibleTypes = new [] { typeof(string) })]
        string ComputerName { get; set; }
        /// <summary>Name to use for display purposes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name to use for display purposes",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get; set; }
        /// <summary>Fully-qualified name of the machine, e.g., server.company.com</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Fully-qualified name of the machine, e.g., server.company.com",
        SerializedName = @"fullyQualifiedDomainName",
        PossibleTypes = new [] { typeof(string) })]
        string FullyQualifiedDomainName { get; set; }
        /// <summary>Additional hosting configuration type qualifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Additional hosting configuration type qualifier.",
        SerializedName = @"kind",
        PossibleTypes = new [] { typeof(string) })]
        string HostingKind { get;  }
        /// <summary>The hosting provider of the VM.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The hosting provider of the VM.",
        SerializedName = @"provider",
        PossibleTypes = new [] { typeof(string) })]
        string HostingProvider { get; set; }
        /// <summary>
        /// The unique identifier of the hypervisor machine as reported by the underlying virtualization system.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The unique identifier of the hypervisor machine as reported by the underlying virtualization system.",
        SerializedName = @"nativeHostMachineId",
        PossibleTypes = new [] { typeof(string) })]
        string HypervisorNativeHostMachineId { get; set; }
        /// <summary>
        /// Specifies the virtualization technology used by the hypervisor (hyperv, vmware, etc.)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the virtualization technology used by the hypervisor (hyperv, vmware, etc.)",
        SerializedName = @"hypervisorType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.HypervisorType) })]
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.HypervisorType? HypervisorType { get; set; }
        /// <summary>Specifies whether the machine is actively monitored or discovered.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether the machine is actively monitored or discovered.",
        SerializedName = @"monitoringState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.MonitoringState) })]
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.MonitoringState? MonitoringState { get; set; }
        /// <summary>Default IPv4 gateways.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Default IPv4 gateways.",
        SerializedName = @"defaultIpv4Gateways",
        PossibleTypes = new [] { typeof(string) })]
        string[] NetworkingDefaultIpv4Gateway { get; set; }
        /// <summary>DNS names associated with the machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"DNS names associated with the machine.",
        SerializedName = @"dnsNames",
        PossibleTypes = new [] { typeof(string) })]
        string[] NetworkingDnsName { get; set; }
        /// <summary>IPv4 interfaces.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"IPv4 interfaces.",
        SerializedName = @"ipv4Interfaces",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IIpv4NetworkInterface) })]
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IIpv4NetworkInterface[] NetworkingIpv4Interface { get; set; }
        /// <summary>IPv6 interfaces.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"IPv6 interfaces.",
        SerializedName = @"ipv6Interfaces",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IIpv6NetworkInterface) })]
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IIpv6NetworkInterface[] NetworkingIpv6Interface { get; set; }
        /// <summary>MAC addresses of all active network interfaces.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"MAC addresses of all active network interfaces.",
        SerializedName = @"macAddresses",
        PossibleTypes = new [] { typeof(string) })]
        string[] NetworkingMacAddress { get; set; }
        /// <summary>Operating system bitness (32-bit or 64-bit).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Operating system bitness (32-bit or 64-bit).",
        SerializedName = @"bitness",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.Bitness) })]
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.Bitness? OperatingSystemBitness { get; set; }
        /// <summary>Windows, Linux, etc.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Windows, Linux, etc.",
        SerializedName = @"family",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.OperatingSystemFamily) })]
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.OperatingSystemFamily? OperatingSystemFamily { get; set; }
        /// <summary>Operating system full name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Operating system full name.",
        SerializedName = @"fullName",
        PossibleTypes = new [] { typeof(string) })]
        string OperatingSystemFullName { get; set; }
        /// <summary>Number of CPUs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of CPUs.",
        SerializedName = @"cpus",
        PossibleTypes = new [] { typeof(int) })]
        int? ResourceCpu { get; set; }
        /// <summary>CPU speed in megahertz (Mhz).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"CPU speed in megahertz (Mhz).",
        SerializedName = @"cpuSpeed",
        PossibleTypes = new [] { typeof(int) })]
        int? ResourceCpuSpeed { get; set; }
        /// <summary>Describes the accuracy of the cpuSpeed field.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Describes the accuracy of the cpuSpeed field.",
        SerializedName = @"cpuSpeedAccuracy",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.Accuracy) })]
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.Accuracy? ResourceCpuSpeedAccuracy { get; set; }
        /// <summary>Physical memory in megabytes (MB).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Physical memory in megabytes (MB).",
        SerializedName = @"physicalMemory",
        PossibleTypes = new [] { typeof(int) })]
        int? ResourcePhysicalMemory { get; set; }
        /// <summary>UTC date and time when this resource was updated in the system.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"UTC date and time when this resource was updated in the system.",
        SerializedName = @"timestamp",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? Timestamp { get; set; }
        /// <summary>Timezone full name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Timezone full name.",
        SerializedName = @"fullName",
        PossibleTypes = new [] { typeof(string) })]
        string TimezoneFullName { get; set; }
        /// <summary>The Name of the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Name of the virtual machine.",
        SerializedName = @"virtualMachineName",
        PossibleTypes = new [] { typeof(string) })]
        string VirtualMachineName { get; set; }
        /// <summary>
        /// The unique identifier of the host of this virtual machine as reported by the underlying virtualization system.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The unique identifier of the host of this virtual machine as reported by the underlying virtualization system.",
        SerializedName = @"nativeHostMachineId",
        PossibleTypes = new [] { typeof(string) })]
        string VirtualMachineNativeHostMachineId { get; set; }
        /// <summary>
        /// The unique identifier of the virtual machine as reported by the underlying virtualization system.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The unique identifier of the virtual machine as reported by the underlying virtualization system.",
        SerializedName = @"nativeMachineId",
        PossibleTypes = new [] { typeof(string) })]
        string VirtualMachineNativeMachineId { get; set; }
        /// <summary>
        /// Specifies the virtualization technology used by the machine (hyperv, vmware, etc.)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the virtualization technology used by the machine (hyperv, vmware, etc.)",
        SerializedName = @"virtualMachineType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.VirtualMachineType) })]
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.VirtualMachineType? VirtualMachineType { get; set; }
        /// <summary>Specifies whether the machine is virtualized.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether the machine is virtualized.",
        SerializedName = @"virtualizationState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.VirtualizationState) })]
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.VirtualizationState? VirtualizationState { get; set; }

    }
    /// A machine resource represents a discovered computer system. It can be *monitored*, i.e., a Dependency Agent is running
    /// on it, or *discovered*, i.e., its existence was inferred by observing the data stream from monitored machines. As machines
    /// change, prior versions of the machine resource are preserved and available for access. A machine is live during an interval
    /// of time, if either its Dependency Agent has reported data during (parts) of that interval, or a Dependency agent running
    /// on other machines has reported activity associated with the machine.
    internal partial interface IMachineInternal :
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ICoreResourceInternal
    {
        /// <summary>Dependency Agent configuration.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IAgentConfiguration Agent { get; set; }
        /// <summary>Machine clock granularity in milliseconds.</summary>
        int? AgentClockGranularity { get; set; }
        /// <summary>Dependency Agent unique identifier.</summary>
        string AgentDependencyAgentId { get; set; }
        /// <summary>Dependency Agent revision number.</summary>
        string AgentDependencyAgentRevision { get; set; }
        /// <summary>Dependency Agent version number.</summary>
        string AgentDependencyAgentVersion { get; set; }
        /// <summary>Health Service Agent unique identifier.</summary>
        string AgentId { get; set; }
        /// <summary>
        /// Specifies whether the machine has been rebooted since the Dependency Agent installation.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.MachineRebootStatus? AgentRebootStatus { get; set; }
        /// <summary>UTC date and time when the machine last booted</summary>
        global::System.DateTime? BootTime { get; set; }
        /// <summary>Name of the machine, e.g., server</summary>
        string ComputerName { get; set; }
        /// <summary>Name to use for display purposes</summary>
        string DisplayName { get; set; }
        /// <summary>Fully-qualified name of the machine, e.g., server.company.com</summary>
        string FullyQualifiedDomainName { get; set; }
        /// <summary>
        /// Hosting-related configuration. Present if hosting information is discovered for the VM.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IHostingConfiguration Hosting { get; set; }
        /// <summary>Additional hosting configuration type qualifier.</summary>
        string HostingKind { get; set; }
        /// <summary>The hosting provider of the VM.</summary>
        string HostingProvider { get; set; }
        /// <summary>
        /// Hypervisor-related configuration. Present only when 'virtualizationState' is `hypervisor`.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IHypervisorConfiguration Hypervisor { get; set; }
        /// <summary>
        /// The unique identifier of the hypervisor machine as reported by the underlying virtualization system.
        /// </summary>
        string HypervisorNativeHostMachineId { get; set; }
        /// <summary>
        /// Specifies the virtualization technology used by the hypervisor (hyperv, vmware, etc.)
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.HypervisorType? HypervisorType { get; set; }
        /// <summary>Specifies whether the machine is actively monitored or discovered.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.MonitoringState? MonitoringState { get; set; }
        /// <summary>Network configuration (ips, gateways, dns, etc.)</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.INetworkConfiguration Networking { get; set; }
        /// <summary>Default IPv4 gateways.</summary>
        string[] NetworkingDefaultIpv4Gateway { get; set; }
        /// <summary>DNS names associated with the machine.</summary>
        string[] NetworkingDnsName { get; set; }
        /// <summary>IPv4 interfaces.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IIpv4NetworkInterface[] NetworkingIpv4Interface { get; set; }
        /// <summary>IPv6 interfaces.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IIpv6NetworkInterface[] NetworkingIpv6Interface { get; set; }
        /// <summary>MAC addresses of all active network interfaces.</summary>
        string[] NetworkingMacAddress { get; set; }
        /// <summary>Operating system information.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IOperatingSystemConfiguration OperatingSystem { get; set; }
        /// <summary>Operating system bitness (32-bit or 64-bit).</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.Bitness? OperatingSystemBitness { get; set; }
        /// <summary>Windows, Linux, etc.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.OperatingSystemFamily? OperatingSystemFamily { get; set; }
        /// <summary>Operating system full name.</summary>
        string OperatingSystemFullName { get; set; }
        /// <summary>Resource properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachineProperties Property { get; set; }
        /// <summary>Machine resources (memory, cpu, etc.).</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IMachineResourcesConfiguration Resource { get; set; }
        /// <summary>Number of CPUs.</summary>
        int? ResourceCpu { get; set; }
        /// <summary>CPU speed in megahertz (Mhz).</summary>
        int? ResourceCpuSpeed { get; set; }
        /// <summary>Describes the accuracy of the cpuSpeed field.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.Accuracy? ResourceCpuSpeedAccuracy { get; set; }
        /// <summary>Physical memory in megabytes (MB).</summary>
        int? ResourcePhysicalMemory { get; set; }
        /// <summary>UTC date and time when this resource was updated in the system.</summary>
        global::System.DateTime? Timestamp { get; set; }
        /// <summary>Timezone of the machine.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ITimezone Timezone { get; set; }
        /// <summary>Timezone full name.</summary>
        string TimezoneFullName { get; set; }
        /// <summary>
        /// Virtualization-related configuration. Present only when `virtualizationState` is `virtual`.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IVirtualMachineConfiguration VirtualMachine { get; set; }
        /// <summary>The Name of the virtual machine.</summary>
        string VirtualMachineName { get; set; }
        /// <summary>
        /// The unique identifier of the host of this virtual machine as reported by the underlying virtualization system.
        /// </summary>
        string VirtualMachineNativeHostMachineId { get; set; }
        /// <summary>
        /// The unique identifier of the virtual machine as reported by the underlying virtualization system.
        /// </summary>
        string VirtualMachineNativeMachineId { get; set; }
        /// <summary>
        /// Specifies the virtualization technology used by the machine (hyperv, vmware, etc.)
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.VirtualMachineType? VirtualMachineType { get; set; }
        /// <summary>Specifies whether the machine is virtualized.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.VirtualizationState? VirtualizationState { get; set; }

    }
}