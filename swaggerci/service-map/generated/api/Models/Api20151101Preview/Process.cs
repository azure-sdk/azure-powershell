// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Extensions;

    /// <summary>
    /// A process resource represents a process running on a machine. The process may be actively *monitored*, i.e., a Dependency
    /// Agent is running on its machine, or *discovered*, i.e., its existence was inferred by observing the data stream from monitored
    /// machines. A process resource represents a pool of actual operating system resources that share command lines and metadata.
    /// As the process pool evolves over time, prior versions of the process resource are preserved and available for access.
    /// A process is live during an interval of time, if that process is executing during (parts) of that interval
    /// </summary>
    public partial class Process :
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcess,
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessInternal,
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ICoreResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ICoreResource __coreResource = new Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.CoreResource();

        /// <summary>Resource URI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string AcceptorOfId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).AcceptorOfId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).AcceptorOfId = value ?? null; }

        /// <summary>Specifies the sub-class of the reference.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string AcceptorOfKind { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).AcceptorOfKind; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).AcceptorOfKind = value ?? null; }

        /// <summary>Resource name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string AcceptorOfName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).AcceptorOfName; }

        /// <summary>Resource type qualifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string AcceptorOfType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).AcceptorOfType; }

        /// <summary>Resource URI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string ClientOfId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).ClientOfId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).ClientOfId = value ?? null; }

        /// <summary>Specifies the sub-class of the reference.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string ClientOfKind { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).ClientOfKind; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).ClientOfKind = value ?? null; }

        /// <summary>Resource name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string ClientOfName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).ClientOfName; }

        /// <summary>Resource type qualifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string ClientOfType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).ClientOfType; }

        /// <summary>Process command line.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string DetailCommandLine { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).DetailCommandLine; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).DetailCommandLine = value ?? null; }

        /// <summary>Name of company that created the process executable.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string DetailCompanyName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).DetailCompanyName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).DetailCompanyName = value ?? null; }

        /// <summary>Process description.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string DetailDescription { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).DetailDescription; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).DetailDescription = value ?? null; }

        /// <summary>Process executable path.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string DetailExecutablePath { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).DetailExecutablePath; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).DetailExecutablePath = value ?? null; }

        /// <summary>File version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string DetailFileVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).DetailFileVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).DetailFileVersion = value ?? null; }

        /// <summary>
        /// The Operating System Process Identifier (PID) of the first process in this process pool.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public int? DetailFirstPid { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).DetailFirstPid; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).DetailFirstPid = value ?? default(int); }

        /// <summary>Internal process name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string DetailInternalName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).DetailInternalName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).DetailInternalName = value ?? null; }

        /// <summary>
        /// A unique identifier for a process, generally resilient to process restart, computed by Service Map.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string DetailPersistentKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).DetailPersistentKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).DetailPersistentKey = value ?? null; }

        /// <summary>
        /// Represents the identity of the process pool assigned to the process by Dependency Agent.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public int? DetailPoolId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).DetailPoolId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).DetailPoolId = value ?? default(int); }

        /// <summary>Product name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string DetailProductName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).DetailProductName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).DetailProductName = value ?? null; }

        /// <summary>Product version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string DetailProductVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).DetailProductVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).DetailProductVersion = value ?? null; }

        /// <summary>Collection of services hosted by this Process (Windows only).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessHostedService[] DetailService { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).DetailService; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).DetailService = value ?? null /* arrayOf */; }

        /// <summary>Process workingDirectory.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string DetailWorkingDirectory { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).DetailWorkingDirectory; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).DetailWorkingDirectory = value ?? null; }

        /// <summary>Process zone name (Linux only).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string DetailZoneName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).DetailZoneName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).DetailZoneName = value ?? null; }

        /// <summary>Name to use for display purposes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string DisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).DisplayName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).DisplayName = value ?? null; }

        /// <summary>Resource ETAG.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inherited)]
        public string Etag { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ICoreResourceInternal)__coreResource).Etag; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ICoreResourceInternal)__coreResource).Etag = value ?? null; }

        /// <summary>The name of the process executable</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string ExecutableName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).ExecutableName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).ExecutableName = value ?? null; }

        /// <summary>
        /// The name of the product or suite of the process. The group is determined by its executable name, command line, etc.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string Group { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).Group; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).Group = value ?? null; }

        /// <summary>Additional hosting configuration type qualifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string HostingKind { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).HostingKind; }

        /// <summary>The hosting provider of the VM.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string HostingProvider { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).HostingProvider; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).HostingProvider = value ?? null; }

        /// <summary>Resource identifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal)__coreResource).Id; }

        /// <summary>Additional resource type qualifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inherited)]
        public string Kind { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ICoreResourceInternal)__coreResource).Kind; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ICoreResourceInternal)__coreResource).Kind = value ; }

        /// <summary>Resource URI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string MachineId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).MachineId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).MachineId = value ?? null; }

        /// <summary>Specifies the sub-class of the reference.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string MachineKind { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).MachineKind; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).MachineKind = value ?? null; }

        /// <summary>Resource name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string MachineName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).MachineName; }

        /// <summary>Resource type qualifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string MachineType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).MachineType; }

        /// <summary>Internal Acessors for AcceptorOf</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceReference Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessInternal.AcceptorOf { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).AcceptorOf; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).AcceptorOf = value; }

        /// <summary>Internal Acessors for AcceptorOfName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessInternal.AcceptorOfName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).AcceptorOfName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).AcceptorOfName = value; }

        /// <summary>Internal Acessors for AcceptorOfType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessInternal.AcceptorOfType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).AcceptorOfType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).AcceptorOfType = value; }

        /// <summary>Internal Acessors for ClientOf</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceReference Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessInternal.ClientOf { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).ClientOf; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).ClientOf = value; }

        /// <summary>Internal Acessors for ClientOfName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessInternal.ClientOfName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).ClientOfName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).ClientOfName = value; }

        /// <summary>Internal Acessors for ClientOfType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessInternal.ClientOfType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).ClientOfType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).ClientOfType = value; }

        /// <summary>Internal Acessors for Detail</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessDetails Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessInternal.Detail { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).Detail; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).Detail = value; }

        /// <summary>Internal Acessors for Hosting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessHostingConfiguration Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessInternal.Hosting { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).Hosting; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).Hosting = value; }

        /// <summary>Internal Acessors for HostingKind</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessInternal.HostingKind { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).HostingKind; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).HostingKind = value; }

        /// <summary>Internal Acessors for Machine</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceReference Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessInternal.Machine { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).Machine; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).Machine = value; }

        /// <summary>Internal Acessors for MachineName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessInternal.MachineName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).MachineName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).MachineName = value; }

        /// <summary>Internal Acessors for MachineType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessInternal.MachineType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).MachineType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).MachineType = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessProperties Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ProcessProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for User</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessUser Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessInternal.User { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).User; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).User = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal)__coreResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal)__coreResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal)__coreResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal)__coreResource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal)__coreResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal)__coreResource).Type = value; }

        /// <summary>Specifies whether the process is actively monitored or discovered.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.MonitoringState? MonitoringState { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).MonitoringState; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).MonitoringState = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.MonitoringState)""); }

        /// <summary>Resource name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal)__coreResource).Name; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessProperties _property;

        /// <summary>Resource properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ProcessProperties()); set => this._property = value; }

        /// <summary>The inferred role of this process based on its name, command line, etc.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.ProcessRole? Role { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).Role; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).Role = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.ProcessRole)""); }

        /// <summary>UTC date and time when the process started</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public global::System.DateTime? StartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).StartTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).StartTime = value ?? default(global::System.DateTime); }

        /// <summary>UTC date and time when this process resource was updated in the system</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public global::System.DateTime? Timestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).Timestamp; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).Timestamp = value ?? default(global::System.DateTime); }

        /// <summary>Resource type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceInternal)__coreResource).Type; }

        /// <summary>Domain name for the user.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string UserDomain { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).UserDomain; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).UserDomain = value ?? null; }

        /// <summary>User name under which the process is running.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.PropertyOrigin.Inlined)]
        public string UserName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).UserName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessPropertiesInternal)Property).UserName = value ?? null; }

        /// <summary>Creates an new <see cref="Process" /> instance.</summary>
        public Process()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A < see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__coreResource), __coreResource);
            await eventListener.AssertObjectIsValid(nameof(__coreResource), __coreResource);
        }
    }
    /// A process resource represents a process running on a machine. The process may be actively *monitored*, i.e., a Dependency
    /// Agent is running on its machine, or *discovered*, i.e., its existence was inferred by observing the data stream from monitored
    /// machines. A process resource represents a pool of actual operating system resources that share command lines and metadata.
    /// As the process pool evolves over time, prior versions of the process resource are preserved and available for access.
    /// A process is live during an interval of time, if that process is executing during (parts) of that interval
    public partial interface IProcess :
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ICoreResource
    {
        /// <summary>Resource URI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource URI.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string AcceptorOfId { get; set; }
        /// <summary>Specifies the sub-class of the reference.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the sub-class of the reference.",
        SerializedName = @"kind",
        PossibleTypes = new [] { typeof(string) })]
        string AcceptorOfKind { get; set; }
        /// <summary>Resource name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Resource name.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string AcceptorOfName { get;  }
        /// <summary>Resource type qualifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Resource type qualifier.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string AcceptorOfType { get;  }
        /// <summary>Resource URI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource URI.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string ClientOfId { get; set; }
        /// <summary>Specifies the sub-class of the reference.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the sub-class of the reference.",
        SerializedName = @"kind",
        PossibleTypes = new [] { typeof(string) })]
        string ClientOfKind { get; set; }
        /// <summary>Resource name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Resource name.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string ClientOfName { get;  }
        /// <summary>Resource type qualifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Resource type qualifier.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string ClientOfType { get;  }
        /// <summary>Process command line.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Process command line.",
        SerializedName = @"commandLine",
        PossibleTypes = new [] { typeof(string) })]
        string DetailCommandLine { get; set; }
        /// <summary>Name of company that created the process executable.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of company that created the process executable.",
        SerializedName = @"companyName",
        PossibleTypes = new [] { typeof(string) })]
        string DetailCompanyName { get; set; }
        /// <summary>Process description.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Process description.",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        string DetailDescription { get; set; }
        /// <summary>Process executable path.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Process executable path.",
        SerializedName = @"executablePath",
        PossibleTypes = new [] { typeof(string) })]
        string DetailExecutablePath { get; set; }
        /// <summary>File version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"File version.",
        SerializedName = @"fileVersion",
        PossibleTypes = new [] { typeof(string) })]
        string DetailFileVersion { get; set; }
        /// <summary>
        /// The Operating System Process Identifier (PID) of the first process in this process pool.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Operating System Process Identifier (PID) of the first process in this process pool.",
        SerializedName = @"firstPid",
        PossibleTypes = new [] { typeof(int) })]
        int? DetailFirstPid { get; set; }
        /// <summary>Internal process name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Internal process name.",
        SerializedName = @"internalName",
        PossibleTypes = new [] { typeof(string) })]
        string DetailInternalName { get; set; }
        /// <summary>
        /// A unique identifier for a process, generally resilient to process restart, computed by Service Map.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A unique identifier for a process, generally resilient to process restart, computed by Service Map.",
        SerializedName = @"persistentKey",
        PossibleTypes = new [] { typeof(string) })]
        string DetailPersistentKey { get; set; }
        /// <summary>
        /// Represents the identity of the process pool assigned to the process by Dependency Agent.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Represents the identity of the process pool assigned to the process by Dependency Agent.",
        SerializedName = @"poolId",
        PossibleTypes = new [] { typeof(int) })]
        int? DetailPoolId { get; set; }
        /// <summary>Product name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Product name.",
        SerializedName = @"productName",
        PossibleTypes = new [] { typeof(string) })]
        string DetailProductName { get; set; }
        /// <summary>Product version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Product version.",
        SerializedName = @"productVersion",
        PossibleTypes = new [] { typeof(string) })]
        string DetailProductVersion { get; set; }
        /// <summary>Collection of services hosted by this Process (Windows only).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Collection of services hosted by this Process (Windows only).",
        SerializedName = @"services",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessHostedService) })]
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessHostedService[] DetailService { get; set; }
        /// <summary>Process workingDirectory.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Process workingDirectory.",
        SerializedName = @"workingDirectory",
        PossibleTypes = new [] { typeof(string) })]
        string DetailWorkingDirectory { get; set; }
        /// <summary>Process zone name (Linux only).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Process zone name (Linux only).",
        SerializedName = @"zoneName",
        PossibleTypes = new [] { typeof(string) })]
        string DetailZoneName { get; set; }
        /// <summary>Name to use for display purposes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name to use for display purposes",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get; set; }
        /// <summary>The name of the process executable</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the process executable",
        SerializedName = @"executableName",
        PossibleTypes = new [] { typeof(string) })]
        string ExecutableName { get; set; }
        /// <summary>
        /// The name of the product or suite of the process. The group is determined by its executable name, command line, etc.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the product or suite of the process. The group is determined by its executable name, command line, etc.",
        SerializedName = @"group",
        PossibleTypes = new [] { typeof(string) })]
        string Group { get; set; }
        /// <summary>Additional hosting configuration type qualifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Additional hosting configuration type qualifier.",
        SerializedName = @"kind",
        PossibleTypes = new [] { typeof(string) })]
        string HostingKind { get;  }
        /// <summary>The hosting provider of the VM.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The hosting provider of the VM.",
        SerializedName = @"provider",
        PossibleTypes = new [] { typeof(string) })]
        string HostingProvider { get; set; }
        /// <summary>Resource URI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource URI.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string MachineId { get; set; }
        /// <summary>Specifies the sub-class of the reference.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the sub-class of the reference.",
        SerializedName = @"kind",
        PossibleTypes = new [] { typeof(string) })]
        string MachineKind { get; set; }
        /// <summary>Resource name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Resource name.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string MachineName { get;  }
        /// <summary>Resource type qualifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Resource type qualifier.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string MachineType { get;  }
        /// <summary>Specifies whether the process is actively monitored or discovered.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether the process is actively monitored or discovered.",
        SerializedName = @"monitoringState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.MonitoringState) })]
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.MonitoringState? MonitoringState { get; set; }
        /// <summary>The inferred role of this process based on its name, command line, etc.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The inferred role of this process based on its name, command line, etc.",
        SerializedName = @"role",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.ProcessRole) })]
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.ProcessRole? Role { get; set; }
        /// <summary>UTC date and time when the process started</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"UTC date and time when the process started",
        SerializedName = @"startTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? StartTime { get; set; }
        /// <summary>UTC date and time when this process resource was updated in the system</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"UTC date and time when this process resource was updated in the system",
        SerializedName = @"timestamp",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? Timestamp { get; set; }
        /// <summary>Domain name for the user.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Domain name for the user.",
        SerializedName = @"userDomain",
        PossibleTypes = new [] { typeof(string) })]
        string UserDomain { get; set; }
        /// <summary>User name under which the process is running.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"User name under which the process is running.",
        SerializedName = @"userName",
        PossibleTypes = new [] { typeof(string) })]
        string UserName { get; set; }

    }
    /// A process resource represents a process running on a machine. The process may be actively *monitored*, i.e., a Dependency
    /// Agent is running on its machine, or *discovered*, i.e., its existence was inferred by observing the data stream from monitored
    /// machines. A process resource represents a pool of actual operating system resources that share command lines and metadata.
    /// As the process pool evolves over time, prior versions of the process resource are preserved and available for access.
    /// A process is live during an interval of time, if that process is executing during (parts) of that interval
    internal partial interface IProcessInternal :
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.ICoreResourceInternal
    {
        /// <summary>
        /// Present only for a discovered process acting as a server. References the port on which the discovered process is accepting.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceReference AcceptorOf { get; set; }
        /// <summary>Resource URI.</summary>
        string AcceptorOfId { get; set; }
        /// <summary>Specifies the sub-class of the reference.</summary>
        string AcceptorOfKind { get; set; }
        /// <summary>Resource name.</summary>
        string AcceptorOfName { get; set; }
        /// <summary>Resource type qualifier.</summary>
        string AcceptorOfType { get; set; }
        /// <summary>
        /// Present only for a discovered process acting as a client of a monitored process/machine/port. References the monitored
        /// process/machine/port that this process is a client of.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceReference ClientOf { get; set; }
        /// <summary>Resource URI.</summary>
        string ClientOfId { get; set; }
        /// <summary>Specifies the sub-class of the reference.</summary>
        string ClientOfKind { get; set; }
        /// <summary>Resource name.</summary>
        string ClientOfName { get; set; }
        /// <summary>Resource type qualifier.</summary>
        string ClientOfType { get; set; }
        /// <summary>Process metadata (command line, product name, etc.).</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessDetails Detail { get; set; }
        /// <summary>Process command line.</summary>
        string DetailCommandLine { get; set; }
        /// <summary>Name of company that created the process executable.</summary>
        string DetailCompanyName { get; set; }
        /// <summary>Process description.</summary>
        string DetailDescription { get; set; }
        /// <summary>Process executable path.</summary>
        string DetailExecutablePath { get; set; }
        /// <summary>File version.</summary>
        string DetailFileVersion { get; set; }
        /// <summary>
        /// The Operating System Process Identifier (PID) of the first process in this process pool.
        /// </summary>
        int? DetailFirstPid { get; set; }
        /// <summary>Internal process name.</summary>
        string DetailInternalName { get; set; }
        /// <summary>
        /// A unique identifier for a process, generally resilient to process restart, computed by Service Map.
        /// </summary>
        string DetailPersistentKey { get; set; }
        /// <summary>
        /// Represents the identity of the process pool assigned to the process by Dependency Agent.
        /// </summary>
        int? DetailPoolId { get; set; }
        /// <summary>Product name.</summary>
        string DetailProductName { get; set; }
        /// <summary>Product version.</summary>
        string DetailProductVersion { get; set; }
        /// <summary>Collection of services hosted by this Process (Windows only).</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessHostedService[] DetailService { get; set; }
        /// <summary>Process workingDirectory.</summary>
        string DetailWorkingDirectory { get; set; }
        /// <summary>Process zone name (Linux only).</summary>
        string DetailZoneName { get; set; }
        /// <summary>Name to use for display purposes</summary>
        string DisplayName { get; set; }
        /// <summary>The name of the process executable</summary>
        string ExecutableName { get; set; }
        /// <summary>
        /// The name of the product or suite of the process. The group is determined by its executable name, command line, etc.
        /// </summary>
        string Group { get; set; }
        /// <summary>Information about the hosting environment</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessHostingConfiguration Hosting { get; set; }
        /// <summary>Additional hosting configuration type qualifier.</summary>
        string HostingKind { get; set; }
        /// <summary>The hosting provider of the VM.</summary>
        string HostingProvider { get; set; }
        /// <summary>Machine hosting this process.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IResourceReference Machine { get; set; }
        /// <summary>Resource URI.</summary>
        string MachineId { get; set; }
        /// <summary>Specifies the sub-class of the reference.</summary>
        string MachineKind { get; set; }
        /// <summary>Resource name.</summary>
        string MachineName { get; set; }
        /// <summary>Resource type qualifier.</summary>
        string MachineType { get; set; }
        /// <summary>Specifies whether the process is actively monitored or discovered.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.MonitoringState? MonitoringState { get; set; }
        /// <summary>Resource properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessProperties Property { get; set; }
        /// <summary>The inferred role of this process based on its name, command line, etc.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Support.ProcessRole? Role { get; set; }
        /// <summary>UTC date and time when the process started</summary>
        global::System.DateTime? StartTime { get; set; }
        /// <summary>UTC date and time when this process resource was updated in the system</summary>
        global::System.DateTime? Timestamp { get; set; }
        /// <summary>Information about the account under which the process is executing.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceMap.Models.Api20151101Preview.IProcessUser User { get; set; }
        /// <summary>Domain name for the user.</summary>
        string UserDomain { get; set; }
        /// <summary>User name under which the process is running.</summary>
        string UserName { get; set; }

    }
}