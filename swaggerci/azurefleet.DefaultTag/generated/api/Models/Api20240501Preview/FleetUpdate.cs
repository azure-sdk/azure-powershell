// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Fleet.Runtime.Extensions;

    /// <summary>Fleet Update Model</summary>
    public partial class FleetUpdate :
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetUpdate,
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetUpdateInternal
    {

        /// <summary>
        /// Base Virtual Machine Profile Properties to be specified according to "specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/{computeApiVersion}/virtualMachineScaleSet.json#/definitions/VirtualMachineScaleSetVMProfile"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.Fleet.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20230901.IVirtualMachineScaleSetVMProfile ComputeProfileBaseVirtualMachineProfile { get => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).ComputeProfileBaseVirtualMachineProfile; set => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).ComputeProfileBaseVirtualMachineProfile = value ?? null /* model class */; }

        /// <summary>
        /// Specifies the Microsoft.Compute API version to use when creating underlying Virtual Machine scale sets and Virtual Machines.
        /// The default value will be the latest supported computeApiVersion by Compute Fleet.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.Fleet.PropertyOrigin.Inlined)]
        public string ComputeProfileComputeApiVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).ComputeProfileComputeApiVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).ComputeProfileComputeApiVersion = value ?? null; }

        /// <summary>
        /// Specifies the number of fault domains to use when creating the underlying VMSS.
        /// A fault domain is a logical group of hardware within an Azure datacenter.
        /// VMs in the same fault domain share a common power source and network switch.
        /// If not specified, defaults to 1, which represents "Max Spreading" (using as many fault domains as possible).
        /// This property cannot be updated.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.Fleet.PropertyOrigin.Inlined)]
        public int? ComputeProfilePlatformFaultDomainCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).ComputeProfilePlatformFaultDomainCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).ComputeProfilePlatformFaultDomainCount = value ?? default(int); }

        /// <summary>Backing field for <see cref="Identity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IManagedServiceIdentityUpdate _identity;

        /// <summary>Updatable managed service identity</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.Fleet.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IManagedServiceIdentityUpdate Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.ManagedServiceIdentityUpdate()); set => this._identity = value; }

        /// <summary>The type of managed identity assigned to this resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.Fleet.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Fleet.Support.ManagedServiceIdentityType? IdentityType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IManagedServiceIdentityUpdateInternal)Identity).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IManagedServiceIdentityUpdateInternal)Identity).Type = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Support.ManagedServiceIdentityType)""); }

        /// <summary>The identities assigned to this resource by the user.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.Fleet.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api50.IManagedServiceIdentityUpdateUserAssignedIdentities IdentityUserAssignedIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IManagedServiceIdentityUpdateInternal)Identity).UserAssignedIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IManagedServiceIdentityUpdateInternal)Identity).UserAssignedIdentity = value ?? null /* model class */; }

        /// <summary>Internal Acessors for ComputeProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IComputeProfile Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetUpdateInternal.ComputeProfile { get => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).ComputeProfile; set => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).ComputeProfile = value; }

        /// <summary>Internal Acessors for Identity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IManagedServiceIdentityUpdate Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetUpdateInternal.Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.ManagedServiceIdentityUpdate()); set { {_identity = value;} } }

        /// <summary>Internal Acessors for Plan</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IResourcePlanUpdate Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetUpdateInternal.Plan { get => (this._plan = this._plan ?? new Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.ResourcePlanUpdate()); set { {_plan = value;} } }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetProperties Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetUpdateInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.FleetProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Support.ProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetUpdateInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).ProvisioningState = value; }

        /// <summary>Internal Acessors for RegularPriorityProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IRegularPriorityProfile Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetUpdateInternal.RegularPriorityProfile { get => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).RegularPriorityProfile; set => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).RegularPriorityProfile = value; }

        /// <summary>Internal Acessors for SpotPriorityProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.ISpotPriorityProfile Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetUpdateInternal.SpotPriorityProfile { get => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).SpotPriorityProfile; set => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).SpotPriorityProfile = value; }

        /// <summary>Backing field for <see cref="Plan" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IResourcePlanUpdate _plan;

        /// <summary>Updatable resource plan</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.Fleet.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IResourcePlanUpdate Plan { get => (this._plan = this._plan ?? new Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.ResourcePlanUpdate()); set => this._plan = value; }

        /// <summary>A user defined name of the 3rd Party Artifact that is being procured.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.Fleet.PropertyOrigin.Inlined)]
        public string PlanName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IResourcePlanUpdateInternal)Plan).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IResourcePlanUpdateInternal)Plan).Name = value ?? null; }

        /// <summary>
        /// The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at
        /// the time of Data Market onboarding.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.Fleet.PropertyOrigin.Inlined)]
        public string PlanProduct { get => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IResourcePlanUpdateInternal)Plan).Product; set => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IResourcePlanUpdateInternal)Plan).Product = value ?? null; }

        /// <summary>
        /// A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.Fleet.PropertyOrigin.Inlined)]
        public string PlanPromotionCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IResourcePlanUpdateInternal)Plan).PromotionCode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IResourcePlanUpdateInternal)Plan).PromotionCode = value ?? null; }

        /// <summary>The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.Fleet.PropertyOrigin.Inlined)]
        public string PlanPublisher { get => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IResourcePlanUpdateInternal)Plan).Publisher; set => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IResourcePlanUpdateInternal)Plan).Publisher = value ?? null; }

        /// <summary>The version of the desired product/artifact.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.Fleet.PropertyOrigin.Inlined)]
        public string PlanVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IResourcePlanUpdateInternal)Plan).Version; set => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IResourcePlanUpdateInternal)Plan).Version = value ?? null; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetProperties _property;

        /// <summary>RP-specific updatable properties</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.Fleet.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.FleetProperties()); set => this._property = value; }

        /// <summary>The status of the last operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.Fleet.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Fleet.Support.ProvisioningState? ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).ProvisioningState; }

        /// <summary>
        /// Allocation strategy to follow when determining the VM sizes distribution for Regular VMs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.Fleet.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Fleet.Support.RegularPriorityAllocationStrategy? RegularPriorityProfileAllocationStrategy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).RegularPriorityProfileAllocationStrategy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).RegularPriorityProfileAllocationStrategy = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Support.RegularPriorityAllocationStrategy)""); }

        /// <summary>Total capacity to achieve. It is currently in terms of number of VMs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.Fleet.PropertyOrigin.Inlined)]
        public int? RegularPriorityProfileCapacity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).RegularPriorityProfileCapacity; set => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).RegularPriorityProfileCapacity = value ?? default(int); }

        /// <summary>
        /// Minimum capacity to achieve which cannot be updated. If we will not be able to "guarantee" minimum capacity, we will reject
        /// the request in the sync path itself.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.Fleet.PropertyOrigin.Inlined)]
        public int? RegularPriorityProfileMinCapacity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).RegularPriorityProfileMinCapacity; set => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).RegularPriorityProfileMinCapacity = value ?? default(int); }

        /// <summary>
        /// Allocation strategy to follow when determining the VM sizes distribution for Spot VMs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.Fleet.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Fleet.Support.SpotAllocationStrategy? SpotPriorityProfileAllocationStrategy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).SpotPriorityProfileAllocationStrategy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).SpotPriorityProfileAllocationStrategy = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Support.SpotAllocationStrategy)""); }

        /// <summary>Total capacity to achieve. It is currently in terms of number of VMs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.Fleet.PropertyOrigin.Inlined)]
        public int? SpotPriorityProfileCapacity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).SpotPriorityProfileCapacity; set => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).SpotPriorityProfileCapacity = value ?? default(int); }

        /// <summary>Eviction Policy to follow when evicting Spot VMs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.Fleet.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Fleet.Support.EvictionPolicy? SpotPriorityProfileEvictionPolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).SpotPriorityProfileEvictionPolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).SpotPriorityProfileEvictionPolicy = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Support.EvictionPolicy)""); }

        /// <summary>
        /// Flag to enable/disable continuous goal seeking for the desired capacity and restoration of evicted Spot VMs.
        /// If maintain is enabled, AzureFleetRP will use all VM sizes in vmSizesProfile to create new VMs (if VMs are evicted deleted)
        /// or update existing VMs with new VM sizes (if VMs are evicted deallocated or failed to allocate due to capacity constraint)
        /// in order to achieve the desired capacity.
        /// Maintain is enabled by default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.Fleet.PropertyOrigin.Inlined)]
        public bool? SpotPriorityProfileMaintain { get => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).SpotPriorityProfileMaintain; set => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).SpotPriorityProfileMaintain = value ?? default(bool); }

        /// <summary>Price per hour of each Spot VM will never exceed this.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.Fleet.PropertyOrigin.Inlined)]
        public float? SpotPriorityProfileMaxPricePerVM { get => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).SpotPriorityProfileMaxPricePerVM; set => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).SpotPriorityProfileMaxPricePerVM = value ?? default(float); }

        /// <summary>
        /// Minimum capacity to achieve which cannot be updated. If we will not be able to "guarantee" minimum capacity, we will reject
        /// the request in the sync path itself.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.Fleet.PropertyOrigin.Inlined)]
        public int? SpotPriorityProfileMinCapacity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).SpotPriorityProfileMinCapacity; set => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).SpotPriorityProfileMinCapacity = value ?? default(int); }

        /// <summary>Backing field for <see cref="Tag" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetUpdateTags _tag;

        /// <summary>Resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.Fleet.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetUpdateTags Tag { get => (this._tag = this._tag ?? new Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.FleetUpdateTags()); set => this._tag = value; }

        /// <summary>List of VM sizes supported for Compute Fleet</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.Fleet.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IVMSizeProfile[] VMSizesProfile { get => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).VMSizesProfile; set => ((Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetPropertiesInternal)Property).VMSizesProfile = value ?? null /* arrayOf */; }

        /// <summary>Creates an new <see cref="FleetUpdate" /> instance.</summary>
        public FleetUpdate()
        {

        }
    }
    /// Fleet Update Model
    public partial interface IFleetUpdate :
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Base Virtual Machine Profile Properties to be specified according to "specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/{computeApiVersion}/virtualMachineScaleSet.json#/definitions/VirtualMachineScaleSetVMProfile"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Base Virtual Machine Profile Properties to be specified according to ""specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/{computeApiVersion}/virtualMachineScaleSet.json#/definitions/VirtualMachineScaleSetVMProfile""",
        SerializedName = @"baseVirtualMachineProfile",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20230901.IVirtualMachineScaleSetVMProfile) })]
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20230901.IVirtualMachineScaleSetVMProfile ComputeProfileBaseVirtualMachineProfile { get; set; }
        /// <summary>
        /// Specifies the Microsoft.Compute API version to use when creating underlying Virtual Machine scale sets and Virtual Machines.
        /// The default value will be the latest supported computeApiVersion by Compute Fleet.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the Microsoft.Compute API version to use when creating underlying Virtual Machine scale sets and Virtual Machines.
        The default value will be the latest supported computeApiVersion by Compute Fleet.",
        SerializedName = @"computeApiVersion",
        PossibleTypes = new [] { typeof(string) })]
        string ComputeProfileComputeApiVersion { get; set; }
        /// <summary>
        /// Specifies the number of fault domains to use when creating the underlying VMSS.
        /// A fault domain is a logical group of hardware within an Azure datacenter.
        /// VMs in the same fault domain share a common power source and network switch.
        /// If not specified, defaults to 1, which represents "Max Spreading" (using as many fault domains as possible).
        /// This property cannot be updated.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the number of fault domains to use when creating the underlying VMSS.
        A fault domain is a logical group of hardware within an Azure datacenter.
        VMs in the same fault domain share a common power source and network switch.
        If not specified, defaults to 1, which represents ""Max Spreading"" (using as many fault domains as possible).
        This property cannot be updated.",
        SerializedName = @"platformFaultDomainCount",
        PossibleTypes = new [] { typeof(int) })]
        int? ComputeProfilePlatformFaultDomainCount { get; set; }
        /// <summary>The type of managed identity assigned to this resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of managed identity assigned to this resource.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Fleet.Support.ManagedServiceIdentityType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Support.ManagedServiceIdentityType? IdentityType { get; set; }
        /// <summary>The identities assigned to this resource by the user.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The identities assigned to this resource by the user.",
        SerializedName = @"userAssignedIdentities",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api50.IManagedServiceIdentityUpdateUserAssignedIdentities) })]
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api50.IManagedServiceIdentityUpdateUserAssignedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>A user defined name of the 3rd Party Artifact that is being procured.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A user defined name of the 3rd Party Artifact that is being procured.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string PlanName { get; set; }
        /// <summary>
        /// The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at
        /// the time of Data Market onboarding.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding.",
        SerializedName = @"product",
        PossibleTypes = new [] { typeof(string) })]
        string PlanProduct { get; set; }
        /// <summary>
        /// A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A publisher provided promotion code as provisioned in Data Market for the said product/artifact.",
        SerializedName = @"promotionCode",
        PossibleTypes = new [] { typeof(string) })]
        string PlanPromotionCode { get; set; }
        /// <summary>The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic",
        SerializedName = @"publisher",
        PossibleTypes = new [] { typeof(string) })]
        string PlanPublisher { get; set; }
        /// <summary>The version of the desired product/artifact.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The version of the desired product/artifact.",
        SerializedName = @"version",
        PossibleTypes = new [] { typeof(string) })]
        string PlanVersion { get; set; }
        /// <summary>The status of the last operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The status of the last operation.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Fleet.Support.ProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Support.ProvisioningState? ProvisioningState { get;  }
        /// <summary>
        /// Allocation strategy to follow when determining the VM sizes distribution for Regular VMs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Allocation strategy to follow when determining the VM sizes distribution for Regular VMs.",
        SerializedName = @"allocationStrategy",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Fleet.Support.RegularPriorityAllocationStrategy) })]
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Support.RegularPriorityAllocationStrategy? RegularPriorityProfileAllocationStrategy { get; set; }
        /// <summary>Total capacity to achieve. It is currently in terms of number of VMs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Total capacity to achieve. It is currently in terms of number of VMs.",
        SerializedName = @"capacity",
        PossibleTypes = new [] { typeof(int) })]
        int? RegularPriorityProfileCapacity { get; set; }
        /// <summary>
        /// Minimum capacity to achieve which cannot be updated. If we will not be able to "guarantee" minimum capacity, we will reject
        /// the request in the sync path itself.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Minimum capacity to achieve which cannot be updated. If we will not be able to ""guarantee"" minimum capacity, we will reject the request in the sync path itself.",
        SerializedName = @"minCapacity",
        PossibleTypes = new [] { typeof(int) })]
        int? RegularPriorityProfileMinCapacity { get; set; }
        /// <summary>
        /// Allocation strategy to follow when determining the VM sizes distribution for Spot VMs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Allocation strategy to follow when determining the VM sizes distribution for Spot VMs.",
        SerializedName = @"allocationStrategy",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Fleet.Support.SpotAllocationStrategy) })]
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Support.SpotAllocationStrategy? SpotPriorityProfileAllocationStrategy { get; set; }
        /// <summary>Total capacity to achieve. It is currently in terms of number of VMs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Total capacity to achieve. It is currently in terms of number of VMs.",
        SerializedName = @"capacity",
        PossibleTypes = new [] { typeof(int) })]
        int? SpotPriorityProfileCapacity { get; set; }
        /// <summary>Eviction Policy to follow when evicting Spot VMs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Eviction Policy to follow when evicting Spot VMs.",
        SerializedName = @"evictionPolicy",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Fleet.Support.EvictionPolicy) })]
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Support.EvictionPolicy? SpotPriorityProfileEvictionPolicy { get; set; }
        /// <summary>
        /// Flag to enable/disable continuous goal seeking for the desired capacity and restoration of evicted Spot VMs.
        /// If maintain is enabled, AzureFleetRP will use all VM sizes in vmSizesProfile to create new VMs (if VMs are evicted deleted)
        /// or update existing VMs with new VM sizes (if VMs are evicted deallocated or failed to allocate due to capacity constraint)
        /// in order to achieve the desired capacity.
        /// Maintain is enabled by default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag to enable/disable continuous goal seeking for the desired capacity and restoration of evicted Spot VMs.
        If maintain is enabled, AzureFleetRP will use all VM sizes in vmSizesProfile to create new VMs (if VMs are evicted deleted)
        or update existing VMs with new VM sizes (if VMs are evicted deallocated or failed to allocate due to capacity constraint) in order to achieve the desired capacity.
        Maintain is enabled by default.",
        SerializedName = @"maintain",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SpotPriorityProfileMaintain { get; set; }
        /// <summary>Price per hour of each Spot VM will never exceed this.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Price per hour of each Spot VM will never exceed this.",
        SerializedName = @"maxPricePerVM",
        PossibleTypes = new [] { typeof(float) })]
        float? SpotPriorityProfileMaxPricePerVM { get; set; }
        /// <summary>
        /// Minimum capacity to achieve which cannot be updated. If we will not be able to "guarantee" minimum capacity, we will reject
        /// the request in the sync path itself.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Minimum capacity to achieve which cannot be updated. If we will not be able to ""guarantee"" minimum capacity, we will reject the request in the sync path itself.",
        SerializedName = @"minCapacity",
        PossibleTypes = new [] { typeof(int) })]
        int? SpotPriorityProfileMinCapacity { get; set; }
        /// <summary>Resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource tags.",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetUpdateTags) })]
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetUpdateTags Tag { get; set; }
        /// <summary>List of VM sizes supported for Compute Fleet</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Fleet.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of VM sizes supported for Compute Fleet",
        SerializedName = @"vmSizesProfile",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IVMSizeProfile) })]
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IVMSizeProfile[] VMSizesProfile { get; set; }

    }
    /// Fleet Update Model
    internal partial interface IFleetUpdateInternal

    {
        /// <summary>Compute Profile to use for running user's workloads.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IComputeProfile ComputeProfile { get; set; }
        /// <summary>
        /// Base Virtual Machine Profile Properties to be specified according to "specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/{computeApiVersion}/virtualMachineScaleSet.json#/definitions/VirtualMachineScaleSetVMProfile"
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20230901.IVirtualMachineScaleSetVMProfile ComputeProfileBaseVirtualMachineProfile { get; set; }
        /// <summary>
        /// Specifies the Microsoft.Compute API version to use when creating underlying Virtual Machine scale sets and Virtual Machines.
        /// The default value will be the latest supported computeApiVersion by Compute Fleet.
        /// </summary>
        string ComputeProfileComputeApiVersion { get; set; }
        /// <summary>
        /// Specifies the number of fault domains to use when creating the underlying VMSS.
        /// A fault domain is a logical group of hardware within an Azure datacenter.
        /// VMs in the same fault domain share a common power source and network switch.
        /// If not specified, defaults to 1, which represents "Max Spreading" (using as many fault domains as possible).
        /// This property cannot be updated.
        /// </summary>
        int? ComputeProfilePlatformFaultDomainCount { get; set; }
        /// <summary>Updatable managed service identity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IManagedServiceIdentityUpdate Identity { get; set; }
        /// <summary>The type of managed identity assigned to this resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Support.ManagedServiceIdentityType? IdentityType { get; set; }
        /// <summary>The identities assigned to this resource by the user.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api50.IManagedServiceIdentityUpdateUserAssignedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>Updatable resource plan</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IResourcePlanUpdate Plan { get; set; }
        /// <summary>A user defined name of the 3rd Party Artifact that is being procured.</summary>
        string PlanName { get; set; }
        /// <summary>
        /// The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at
        /// the time of Data Market onboarding.
        /// </summary>
        string PlanProduct { get; set; }
        /// <summary>
        /// A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
        /// </summary>
        string PlanPromotionCode { get; set; }
        /// <summary>The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic</summary>
        string PlanPublisher { get; set; }
        /// <summary>The version of the desired product/artifact.</summary>
        string PlanVersion { get; set; }
        /// <summary>RP-specific updatable properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetProperties Property { get; set; }
        /// <summary>The status of the last operation.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Support.ProvisioningState? ProvisioningState { get; set; }
        /// <summary>Configuration Options for Regular instances in Compute Fleet.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IRegularPriorityProfile RegularPriorityProfile { get; set; }
        /// <summary>
        /// Allocation strategy to follow when determining the VM sizes distribution for Regular VMs.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Support.RegularPriorityAllocationStrategy? RegularPriorityProfileAllocationStrategy { get; set; }
        /// <summary>Total capacity to achieve. It is currently in terms of number of VMs.</summary>
        int? RegularPriorityProfileCapacity { get; set; }
        /// <summary>
        /// Minimum capacity to achieve which cannot be updated. If we will not be able to "guarantee" minimum capacity, we will reject
        /// the request in the sync path itself.
        /// </summary>
        int? RegularPriorityProfileMinCapacity { get; set; }
        /// <summary>Configuration Options for Spot instances in Compute Fleet.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.ISpotPriorityProfile SpotPriorityProfile { get; set; }
        /// <summary>
        /// Allocation strategy to follow when determining the VM sizes distribution for Spot VMs.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Support.SpotAllocationStrategy? SpotPriorityProfileAllocationStrategy { get; set; }
        /// <summary>Total capacity to achieve. It is currently in terms of number of VMs.</summary>
        int? SpotPriorityProfileCapacity { get; set; }
        /// <summary>Eviction Policy to follow when evicting Spot VMs.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Support.EvictionPolicy? SpotPriorityProfileEvictionPolicy { get; set; }
        /// <summary>
        /// Flag to enable/disable continuous goal seeking for the desired capacity and restoration of evicted Spot VMs.
        /// If maintain is enabled, AzureFleetRP will use all VM sizes in vmSizesProfile to create new VMs (if VMs are evicted deleted)
        /// or update existing VMs with new VM sizes (if VMs are evicted deallocated or failed to allocate due to capacity constraint)
        /// in order to achieve the desired capacity.
        /// Maintain is enabled by default.
        /// </summary>
        bool? SpotPriorityProfileMaintain { get; set; }
        /// <summary>Price per hour of each Spot VM will never exceed this.</summary>
        float? SpotPriorityProfileMaxPricePerVM { get; set; }
        /// <summary>
        /// Minimum capacity to achieve which cannot be updated. If we will not be able to "guarantee" minimum capacity, we will reject
        /// the request in the sync path itself.
        /// </summary>
        int? SpotPriorityProfileMinCapacity { get; set; }
        /// <summary>Resource tags.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IFleetUpdateTags Tag { get; set; }
        /// <summary>List of VM sizes supported for Compute Fleet</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Fleet.Models.Api20240501Preview.IVMSizeProfile[] VMSizesProfile { get; set; }

    }
}