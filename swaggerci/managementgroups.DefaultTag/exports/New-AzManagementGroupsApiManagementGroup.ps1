
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create or update a management group.\nIf a management group is already created and a subsequent create request is issued with different properties, the management group properties will be updated.
.Description
Create or update a management group.\nIf a management group is already created and a subsequent create request is issued with different properties, the management group properties will be updated.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Models.Api20230401.IManagementGroup
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

CHILD <IManagementGroupChildInfo[]>: The list of children.
  [Child <IManagementGroupChildInfo[]>]: The list of children.
  [DisplayName <String>]: The friendly name of the child resource.
  [Id <String>]: The fully qualified ID for the child resource (management group or subscription).  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
  [Name <String>]: The name of the child entity.
  [Type <ManagementGroupChildType?>]: The fully qualified resource type which includes provider namespace (e.g. Microsoft.Management/managementGroups)

DETAILMANAGEMENTGROUPANCESTORSCHAIN <IManagementGroupPathElement[]>: The ancestors of the management group displayed in reversed order, from immediate parent to the root.
  [DisplayName <String>]: The friendly name of the group.
  [Name <String>]: The name of the group.

DETAILPATH <IManagementGroupPathElement[]>: The path from the root to the current group.
  [DisplayName <String>]: The friendly name of the group.
  [Name <String>]: The name of the group.
.Link
https://learn.microsoft.com/powershell/module/az.managementgroupsapi/new-azmanagementgroupsapimanagementgroup
#>
function New-AzManagementGroupsApiManagementGroup {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Models.Api20230401.IManagementGroup])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Path')]
    [System.String]
    # Management Group ID.
    ${GroupId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Header')]
    [System.String]
    # Indicates whether the request should utilize any caches.
    # Populate the header with 'no-cache' value to bypass existing caches.
    ${CacheControl},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Models.Api20230401.IManagementGroupChildInfo[]]
    # The list of children.
    # To construct, see NOTES section for CHILD properties and create a hash table.
    ${Child},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Body')]
    [System.String[]]
    # The ancestors of the management group.
    ${DetailManagementGroupAncestor},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Models.Api20230401.IManagementGroupPathElement[]]
    # The ancestors of the management group displayed in reversed order, from immediate parent to the root.
    # To construct, see NOTES section for DETAILMANAGEMENTGROUPANCESTORSCHAIN properties and create a hash table.
    ${DetailManagementGroupAncestorsChain},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Models.Api20230401.IManagementGroupPathElement[]]
    # The path from the root to the current group.
    # To construct, see NOTES section for DETAILPATH properties and create a hash table.
    ${DetailPath},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Body')]
    [System.String]
    # The identity of the principal or process that updated the object.
    ${DetailUpdatedBy},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Body')]
    [System.DateTime]
    # The date and time when this object was last updated.
    ${DetailUpdatedTime},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Body')]
    [System.Int32]
    # The version number of the object.
    ${DetailVersion},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Body')]
    [System.String]
    # The friendly name of the management group.
    ${DisplayName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Body')]
    [System.String]
    # The friendly name of the parent management group.
    ${ParentDisplayName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Body')]
    [System.String]
    # The fully qualified ID for the parent management group.
    # For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
    ${ParentId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Body')]
    [System.String]
    # The name of the parent management group
    ${ParentName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Body')]
    [System.String]
    # The AAD Tenant ID associated with the management group.
    # For example, 00000000-0000-0000-0000-000000000000
    ${TenantId},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.ManagementGroupsApi.private\New-AzManagementGroupsApiManagementGroup_CreateExpanded';
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.ManagementGroupsApi.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
