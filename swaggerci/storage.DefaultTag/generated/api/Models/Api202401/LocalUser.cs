// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Extensions;

    /// <summary>The local user associated with the storage accounts.</summary>
    public partial class LocalUser :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUser,
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.IResource" />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.IResource __resource = new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.Resource();

        /// <summary>
        /// Indicates whether ACL authorization is allowed for this user. Set it to false to disallow using ACL authorization.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? AllowAclAuthorization { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserPropertiesInternal)Property).AllowAclAuthorization; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserPropertiesInternal)Property).AllowAclAuthorization = value ?? default(bool); }

        /// <summary>
        /// Supplementary group membership. Only applicable for local users enabled for NFSv3 access.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public int[] ExtendedGroup { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserPropertiesInternal)Property).ExtendedGroup; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserPropertiesInternal)Property).ExtendedGroup = value ?? null /* arrayOf */; }

        /// <summary>An identifier for associating a group of users.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public int? GroupId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserPropertiesInternal)Property).GroupId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserPropertiesInternal)Property).GroupId = value ?? default(int); }

        /// <summary>
        /// Indicates whether shared key exists. Set it to false to remove existing shared key.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? HasSharedKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserPropertiesInternal)Property).HasSharedKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserPropertiesInternal)Property).HasSharedKey = value ?? default(bool); }

        /// <summary>Indicates whether ssh key exists. Set it to false to remove existing SSH key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? HasSshKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserPropertiesInternal)Property).HasSshKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserPropertiesInternal)Property).HasSshKey = value ?? default(bool); }

        /// <summary>
        /// Indicates whether ssh password exists. Set it to false to remove existing SSH password.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? HasSshPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserPropertiesInternal)Property).HasSshPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserPropertiesInternal)Property).HasSshPassword = value ?? default(bool); }

        /// <summary>Optional, local user home directory.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string HomeDirectory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserPropertiesInternal)Property).HomeDirectory; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserPropertiesInternal)Property).HomeDirectory = value ?? null; }

        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.IResourceInternal)__resource).Id; }

        /// <summary>Indicates if the local user is enabled for access with NFSv3 protocol.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? IsNfSv3Enabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserPropertiesInternal)Property).IsNfSv3Enabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserPropertiesInternal)Property).IsNfSv3Enabled = value ?? default(bool); }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserProperties Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.LocalUserProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for Sid</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserInternal.Sid { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserPropertiesInternal)Property).Sid; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserPropertiesInternal)Property).Sid = value; }

        /// <summary>Internal Acessors for UserId</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserInternal.UserId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserPropertiesInternal)Property).UserId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserPropertiesInternal)Property).UserId = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.IResourceInternal)__resource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.IResourceInternal)__resource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.IResourceInternal)__resource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.IResourceInternal)__resource).Name = value; }

        /// <summary>Internal Acessors for SystemData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.ISystemData Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.IResourceInternal.SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.IResourceInternal)__resource).SystemData; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.IResourceInternal)__resource).SystemData = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.IResourceInternal)__resource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.IResourceInternal)__resource).Type = value; }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.IResourceInternal)__resource).Name; }

        /// <summary>The permission scopes of the local user.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.IPermissionScope[] PermissionScope { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserPropertiesInternal)Property).PermissionScope; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserPropertiesInternal)Property).PermissionScope = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserProperties _property;

        /// <summary>Storage account local user properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.LocalUserProperties()); set => this._property = value; }

        /// <summary>A unique Security Identifier that is generated by the server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string Sid { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserPropertiesInternal)Property).Sid; }

        /// <summary>Optional, local user ssh authorized keys for SFTP.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ISshPublicKey[] SshAuthorizedKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserPropertiesInternal)Property).SshAuthorizedKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserPropertiesInternal)Property).SshAuthorizedKey = value ?? null /* arrayOf */; }

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.ISystemData SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.IResourceInternal)__resource).SystemData; }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.IResourceInternal)__resource).SystemDataCreatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.IResourceInternal)__resource).SystemDataCreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public string SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.IResourceInternal)__resource).SystemDataCreatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.IResourceInternal)__resource).SystemDataCreatedBy = value ?? null; }

        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.CreatedByType? SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.IResourceInternal)__resource).SystemDataCreatedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.IResourceInternal)__resource).SystemDataCreatedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.CreatedByType)""); }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.IResourceInternal)__resource).SystemDataLastModifiedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.IResourceInternal)__resource).SystemDataLastModifiedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public string SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.IResourceInternal)__resource).SystemDataLastModifiedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.IResourceInternal)__resource).SystemDataLastModifiedBy = value ?? null; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.CreatedByType? SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.IResourceInternal)__resource).SystemDataLastModifiedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.IResourceInternal)__resource).SystemDataLastModifiedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Support.CreatedByType)""); }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.IResourceInternal)__resource).Type; }

        /// <summary>A unique Identifier that is generated by the server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public int? UserId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserPropertiesInternal)Property).UserId; }

        /// <summary>Creates an new <see cref="LocalUser" /> instance.</summary>
        public LocalUser()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__resource), __resource);
            await eventListener.AssertObjectIsValid(nameof(__resource), __resource);
        }
    }
    /// The local user associated with the storage accounts.
    public partial interface ILocalUser :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.IResource
    {
        /// <summary>
        /// Indicates whether ACL authorization is allowed for this user. Set it to false to disallow using ACL authorization.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether ACL authorization is allowed for this user. Set it to false to disallow using ACL authorization.",
        SerializedName = @"allowAclAuthorization",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AllowAclAuthorization { get; set; }
        /// <summary>
        /// Supplementary group membership. Only applicable for local users enabled for NFSv3 access.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Supplementary group membership. Only applicable for local users enabled for NFSv3 access.",
        SerializedName = @"extendedGroups",
        PossibleTypes = new [] { typeof(int) })]
        int[] ExtendedGroup { get; set; }
        /// <summary>An identifier for associating a group of users.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An identifier for associating a group of users.",
        SerializedName = @"groupId",
        PossibleTypes = new [] { typeof(int) })]
        int? GroupId { get; set; }
        /// <summary>
        /// Indicates whether shared key exists. Set it to false to remove existing shared key.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether shared key exists. Set it to false to remove existing shared key.",
        SerializedName = @"hasSharedKey",
        PossibleTypes = new [] { typeof(bool) })]
        bool? HasSharedKey { get; set; }
        /// <summary>Indicates whether ssh key exists. Set it to false to remove existing SSH key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether ssh key exists. Set it to false to remove existing SSH key.",
        SerializedName = @"hasSshKey",
        PossibleTypes = new [] { typeof(bool) })]
        bool? HasSshKey { get; set; }
        /// <summary>
        /// Indicates whether ssh password exists. Set it to false to remove existing SSH password.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether ssh password exists. Set it to false to remove existing SSH password.",
        SerializedName = @"hasSshPassword",
        PossibleTypes = new [] { typeof(bool) })]
        bool? HasSshPassword { get; set; }
        /// <summary>Optional, local user home directory.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Optional, local user home directory.",
        SerializedName = @"homeDirectory",
        PossibleTypes = new [] { typeof(string) })]
        string HomeDirectory { get; set; }
        /// <summary>Indicates if the local user is enabled for access with NFSv3 protocol.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates if the local user is enabled for access with NFSv3 protocol.",
        SerializedName = @"isNFSv3Enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsNfSv3Enabled { get; set; }
        /// <summary>The permission scopes of the local user.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The permission scopes of the local user.",
        SerializedName = @"permissionScopes",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.IPermissionScope) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.IPermissionScope[] PermissionScope { get; set; }
        /// <summary>A unique Security Identifier that is generated by the server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"A unique Security Identifier that is generated by the server.",
        SerializedName = @"sid",
        PossibleTypes = new [] { typeof(string) })]
        string Sid { get;  }
        /// <summary>Optional, local user ssh authorized keys for SFTP.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Optional, local user ssh authorized keys for SFTP.",
        SerializedName = @"sshAuthorizedKeys",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ISshPublicKey) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ISshPublicKey[] SshAuthorizedKey { get; set; }
        /// <summary>A unique Identifier that is generated by the server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"A unique Identifier that is generated by the server.",
        SerializedName = @"userId",
        PossibleTypes = new [] { typeof(int) })]
        int? UserId { get;  }

    }
    /// The local user associated with the storage accounts.
    internal partial interface ILocalUserInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api30.IResourceInternal
    {
        /// <summary>
        /// Indicates whether ACL authorization is allowed for this user. Set it to false to disallow using ACL authorization.
        /// </summary>
        bool? AllowAclAuthorization { get; set; }
        /// <summary>
        /// Supplementary group membership. Only applicable for local users enabled for NFSv3 access.
        /// </summary>
        int[] ExtendedGroup { get; set; }
        /// <summary>An identifier for associating a group of users.</summary>
        int? GroupId { get; set; }
        /// <summary>
        /// Indicates whether shared key exists. Set it to false to remove existing shared key.
        /// </summary>
        bool? HasSharedKey { get; set; }
        /// <summary>Indicates whether ssh key exists. Set it to false to remove existing SSH key.</summary>
        bool? HasSshKey { get; set; }
        /// <summary>
        /// Indicates whether ssh password exists. Set it to false to remove existing SSH password.
        /// </summary>
        bool? HasSshPassword { get; set; }
        /// <summary>Optional, local user home directory.</summary>
        string HomeDirectory { get; set; }
        /// <summary>Indicates if the local user is enabled for access with NFSv3 protocol.</summary>
        bool? IsNfSv3Enabled { get; set; }
        /// <summary>The permission scopes of the local user.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.IPermissionScope[] PermissionScope { get; set; }
        /// <summary>Storage account local user properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ILocalUserProperties Property { get; set; }
        /// <summary>A unique Security Identifier that is generated by the server.</summary>
        string Sid { get; set; }
        /// <summary>Optional, local user ssh authorized keys for SFTP.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Api202401.ISshPublicKey[] SshAuthorizedKey { get; set; }
        /// <summary>A unique Identifier that is generated by the server.</summary>
        int? UserId { get; set; }

    }
}