// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Extensions;
    using System;

    /// <summary>Patch a NotificationHub in a namespace.</summary>
    /// <remarks>
    /// [OpenAPI] Patch=>PATCH:"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsData.Update, @"AzNotificationHubsNotificationHub_PatchViaIdentityExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.INotificationHubResource))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Description(@"Patch a NotificationHub in a namespace.")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Generated]
    public partial class UpdateAzNotificationHubsNotificationHub_PatchViaIdentityExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>The APNS certificate. Specify if using Certificate Authentication Mode.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The APNS certificate. Specify if using Certificate Authentication Mode.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The APNS certificate. Specify if using Certificate Authentication Mode.",
        SerializedName = @"apnsCertificate",
        PossibleTypes = new [] { typeof(string) })]
        public string ApnsCertificate { get => ParametersBody.ApnsCertificate ?? null; set => ParametersBody.ApnsCertificate = value; }

        /// <summary>The APNS certificate password if it exists.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The APNS certificate password if it exists.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The APNS certificate password if it exists.",
        SerializedName = @"certificateKey",
        PossibleTypes = new [] { typeof(string) })]
        public string ApnsCredentialPropertiesCertificateKey { get => ParametersBody.ApnsCredentialPropertiesCertificateKey ?? null; set => ParametersBody.ApnsCredentialPropertiesCertificateKey = value; }

        /// <summary>
        /// The APNS certificate thumbprint. Specify if using Certificate Authentication Mode.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The APNS certificate thumbprint. Specify if using Certificate Authentication Mode.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The APNS certificate thumbprint. Specify if using Certificate Authentication Mode.",
        SerializedName = @"thumbprint",
        PossibleTypes = new [] { typeof(string) })]
        public string ApnsCredentialPropertiesThumbprint { get => ParametersBody.ApnsCredentialPropertiesThumbprint ?? null; set => ParametersBody.ApnsCredentialPropertiesThumbprint = value; }

        /// <summary>
        /// The issuer (iss) registered claim key. The value is a 10-character TeamId, obtained from your developer account. Specify
        /// if using Token Authentication Mode.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The issuer (iss) registered claim key. The value is a 10-character TeamId, obtained from your developer account. Specify if using Token Authentication Mode.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The issuer (iss) registered claim key. The value is a 10-character TeamId, obtained from your developer account. Specify if using Token Authentication Mode.",
        SerializedName = @"appId",
        PossibleTypes = new [] { typeof(string) })]
        public string AppId { get => ParametersBody.AppId ?? null; set => ParametersBody.AppId = value; }

        /// <summary>
        /// The name of the application or BundleId. Specify if using Token Authentication Mode.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The name of the application or BundleId. Specify if using Token Authentication Mode.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the application or BundleId. Specify if using Token Authentication Mode.",
        SerializedName = @"appName",
        PossibleTypes = new [] { typeof(string) })]
        public string AppName { get => ParametersBody.AppName ?? null; set => ParametersBody.AppName = value; }

        /// <summary>The URL of the authorization token.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The URL of the authorization token.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The URL of the authorization token.",
        SerializedName = @"authTokenUrl",
        PossibleTypes = new [] { typeof(string) })]
        public string AuthTokenUrl { get => ParametersBody.AuthTokenUrl ?? null; set => ParametersBody.AuthTokenUrl = value; }

        /// <summary>The AuthorizationRules of the created NotificationHub</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The AuthorizationRules of the created NotificationHub")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The AuthorizationRules of the created NotificationHub",
        SerializedName = @"authorizationRules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.ISharedAccessAuthorizationRuleProperties) })]
        public Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.ISharedAccessAuthorizationRuleProperties[] AuthorizationRule { get => ParametersBody.AuthorizationRule ?? null /* arrayOf */; set => ParametersBody.AuthorizationRule = value; }

        /// <summary>Baidu Api Key.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Baidu Api Key.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Baidu Api Key.",
        SerializedName = @"baiduApiKey",
        PossibleTypes = new [] { typeof(string) })]
        public string BaiduApiKey { get => ParametersBody.BaiduApiKey ?? null; set => ParametersBody.BaiduApiKey = value; }

        /// <summary>Baidu Endpoint.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Baidu Endpoint.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Baidu Endpoint.",
        SerializedName = @"baiduEndPoint",
        PossibleTypes = new [] { typeof(string) })]
        public string BaiduEndPoint { get => ParametersBody.BaiduEndPoint ?? null; set => ParametersBody.BaiduEndPoint = value; }

        /// <summary>Baidu Secret Key</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Baidu Secret Key")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Baidu Secret Key",
        SerializedName = @"baiduSecretKey",
        PossibleTypes = new [] { typeof(string) })]
        public string BaiduSecretKey { get => ParametersBody.BaiduSecretKey ?? null; set => ParametersBody.BaiduSecretKey = value; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.NotificationHubsManagementClient Client => Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Module.Instance.ClientAPI;

        /// <summary>The client identifier.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The client identifier.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The client identifier.",
        SerializedName = @"clientId",
        PossibleTypes = new [] { typeof(string) })]
        public string ClientId { get => ParametersBody.ClientId ?? null; set => ParametersBody.ClientId = value; }

        /// <summary>The credential secret access key.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The credential secret access key.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The credential secret access key.",
        SerializedName = @"clientSecret",
        PossibleTypes = new [] { typeof(string) })]
        public string ClientSecret { get => ParametersBody.ClientSecret ?? null; set => ParametersBody.ClientSecret = value; }

        /// <summary>
        /// The credentials, account, tenant, and subscription used for communication with Azure
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The credentials, account, tenant, and subscription used for communication with Azure.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>
        /// The APNS endpoint of this credential. If using Certificate Authentication Mode and Sandbox specify 'gateway.sandbox.push.apple.com'.
        /// If using Certificate Authentication Mode and Production specify 'gateway.push.apple.com'. If using Token Authentication
        /// Mode and Sandbox specify 'https://api.development.push.apple.com:443/3/device'. If using Token Authentication Mode and
        /// Production specify 'https://api.push.apple.com:443/3/device'.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The APNS endpoint of this credential. If using Certificate Authentication Mode and Sandbox specify 'gateway.sandbox.push.apple.com'. If using Certificate Authentication Mode and Production specify 'gateway.push.apple.com'. If using Token Authentication Mode and Sandbox specify 'https://api.development.push.apple.com:443/3/device'. If using Token Authentication Mode and Production specify 'https://api.push.apple.com:443/3/device'.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The APNS endpoint of this credential. If using Certificate Authentication Mode and Sandbox specify 'gateway.sandbox.push.apple.com'. If using Certificate Authentication Mode and Production specify 'gateway.push.apple.com'. If using Token Authentication Mode and Sandbox specify 'https://api.development.push.apple.com:443/3/device'. If using Token Authentication Mode and Production specify 'https://api.push.apple.com:443/3/device'.",
        SerializedName = @"endpoint",
        PossibleTypes = new [] { typeof(string) })]
        public string Endpoint { get => ParametersBody.Endpoint ?? null; set => ParametersBody.Endpoint = value; }

        /// <summary>The FCM legacy endpoint. Default value is 'https://fcm.googleapis.com/fcm/send'</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The FCM legacy endpoint. Default value is 'https://fcm.googleapis.com/fcm/send'")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The FCM legacy endpoint. Default value is 'https://fcm.googleapis.com/fcm/send'",
        SerializedName = @"gcmEndpoint",
        PossibleTypes = new [] { typeof(string) })]
        public string GcmEndpoint { get => ParametersBody.GcmEndpoint ?? null; set => ParametersBody.GcmEndpoint = value; }

        /// <summary>The Google API key.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The Google API key.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Google API key.",
        SerializedName = @"googleApiKey",
        PossibleTypes = new [] { typeof(string) })]
        public string GoogleApiKey { get => ParametersBody.GoogleApiKey ?? null; set => ParametersBody.GoogleApiKey = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>Backing field for <see cref="InputObject" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.INotificationHubsIdentity _inputObject;

        /// <summary>Identity Parameter</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Identity Parameter", ValueFromPipeline = true)]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Path)]
        public Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.INotificationHubsIdentity InputObject { get => this._inputObject; set => this._inputObject = value; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>
        /// A 10-character key identifier (kid) key, obtained from your developer account. Specify if using Token Authentication Mode.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A 10-character key identifier (kid) key, obtained from your developer account. Specify if using Token Authentication Mode.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A 10-character key identifier (kid) key, obtained from your developer account. Specify if using Token Authentication Mode.",
        SerializedName = @"keyId",
        PossibleTypes = new [] { typeof(string) })]
        public string KeyId { get => ParametersBody.KeyId ?? null; set => ParametersBody.KeyId = value; }

        /// <summary>Resource location</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Resource location")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource location",
        SerializedName = @"location",
        PossibleTypes = new [] { typeof(string) })]
        public string Location { get => ParametersBody.Location ?? null; set => ParametersBody.Location = value; }

        /// <summary>
        /// <see cref="IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>The MPNS certificate.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The MPNS certificate.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The MPNS certificate.",
        SerializedName = @"mpnsCertificate",
        PossibleTypes = new [] { typeof(string) })]
        public string MpnsCertificate { get => ParametersBody.MpnsCertificate ?? null; set => ParametersBody.MpnsCertificate = value; }

        /// <summary>The certificate key for this credential.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The certificate key for this credential.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The certificate key for this credential.",
        SerializedName = @"certificateKey",
        PossibleTypes = new [] { typeof(string) })]
        public string MpnsCredentialPropertiesCertificateKey { get => ParametersBody.MpnsCredentialPropertiesCertificateKey ?? null; set => ParametersBody.MpnsCredentialPropertiesCertificateKey = value; }

        /// <summary>The MPNS certificate Thumbprint</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The MPNS certificate Thumbprint")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The MPNS certificate Thumbprint",
        SerializedName = @"thumbprint",
        PossibleTypes = new [] { typeof(string) })]
        public string MpnsCredentialPropertiesThumbprint { get => ParametersBody.MpnsCredentialPropertiesThumbprint ?? null; set => ParametersBody.MpnsCredentialPropertiesThumbprint = value; }

        /// <summary>The package ID for this credential.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The package ID for this credential.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The package ID for this credential.",
        SerializedName = @"packageSid",
        PossibleTypes = new [] { typeof(string) })]
        public string PackageSid { get => ParametersBody.PackageSid ?? null; set => ParametersBody.PackageSid = value; }

        /// <summary>Backing field for <see cref="ParametersBody" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.INotificationHubPatchParameters _parametersBody= new Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.NotificationHubPatchParameters();

        /// <summary>Parameters supplied to the patch NotificationHub operation.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.INotificationHubPatchParameters ParametersBody { get => this._parametersBody; set => this._parametersBody = value; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>The NotificationHub name.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The NotificationHub name.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The NotificationHub name.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        public string PropertiesName { get => ParametersBody.PropertiesName ?? null; set => ParametersBody.PropertiesName = value; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>The RegistrationTtl of the created NotificationHub</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The RegistrationTtl of the created NotificationHub")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The RegistrationTtl of the created NotificationHub",
        SerializedName = @"registrationTtl",
        PossibleTypes = new [] { typeof(string) })]
        public string RegistrationTtl { get => ParametersBody.RegistrationTtl ?? null; set => ParametersBody.RegistrationTtl = value; }

        /// <summary>The secret key.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The secret key.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The secret key.",
        SerializedName = @"secretKey",
        PossibleTypes = new [] { typeof(string) })]
        public string SecretKey { get => ParametersBody.SecretKey ?? null; set => ParametersBody.SecretKey = value; }

        /// <summary>The capacity of the resource</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The capacity of the resource")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The capacity of the resource",
        SerializedName = @"capacity",
        PossibleTypes = new [] { typeof(int) })]
        public int SkuCapacity { get => ParametersBody.SkuCapacity ?? default(int); set => ParametersBody.SkuCapacity = value; }

        /// <summary>The Sku Family</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The Sku Family")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Sku Family",
        SerializedName = @"family",
        PossibleTypes = new [] { typeof(string) })]
        public string SkuFamily { get => ParametersBody.SkuFamily ?? null; set => ParametersBody.SkuFamily = value; }

        /// <summary>Name of the notification hub sku</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Name of the notification hub sku")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the notification hub sku",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Support.SkuName) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Support.SkuName))]
        public Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Support.SkuName SkuName { get => ParametersBody.SkuName ?? ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Support.SkuName)""); set => ParametersBody.SkuName = value; }

        /// <summary>The Sku size</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The Sku size")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Sku size",
        SerializedName = @"size",
        PossibleTypes = new [] { typeof(string) })]
        public string SkuSize { get => ParametersBody.SkuSize ?? null; set => ParametersBody.SkuSize = value; }

        /// <summary>The tier of particular sku</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The tier of particular sku")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The tier of particular sku",
        SerializedName = @"tier",
        PossibleTypes = new [] { typeof(string) })]
        public string SkuTier { get => ParametersBody.SkuTier ?? null; set => ParametersBody.SkuTier = value; }

        /// <summary>Resource tags</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ExportAs(typeof(global::System.Collections.Hashtable))]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Resource tags")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource tags",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.IResourceTags) })]
        public Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.IResourceTags Tag { get => ParametersBody.Tag ?? null /* object */; set => ParametersBody.Tag = value; }

        /// <summary>
        /// Provider Authentication Token, obtained through your developer account. Specify if using Token Authentication Mode.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Provider Authentication Token, obtained through your developer account. Specify if using Token Authentication Mode.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Provider Authentication Token, obtained through your developer account. Specify if using Token Authentication Mode.",
        SerializedName = @"token",
        PossibleTypes = new [] { typeof(string) })]
        public string Token { get => ParametersBody.Token ?? null; set => ParametersBody.Token = value; }

        /// <summary>The Windows Live endpoint.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The Windows Live endpoint.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Category(global::Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Windows Live endpoint.",
        SerializedName = @"windowsLiveEndpoint",
        PossibleTypes = new [] { typeof(string) })]
        public string WindowsLiveEndpoint { get => ParametersBody.WindowsLiveEndpoint ?? null; set => ParametersBody.WindowsLiveEndpoint = value; }

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.INotificationHubResource"
        /// /> from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.INotificationHubResource> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {

        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Events.Information:
                    {
                        var data = messageData();
                        WriteInformation(data.Message, new string[]{});
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Module.Instance.Signal(id, token, messageData, (i,t,m) => ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Signal(i,t,()=> Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.EventDataConverter.ConvertFrom( m() ) as Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.EventData ), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'NotificationHubsPatch' operation"))
                {
                    using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Token) )
                    {
                        asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Token);
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    if (InputObject?.Id != null)
                    {
                        await this.Client.NotificationHubsPatchViaIdentity(InputObject.Id, ParametersBody, onOk, this, Pipeline);
                    }
                    else
                    {
                        // try to call with PATH parameters from Input Object
                        if (null == InputObject.ResourceGroupName)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InputObject has null value for InputObject.ResourceGroupName"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InputObject) );
                        }
                        if (null == InputObject.NamespaceName)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InputObject has null value for InputObject.NamespaceName"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InputObject) );
                        }
                        if (null == InputObject.NotificationHubName)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InputObject has null value for InputObject.NotificationHubName"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InputObject) );
                        }
                        if (null == InputObject.SubscriptionId)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InputObject has null value for InputObject.SubscriptionId"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InputObject) );
                        }
                        await this.Client.NotificationHubsPatch(InputObject.ResourceGroupName ?? null, InputObject.NamespaceName ?? null, InputObject.NotificationHubName ?? null, InputObject.SubscriptionId ?? null, ParametersBody, onOk, this, Pipeline);
                    }
                    await ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  body=ParametersBody})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <summary>
        /// Intializes a new instance of the <see cref="UpdateAzNotificationHubsNotificationHub_PatchViaIdentityExpanded" /> cmdlet
        /// class.
        /// </summary>
        public UpdateAzNotificationHubsNotificationHub_PatchViaIdentityExpanded()
        {

        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.INotificationHubResource"
        /// /> from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.INotificationHubResource> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.NotificationHubs.Models.Api20170401.INotificationHubResource
                WriteObject((await response));
            }
        }
    }
}