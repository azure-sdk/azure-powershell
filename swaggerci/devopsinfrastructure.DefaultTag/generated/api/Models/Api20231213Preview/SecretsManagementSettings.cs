// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ManagedDevOpsInfrastructure.Models.Api20231213Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ManagedDevOpsInfrastructure.Runtime.Extensions;

    /// <summary>The secret management settings of the machines in the pool.</summary>
    public partial class SecretsManagementSettings :
        Microsoft.Azure.PowerShell.Cmdlets.ManagedDevOpsInfrastructure.Models.Api20231213Preview.ISecretsManagementSettings,
        Microsoft.Azure.PowerShell.Cmdlets.ManagedDevOpsInfrastructure.Models.Api20231213Preview.ISecretsManagementSettingsInternal
    {

        /// <summary>Backing field for <see cref="CertificateStoreLocation" /> property.</summary>
        private string _certificateStoreLocation;

        /// <summary>Where to store certificates on the machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedDevOpsInfrastructure.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedDevOpsInfrastructure.PropertyOrigin.Owned)]
        public string CertificateStoreLocation { get => this._certificateStoreLocation; set => this._certificateStoreLocation = value; }

        /// <summary>Backing field for <see cref="KeyExportable" /> property.</summary>
        private bool _keyExportable;

        /// <summary>Defines if the key of the certificates should be exportable.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedDevOpsInfrastructure.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedDevOpsInfrastructure.PropertyOrigin.Owned)]
        public bool KeyExportable { get => this._keyExportable; set => this._keyExportable = value; }

        /// <summary>Backing field for <see cref="ObservedCertificate" /> property.</summary>
        private string[] _observedCertificate;

        /// <summary>The list of certificates to install on all machines in the pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedDevOpsInfrastructure.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedDevOpsInfrastructure.PropertyOrigin.Owned)]
        public string[] ObservedCertificate { get => this._observedCertificate; set => this._observedCertificate = value; }

        /// <summary>Creates an new <see cref="SecretsManagementSettings" /> instance.</summary>
        public SecretsManagementSettings()
        {

        }
    }
    /// The secret management settings of the machines in the pool.
    public partial interface ISecretsManagementSettings :
        Microsoft.Azure.PowerShell.Cmdlets.ManagedDevOpsInfrastructure.Runtime.IJsonSerializable
    {
        /// <summary>Where to store certificates on the machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedDevOpsInfrastructure.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Where to store certificates on the machine.",
        SerializedName = @"certificateStoreLocation",
        PossibleTypes = new [] { typeof(string) })]
        string CertificateStoreLocation { get; set; }
        /// <summary>Defines if the key of the certificates should be exportable.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedDevOpsInfrastructure.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Defines if the key of the certificates should be exportable.",
        SerializedName = @"keyExportable",
        PossibleTypes = new [] { typeof(bool) })]
        bool KeyExportable { get; set; }
        /// <summary>The list of certificates to install on all machines in the pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedDevOpsInfrastructure.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The list of certificates to install on all machines in the pool.",
        SerializedName = @"observedCertificates",
        PossibleTypes = new [] { typeof(string) })]
        string[] ObservedCertificate { get; set; }

    }
    /// The secret management settings of the machines in the pool.
    internal partial interface ISecretsManagementSettingsInternal

    {
        /// <summary>Where to store certificates on the machine.</summary>
        string CertificateStoreLocation { get; set; }
        /// <summary>Defines if the key of the certificates should be exportable.</summary>
        bool KeyExportable { get; set; }
        /// <summary>The list of certificates to install on all machines in the pool.</summary>
        string[] ObservedCertificate { get; set; }

    }
}