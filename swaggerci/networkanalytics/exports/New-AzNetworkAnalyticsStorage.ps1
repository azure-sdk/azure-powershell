
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create a DataLakeHouseResources
.Description
Create a DataLakeHouseResources
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Models.Api20230430.IDataLakeHouseResources
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

NETWORKACLIPRULE <IIPRules[]>: IP rule with specific IP or IP range in CIDR format.
  Action <String>: The action of virtual network rule.
  [Value <String>]: IP Rules Value

NETWORKACLRESOURCEACCESSRULE <IResourceAccessRules[]>: Resource Access Rules.
  ResourceId <String>: Resource ID
  TenantId <String>: The tenant ID of resource.

NETWORKACLVIRTUALNETWORKRULE <IVirtualNetworkRule[]>: Virtual Network Rule
  Id <String>: Resource ID of a subnet
  [Action <String>]: The action of virtual network rule.
  [State <String>]: Gets the state of virtual network rule.
.Link
https://docs.microsoft.com/en-us/powershell/module/az.networkanalytics/new-aznetworkanalyticsstorage
#>
function New-AzNetworkAnalyticsStorage {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Models.Api20230430.IDataLakeHouseResources])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Alias('StorageName')]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Path')]
    [System.String]
    # The data lake house resource name
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    ${SubscriptionId},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Body')]
    [System.String]
    # The geo-location where the resource lives
    ${Location},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Enables Secure File Transfer Protocol, if set to true
    ${BronzeStorageAccountPropertyIsSftpEnabled},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Body')]
    [System.String]
    # Allow or disallow public network access to Storage Account.
    ${CommonStorageAccountPropertyPublicNetworkAccess},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Support.PrincipalType])]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Support.PrincipalType]
    # Principal type.
    ${KustoClusterPrincipalAssignmentPrincipalType},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Support.KustoRole])]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Support.KustoRole]
    # Kusto roles
    ${KustoClusterPrincipalAssignmentRole},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Body')]
    [System.String]
    # system Identity Name
    ${KustoClusterPrincipalAssignmentSystemIdentityName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Body')]
    [System.String]
    # Managed Resource Group location
    ${ManagedResourceGroupConfigurationLocation},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Body')]
    [System.String]
    # Name of managed resource group
    ${ManagedResourceGroupConfigurationName},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Support.Bypass])]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Support.Bypass]
    # Specifies whether traffic is bypassed for Logging/Metrics/AzureServices
    ${NetworkaclBypass},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Support.DefaultAction])]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Support.DefaultAction]
    # Default Action
    ${NetworkaclDefaultActionType},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Models.Api20230430.IIPRules[]]
    # IP rule with specific IP or IP range in CIDR format.
    # To construct, see NOTES section for NETWORKACLIPRULE properties and create a hash table.
    ${NetworkaclIPRule},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Models.Api20230430.IResourceAccessRules[]]
    # Resource Access Rules.
    # To construct, see NOTES section for NETWORKACLRESOURCEACCESSRULE properties and create a hash table.
    ${NetworkaclResourceAccessRule},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Models.Api20230430.IVirtualNetworkRule[]]
    # Virtual Network Rule
    # To construct, see NOTES section for NETWORKACLVIRTUALNETWORKRULE properties and create a hash table.
    ${NetworkaclVirtualNetworkRule},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Body')]
    [System.String]
    # The private link resource customDnsConfigs.
    ${PrivateEndPointCustomDnsConfig},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Body')]
    [System.String[]]
    # The private link resource group id.
    ${PrivateEndPointGroupId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Body')]
    [System.String]
    # The private link resource service id
    ${PrivateEndPointPrivateLinkServiceId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Body')]
    [System.String]
    # Resource ID of a subnet
    ${PrivateEndPointSubnetId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Body')]
    [System.Int32]
    # Restore Policy in days
    ${RestorePolicyDay},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Restore Policy enabled or disabled boolean value
    ${RestorePolicyEnabled},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Models.Api30.ITrackedResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Body')]
    [System.String]
    # unique Identifier Name
    ${UniqueIdentifierName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Body')]
    [System.String]
    # Data Management Public Ip ID
    ${VirtualNetworkConfigurationDataManagementPublicIPId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Body')]
    [System.String]
    # Engine Public IP ID
    ${VirtualNetworkConfigurationEnginePublicIPId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Body')]
    [System.String]
    # Resource ID of a subnet
    ${VirtualNetworkConfigurationSubnetId},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.NetworkAnalytics.private\New-AzNetworkAnalyticsStorage_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
