// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Models.Api20230430
{
    using static Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Runtime.Extensions;

    /// <summary>The resource-specific properties of a Metrics Ingestion Endpoint</summary>
    public partial class MetricsIngestionEndpointProperties :
        Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Models.Api20230430.IMetricsIngestionEndpointProperties,
        Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Models.Api20230430.IMetricsIngestionEndpointPropertiesInternal
    {

        /// <summary>Backing field for <see cref="EventHubName" /> property.</summary>
        private string _eventHubName;

        /// <summary>Event Hub name to which the metrics should be sent for this resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.PropertyOrigin.Owned)]
        public string EventHubName { get => this._eventHubName; }

        /// <summary>Backing field for <see cref="EventHubUrl" /> property.</summary>
        private string _eventHubUrl;

        /// <summary>Event Hub URL to which the metrics should be sent for this resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.PropertyOrigin.Owned)]
        public string EventHubUrl { get => this._eventHubUrl; }

        /// <summary>Backing field for <see cref="IngressRegionName" /> property.</summary>
        private string _ingressRegionName;

        /// <summary>
        /// Name of the External Metrics Ingress Gateway region where the compute should be deployed
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.PropertyOrigin.Owned)]
        public string IngressRegionName { get => this._ingressRegionName; set => this._ingressRegionName = value; }

        /// <summary>Backing field for <see cref="KeyVaultUrl" /> property.</summary>
        private string _keyVaultUrl;

        /// <summary>Key Vault URL where the connection string exists for authentication</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.PropertyOrigin.Owned)]
        public string KeyVaultUrl { get => this._keyVaultUrl; }

        /// <summary>Backing field for <see cref="ManagedResourceGroupConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Models.Api20230430.IManagedResourceGroupConfiguration _managedResourceGroupConfiguration;

        /// <summary>Managed Resource Group Configuration</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Models.Api20230430.IManagedResourceGroupConfiguration ManagedResourceGroupConfiguration { get => (this._managedResourceGroupConfiguration = this._managedResourceGroupConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Models.Api20230430.ManagedResourceGroupConfiguration()); set => this._managedResourceGroupConfiguration = value; }

        /// <summary>Managed Resource Group location</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.PropertyOrigin.Inlined)]
        public string ManagedResourceGroupConfigurationLocation { get => ((Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Models.Api20230430.IManagedResourceGroupConfigurationInternal)ManagedResourceGroupConfiguration).Location; set => ((Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Models.Api20230430.IManagedResourceGroupConfigurationInternal)ManagedResourceGroupConfiguration).Location = value ?? null; }

        /// <summary>Name of managed resource group</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.PropertyOrigin.Inlined)]
        public string ManagedResourceGroupConfigurationName { get => ((Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Models.Api20230430.IManagedResourceGroupConfigurationInternal)ManagedResourceGroupConfiguration).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Models.Api20230430.IManagedResourceGroupConfigurationInternal)ManagedResourceGroupConfiguration).Name = value ?? null; }

        /// <summary>Internal Acessors for EventHubName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Models.Api20230430.IMetricsIngestionEndpointPropertiesInternal.EventHubName { get => this._eventHubName; set { {_eventHubName = value;} } }

        /// <summary>Internal Acessors for EventHubUrl</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Models.Api20230430.IMetricsIngestionEndpointPropertiesInternal.EventHubUrl { get => this._eventHubUrl; set { {_eventHubUrl = value;} } }

        /// <summary>Internal Acessors for KeyVaultUrl</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Models.Api20230430.IMetricsIngestionEndpointPropertiesInternal.KeyVaultUrl { get => this._keyVaultUrl; set { {_keyVaultUrl = value;} } }

        /// <summary>Internal Acessors for ManagedResourceGroupConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Models.Api20230430.IManagedResourceGroupConfiguration Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Models.Api20230430.IMetricsIngestionEndpointPropertiesInternal.ManagedResourceGroupConfiguration { get => (this._managedResourceGroupConfiguration = this._managedResourceGroupConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Models.Api20230430.ManagedResourceGroupConfiguration()); set { {_managedResourceGroupConfiguration = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Support.ProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Models.Api20230430.IMetricsIngestionEndpointPropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Support.ProvisioningState? _provisioningState;

        /// <summary>The status of the last operation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Origin(Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Support.ProvisioningState? ProvisioningState { get => this._provisioningState; }

        /// <summary>Creates an new <see cref="MetricsIngestionEndpointProperties" /> instance.</summary>
        public MetricsIngestionEndpointProperties()
        {

        }
    }
    /// The resource-specific properties of a Metrics Ingestion Endpoint
    public partial interface IMetricsIngestionEndpointProperties :
        Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Runtime.IJsonSerializable
    {
        /// <summary>Event Hub name to which the metrics should be sent for this resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Event Hub name to which the metrics should be sent for this resource",
        SerializedName = @"eventHubName",
        PossibleTypes = new [] { typeof(string) })]
        string EventHubName { get;  }
        /// <summary>Event Hub URL to which the metrics should be sent for this resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Event Hub URL to which the metrics should be sent for this resource",
        SerializedName = @"eventHubUrl",
        PossibleTypes = new [] { typeof(string) })]
        string EventHubUrl { get;  }
        /// <summary>
        /// Name of the External Metrics Ingress Gateway region where the compute should be deployed
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Name of the External Metrics Ingress Gateway region where the compute should be deployed",
        SerializedName = @"ingressRegionName",
        PossibleTypes = new [] { typeof(string) })]
        string IngressRegionName { get; set; }
        /// <summary>Key Vault URL where the connection string exists for authentication</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Key Vault URL where the connection string exists for authentication",
        SerializedName = @"keyVaultUrl",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultUrl { get;  }
        /// <summary>Managed Resource Group location</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Managed Resource Group location",
        SerializedName = @"location",
        PossibleTypes = new [] { typeof(string) })]
        string ManagedResourceGroupConfigurationLocation { get; set; }
        /// <summary>Name of managed resource group</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of managed resource group",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string ManagedResourceGroupConfigurationName { get; set; }
        /// <summary>The status of the last operation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The status of the last operation",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Support.ProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Support.ProvisioningState? ProvisioningState { get;  }

    }
    /// The resource-specific properties of a Metrics Ingestion Endpoint
    internal partial interface IMetricsIngestionEndpointPropertiesInternal

    {
        /// <summary>Event Hub name to which the metrics should be sent for this resource</summary>
        string EventHubName { get; set; }
        /// <summary>Event Hub URL to which the metrics should be sent for this resource</summary>
        string EventHubUrl { get; set; }
        /// <summary>
        /// Name of the External Metrics Ingress Gateway region where the compute should be deployed
        /// </summary>
        string IngressRegionName { get; set; }
        /// <summary>Key Vault URL where the connection string exists for authentication</summary>
        string KeyVaultUrl { get; set; }
        /// <summary>Managed Resource Group Configuration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Models.Api20230430.IManagedResourceGroupConfiguration ManagedResourceGroupConfiguration { get; set; }
        /// <summary>Managed Resource Group location</summary>
        string ManagedResourceGroupConfigurationLocation { get; set; }
        /// <summary>Name of managed resource group</summary>
        string ManagedResourceGroupConfigurationName { get; set; }
        /// <summary>The status of the last operation</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NetworkAnalytics.Support.ProvisioningState? ProvisioningState { get; set; }

    }
}