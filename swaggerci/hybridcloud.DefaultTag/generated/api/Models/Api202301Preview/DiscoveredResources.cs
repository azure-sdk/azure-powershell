// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Models.Api202301Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Runtime.Extensions;

    /// <summary>API to discover resources in remote cloud referred by the connector.</summary>
    public partial class DiscoveredResources :
        Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Models.Api202301Preview.IDiscoveredResources,
        Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Models.Api202301Preview.IDiscoveredResourcesInternal
    {

        /// <summary>Backing field for <see cref="DiscoveredResource" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Models.Api202301Preview.IDiscoveredResource[] _discoveredResource;

        /// <summary>List of discovered remote cloud resources.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Origin(Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Models.Api202301Preview.IDiscoveredResource[] DiscoveredResource { get => this._discoveredResource; set => this._discoveredResource = value; }

        /// <summary>Internal Acessors for ResourceFilter</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Models.Api202301Preview.IResourceFilter Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Models.Api202301Preview.IDiscoveredResourcesInternal.ResourceFilter { get => (this._resourceFilter = this._resourceFilter ?? new Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Models.Api202301Preview.ResourceFilter()); set { {_resourceFilter = value;} } }

        /// <summary>Backing field for <see cref="ResourceFilter" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Models.Api202301Preview.IResourceFilter _resourceFilter;

        /// <summary>Remote cloud resource filter.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Origin(Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Models.Api202301Preview.IResourceFilter ResourceFilter { get => (this._resourceFilter = this._resourceFilter ?? new Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Models.Api202301Preview.ResourceFilter()); set => this._resourceFilter = value; }

        /// <summary>Remote Resource name to filter on.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Origin(Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.PropertyOrigin.Inlined)]
        public string ResourceFilterName { get => ((Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Models.Api202301Preview.IResourceFilterInternal)ResourceFilter).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Models.Api202301Preview.IResourceFilterInternal)ResourceFilter).Name = value ?? null; }

        /// <summary>Remote Resource location/region to filter on.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Origin(Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.PropertyOrigin.Inlined)]
        public string ResourceFilterRegion { get => ((Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Models.Api202301Preview.IResourceFilterInternal)ResourceFilter).Region; set => ((Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Models.Api202301Preview.IResourceFilterInternal)ResourceFilter).Region = value ?? null; }

        /// <summary>Remote Resource tags to filter on in key:value format.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Origin(Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.PropertyOrigin.Inlined)]
        public string ResourceFilterTag { get => ((Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Models.Api202301Preview.IResourceFilterInternal)ResourceFilter).Tag; set => ((Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Models.Api202301Preview.IResourceFilterInternal)ResourceFilter).Tag = value ?? null; }

        /// <summary>Remote Resource type to filter on.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Origin(Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.PropertyOrigin.Inlined)]
        public string ResourceFilterType { get => ((Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Models.Api202301Preview.IResourceFilterInternal)ResourceFilter).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Models.Api202301Preview.IResourceFilterInternal)ResourceFilter).Type = value ?? null; }

        /// <summary>Creates an new <see cref="DiscoveredResources" /> instance.</summary>
        public DiscoveredResources()
        {

        }
    }
    /// API to discover resources in remote cloud referred by the connector.
    public partial interface IDiscoveredResources :
        Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Runtime.IJsonSerializable
    {
        /// <summary>List of discovered remote cloud resources.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of discovered remote cloud resources.",
        SerializedName = @"discoveredResources",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Models.Api202301Preview.IDiscoveredResource) })]
        Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Models.Api202301Preview.IDiscoveredResource[] DiscoveredResource { get; set; }
        /// <summary>Remote Resource name to filter on.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Remote Resource name to filter on.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string ResourceFilterName { get; set; }
        /// <summary>Remote Resource location/region to filter on.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Remote Resource location/region to filter on.",
        SerializedName = @"region",
        PossibleTypes = new [] { typeof(string) })]
        string ResourceFilterRegion { get; set; }
        /// <summary>Remote Resource tags to filter on in key:value format.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Remote Resource tags to filter on in key:value format.",
        SerializedName = @"tag",
        PossibleTypes = new [] { typeof(string) })]
        string ResourceFilterTag { get; set; }
        /// <summary>Remote Resource type to filter on.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Remote Resource type to filter on.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string ResourceFilterType { get; set; }

    }
    /// API to discover resources in remote cloud referred by the connector.
    internal partial interface IDiscoveredResourcesInternal

    {
        /// <summary>List of discovered remote cloud resources.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Models.Api202301Preview.IDiscoveredResource[] DiscoveredResource { get; set; }
        /// <summary>Remote cloud resource filter.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HybridCloud.Models.Api202301Preview.IResourceFilter ResourceFilter { get; set; }
        /// <summary>Remote Resource name to filter on.</summary>
        string ResourceFilterName { get; set; }
        /// <summary>Remote Resource location/region to filter on.</summary>
        string ResourceFilterRegion { get; set; }
        /// <summary>Remote Resource tags to filter on in key:value format.</summary>
        string ResourceFilterTag { get; set; }
        /// <summary>Remote Resource type to filter on.</summary>
        string ResourceFilterType { get; set; }

    }
}