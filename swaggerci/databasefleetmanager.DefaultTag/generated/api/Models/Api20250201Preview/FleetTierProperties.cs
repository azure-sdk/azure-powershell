// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Models.Api20250201Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Runtime.Extensions;

    /// <summary>A Fleet tier properties.</summary>
    public partial class FleetTierProperties :
        Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Models.Api20250201Preview.IFleetTierProperties,
        Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Models.Api20250201Preview.IFleetTierPropertiesInternal
    {

        /// <summary>Backing field for <see cref="Capacity" /> property.</summary>
        private int? _capacity;

        /// <summary>
        /// Capacity of provisioned resources in the tier, in units matching the specified service tier, for example vCore for GeneralPurpose.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.PropertyOrigin.Owned)]
        public int? Capacity { get => this._capacity; set => this._capacity = value; }

        /// <summary>Backing field for <see cref="DatabaseCapacityMax" /> property.</summary>
        private double? _databaseCapacityMax;

        /// <summary>
        /// Maximum allocated capacity per database, in units matching the specified service tier.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.PropertyOrigin.Owned)]
        public double? DatabaseCapacityMax { get => this._databaseCapacityMax; set => this._databaseCapacityMax = value; }

        /// <summary>Backing field for <see cref="DatabaseCapacityMin" /> property.</summary>
        private double? _databaseCapacityMin;

        /// <summary>
        /// Minimum allocated capacity per database, in units matching the specified service tier.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.PropertyOrigin.Owned)]
        public double? DatabaseCapacityMin { get => this._databaseCapacityMin; set => this._databaseCapacityMin = value; }

        /// <summary>Backing field for <see cref="DatabaseSizeGbMax" /> property.</summary>
        private int? _databaseSizeGbMax;

        /// <summary>Maximum database size in Gb.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.PropertyOrigin.Owned)]
        public int? DatabaseSizeGbMax { get => this._databaseSizeGbMax; set => this._databaseSizeGbMax = value; }

        /// <summary>Backing field for <see cref="Disabled" /> property.</summary>
        private bool? _disabled;

        /// <summary>If true, tier is disabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.PropertyOrigin.Owned)]
        public bool? Disabled { get => this._disabled; }

        /// <summary>Backing field for <see cref="Family" /> property.</summary>
        private string _family;

        /// <summary>Family of provisioned resources, for example Gen5.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.PropertyOrigin.Owned)]
        public string Family { get => this._family; set => this._family = value; }

        /// <summary>Backing field for <see cref="HighAvailabilityReplicaCount" /> property.</summary>
        private int? _highAvailabilityReplicaCount;

        /// <summary>Number of high availability replicas for databases in this tier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.PropertyOrigin.Owned)]
        public int? HighAvailabilityReplicaCount { get => this._highAvailabilityReplicaCount; set => this._highAvailabilityReplicaCount = value; }

        /// <summary>Internal Acessors for Disabled</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Models.Api20250201Preview.IFleetTierPropertiesInternal.Disabled { get => this._disabled; set { {_disabled = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Support.AzureProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Models.Api20250201Preview.IFleetTierPropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Backing field for <see cref="PoolNumOfDatabasesMax" /> property.</summary>
        private int? _poolNumOfDatabasesMax;

        /// <summary>Maximum number of databases per pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.PropertyOrigin.Owned)]
        public int? PoolNumOfDatabasesMax { get => this._poolNumOfDatabasesMax; set => this._poolNumOfDatabasesMax = value; }

        /// <summary>Backing field for <see cref="Pooled" /> property.</summary>
        private bool? _pooled;

        /// <summary>If true, databases are pooled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.PropertyOrigin.Owned)]
        public bool? Pooled { get => this._pooled; set => this._pooled = value; }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Support.AzureProvisioningState? _provisioningState;

        /// <summary>Provisioning state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Support.AzureProvisioningState? ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="Serverless" /> property.</summary>
        private bool? _serverless;

        /// <summary>If true, serverless resources are provisioned in the tier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.PropertyOrigin.Owned)]
        public bool? Serverless { get => this._serverless; set => this._serverless = value; }

        /// <summary>Backing field for <see cref="ServiceTier" /> property.</summary>
        private string _serviceTier;

        /// <summary>
        /// Service tier of provisioned resources. Supported values: GeneralPurpose, Hyperscale.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.PropertyOrigin.Owned)]
        public string ServiceTier { get => this._serviceTier; set => this._serviceTier = value; }

        /// <summary>Backing field for <see cref="ZoneRedundancy" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Support.ZoneRedundancy? _zoneRedundancy;

        /// <summary>Enable zone redundancy for all databases in this tier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Origin(Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Support.ZoneRedundancy? ZoneRedundancy { get => this._zoneRedundancy; set => this._zoneRedundancy = value; }

        /// <summary>Creates an new <see cref="FleetTierProperties" /> instance.</summary>
        public FleetTierProperties()
        {

        }
    }
    /// A Fleet tier properties.
    public partial interface IFleetTierProperties :
        Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Capacity of provisioned resources in the tier, in units matching the specified service tier, for example vCore for GeneralPurpose.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Capacity of provisioned resources in the tier, in units matching the specified service tier, for example vCore for GeneralPurpose.",
        SerializedName = @"capacity",
        PossibleTypes = new [] { typeof(int) })]
        int? Capacity { get; set; }
        /// <summary>
        /// Maximum allocated capacity per database, in units matching the specified service tier.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Maximum allocated capacity per database, in units matching the specified service tier.",
        SerializedName = @"databaseCapacityMax",
        PossibleTypes = new [] { typeof(double) })]
        double? DatabaseCapacityMax { get; set; }
        /// <summary>
        /// Minimum allocated capacity per database, in units matching the specified service tier.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Minimum allocated capacity per database, in units matching the specified service tier.",
        SerializedName = @"databaseCapacityMin",
        PossibleTypes = new [] { typeof(double) })]
        double? DatabaseCapacityMin { get; set; }
        /// <summary>Maximum database size in Gb.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Maximum database size in Gb.",
        SerializedName = @"databaseSizeGbMax",
        PossibleTypes = new [] { typeof(int) })]
        int? DatabaseSizeGbMax { get; set; }
        /// <summary>If true, tier is disabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"If true, tier is disabled.",
        SerializedName = @"disabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Disabled { get;  }
        /// <summary>Family of provisioned resources, for example Gen5.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Family of provisioned resources, for example Gen5.",
        SerializedName = @"family",
        PossibleTypes = new [] { typeof(string) })]
        string Family { get; set; }
        /// <summary>Number of high availability replicas for databases in this tier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of high availability replicas for databases in this tier.",
        SerializedName = @"highAvailabilityReplicaCount",
        PossibleTypes = new [] { typeof(int) })]
        int? HighAvailabilityReplicaCount { get; set; }
        /// <summary>Maximum number of databases per pool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Maximum number of databases per pool.",
        SerializedName = @"poolNumOfDatabasesMax",
        PossibleTypes = new [] { typeof(int) })]
        int? PoolNumOfDatabasesMax { get; set; }
        /// <summary>If true, databases are pooled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If true, databases are pooled.",
        SerializedName = @"pooled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Pooled { get; set; }
        /// <summary>Provisioning state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Provisioning state.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Support.AzureProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Support.AzureProvisioningState? ProvisioningState { get;  }
        /// <summary>If true, serverless resources are provisioned in the tier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If true, serverless resources are provisioned in the tier.",
        SerializedName = @"serverless",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Serverless { get; set; }
        /// <summary>
        /// Service tier of provisioned resources. Supported values: GeneralPurpose, Hyperscale.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Service tier of provisioned resources. Supported values: GeneralPurpose, Hyperscale.",
        SerializedName = @"serviceTier",
        PossibleTypes = new [] { typeof(string) })]
        string ServiceTier { get; set; }
        /// <summary>Enable zone redundancy for all databases in this tier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable zone redundancy for all databases in this tier.",
        SerializedName = @"zoneRedundancy",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Support.ZoneRedundancy) })]
        Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Support.ZoneRedundancy? ZoneRedundancy { get; set; }

    }
    /// A Fleet tier properties.
    internal partial interface IFleetTierPropertiesInternal

    {
        /// <summary>
        /// Capacity of provisioned resources in the tier, in units matching the specified service tier, for example vCore for GeneralPurpose.
        /// </summary>
        int? Capacity { get; set; }
        /// <summary>
        /// Maximum allocated capacity per database, in units matching the specified service tier.
        /// </summary>
        double? DatabaseCapacityMax { get; set; }
        /// <summary>
        /// Minimum allocated capacity per database, in units matching the specified service tier.
        /// </summary>
        double? DatabaseCapacityMin { get; set; }
        /// <summary>Maximum database size in Gb.</summary>
        int? DatabaseSizeGbMax { get; set; }
        /// <summary>If true, tier is disabled.</summary>
        bool? Disabled { get; set; }
        /// <summary>Family of provisioned resources, for example Gen5.</summary>
        string Family { get; set; }
        /// <summary>Number of high availability replicas for databases in this tier.</summary>
        int? HighAvailabilityReplicaCount { get; set; }
        /// <summary>Maximum number of databases per pool.</summary>
        int? PoolNumOfDatabasesMax { get; set; }
        /// <summary>If true, databases are pooled.</summary>
        bool? Pooled { get; set; }
        /// <summary>Provisioning state.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Support.AzureProvisioningState? ProvisioningState { get; set; }
        /// <summary>If true, serverless resources are provisioned in the tier.</summary>
        bool? Serverless { get; set; }
        /// <summary>
        /// Service tier of provisioned resources. Supported values: GeneralPurpose, Hyperscale.
        /// </summary>
        string ServiceTier { get; set; }
        /// <summary>Enable zone redundancy for all databases in this tier.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DatabaseFleet.Support.ZoneRedundancy? ZoneRedundancy { get; set; }

    }
}