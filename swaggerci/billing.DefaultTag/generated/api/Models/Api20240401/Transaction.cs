// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Extensions;

    /// <summary>A transaction.</summary>
    public partial class Transaction :
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransaction,
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.IProxyResourceWithTags1"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.IProxyResourceWithTags1 __proxyResourceWithTags1 = new Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ProxyResourceWithTags1();

        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string AmountCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).TransactionAmountCurrency; }

        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string AmountRefundedCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).AmountRefundedCurrency; }

        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public float? AmountRefundedValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).AmountRefundedValue; }

        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string AmountRequestedCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).AmountRequestedCurrency; }

        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public float? AmountRequestedValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).AmountRequestedValue; }

        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public float? AmountValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).TransactionAmountValue; }

        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string AzureCreditAppliedCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).AzureCreditAppliedCurrency; }

        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public float? AzureCreditAppliedValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).AzureCreditAppliedValue; }

        /// <summary>Details of the Azure plan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string AzurePlan { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).AzurePlan; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).AzurePlan = value ?? null; }

        /// <summary>The ISO 4217 code for the currency in which this transaction is billed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string BillingCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).BillingCurrency; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).BillingCurrency = value ?? null; }

        /// <summary>The name of the billing profile.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string BillingProfileDisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).BillingProfileDisplayName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).BillingProfileDisplayName = value ?? null; }

        /// <summary>The fully qualified ID that uniquely identifies a billing profile.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string BillingProfileId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).BillingProfileId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).BillingProfileId = value ?? null; }

        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string ConsumptionCommitmentDecrementedCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).ConsumptionCommitmentDecrementedCurrency; }

        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public float? ConsumptionCommitmentDecrementedValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).ConsumptionCommitmentDecrementedValue; }

        /// <summary>The credit type of the transaction. Applies only to credited transactions.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Billing.Support.CreditType? CreditType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).CreditType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).CreditType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Support.CreditType)""); }

        /// <summary>The name of the customer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string CustomerDisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).CustomerDisplayName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).CustomerDisplayName = value ?? null; }

        /// <summary>The fully qualified ID that uniquely identifies a customer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string CustomerId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).CustomerId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).CustomerId = value ?? null; }

        /// <summary>The date of transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public global::System.DateTime? Date { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).Date; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).Date = value ?? default(global::System.DateTime); }

        /// <summary>The percentage discount, if any, applied to this transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public float? Discount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).Discount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).Discount = value ?? default(float); }

        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string EffectivePriceCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).EffectivePriceCurrency; }

        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public float? EffectivePriceValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).EffectivePriceValue; }

        /// <summary>
        /// The exchange rate used to convert charged amount to billing currency, if applicable.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public float? ExchangeRate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).ExchangeRate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).ExchangeRate = value ?? default(float); }

        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api50.IResourceInternal)__proxyResourceWithTags1).Id; }

        /// <summary>
        /// Invoice name on which the transaction was billed or 'Pending' if the transaction is not billed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string Invoice { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).Invoice; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).Invoice = value ?? null; }

        /// <summary>
        /// The fully qualified ID of the invoice on which the transaction was billed. This field is only applicable for transactions
        /// which are billed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string InvoiceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).InvoiceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).InvoiceId = value ?? null; }

        /// <summary>The name of the invoice section.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string InvoiceSectionDisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).InvoiceSectionDisplayName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).InvoiceSectionDisplayName = value ?? null; }

        /// <summary>The fully qualified ID that uniquely identifies an invoice section.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string InvoiceSectionId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).InvoiceSectionId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).InvoiceSectionId = value ?? null; }

        /// <summary>Whether or not the transaction is third party.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public bool? IsThirdParty { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).IsThirdParty; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).IsThirdParty = value ?? default(bool); }

        /// <summary>Type of the transaction, billed or unbilled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Billing.Support.TransactionKind? Kind { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).Kind; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).Kind = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Support.TransactionKind)""); }

        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string MarketPriceCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).MarketPriceCurrency; }

        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public float? MarketPriceValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).MarketPriceValue; }

        /// <summary>Internal Acessors for Amount</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.IAmount Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionInternal.Amount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).TransactionAmount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).TransactionAmount = value; }

        /// <summary>Internal Acessors for AmountCurrency</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionInternal.AmountCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).TransactionAmountCurrency; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).TransactionAmountCurrency = value; }

        /// <summary>Internal Acessors for AmountRefundedCurrency</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionInternal.AmountRefundedCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).AmountRefundedCurrency; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).AmountRefundedCurrency = value; }

        /// <summary>Internal Acessors for AmountRefundedValue</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionInternal.AmountRefundedValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).AmountRefundedValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).AmountRefundedValue = value; }

        /// <summary>Internal Acessors for AmountRequestedCurrency</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionInternal.AmountRequestedCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).AmountRequestedCurrency; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).AmountRequestedCurrency = value; }

        /// <summary>Internal Acessors for AmountRequestedValue</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionInternal.AmountRequestedValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).AmountRequestedValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).AmountRequestedValue = value; }

        /// <summary>Internal Acessors for AmountValue</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionInternal.AmountValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).TransactionAmountValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).TransactionAmountValue = value; }

        /// <summary>Internal Acessors for AzureCreditApplied</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.IAmount Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionInternal.AzureCreditApplied { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).AzureCreditApplied; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).AzureCreditApplied = value; }

        /// <summary>Internal Acessors for AzureCreditAppliedCurrency</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionInternal.AzureCreditAppliedCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).AzureCreditAppliedCurrency; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).AzureCreditAppliedCurrency = value; }

        /// <summary>Internal Acessors for AzureCreditAppliedValue</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionInternal.AzureCreditAppliedValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).AzureCreditAppliedValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).AzureCreditAppliedValue = value; }

        /// <summary>Internal Acessors for ConsumptionCommitmentDecremented</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.IAmount Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionInternal.ConsumptionCommitmentDecremented { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).ConsumptionCommitmentDecremented; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).ConsumptionCommitmentDecremented = value; }

        /// <summary>Internal Acessors for ConsumptionCommitmentDecrementedCurrency</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionInternal.ConsumptionCommitmentDecrementedCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).ConsumptionCommitmentDecrementedCurrency; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).ConsumptionCommitmentDecrementedCurrency = value; }

        /// <summary>Internal Acessors for ConsumptionCommitmentDecrementedValue</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionInternal.ConsumptionCommitmentDecrementedValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).ConsumptionCommitmentDecrementedValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).ConsumptionCommitmentDecrementedValue = value; }

        /// <summary>Internal Acessors for EffectivePrice</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.IAmount Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionInternal.EffectivePrice { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).EffectivePrice; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).EffectivePrice = value; }

        /// <summary>Internal Acessors for EffectivePriceCurrency</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionInternal.EffectivePriceCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).EffectivePriceCurrency; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).EffectivePriceCurrency = value; }

        /// <summary>Internal Acessors for EffectivePriceValue</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionInternal.EffectivePriceValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).EffectivePriceValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).EffectivePriceValue = value; }

        /// <summary>Internal Acessors for MarketPrice</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.IAmount Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionInternal.MarketPrice { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).MarketPrice; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).MarketPrice = value; }

        /// <summary>Internal Acessors for MarketPriceCurrency</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionInternal.MarketPriceCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).MarketPriceCurrency; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).MarketPriceCurrency = value; }

        /// <summary>Internal Acessors for MarketPriceValue</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionInternal.MarketPriceValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).MarketPriceValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).MarketPriceValue = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionProperties Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.TransactionProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for RefundTransactionDetail</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.IRefundTransactionDetails Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionInternal.RefundTransactionDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).RefundTransactionDetail; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).RefundTransactionDetail = value; }

        /// <summary>Internal Acessors for RefundTransactionDetailAmountRefunded</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.IAmount Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionInternal.RefundTransactionDetailAmountRefunded { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).RefundTransactionDetailAmountRefunded; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).RefundTransactionDetailAmountRefunded = value; }

        /// <summary>Internal Acessors for RefundTransactionDetailAmountRequested</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.IAmount Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionInternal.RefundTransactionDetailAmountRequested { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).RefundTransactionDetailAmountRequested; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).RefundTransactionDetailAmountRequested = value; }

        /// <summary>Internal Acessors for SubTotal</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.IAmount Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionInternal.SubTotal { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).SubTotal; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).SubTotal = value; }

        /// <summary>Internal Acessors for SubTotalCurrency</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionInternal.SubTotalCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).SubTotalCurrency; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).SubTotalCurrency = value; }

        /// <summary>Internal Acessors for SubTotalValue</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionInternal.SubTotalValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).SubTotalValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).SubTotalValue = value; }

        /// <summary>Internal Acessors for Tax</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.IAmount Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionInternal.Tax { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).Tax; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).Tax = value; }

        /// <summary>Internal Acessors for TaxCurrency</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionInternal.TaxCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).TaxCurrency; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).TaxCurrency = value; }

        /// <summary>Internal Acessors for TaxValue</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionInternal.TaxValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).TaxValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).TaxValue = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api50.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api50.IResourceInternal)__proxyResourceWithTags1).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api50.IResourceInternal)__proxyResourceWithTags1).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api50.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api50.IResourceInternal)__proxyResourceWithTags1).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api50.IResourceInternal)__proxyResourceWithTags1).Name = value; }

        /// <summary>Internal Acessors for SystemData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api50.ISystemData Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api50.IResourceInternal.SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api50.IResourceInternal)__proxyResourceWithTags1).SystemData; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api50.IResourceInternal)__proxyResourceWithTags1).SystemData = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api50.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api50.IResourceInternal)__proxyResourceWithTags1).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api50.IResourceInternal)__proxyResourceWithTags1).Type = value; }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api50.IResourceInternal)__proxyResourceWithTags1).Name; }

        /// <summary>
        /// The part number of the product for which the transaction took place. The field is only applicable for Enterprise Agreement
        /// invoices.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string PartNumber { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).PartNumber; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).PartNumber = value ?? null; }

        /// <summary>The ISO 4217 code for the currency in which the product is priced.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string PricingCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).PricingCurrency; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).PricingCurrency = value ?? null; }

        /// <summary>The description of the product for which the transaction took place.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string ProductDescription { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).ProductDescription; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).ProductDescription = value ?? null; }

        /// <summary>The family of the product for which the transaction took place.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string ProductFamily { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).ProductFamily; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).ProductFamily = value ?? null; }

        /// <summary>The type of the product for which the transaction took place.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string ProductType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).ProductType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).ProductType = value ?? null; }

        /// <summary>The ID of the product type for which the transaction took place.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string ProductTypeId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).ProductTypeId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).ProductTypeId = value ?? null; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionProperties _property;

        /// <summary>A transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.TransactionProperties()); set => this._property = value; }

        /// <summary>The quantity purchased in the transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public int? Quantity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).Quantity; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).Quantity = value ?? default(int); }

        /// <summary>There reason code for the transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string ReasonCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).ReasonCode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).ReasonCode = value ?? null; }

        /// <summary>The ID of refund operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string RefundTransactionDetailRefundOperationId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).RefundTransactionDetailRefundOperationId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).RefundTransactionDetailRefundOperationId = value ?? null; }

        /// <summary>
        /// The end date of the product term, or the end date of the month in which usage ended.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public global::System.DateTime? ServicePeriodEndDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).ServicePeriodEndDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).ServicePeriodEndDate = value ?? default(global::System.DateTime); }

        /// <summary>
        /// The date of the purchase of the product, or the start date of the month in which usage started.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public global::System.DateTime? ServicePeriodStartDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).ServicePeriodStartDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).ServicePeriodStartDate = value ?? default(global::System.DateTime); }

        /// <summary>
        /// Identifies the type of tax calculation used for the invoice. The field is applicable only to invoices with special tax
        /// calculation logic.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Billing.Support.SpecialTaxationType? SpecialTaxationType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).SpecialTaxationType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).SpecialTaxationType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Support.SpecialTaxationType)""); }

        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string SubTotalCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).SubTotalCurrency; }

        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public float? SubTotalValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).SubTotalValue; }

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api50.ISystemData SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api50.IResourceInternal)__proxyResourceWithTags1).SystemData; }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api50.IResourceInternal)__proxyResourceWithTags1).SystemDataCreatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api50.IResourceInternal)__proxyResourceWithTags1).SystemDataCreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inherited)]
        public string SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api50.IResourceInternal)__proxyResourceWithTags1).SystemDataCreatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api50.IResourceInternal)__proxyResourceWithTags1).SystemDataCreatedBy = value ?? null; }

        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.Billing.Support.CreatedByType? SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api50.IResourceInternal)__proxyResourceWithTags1).SystemDataCreatedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api50.IResourceInternal)__proxyResourceWithTags1).SystemDataCreatedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Support.CreatedByType)""); }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api50.IResourceInternal)__proxyResourceWithTags1).SystemDataLastModifiedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api50.IResourceInternal)__proxyResourceWithTags1).SystemDataLastModifiedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inherited)]
        public string SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api50.IResourceInternal)__proxyResourceWithTags1).SystemDataLastModifiedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api50.IResourceInternal)__proxyResourceWithTags1).SystemDataLastModifiedBy = value ?? null; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.Billing.Support.CreatedByType? SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api50.IResourceInternal)__proxyResourceWithTags1).SystemDataLastModifiedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api50.IResourceInternal)__proxyResourceWithTags1).SystemDataLastModifiedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Support.CreatedByType)""); }

        /// <summary>
        /// Dictionary of metadata associated with the resource. It may not be populated for all resource types. Maximum key/value
        /// length supported of 256 characters. Keys/value should not empty value nor null. Keys can not contain < > % & \ ? /
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.IProxyResourceWithTags Tag { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.IProxyResourceWithTags1Internal)__proxyResourceWithTags1).Tag; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.IProxyResourceWithTags1Internal)__proxyResourceWithTags1).Tag = value ?? null /* model class */; }

        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string TaxCurrency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).TaxCurrency; }

        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public float? TaxValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).TaxValue; }

        /// <summary>The type of transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string TransactionType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).TransactionType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).TransactionType = value ?? null; }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api50.IResourceInternal)__proxyResourceWithTags1).Type; }

        /// <summary>The number of units used for a given product.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public float? Unit { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).Unit; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).Unit = value ?? default(float); }

        /// <summary>
        /// The unit of measure used to bill for the product. For example, compute services are billed per hour.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string UnitOfMeasure { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).UnitOfMeasure; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).UnitOfMeasure = value ?? null; }

        /// <summary>The description for the unit of measure for a given product.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Origin(Microsoft.Azure.PowerShell.Cmdlets.Billing.PropertyOrigin.Inlined)]
        public string UnitType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).UnitType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionPropertiesInternal)Property).UnitType = value ?? null; }

        /// <summary>Creates an new <see cref="Transaction" /> instance.</summary>
        public Transaction()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__proxyResourceWithTags1), __proxyResourceWithTags1);
            await eventListener.AssertObjectIsValid(nameof(__proxyResourceWithTags1), __proxyResourceWithTags1);
        }
    }
    /// A transaction.
    public partial interface ITransaction :
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.IProxyResourceWithTags1
    {
        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The currency for the amount value.",
        SerializedName = @"currency",
        PossibleTypes = new [] { typeof(string) })]
        string AmountCurrency { get;  }
        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The currency for the amount value.",
        SerializedName = @"currency",
        PossibleTypes = new [] { typeof(string) })]
        string AmountRefundedCurrency { get;  }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(float) })]
        float? AmountRefundedValue { get;  }
        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The currency for the amount value.",
        SerializedName = @"currency",
        PossibleTypes = new [] { typeof(string) })]
        string AmountRequestedCurrency { get;  }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(float) })]
        float? AmountRequestedValue { get;  }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(float) })]
        float? AmountValue { get;  }
        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The currency for the amount value.",
        SerializedName = @"currency",
        PossibleTypes = new [] { typeof(string) })]
        string AzureCreditAppliedCurrency { get;  }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(float) })]
        float? AzureCreditAppliedValue { get;  }
        /// <summary>Details of the Azure plan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Details of the Azure plan.",
        SerializedName = @"azurePlan",
        PossibleTypes = new [] { typeof(string) })]
        string AzurePlan { get; set; }
        /// <summary>The ISO 4217 code for the currency in which this transaction is billed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ISO 4217 code for the currency in which this transaction is billed.",
        SerializedName = @"billingCurrency",
        PossibleTypes = new [] { typeof(string) })]
        string BillingCurrency { get; set; }
        /// <summary>The name of the billing profile.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the billing profile.",
        SerializedName = @"billingProfileDisplayName",
        PossibleTypes = new [] { typeof(string) })]
        string BillingProfileDisplayName { get; set; }
        /// <summary>The fully qualified ID that uniquely identifies a billing profile.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The fully qualified ID that uniquely identifies a billing profile.",
        SerializedName = @"billingProfileId",
        PossibleTypes = new [] { typeof(string) })]
        string BillingProfileId { get; set; }
        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The currency for the amount value.",
        SerializedName = @"currency",
        PossibleTypes = new [] { typeof(string) })]
        string ConsumptionCommitmentDecrementedCurrency { get;  }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(float) })]
        float? ConsumptionCommitmentDecrementedValue { get;  }
        /// <summary>The credit type of the transaction. Applies only to credited transactions.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The credit type of the transaction. Applies only to credited transactions.",
        SerializedName = @"creditType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Billing.Support.CreditType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Support.CreditType? CreditType { get; set; }
        /// <summary>The name of the customer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the customer.",
        SerializedName = @"customerDisplayName",
        PossibleTypes = new [] { typeof(string) })]
        string CustomerDisplayName { get; set; }
        /// <summary>The fully qualified ID that uniquely identifies a customer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The fully qualified ID that uniquely identifies a customer.",
        SerializedName = @"customerId",
        PossibleTypes = new [] { typeof(string) })]
        string CustomerId { get; set; }
        /// <summary>The date of transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The date of transaction.",
        SerializedName = @"date",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? Date { get; set; }
        /// <summary>The percentage discount, if any, applied to this transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The percentage discount, if any, applied to this transaction.",
        SerializedName = @"discount",
        PossibleTypes = new [] { typeof(float) })]
        float? Discount { get; set; }
        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The currency for the amount value.",
        SerializedName = @"currency",
        PossibleTypes = new [] { typeof(string) })]
        string EffectivePriceCurrency { get;  }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(float) })]
        float? EffectivePriceValue { get;  }
        /// <summary>
        /// The exchange rate used to convert charged amount to billing currency, if applicable.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The exchange rate used to convert charged amount to billing currency, if applicable.",
        SerializedName = @"exchangeRate",
        PossibleTypes = new [] { typeof(float) })]
        float? ExchangeRate { get; set; }
        /// <summary>
        /// Invoice name on which the transaction was billed or 'Pending' if the transaction is not billed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Invoice name on which the transaction was billed or 'Pending' if the transaction is not billed.",
        SerializedName = @"invoice",
        PossibleTypes = new [] { typeof(string) })]
        string Invoice { get; set; }
        /// <summary>
        /// The fully qualified ID of the invoice on which the transaction was billed. This field is only applicable for transactions
        /// which are billed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The fully qualified ID of the invoice on which the transaction was billed. This field is only applicable for transactions which are billed.",
        SerializedName = @"invoiceId",
        PossibleTypes = new [] { typeof(string) })]
        string InvoiceId { get; set; }
        /// <summary>The name of the invoice section.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the invoice section.",
        SerializedName = @"invoiceSectionDisplayName",
        PossibleTypes = new [] { typeof(string) })]
        string InvoiceSectionDisplayName { get; set; }
        /// <summary>The fully qualified ID that uniquely identifies an invoice section.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The fully qualified ID that uniquely identifies an invoice section.",
        SerializedName = @"invoiceSectionId",
        PossibleTypes = new [] { typeof(string) })]
        string InvoiceSectionId { get; set; }
        /// <summary>Whether or not the transaction is third party.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether or not the transaction is third party.",
        SerializedName = @"isThirdParty",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsThirdParty { get; set; }
        /// <summary>Type of the transaction, billed or unbilled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Type of the transaction, billed or unbilled.",
        SerializedName = @"kind",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Billing.Support.TransactionKind) })]
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Support.TransactionKind? Kind { get; set; }
        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The currency for the amount value.",
        SerializedName = @"currency",
        PossibleTypes = new [] { typeof(string) })]
        string MarketPriceCurrency { get;  }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(float) })]
        float? MarketPriceValue { get;  }
        /// <summary>
        /// The part number of the product for which the transaction took place. The field is only applicable for Enterprise Agreement
        /// invoices.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The part number of the product for which the transaction took place. The field is only applicable for Enterprise Agreement invoices.",
        SerializedName = @"partNumber",
        PossibleTypes = new [] { typeof(string) })]
        string PartNumber { get; set; }
        /// <summary>The ISO 4217 code for the currency in which the product is priced.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ISO 4217 code for the currency in which the product is priced.",
        SerializedName = @"pricingCurrency",
        PossibleTypes = new [] { typeof(string) })]
        string PricingCurrency { get; set; }
        /// <summary>The description of the product for which the transaction took place.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The description of the product for which the transaction took place.",
        SerializedName = @"productDescription",
        PossibleTypes = new [] { typeof(string) })]
        string ProductDescription { get; set; }
        /// <summary>The family of the product for which the transaction took place.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The family of the product for which the transaction took place.",
        SerializedName = @"productFamily",
        PossibleTypes = new [] { typeof(string) })]
        string ProductFamily { get; set; }
        /// <summary>The type of the product for which the transaction took place.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of the product for which the transaction took place.",
        SerializedName = @"productType",
        PossibleTypes = new [] { typeof(string) })]
        string ProductType { get; set; }
        /// <summary>The ID of the product type for which the transaction took place.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ID of the product type for which the transaction took place.",
        SerializedName = @"productTypeId",
        PossibleTypes = new [] { typeof(string) })]
        string ProductTypeId { get; set; }
        /// <summary>The quantity purchased in the transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The quantity purchased in the transaction.",
        SerializedName = @"quantity",
        PossibleTypes = new [] { typeof(int) })]
        int? Quantity { get; set; }
        /// <summary>There reason code for the transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"There reason code for the transaction.",
        SerializedName = @"reasonCode",
        PossibleTypes = new [] { typeof(string) })]
        string ReasonCode { get; set; }
        /// <summary>The ID of refund operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ID of refund operation.",
        SerializedName = @"refundOperationId",
        PossibleTypes = new [] { typeof(string) })]
        string RefundTransactionDetailRefundOperationId { get; set; }
        /// <summary>
        /// The end date of the product term, or the end date of the month in which usage ended.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The end date of the product term, or the end date of the month in which usage ended.",
        SerializedName = @"servicePeriodEndDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ServicePeriodEndDate { get; set; }
        /// <summary>
        /// The date of the purchase of the product, or the start date of the month in which usage started.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The date of the purchase of the product, or the start date of the month in which usage started.",
        SerializedName = @"servicePeriodStartDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ServicePeriodStartDate { get; set; }
        /// <summary>
        /// Identifies the type of tax calculation used for the invoice. The field is applicable only to invoices with special tax
        /// calculation logic.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Identifies the type of tax calculation used for the invoice. The field is applicable only to invoices with special tax calculation logic.",
        SerializedName = @"specialTaxationType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Billing.Support.SpecialTaxationType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Support.SpecialTaxationType? SpecialTaxationType { get; set; }
        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The currency for the amount value.",
        SerializedName = @"currency",
        PossibleTypes = new [] { typeof(string) })]
        string SubTotalCurrency { get;  }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(float) })]
        float? SubTotalValue { get;  }
        /// <summary>The currency for the amount value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The currency for the amount value.",
        SerializedName = @"currency",
        PossibleTypes = new [] { typeof(string) })]
        string TaxCurrency { get;  }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(float) })]
        float? TaxValue { get;  }
        /// <summary>The type of transaction.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of transaction.",
        SerializedName = @"transactionType",
        PossibleTypes = new [] { typeof(string) })]
        string TransactionType { get; set; }
        /// <summary>The number of units used for a given product.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of units used for a given product.",
        SerializedName = @"units",
        PossibleTypes = new [] { typeof(float) })]
        float? Unit { get; set; }
        /// <summary>
        /// The unit of measure used to bill for the product. For example, compute services are billed per hour.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The unit of measure used to bill for the product. For example, compute services are billed per hour.",
        SerializedName = @"unitOfMeasure",
        PossibleTypes = new [] { typeof(string) })]
        string UnitOfMeasure { get; set; }
        /// <summary>The description for the unit of measure for a given product.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Billing.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The description for the unit of measure for a given product.",
        SerializedName = @"unitType",
        PossibleTypes = new [] { typeof(string) })]
        string UnitType { get; set; }

    }
    /// A transaction.
    internal partial interface ITransactionInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.IProxyResourceWithTags1Internal
    {
        /// <summary>The charge associated with the transaction.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.IAmount Amount { get; set; }
        /// <summary>The currency for the amount value.</summary>
        string AmountCurrency { get; set; }
        /// <summary>The currency for the amount value.</summary>
        string AmountRefundedCurrency { get; set; }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        float? AmountRefundedValue { get; set; }
        /// <summary>The currency for the amount value.</summary>
        string AmountRequestedCurrency { get; set; }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        float? AmountRequestedValue { get; set; }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        float? AmountValue { get; set; }
        /// <summary>The amount of any Azure credits automatically applied to this transaction.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.IAmount AzureCreditApplied { get; set; }
        /// <summary>The currency for the amount value.</summary>
        string AzureCreditAppliedCurrency { get; set; }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        float? AzureCreditAppliedValue { get; set; }
        /// <summary>Details of the Azure plan.</summary>
        string AzurePlan { get; set; }
        /// <summary>The ISO 4217 code for the currency in which this transaction is billed.</summary>
        string BillingCurrency { get; set; }
        /// <summary>The name of the billing profile.</summary>
        string BillingProfileDisplayName { get; set; }
        /// <summary>The fully qualified ID that uniquely identifies a billing profile.</summary>
        string BillingProfileId { get; set; }
        /// <summary>
        /// The amount of Microsoft Azure Consumption Commitment(MACC) decrement through the transaction.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.IAmount ConsumptionCommitmentDecremented { get; set; }
        /// <summary>The currency for the amount value.</summary>
        string ConsumptionCommitmentDecrementedCurrency { get; set; }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        float? ConsumptionCommitmentDecrementedValue { get; set; }
        /// <summary>The credit type of the transaction. Applies only to credited transactions.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Support.CreditType? CreditType { get; set; }
        /// <summary>The name of the customer.</summary>
        string CustomerDisplayName { get; set; }
        /// <summary>The fully qualified ID that uniquely identifies a customer.</summary>
        string CustomerId { get; set; }
        /// <summary>The date of transaction.</summary>
        global::System.DateTime? Date { get; set; }
        /// <summary>The percentage discount, if any, applied to this transaction.</summary>
        float? Discount { get; set; }
        /// <summary>The price of the product after applying any discounts.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.IAmount EffectivePrice { get; set; }
        /// <summary>The currency for the amount value.</summary>
        string EffectivePriceCurrency { get; set; }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        float? EffectivePriceValue { get; set; }
        /// <summary>
        /// The exchange rate used to convert charged amount to billing currency, if applicable.
        /// </summary>
        float? ExchangeRate { get; set; }
        /// <summary>
        /// Invoice name on which the transaction was billed or 'Pending' if the transaction is not billed.
        /// </summary>
        string Invoice { get; set; }
        /// <summary>
        /// The fully qualified ID of the invoice on which the transaction was billed. This field is only applicable for transactions
        /// which are billed.
        /// </summary>
        string InvoiceId { get; set; }
        /// <summary>The name of the invoice section.</summary>
        string InvoiceSectionDisplayName { get; set; }
        /// <summary>The fully qualified ID that uniquely identifies an invoice section.</summary>
        string InvoiceSectionId { get; set; }
        /// <summary>Whether or not the transaction is third party.</summary>
        bool? IsThirdParty { get; set; }
        /// <summary>Type of the transaction, billed or unbilled.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Support.TransactionKind? Kind { get; set; }
        /// <summary>The retail price of the product.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.IAmount MarketPrice { get; set; }
        /// <summary>The currency for the amount value.</summary>
        string MarketPriceCurrency { get; set; }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        float? MarketPriceValue { get; set; }
        /// <summary>
        /// The part number of the product for which the transaction took place. The field is only applicable for Enterprise Agreement
        /// invoices.
        /// </summary>
        string PartNumber { get; set; }
        /// <summary>The ISO 4217 code for the currency in which the product is priced.</summary>
        string PricingCurrency { get; set; }
        /// <summary>The description of the product for which the transaction took place.</summary>
        string ProductDescription { get; set; }
        /// <summary>The family of the product for which the transaction took place.</summary>
        string ProductFamily { get; set; }
        /// <summary>The type of the product for which the transaction took place.</summary>
        string ProductType { get; set; }
        /// <summary>The ID of the product type for which the transaction took place.</summary>
        string ProductTypeId { get; set; }
        /// <summary>A transaction.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.ITransactionProperties Property { get; set; }
        /// <summary>The quantity purchased in the transaction.</summary>
        int? Quantity { get; set; }
        /// <summary>There reason code for the transaction.</summary>
        string ReasonCode { get; set; }
        /// <summary>The refund details of a transaction.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.IRefundTransactionDetails RefundTransactionDetail { get; set; }
        /// <summary>The amount refunded.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.IAmount RefundTransactionDetailAmountRefunded { get; set; }
        /// <summary>The amount of refund requested.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.IAmount RefundTransactionDetailAmountRequested { get; set; }
        /// <summary>The ID of refund operation.</summary>
        string RefundTransactionDetailRefundOperationId { get; set; }
        /// <summary>
        /// The end date of the product term, or the end date of the month in which usage ended.
        /// </summary>
        global::System.DateTime? ServicePeriodEndDate { get; set; }
        /// <summary>
        /// The date of the purchase of the product, or the start date of the month in which usage started.
        /// </summary>
        global::System.DateTime? ServicePeriodStartDate { get; set; }
        /// <summary>
        /// Identifies the type of tax calculation used for the invoice. The field is applicable only to invoices with special tax
        /// calculation logic.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Support.SpecialTaxationType? SpecialTaxationType { get; set; }
        /// <summary>The pre-tax charged amount for the transaction.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.IAmount SubTotal { get; set; }
        /// <summary>The currency for the amount value.</summary>
        string SubTotalCurrency { get; set; }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        float? SubTotalValue { get; set; }
        /// <summary>The tax amount applied to the transaction.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Billing.Models.Api20240401.IAmount Tax { get; set; }
        /// <summary>The currency for the amount value.</summary>
        string TaxCurrency { get; set; }
        /// <summary>
        /// The amount value. For example, if the currency is USD, then a value of 600 would be $600.00.
        /// </summary>
        float? TaxValue { get; set; }
        /// <summary>The type of transaction.</summary>
        string TransactionType { get; set; }
        /// <summary>The number of units used for a given product.</summary>
        float? Unit { get; set; }
        /// <summary>
        /// The unit of measure used to bill for the product. For example, compute services are billed per hour.
        /// </summary>
        string UnitOfMeasure { get; set; }
        /// <summary>The description for the unit of measure for a given product.</summary>
        string UnitType { get; set; }

    }
}