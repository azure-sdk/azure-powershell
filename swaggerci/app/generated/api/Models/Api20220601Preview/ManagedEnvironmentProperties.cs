// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Extensions;

    /// <summary>Managed environment resource specific properties</summary>
    public partial class ManagedEnvironmentProperties :
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IManagedEnvironmentProperties,
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IManagedEnvironmentPropertiesInternal
    {

        /// <summary>Logs destination</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Inlined)]
        public string AppLogConfigurationDestination { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IAppLogsConfigurationInternal)AppLogsConfiguration).Destination; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IAppLogsConfigurationInternal)AppLogsConfiguration).Destination = value ?? null; }

        /// <summary>Backing field for <see cref="AppLogsConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IAppLogsConfiguration _appLogsConfiguration;

        /// <summary>
        /// Cluster configuration which enables the log daemon to export
        /// app logs to a destination. Currently only "log-analytics" is
        /// supported
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IAppLogsConfiguration AppLogsConfiguration { get => (this._appLogsConfiguration = this._appLogsConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.AppLogsConfiguration()); set => this._appLogsConfiguration = value; }

        /// <summary>Backing field for <see cref="CustomDomainConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.ICustomDomainConfiguration _customDomainConfiguration;

        /// <summary>Custom domain configuration for the environment</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.ICustomDomainConfiguration CustomDomainConfiguration { get => (this._customDomainConfiguration = this._customDomainConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.CustomDomainConfiguration()); set => this._customDomainConfiguration = value; }

        /// <summary>Certificate password</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Inlined)]
        public byte[] CustomDomainConfigurationCertificatePassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.ICustomDomainConfigurationInternal)CustomDomainConfiguration).CertificatePassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.ICustomDomainConfigurationInternal)CustomDomainConfiguration).CertificatePassword = value ?? null /* byte array */; }

        /// <summary>PFX or PEM blob</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Inlined)]
        public byte[] CustomDomainConfigurationCertificateValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.ICustomDomainConfigurationInternal)CustomDomainConfiguration).CertificateValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.ICustomDomainConfigurationInternal)CustomDomainConfiguration).CertificateValue = value ?? null /* byte array */; }

        /// <summary>Id used to verify domain name ownership</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Inlined)]
        public string CustomDomainConfigurationCustomDomainVerificationId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.ICustomDomainConfigurationInternal)CustomDomainConfiguration).CustomDomainVerificationId; }

        /// <summary>Dns suffix for the environment domain</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Inlined)]
        public string CustomDomainConfigurationDnsSuffix { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.ICustomDomainConfigurationInternal)CustomDomainConfiguration).DnsSuffix; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.ICustomDomainConfigurationInternal)CustomDomainConfiguration).DnsSuffix = value ?? null; }

        /// <summary>Certificate expiration date.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Inlined)]
        public global::System.DateTime? CustomDomainConfigurationExpirationDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.ICustomDomainConfigurationInternal)CustomDomainConfiguration).ExpirationDate; }

        /// <summary>Subject name of the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Inlined)]
        public string CustomDomainConfigurationSubjectName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.ICustomDomainConfigurationInternal)CustomDomainConfiguration).SubjectName; }

        /// <summary>Certificate thumbprint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Inlined)]
        public string CustomDomainConfigurationThumbprint { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.ICustomDomainConfigurationInternal)CustomDomainConfiguration).Thumbprint; }

        /// <summary>Backing field for <see cref="DaprAiConnectionString" /> property.</summary>
        private string _daprAiConnectionString;

        /// <summary>
        /// Application Insights connection string used by Dapr to export Service to Service communication telemetry
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Owned)]
        public string DaprAiConnectionString { get => this._daprAiConnectionString; set => this._daprAiConnectionString = value; }

        /// <summary>Backing field for <see cref="DaprAiInstrumentationKey" /> property.</summary>
        private string _daprAiInstrumentationKey;

        /// <summary>
        /// Azure Monitor instrumentation key used by Dapr to export Service to Service communication telemetry
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Owned)]
        public string DaprAiInstrumentationKey { get => this._daprAiInstrumentationKey; set => this._daprAiInstrumentationKey = value; }

        /// <summary>Backing field for <see cref="DefaultDomain" /> property.</summary>
        private string _defaultDomain;

        /// <summary>Default Domain Name for the cluster</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Owned)]
        public string DefaultDomain { get => this._defaultDomain; }

        /// <summary>Backing field for <see cref="DeploymentError" /> property.</summary>
        private string _deploymentError;

        /// <summary>Any errors that occurred during deployment or deployment validation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Owned)]
        public string DeploymentError { get => this._deploymentError; }

        /// <summary>Log analytics customer id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Inlined)]
        public string LogAnalyticConfigurationCustomerId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IAppLogsConfigurationInternal)AppLogsConfiguration).LogAnalyticConfigurationCustomerId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IAppLogsConfigurationInternal)AppLogsConfiguration).LogAnalyticConfigurationCustomerId = value ?? null; }

        /// <summary>Log analytics customer key</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Inlined)]
        public string LogAnalyticConfigurationSharedKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IAppLogsConfigurationInternal)AppLogsConfiguration).LogAnalyticConfigurationSharedKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IAppLogsConfigurationInternal)AppLogsConfiguration).LogAnalyticConfigurationSharedKey = value ?? null; }

        /// <summary>Internal Acessors for AppLogConfigurationLogAnalyticsConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.ILogAnalyticsConfiguration Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IManagedEnvironmentPropertiesInternal.AppLogConfigurationLogAnalyticsConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IAppLogsConfigurationInternal)AppLogsConfiguration).LogAnalyticsConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IAppLogsConfigurationInternal)AppLogsConfiguration).LogAnalyticsConfiguration = value; }

        /// <summary>Internal Acessors for AppLogsConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IAppLogsConfiguration Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IManagedEnvironmentPropertiesInternal.AppLogsConfiguration { get => (this._appLogsConfiguration = this._appLogsConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.AppLogsConfiguration()); set { {_appLogsConfiguration = value;} } }

        /// <summary>Internal Acessors for CustomDomainConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.ICustomDomainConfiguration Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IManagedEnvironmentPropertiesInternal.CustomDomainConfiguration { get => (this._customDomainConfiguration = this._customDomainConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.CustomDomainConfiguration()); set { {_customDomainConfiguration = value;} } }

        /// <summary>Internal Acessors for CustomDomainConfigurationCustomDomainVerificationId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IManagedEnvironmentPropertiesInternal.CustomDomainConfigurationCustomDomainVerificationId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.ICustomDomainConfigurationInternal)CustomDomainConfiguration).CustomDomainVerificationId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.ICustomDomainConfigurationInternal)CustomDomainConfiguration).CustomDomainVerificationId = value; }

        /// <summary>Internal Acessors for CustomDomainConfigurationExpirationDate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IManagedEnvironmentPropertiesInternal.CustomDomainConfigurationExpirationDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.ICustomDomainConfigurationInternal)CustomDomainConfiguration).ExpirationDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.ICustomDomainConfigurationInternal)CustomDomainConfiguration).ExpirationDate = value; }

        /// <summary>Internal Acessors for CustomDomainConfigurationSubjectName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IManagedEnvironmentPropertiesInternal.CustomDomainConfigurationSubjectName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.ICustomDomainConfigurationInternal)CustomDomainConfiguration).SubjectName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.ICustomDomainConfigurationInternal)CustomDomainConfiguration).SubjectName = value; }

        /// <summary>Internal Acessors for CustomDomainConfigurationThumbprint</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IManagedEnvironmentPropertiesInternal.CustomDomainConfigurationThumbprint { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.ICustomDomainConfigurationInternal)CustomDomainConfiguration).Thumbprint; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.ICustomDomainConfigurationInternal)CustomDomainConfiguration).Thumbprint = value; }

        /// <summary>Internal Acessors for DefaultDomain</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IManagedEnvironmentPropertiesInternal.DefaultDomain { get => this._defaultDomain; set { {_defaultDomain = value;} } }

        /// <summary>Internal Acessors for DeploymentError</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IManagedEnvironmentPropertiesInternal.DeploymentError { get => this._deploymentError; set { {_deploymentError = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Support.EnvironmentProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IManagedEnvironmentPropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Internal Acessors for StaticIP</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IManagedEnvironmentPropertiesInternal.StaticIP { get => this._staticIP; set { {_staticIP = value;} } }

        /// <summary>Internal Acessors for VnetConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IVnetConfiguration Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IManagedEnvironmentPropertiesInternal.VnetConfiguration { get => (this._vnetConfiguration = this._vnetConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.VnetConfiguration()); set { {_vnetConfiguration = value;} } }

        /// <summary>Internal Acessors for VnetConfigurationOutboundSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IManagedEnvironmentOutboundSettings Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IManagedEnvironmentPropertiesInternal.VnetConfigurationOutboundSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IVnetConfigurationInternal)VnetConfiguration).OutboundSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IVnetConfigurationInternal)VnetConfiguration).OutboundSetting = value; }

        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Support.ManagedEnvironmentOutBoundType? OutboundSettingOutBoundType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IVnetConfigurationInternal)VnetConfiguration).OutboundSettingOutBoundType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IVnetConfigurationInternal)VnetConfiguration).OutboundSettingOutBoundType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Support.ManagedEnvironmentOutBoundType)""); }

        /// <summary>Virtual Appliance IP used as the Egress controller for the Environment</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Inlined)]
        public string OutboundSettingVirtualNetworkApplianceIP { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IVnetConfigurationInternal)VnetConfiguration).OutboundSettingVirtualNetworkApplianceIP; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IVnetConfigurationInternal)VnetConfiguration).OutboundSettingVirtualNetworkApplianceIP = value ?? null; }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Support.EnvironmentProvisioningState? _provisioningState;

        /// <summary>Provisioning state of the Environment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Support.EnvironmentProvisioningState? ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="StaticIP" /> property.</summary>
        private string _staticIP;

        /// <summary>Static IP of the Environment</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Owned)]
        public string StaticIP { get => this._staticIP; }

        /// <summary>Backing field for <see cref="VnetConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IVnetConfiguration _vnetConfiguration;

        /// <summary>Vnet configuration for the environment</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IVnetConfiguration VnetConfiguration { get => (this._vnetConfiguration = this._vnetConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.VnetConfiguration()); set => this._vnetConfiguration = value; }

        /// <summary>
        /// CIDR notation IP range assigned to the Docker bridge, network. Must not overlap with any other provided IP ranges.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Inlined)]
        public string VnetConfigurationDockerBridgeCidr { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IVnetConfigurationInternal)VnetConfiguration).DockerBridgeCidr; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IVnetConfigurationInternal)VnetConfiguration).DockerBridgeCidr = value ?? null; }

        /// <summary>
        /// Resource ID of a subnet for infrastructure components. This subnet must be in the same VNET as the subnet defined in runtimeSubnetId.
        /// Must not overlap with any other provided IP ranges.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Inlined)]
        public string VnetConfigurationInfrastructureSubnetId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IVnetConfigurationInternal)VnetConfiguration).InfrastructureSubnetId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IVnetConfigurationInternal)VnetConfiguration).InfrastructureSubnetId = value ?? null; }

        /// <summary>
        /// Boolean indicating the environment only has an internal load balancer. These environments do not have a public static
        /// IP resource. They must provide runtimeSubnetId and infrastructureSubnetId if enabling this property
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Inlined)]
        public bool? VnetConfigurationInternal { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IVnetConfigurationInternal)VnetConfiguration).Internal; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IVnetConfigurationInternal)VnetConfiguration).Internal = value ?? default(bool); }

        /// <summary>
        /// IP range in CIDR notation that can be reserved for environment infrastructure IP addresses. Must not overlap with any
        /// other provided IP ranges.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Inlined)]
        public string VnetConfigurationPlatformReservedCidr { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IVnetConfigurationInternal)VnetConfiguration).PlatformReservedCidr; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IVnetConfigurationInternal)VnetConfiguration).PlatformReservedCidr = value ?? null; }

        /// <summary>
        /// An IP address from the IP range defined by platformReservedCidr that will be reserved for the internal DNS server.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Inlined)]
        public string VnetConfigurationPlatformReservedDnsIP { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IVnetConfigurationInternal)VnetConfiguration).PlatformReservedDnsIP; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IVnetConfigurationInternal)VnetConfiguration).PlatformReservedDnsIP = value ?? null; }

        /// <summary>
        /// Resource ID of a subnet that Container App containers are injected into. This subnet must be in the same VNET as the subnet
        /// defined in infrastructureSubnetId. Must not overlap with any other provided IP ranges.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Inlined)]
        public string VnetConfigurationRuntimeSubnetId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IVnetConfigurationInternal)VnetConfiguration).RuntimeSubnetId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IVnetConfigurationInternal)VnetConfiguration).RuntimeSubnetId = value ?? null; }

        /// <summary>Backing field for <see cref="ZoneRedundant" /> property.</summary>
        private bool? _zoneRedundant;

        /// <summary>Whether or not this Managed Environment is zone-redundant.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Owned)]
        public bool? ZoneRedundant { get => this._zoneRedundant; set => this._zoneRedundant = value; }

        /// <summary>Creates an new <see cref="ManagedEnvironmentProperties" /> instance.</summary>
        public ManagedEnvironmentProperties()
        {

        }
    }
    /// Managed environment resource specific properties
    public partial interface IManagedEnvironmentProperties :
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.IJsonSerializable
    {
        /// <summary>Logs destination</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Logs destination",
        SerializedName = @"destination",
        PossibleTypes = new [] { typeof(string) })]
        string AppLogConfigurationDestination { get; set; }
        /// <summary>Certificate password</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Certificate password",
        SerializedName = @"certificatePassword",
        PossibleTypes = new [] { typeof(byte[]) })]
        byte[] CustomDomainConfigurationCertificatePassword { get; set; }
        /// <summary>PFX or PEM blob</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"PFX or PEM blob",
        SerializedName = @"certificateValue",
        PossibleTypes = new [] { typeof(byte[]) })]
        byte[] CustomDomainConfigurationCertificateValue { get; set; }
        /// <summary>Id used to verify domain name ownership</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Id used to verify domain name ownership",
        SerializedName = @"customDomainVerificationId",
        PossibleTypes = new [] { typeof(string) })]
        string CustomDomainConfigurationCustomDomainVerificationId { get;  }
        /// <summary>Dns suffix for the environment domain</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Dns suffix for the environment domain",
        SerializedName = @"dnsSuffix",
        PossibleTypes = new [] { typeof(string) })]
        string CustomDomainConfigurationDnsSuffix { get; set; }
        /// <summary>Certificate expiration date.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Certificate expiration date.",
        SerializedName = @"expirationDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? CustomDomainConfigurationExpirationDate { get;  }
        /// <summary>Subject name of the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Subject name of the certificate.",
        SerializedName = @"subjectName",
        PossibleTypes = new [] { typeof(string) })]
        string CustomDomainConfigurationSubjectName { get;  }
        /// <summary>Certificate thumbprint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Certificate thumbprint.",
        SerializedName = @"thumbprint",
        PossibleTypes = new [] { typeof(string) })]
        string CustomDomainConfigurationThumbprint { get;  }
        /// <summary>
        /// Application Insights connection string used by Dapr to export Service to Service communication telemetry
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Application Insights connection string used by Dapr to export Service to Service communication telemetry",
        SerializedName = @"daprAIConnectionString",
        PossibleTypes = new [] { typeof(string) })]
        string DaprAiConnectionString { get; set; }
        /// <summary>
        /// Azure Monitor instrumentation key used by Dapr to export Service to Service communication telemetry
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Azure Monitor instrumentation key used by Dapr to export Service to Service communication telemetry",
        SerializedName = @"daprAIInstrumentationKey",
        PossibleTypes = new [] { typeof(string) })]
        string DaprAiInstrumentationKey { get; set; }
        /// <summary>Default Domain Name for the cluster</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Default Domain Name for the cluster",
        SerializedName = @"defaultDomain",
        PossibleTypes = new [] { typeof(string) })]
        string DefaultDomain { get;  }
        /// <summary>Any errors that occurred during deployment or deployment validation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Any errors that occurred during deployment or deployment validation",
        SerializedName = @"deploymentErrors",
        PossibleTypes = new [] { typeof(string) })]
        string DeploymentError { get;  }
        /// <summary>Log analytics customer id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Log analytics customer id",
        SerializedName = @"customerId",
        PossibleTypes = new [] { typeof(string) })]
        string LogAnalyticConfigurationCustomerId { get; set; }
        /// <summary>Log analytics customer key</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Log analytics customer key",
        SerializedName = @"sharedKey",
        PossibleTypes = new [] { typeof(string) })]
        string LogAnalyticConfigurationSharedKey { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"outBoundType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Support.ManagedEnvironmentOutBoundType) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Support.ManagedEnvironmentOutBoundType? OutboundSettingOutBoundType { get; set; }
        /// <summary>Virtual Appliance IP used as the Egress controller for the Environment</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Virtual Appliance IP used as the Egress controller for the Environment",
        SerializedName = @"virtualNetworkApplianceIP",
        PossibleTypes = new [] { typeof(string) })]
        string OutboundSettingVirtualNetworkApplianceIP { get; set; }
        /// <summary>Provisioning state of the Environment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Provisioning state of the Environment.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Support.EnvironmentProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Support.EnvironmentProvisioningState? ProvisioningState { get;  }
        /// <summary>Static IP of the Environment</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Static IP of the Environment",
        SerializedName = @"staticIp",
        PossibleTypes = new [] { typeof(string) })]
        string StaticIP { get;  }
        /// <summary>
        /// CIDR notation IP range assigned to the Docker bridge, network. Must not overlap with any other provided IP ranges.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"CIDR notation IP range assigned to the Docker bridge, network. Must not overlap with any other provided IP ranges.",
        SerializedName = @"dockerBridgeCidr",
        PossibleTypes = new [] { typeof(string) })]
        string VnetConfigurationDockerBridgeCidr { get; set; }
        /// <summary>
        /// Resource ID of a subnet for infrastructure components. This subnet must be in the same VNET as the subnet defined in runtimeSubnetId.
        /// Must not overlap with any other provided IP ranges.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource ID of a subnet for infrastructure components. This subnet must be in the same VNET as the subnet defined in runtimeSubnetId. Must not overlap with any other provided IP ranges.",
        SerializedName = @"infrastructureSubnetId",
        PossibleTypes = new [] { typeof(string) })]
        string VnetConfigurationInfrastructureSubnetId { get; set; }
        /// <summary>
        /// Boolean indicating the environment only has an internal load balancer. These environments do not have a public static
        /// IP resource. They must provide runtimeSubnetId and infrastructureSubnetId if enabling this property
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Boolean indicating the environment only has an internal load balancer. These environments do not have a public static IP resource. They must provide runtimeSubnetId and infrastructureSubnetId if enabling this property",
        SerializedName = @"internal",
        PossibleTypes = new [] { typeof(bool) })]
        bool? VnetConfigurationInternal { get; set; }
        /// <summary>
        /// IP range in CIDR notation that can be reserved for environment infrastructure IP addresses. Must not overlap with any
        /// other provided IP ranges.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"IP range in CIDR notation that can be reserved for environment infrastructure IP addresses. Must not overlap with any other provided IP ranges.",
        SerializedName = @"platformReservedCidr",
        PossibleTypes = new [] { typeof(string) })]
        string VnetConfigurationPlatformReservedCidr { get; set; }
        /// <summary>
        /// An IP address from the IP range defined by platformReservedCidr that will be reserved for the internal DNS server.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @" An IP address from the IP range defined by platformReservedCidr that will be reserved for the internal DNS server.",
        SerializedName = @"platformReservedDnsIP",
        PossibleTypes = new [] { typeof(string) })]
        string VnetConfigurationPlatformReservedDnsIP { get; set; }
        /// <summary>
        /// Resource ID of a subnet that Container App containers are injected into. This subnet must be in the same VNET as the subnet
        /// defined in infrastructureSubnetId. Must not overlap with any other provided IP ranges.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource ID of a subnet that Container App containers are injected into. This subnet must be in the same VNET as the subnet defined in infrastructureSubnetId. Must not overlap with any other provided IP ranges.",
        SerializedName = @"runtimeSubnetId",
        PossibleTypes = new [] { typeof(string) })]
        string VnetConfigurationRuntimeSubnetId { get; set; }
        /// <summary>Whether or not this Managed Environment is zone-redundant.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether or not this Managed Environment is zone-redundant.",
        SerializedName = @"zoneRedundant",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ZoneRedundant { get; set; }

    }
    /// Managed environment resource specific properties
    internal partial interface IManagedEnvironmentPropertiesInternal

    {
        /// <summary>Logs destination</summary>
        string AppLogConfigurationDestination { get; set; }
        /// <summary>Log Analytics configuration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.ILogAnalyticsConfiguration AppLogConfigurationLogAnalyticsConfiguration { get; set; }
        /// <summary>
        /// Cluster configuration which enables the log daemon to export
        /// app logs to a destination. Currently only "log-analytics" is
        /// supported
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IAppLogsConfiguration AppLogsConfiguration { get; set; }
        /// <summary>Custom domain configuration for the environment</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.ICustomDomainConfiguration CustomDomainConfiguration { get; set; }
        /// <summary>Certificate password</summary>
        byte[] CustomDomainConfigurationCertificatePassword { get; set; }
        /// <summary>PFX or PEM blob</summary>
        byte[] CustomDomainConfigurationCertificateValue { get; set; }
        /// <summary>Id used to verify domain name ownership</summary>
        string CustomDomainConfigurationCustomDomainVerificationId { get; set; }
        /// <summary>Dns suffix for the environment domain</summary>
        string CustomDomainConfigurationDnsSuffix { get; set; }
        /// <summary>Certificate expiration date.</summary>
        global::System.DateTime? CustomDomainConfigurationExpirationDate { get; set; }
        /// <summary>Subject name of the certificate.</summary>
        string CustomDomainConfigurationSubjectName { get; set; }
        /// <summary>Certificate thumbprint.</summary>
        string CustomDomainConfigurationThumbprint { get; set; }
        /// <summary>
        /// Application Insights connection string used by Dapr to export Service to Service communication telemetry
        /// </summary>
        string DaprAiConnectionString { get; set; }
        /// <summary>
        /// Azure Monitor instrumentation key used by Dapr to export Service to Service communication telemetry
        /// </summary>
        string DaprAiInstrumentationKey { get; set; }
        /// <summary>Default Domain Name for the cluster</summary>
        string DefaultDomain { get; set; }
        /// <summary>Any errors that occurred during deployment or deployment validation</summary>
        string DeploymentError { get; set; }
        /// <summary>Log analytics customer id</summary>
        string LogAnalyticConfigurationCustomerId { get; set; }
        /// <summary>Log analytics customer key</summary>
        string LogAnalyticConfigurationSharedKey { get; set; }

        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Support.ManagedEnvironmentOutBoundType? OutboundSettingOutBoundType { get; set; }
        /// <summary>Virtual Appliance IP used as the Egress controller for the Environment</summary>
        string OutboundSettingVirtualNetworkApplianceIP { get; set; }
        /// <summary>Provisioning state of the Environment.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Support.EnvironmentProvisioningState? ProvisioningState { get; set; }
        /// <summary>Static IP of the Environment</summary>
        string StaticIP { get; set; }
        /// <summary>Vnet configuration for the environment</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IVnetConfiguration VnetConfiguration { get; set; }
        /// <summary>
        /// CIDR notation IP range assigned to the Docker bridge, network. Must not overlap with any other provided IP ranges.
        /// </summary>
        string VnetConfigurationDockerBridgeCidr { get; set; }
        /// <summary>
        /// Resource ID of a subnet for infrastructure components. This subnet must be in the same VNET as the subnet defined in runtimeSubnetId.
        /// Must not overlap with any other provided IP ranges.
        /// </summary>
        string VnetConfigurationInfrastructureSubnetId { get; set; }
        /// <summary>
        /// Boolean indicating the environment only has an internal load balancer. These environments do not have a public static
        /// IP resource. They must provide runtimeSubnetId and infrastructureSubnetId if enabling this property
        /// </summary>
        bool? VnetConfigurationInternal { get; set; }
        /// <summary>Configuration used to control the Environment Egress outbound traffic</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20220601Preview.IManagedEnvironmentOutboundSettings VnetConfigurationOutboundSetting { get; set; }
        /// <summary>
        /// IP range in CIDR notation that can be reserved for environment infrastructure IP addresses. Must not overlap with any
        /// other provided IP ranges.
        /// </summary>
        string VnetConfigurationPlatformReservedCidr { get; set; }
        /// <summary>
        /// An IP address from the IP range defined by platformReservedCidr that will be reserved for the internal DNS server.
        /// </summary>
        string VnetConfigurationPlatformReservedDnsIP { get; set; }
        /// <summary>
        /// Resource ID of a subnet that Container App containers are injected into. This subnet must be in the same VNET as the subnet
        /// defined in infrastructureSubnetId. Must not overlap with any other provided IP ranges.
        /// </summary>
        string VnetConfigurationRuntimeSubnetId { get; set; }
        /// <summary>Whether or not this Managed Environment is zone-redundant.</summary>
        bool? ZoneRedundant { get; set; }

    }
}