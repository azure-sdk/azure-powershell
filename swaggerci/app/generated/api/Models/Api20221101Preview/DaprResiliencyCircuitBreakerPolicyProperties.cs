// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20221101Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Extensions;

    /// <summary>DaprResiliencyCircuitBreakerPolicy resource specific properties</summary>
    public partial class DaprResiliencyCircuitBreakerPolicyProperties :
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20221101Preview.IDaprResiliencyCircuitBreakerPolicyProperties,
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Models.Api20221101Preview.IDaprResiliencyCircuitBreakerPolicyPropertiesInternal
    {

        /// <summary>Backing field for <see cref="CircuitBreakerCacheSize" /> property.</summary>
        private int? _circuitBreakerCacheSize;

        /// <summary>
        /// Specify a cache size for the number of CBs to keep in memory. The value should be larger than the expected number of active
        /// actor instances.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Owned)]
        public int? CircuitBreakerCacheSize { get => this._circuitBreakerCacheSize; set => this._circuitBreakerCacheSize = value; }

        /// <summary>Backing field for <see cref="CircuitBreakerScope" /> property.</summary>
        private string _circuitBreakerScope;

        /// <summary>
        /// Specify whether circuit breaking state should be scoped to an individual actor ID, all actors across the actor type, or
        /// both. Possible values include id, type, or both
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Owned)]
        public string CircuitBreakerScope { get => this._circuitBreakerScope; set => this._circuitBreakerScope = value; }

        /// <summary>Backing field for <see cref="Interval" /> property.</summary>
        private string _interval;

        /// <summary>
        /// Cyclical period of time used by the CB to clear its internal counts. Valid values are of the form 200ms, 15s, 2m, 1h30m,
        /// etc.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Owned)]
        public string Interval { get => this._interval; set => this._interval = value; }

        /// <summary>Backing field for <see cref="MaxRequest" /> property.</summary>
        private int? _maxRequest;

        /// <summary>Maximum number of requests allowed to pass through</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Owned)]
        public int? MaxRequest { get => this._maxRequest; set => this._maxRequest = value; }

        /// <summary>Backing field for <see cref="Timeout" /> property.</summary>
        private string _timeout;

        /// <summary>
        /// The period of the open state until the CB switches to half-open. Valid values are of the form 200ms, 15s, 2m, 1h30m, etc.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Owned)]
        public string Timeout { get => this._timeout; set => this._timeout = value; }

        /// <summary>Backing field for <see cref="Trip" /> property.</summary>
        private string _trip;

        /// <summary>
        /// A Common Expression Language (CEL) statement that is evaluated by the CB When the statement evaluates to true, the CB
        /// trips and becomes open
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.PropertyOrigin.Owned)]
        public string Trip { get => this._trip; set => this._trip = value; }

        /// <summary>
        /// Creates an new <see cref="DaprResiliencyCircuitBreakerPolicyProperties" /> instance.
        /// </summary>
        public DaprResiliencyCircuitBreakerPolicyProperties()
        {

        }
    }
    /// DaprResiliencyCircuitBreakerPolicy resource specific properties
    public partial interface IDaprResiliencyCircuitBreakerPolicyProperties :
        Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Specify a cache size for the number of CBs to keep in memory. The value should be larger than the expected number of active
        /// actor instances.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specify a cache size for the number of CBs to keep in memory. The value should be larger than the expected number of active actor instances.",
        SerializedName = @"circuitBreakerCacheSize",
        PossibleTypes = new [] { typeof(int) })]
        int? CircuitBreakerCacheSize { get; set; }
        /// <summary>
        /// Specify whether circuit breaking state should be scoped to an individual actor ID, all actors across the actor type, or
        /// both. Possible values include id, type, or both
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specify whether circuit breaking state should be scoped to an individual actor ID, all actors across the actor type, or both. Possible values include id, type, or both",
        SerializedName = @"circuitBreakerScope",
        PossibleTypes = new [] { typeof(string) })]
        string CircuitBreakerScope { get; set; }
        /// <summary>
        /// Cyclical period of time used by the CB to clear its internal counts. Valid values are of the form 200ms, 15s, 2m, 1h30m,
        /// etc.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Cyclical period of time used by the CB to clear its internal counts. Valid values are of the form 200ms, 15s, 2m, 1h30m, etc.",
        SerializedName = @"interval",
        PossibleTypes = new [] { typeof(string) })]
        string Interval { get; set; }
        /// <summary>Maximum number of requests allowed to pass through</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Maximum number of requests allowed to pass through",
        SerializedName = @"maxRequests",
        PossibleTypes = new [] { typeof(int) })]
        int? MaxRequest { get; set; }
        /// <summary>
        /// The period of the open state until the CB switches to half-open. Valid values are of the form 200ms, 15s, 2m, 1h30m, etc.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The period of the open state until the CB switches to half-open. Valid values are of the form 200ms, 15s, 2m, 1h30m, etc.",
        SerializedName = @"timeout",
        PossibleTypes = new [] { typeof(string) })]
        string Timeout { get; set; }
        /// <summary>
        /// A Common Expression Language (CEL) statement that is evaluated by the CB When the statement evaluates to true, the CB
        /// trips and becomes open
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerAppsApi.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A Common Expression Language (CEL) statement that is evaluated by the CB When the statement evaluates to true, the CB trips and becomes open",
        SerializedName = @"trip",
        PossibleTypes = new [] { typeof(string) })]
        string Trip { get; set; }

    }
    /// DaprResiliencyCircuitBreakerPolicy resource specific properties
    internal partial interface IDaprResiliencyCircuitBreakerPolicyPropertiesInternal

    {
        /// <summary>
        /// Specify a cache size for the number of CBs to keep in memory. The value should be larger than the expected number of active
        /// actor instances.
        /// </summary>
        int? CircuitBreakerCacheSize { get; set; }
        /// <summary>
        /// Specify whether circuit breaking state should be scoped to an individual actor ID, all actors across the actor type, or
        /// both. Possible values include id, type, or both
        /// </summary>
        string CircuitBreakerScope { get; set; }
        /// <summary>
        /// Cyclical period of time used by the CB to clear its internal counts. Valid values are of the form 200ms, 15s, 2m, 1h30m,
        /// etc.
        /// </summary>
        string Interval { get; set; }
        /// <summary>Maximum number of requests allowed to pass through</summary>
        int? MaxRequest { get; set; }
        /// <summary>
        /// The period of the open state until the CB switches to half-open. Valid values are of the form 200ms, 15s, 2m, 1h30m, etc.
        /// </summary>
        string Timeout { get; set; }
        /// <summary>
        /// A Common Expression Language (CEL) statement that is evaluated by the CB When the statement evaluates to true, the CB
        /// trips and becomes open
        /// </summary>
        string Trip { get; set; }

    }
}