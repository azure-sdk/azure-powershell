
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create a CommunityTraining
.Description
Create a CommunityTraining
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Community.Models.Api20231101.ICommunityTraining
.Link
https://learn.microsoft.com/powershell/module/az.community/new-azcommunitytraining
#>
function New-AzCommunityTraining {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Community.Models.Api20231101.ICommunityTraining])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Alias('CommunityTrainingName')]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Path')]
    [System.String]
    # The name of the Community Training Resource
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    ${SubscriptionId},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Body')]
    [System.String]
    # The geo-location where the resource lives
    ${Location},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # To indicate whether the Community Training instance has Disaster Recovery enabled
    ${DisasterRecoveryEnabled},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Body')]
    [System.String]
    # The name of the authentication policy registered in ADB2C for the Community Training Resource
    ${IdentityConfigurationB2CAuthenticationPolicy},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Body')]
    [System.String]
    # The name of the password reset policy registered in ADB2C for the Community Training Resource
    ${IdentityConfigurationB2CPasswordResetPolicy},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Body')]
    [System.String]
    # The clientId of the application registered in the selected identity provider for the Community Training Resource
    ${IdentityConfigurationClientId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Body')]
    [System.Security.SecureString]
    # The client secret of the application registered in the selected identity provider for the Community Training Resource
    ${IdentityConfigurationClientSecret},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Body')]
    [System.String]
    # The custom login parameters for the Community Training Resource
    ${IdentityConfigurationCustomLoginParameter},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Body')]
    [System.String]
    # The domain name of the selected identity provider for the Community Training Resource
    ${IdentityConfigurationDomainName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Body')]
    [System.String]
    # The identity type of the Community Training Resource
    ${IdentityConfigurationIdentityType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # To indicate whether the Community Training Resource has Teams enabled
    ${IdentityConfigurationTeamsEnabled},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Body')]
    [System.String]
    # The tenantId of the selected identity provider for the Community Training Resource
    ${IdentityConfigurationTenantId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Body')]
    [System.String]
    # The email address of the portal admin
    ${PortalAdminEmailAddress},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Body')]
    [System.String]
    # The portal name (website name) of the Community Training instance
    ${PortalName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Body')]
    [System.String]
    # The email address of the portal owner.
    # Will be used as the primary contact
    ${PortalOwnerEmailAddress},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Body')]
    [System.String]
    # The organization name of the portal owner
    ${PortalOwnerOrganizationName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Body')]
    [System.Int32]
    # If the SKU supports scale out/in then the capacity integer should be included.
    # If scale out/in is not possible for the resource this may be omitted.
    ${SkuCapacity},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Body')]
    [System.String]
    # If the service has different generations of hardware, for the same SKU, then that can be captured here.
    ${SkuFamily},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Body')]
    [System.String]
    # The name of the SKU.
    # Ex - P3.
    # It is typically a letter+number code
    ${SkuName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Body')]
    [System.String]
    # The SKU size.
    # When the name field is the combination of tier and some other value, this would be the standalone code.
    ${SkuSize},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Community.Support.SkuTier])]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Support.SkuTier]
    # This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
    ${SkuTier},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.Community.Models.Api30.ITrackedResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # To indicate whether the Community Training instance has Zone Redundancy enabled
    ${ZoneRedundancyEnabled},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Community.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Community.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.Community.private\New-AzCommunityTraining_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Community.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.Community.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.Community.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Community.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
