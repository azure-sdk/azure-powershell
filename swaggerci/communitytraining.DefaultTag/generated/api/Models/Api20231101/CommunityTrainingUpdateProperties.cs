// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Models.Api20231101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Runtime.Extensions;

    /// <summary>The updatable properties of the CommunityTraining.</summary>
    public partial class CommunityTrainingUpdateProperties :
        Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Models.Api20231101.ICommunityTrainingUpdateProperties,
        Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Models.Api20231101.ICommunityTrainingUpdatePropertiesInternal
    {

        /// <summary>Backing field for <see cref="IdentityConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Models.Api20231101.IIdentityConfigurationPropertiesUpdate _identityConfiguration;

        /// <summary>The identity configuration of the Community Training resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Models.Api20231101.IIdentityConfigurationPropertiesUpdate IdentityConfiguration { get => (this._identityConfiguration = this._identityConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Models.Api20231101.IdentityConfigurationPropertiesUpdate()); set => this._identityConfiguration = value; }

        /// <summary>
        /// The name of the authentication policy registered in ADB2C for the Community Training Resource
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.PropertyOrigin.Inlined)]
        public string IdentityConfigurationB2CAuthenticationPolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Models.Api20231101.IIdentityConfigurationPropertiesUpdateInternal)IdentityConfiguration).B2CAuthenticationPolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Models.Api20231101.IIdentityConfigurationPropertiesUpdateInternal)IdentityConfiguration).B2CAuthenticationPolicy = value ?? null; }

        /// <summary>
        /// The name of the password reset policy registered in ADB2C for the Community Training Resource
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.PropertyOrigin.Inlined)]
        public string IdentityConfigurationB2CPasswordResetPolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Models.Api20231101.IIdentityConfigurationPropertiesUpdateInternal)IdentityConfiguration).B2CPasswordResetPolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Models.Api20231101.IIdentityConfigurationPropertiesUpdateInternal)IdentityConfiguration).B2CPasswordResetPolicy = value ?? null; }

        /// <summary>
        /// The clientId of the application registered in the selected identity provider for the Community Training Resource
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.PropertyOrigin.Inlined)]
        public string IdentityConfigurationClientId { get => ((Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Models.Api20231101.IIdentityConfigurationPropertiesUpdateInternal)IdentityConfiguration).ClientId; set => ((Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Models.Api20231101.IIdentityConfigurationPropertiesUpdateInternal)IdentityConfiguration).ClientId = value ?? null; }

        /// <summary>
        /// The client secret of the application registered in the selected identity provider for the Community Training Resource
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.PropertyOrigin.Inlined)]
        public System.Security.SecureString IdentityConfigurationClientSecret { get => ((Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Models.Api20231101.IIdentityConfigurationPropertiesUpdateInternal)IdentityConfiguration).ClientSecret; set => ((Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Models.Api20231101.IIdentityConfigurationPropertiesUpdateInternal)IdentityConfiguration).ClientSecret = value ?? null; }

        /// <summary>The custom login parameters for the Community Training Resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.PropertyOrigin.Inlined)]
        public string IdentityConfigurationCustomLoginParameter { get => ((Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Models.Api20231101.IIdentityConfigurationPropertiesUpdateInternal)IdentityConfiguration).CustomLoginParameter; set => ((Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Models.Api20231101.IIdentityConfigurationPropertiesUpdateInternal)IdentityConfiguration).CustomLoginParameter = value ?? null; }

        /// <summary>
        /// The domain name of the selected identity provider for the Community Training Resource
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.PropertyOrigin.Inlined)]
        public string IdentityConfigurationDomainName { get => ((Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Models.Api20231101.IIdentityConfigurationPropertiesUpdateInternal)IdentityConfiguration).DomainName; set => ((Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Models.Api20231101.IIdentityConfigurationPropertiesUpdateInternal)IdentityConfiguration).DomainName = value ?? null; }

        /// <summary>The identity type of the Community Training Resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.PropertyOrigin.Inlined)]
        public string IdentityConfigurationIdentityType { get => ((Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Models.Api20231101.IIdentityConfigurationPropertiesUpdateInternal)IdentityConfiguration).IdentityType; set => ((Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Models.Api20231101.IIdentityConfigurationPropertiesUpdateInternal)IdentityConfiguration).IdentityType = value ?? null; }

        /// <summary>To indicate whether the Community Training Resource has Teams enabled</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.PropertyOrigin.Inlined)]
        public bool? IdentityConfigurationTeamsEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Models.Api20231101.IIdentityConfigurationPropertiesUpdateInternal)IdentityConfiguration).TeamsEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Models.Api20231101.IIdentityConfigurationPropertiesUpdateInternal)IdentityConfiguration).TeamsEnabled = value ?? default(bool); }

        /// <summary>
        /// The tenantId of the selected identity provider for the Community Training Resource
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Origin(Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.PropertyOrigin.Inlined)]
        public string IdentityConfigurationTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Models.Api20231101.IIdentityConfigurationPropertiesUpdateInternal)IdentityConfiguration).TenantId; set => ((Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Models.Api20231101.IIdentityConfigurationPropertiesUpdateInternal)IdentityConfiguration).TenantId = value ?? null; }

        /// <summary>Internal Acessors for IdentityConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Models.Api20231101.IIdentityConfigurationPropertiesUpdate Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Models.Api20231101.ICommunityTrainingUpdatePropertiesInternal.IdentityConfiguration { get => (this._identityConfiguration = this._identityConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Models.Api20231101.IdentityConfigurationPropertiesUpdate()); set { {_identityConfiguration = value;} } }

        /// <summary>Creates an new <see cref="CommunityTrainingUpdateProperties" /> instance.</summary>
        public CommunityTrainingUpdateProperties()
        {

        }
    }
    /// The updatable properties of the CommunityTraining.
    public partial interface ICommunityTrainingUpdateProperties :
        Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The name of the authentication policy registered in ADB2C for the Community Training Resource
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the authentication policy registered in ADB2C for the Community Training Resource",
        SerializedName = @"b2cAuthenticationPolicy",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityConfigurationB2CAuthenticationPolicy { get; set; }
        /// <summary>
        /// The name of the password reset policy registered in ADB2C for the Community Training Resource
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the password reset policy registered in ADB2C for the Community Training Resource",
        SerializedName = @"b2cPasswordResetPolicy",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityConfigurationB2CPasswordResetPolicy { get; set; }
        /// <summary>
        /// The clientId of the application registered in the selected identity provider for the Community Training Resource
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The clientId of the application registered in the selected identity provider for the Community Training Resource",
        SerializedName = @"clientId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityConfigurationClientId { get; set; }
        /// <summary>
        /// The client secret of the application registered in the selected identity provider for the Community Training Resource
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The client secret of the application registered in the selected identity provider for the Community Training Resource",
        SerializedName = @"clientSecret",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString IdentityConfigurationClientSecret { get; set; }
        /// <summary>The custom login parameters for the Community Training Resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The custom login parameters for the Community Training Resource",
        SerializedName = @"customLoginParameters",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityConfigurationCustomLoginParameter { get; set; }
        /// <summary>
        /// The domain name of the selected identity provider for the Community Training Resource
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The domain name of the selected identity provider for the Community Training Resource",
        SerializedName = @"domainName",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityConfigurationDomainName { get; set; }
        /// <summary>The identity type of the Community Training Resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The identity type of the Community Training Resource",
        SerializedName = @"identityType",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityConfigurationIdentityType { get; set; }
        /// <summary>To indicate whether the Community Training Resource has Teams enabled</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"To indicate whether the Community Training Resource has Teams enabled",
        SerializedName = @"teamsEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IdentityConfigurationTeamsEnabled { get; set; }
        /// <summary>
        /// The tenantId of the selected identity provider for the Community Training Resource
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The tenantId of the selected identity provider for the Community Training Resource",
        SerializedName = @"tenantId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityConfigurationTenantId { get; set; }

    }
    /// The updatable properties of the CommunityTraining.
    internal partial interface ICommunityTrainingUpdatePropertiesInternal

    {
        /// <summary>The identity configuration of the Community Training resource</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CommunityForTesting.Models.Api20231101.IIdentityConfigurationPropertiesUpdate IdentityConfiguration { get; set; }
        /// <summary>
        /// The name of the authentication policy registered in ADB2C for the Community Training Resource
        /// </summary>
        string IdentityConfigurationB2CAuthenticationPolicy { get; set; }
        /// <summary>
        /// The name of the password reset policy registered in ADB2C for the Community Training Resource
        /// </summary>
        string IdentityConfigurationB2CPasswordResetPolicy { get; set; }
        /// <summary>
        /// The clientId of the application registered in the selected identity provider for the Community Training Resource
        /// </summary>
        string IdentityConfigurationClientId { get; set; }
        /// <summary>
        /// The client secret of the application registered in the selected identity provider for the Community Training Resource
        /// </summary>
        System.Security.SecureString IdentityConfigurationClientSecret { get; set; }
        /// <summary>The custom login parameters for the Community Training Resource</summary>
        string IdentityConfigurationCustomLoginParameter { get; set; }
        /// <summary>
        /// The domain name of the selected identity provider for the Community Training Resource
        /// </summary>
        string IdentityConfigurationDomainName { get; set; }
        /// <summary>The identity type of the Community Training Resource</summary>
        string IdentityConfigurationIdentityType { get; set; }
        /// <summary>To indicate whether the Community Training Resource has Teams enabled</summary>
        bool? IdentityConfigurationTeamsEnabled { get; set; }
        /// <summary>
        /// The tenantId of the selected identity provider for the Community Training Resource
        /// </summary>
        string IdentityConfigurationTenantId { get; set; }

    }
}