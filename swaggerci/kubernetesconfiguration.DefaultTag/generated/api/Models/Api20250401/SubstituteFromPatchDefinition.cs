// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.FluxConfiguration.Models.Api20250401
{
    using static Microsoft.Azure.PowerShell.Cmdlets.FluxConfiguration.Runtime.Extensions;

    /// <summary>
    /// Array of ConfigMaps/Secrets from which the variables are substituted for this Kustomization.
    /// </summary>
    public partial class SubstituteFromPatchDefinition :
        Microsoft.Azure.PowerShell.Cmdlets.FluxConfiguration.Models.Api20250401.ISubstituteFromPatchDefinition,
        Microsoft.Azure.PowerShell.Cmdlets.FluxConfiguration.Models.Api20250401.ISubstituteFromPatchDefinitionInternal
    {

        /// <summary>Backing field for <see cref="Kind" /> property.</summary>
        private string _kind;

        /// <summary>
        /// Define whether it is ConfigMap or Secret that holds the variables to be used in substitution.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FluxConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.FluxConfiguration.PropertyOrigin.Owned)]
        public string Kind { get => this._kind; set => this._kind = value; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>
        /// Name of the ConfigMap/Secret that holds the variables to be used in substitution.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FluxConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.FluxConfiguration.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="Optional" /> property.</summary>
        private bool? _optional;

        /// <summary>Set to True to proceed without ConfigMap/Secret, if it is not present.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FluxConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.FluxConfiguration.PropertyOrigin.Owned)]
        public bool? Optional { get => this._optional; set => this._optional = value; }

        /// <summary>Creates an new <see cref="SubstituteFromPatchDefinition" /> instance.</summary>
        public SubstituteFromPatchDefinition()
        {

        }
    }
    /// Array of ConfigMaps/Secrets from which the variables are substituted for this Kustomization.
    public partial interface ISubstituteFromPatchDefinition :
        Microsoft.Azure.PowerShell.Cmdlets.FluxConfiguration.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Define whether it is ConfigMap or Secret that holds the variables to be used in substitution.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FluxConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Define whether it is ConfigMap or Secret that holds the variables to be used in substitution.",
        SerializedName = @"kind",
        PossibleTypes = new [] { typeof(string) })]
        string Kind { get; set; }
        /// <summary>
        /// Name of the ConfigMap/Secret that holds the variables to be used in substitution.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FluxConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the ConfigMap/Secret that holds the variables to be used in substitution.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>Set to True to proceed without ConfigMap/Secret, if it is not present.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FluxConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Set to True to proceed without ConfigMap/Secret, if it is not present.",
        SerializedName = @"optional",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Optional { get; set; }

    }
    /// Array of ConfigMaps/Secrets from which the variables are substituted for this Kustomization.
    internal partial interface ISubstituteFromPatchDefinitionInternal

    {
        /// <summary>
        /// Define whether it is ConfigMap or Secret that holds the variables to be used in substitution.
        /// </summary>
        string Kind { get; set; }
        /// <summary>
        /// Name of the ConfigMap/Secret that holds the variables to be used in substitution.
        /// </summary>
        string Name { get; set; }
        /// <summary>Set to True to proceed without ConfigMap/Secret, if it is not present.</summary>
        bool? Optional { get; set; }

    }
}