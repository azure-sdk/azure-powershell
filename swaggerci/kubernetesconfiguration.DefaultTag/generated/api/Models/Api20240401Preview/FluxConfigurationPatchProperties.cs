// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Extensions;

    /// <summary>Updatable properties of an Flux Configuration Patch Request</summary>
    public partial class FluxConfigurationPatchProperties :
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IFluxConfigurationPatchProperties,
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IFluxConfigurationPatchPropertiesInternal
    {

        /// <summary>Backing field for <see cref="AzureBlob" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinition _azureBlob;

        /// <summary>Parameters to reconcile to the AzureBlob source kind type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinition AzureBlob { get => (this._azureBlob = this._azureBlob ?? new Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.AzureBlobPatchDefinition()); set => this._azureBlob = value; }

        /// <summary>The account key (shared key) to access the storage account</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string AzureBlobAccountKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinitionInternal)AzureBlob).AccountKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinitionInternal)AzureBlob).AccountKey = value ?? null; }

        /// <summary>
        /// The Azure Blob container name to sync from the url endpoint for the flux configuration.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string AzureBlobContainerName { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinitionInternal)AzureBlob).ContainerName; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinitionInternal)AzureBlob).ContainerName = value ?? null; }

        /// <summary>
        /// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided
        /// configuration secrets.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string AzureBlobLocalAuthRef { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinitionInternal)AzureBlob).LocalAuthRef; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinitionInternal)AzureBlob).LocalAuthRef = value ?? null; }

        /// <summary>The Shared Access token to access the storage container</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string AzureBlobSasToken { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinitionInternal)AzureBlob).SasToken; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinitionInternal)AzureBlob).SasToken = value ?? null; }

        /// <summary>
        /// The interval at which to re-reconcile the cluster Azure Blob source with the remote.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public long? AzureBlobSyncIntervalInSecond { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinitionInternal)AzureBlob).SyncIntervalInSecond; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinitionInternal)AzureBlob).SyncIntervalInSecond = value ?? default(long); }

        /// <summary>
        /// The maximum time to attempt to reconcile the cluster Azure Blob source with the remote.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public long? AzureBlobTimeoutInSecond { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinitionInternal)AzureBlob).TimeoutInSecond; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinitionInternal)AzureBlob).TimeoutInSecond = value ?? default(long); }

        /// <summary>The URL to sync for the flux configuration Azure Blob storage account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string AzureBlobUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinitionInternal)AzureBlob).Url; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinitionInternal)AzureBlob).Url = value ?? null; }

        /// <summary>Backing field for <see cref="Bucket" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IBucketPatchDefinition _bucket;

        /// <summary>Parameters to reconcile to the Bucket source kind type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IBucketPatchDefinition Bucket { get => (this._bucket = this._bucket ?? new Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.BucketPatchDefinition()); set => this._bucket = value; }

        /// <summary>Plaintext access key used to securely access the S3 bucket</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string BucketAccessKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IBucketPatchDefinitionInternal)Bucket).AccessKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IBucketPatchDefinitionInternal)Bucket).AccessKey = value ?? null; }

        /// <summary>
        /// Specify whether to use insecure communication when puling data from the S3 bucket.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public bool? BucketInsecure { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IBucketPatchDefinitionInternal)Bucket).Insecure; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IBucketPatchDefinitionInternal)Bucket).Insecure = value ?? default(bool); }

        /// <summary>
        /// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided
        /// configuration secrets.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string BucketLocalAuthRef { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IBucketPatchDefinitionInternal)Bucket).LocalAuthRef; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IBucketPatchDefinitionInternal)Bucket).LocalAuthRef = value ?? null; }

        /// <summary>The bucket name to sync from the url endpoint for the flux configuration.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string BucketName { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IBucketPatchDefinitionInternal)Bucket).BucketName; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IBucketPatchDefinitionInternal)Bucket).BucketName = value ?? null; }

        /// <summary>
        /// The interval at which to re-reconcile the cluster bucket source with the remote.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public long? BucketSyncIntervalInSecond { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IBucketPatchDefinitionInternal)Bucket).SyncIntervalInSecond; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IBucketPatchDefinitionInternal)Bucket).SyncIntervalInSecond = value ?? default(long); }

        /// <summary>
        /// The maximum time to attempt to reconcile the cluster bucket source with the remote.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public long? BucketTimeoutInSecond { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IBucketPatchDefinitionInternal)Bucket).TimeoutInSecond; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IBucketPatchDefinitionInternal)Bucket).TimeoutInSecond = value ?? default(long); }

        /// <summary>The URL to sync for the flux configuration S3 bucket.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string BucketUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IBucketPatchDefinitionInternal)Bucket).Url; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IBucketPatchDefinitionInternal)Bucket).Url = value ?? null; }

        /// <summary>Backing field for <see cref="ConfigurationProtectedSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IFluxConfigurationPatchPropertiesConfigurationProtectedSettings _configurationProtectedSetting;

        /// <summary>Key-value pairs of protected configuration settings for the configuration</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IFluxConfigurationPatchPropertiesConfigurationProtectedSettings ConfigurationProtectedSetting { get => (this._configurationProtectedSetting = this._configurationProtectedSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.FluxConfigurationPatchPropertiesConfigurationProtectedSettings()); set => this._configurationProtectedSetting = value; }

        /// <summary>Backing field for <see cref="GitRepository" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IGitRepositoryPatchDefinition _gitRepository;

        /// <summary>Parameters to reconcile to the GitRepository source kind type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IGitRepositoryPatchDefinition GitRepository { get => (this._gitRepository = this._gitRepository ?? new Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.GitRepositoryPatchDefinition()); set => this._gitRepository = value; }

        /// <summary>
        /// Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string GitRepositoryHttpsCaCert { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IGitRepositoryPatchDefinitionInternal)GitRepository).HttpsCaCert; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IGitRepositoryPatchDefinitionInternal)GitRepository).HttpsCaCert = value ?? null; }

        /// <summary>Plaintext HTTPS username used to access private git repositories over HTTPS</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string GitRepositoryHttpsUser { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IGitRepositoryPatchDefinitionInternal)GitRepository).HttpsUser; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IGitRepositoryPatchDefinitionInternal)GitRepository).HttpsUser = value ?? null; }

        /// <summary>
        /// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided
        /// configuration secrets.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string GitRepositoryLocalAuthRef { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IGitRepositoryPatchDefinitionInternal)GitRepository).LocalAuthRef; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IGitRepositoryPatchDefinitionInternal)GitRepository).LocalAuthRef = value ?? null; }

        /// <summary>
        /// The semver range used to match against git repository tags. This takes precedence over tag.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string GitRepositoryRefSemver { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IGitRepositoryPatchDefinitionInternal)GitRepository).RepositoryRefSemver; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IGitRepositoryPatchDefinitionInternal)GitRepository).RepositoryRefSemver = value ?? null; }

        /// <summary>The git repository tag name to checkout. This takes precedence over branch.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string GitRepositoryRefTag { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IGitRepositoryPatchDefinitionInternal)GitRepository).RepositoryRefTag; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IGitRepositoryPatchDefinitionInternal)GitRepository).RepositoryRefTag = value ?? null; }

        /// <summary>
        /// Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string GitRepositorySshKnownHost { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IGitRepositoryPatchDefinitionInternal)GitRepository).SshKnownHost; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IGitRepositoryPatchDefinitionInternal)GitRepository).SshKnownHost = value ?? null; }

        /// <summary>
        /// The interval at which to re-reconcile the cluster git repository source with the remote.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public long? GitRepositorySyncIntervalInSecond { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IGitRepositoryPatchDefinitionInternal)GitRepository).SyncIntervalInSecond; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IGitRepositoryPatchDefinitionInternal)GitRepository).SyncIntervalInSecond = value ?? default(long); }

        /// <summary>
        /// The maximum time to attempt to reconcile the cluster git repository source with the remote.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public long? GitRepositoryTimeoutInSecond { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IGitRepositoryPatchDefinitionInternal)GitRepository).TimeoutInSecond; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IGitRepositoryPatchDefinitionInternal)GitRepository).TimeoutInSecond = value ?? default(long); }

        /// <summary>The URL to sync for the flux configuration git repository.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string GitRepositoryUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IGitRepositoryPatchDefinitionInternal)GitRepository).Url; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IGitRepositoryPatchDefinitionInternal)GitRepository).Url = value ?? null; }

        /// <summary>Backing field for <see cref="Kustomization" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IFluxConfigurationPatchPropertiesKustomizations _kustomization;

        /// <summary>
        /// Array of kustomizations used to reconcile the artifact pulled by the source type on the cluster.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IFluxConfigurationPatchPropertiesKustomizations Kustomization { get => (this._kustomization = this._kustomization ?? new Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.FluxConfigurationPatchPropertiesKustomizations()); set => this._kustomization = value; }

        /// <summary>The first layer matching the specified media type will be used.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string LayerSelectorMediaType { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).LayerSelectorMediaType; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).LayerSelectorMediaType = value ?? null; }

        /// <summary>
        /// The operation to be performed on the selected layer. The default value is 'extract', but it can be set to 'copy'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Support.OperationType? LayerSelectorOperation { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).LayerSelectorOperation; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).LayerSelectorOperation = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Support.OperationType)""); }

        /// <summary>The client Id for authenticating a Managed Identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string ManagedIdentityClientId { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinitionInternal)AzureBlob).ManagedIdentityClientId; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinitionInternal)AzureBlob).ManagedIdentityClientId = value ?? null; }

        /// <summary>Internal Acessors for AzureBlob</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinition Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IFluxConfigurationPatchPropertiesInternal.AzureBlob { get => (this._azureBlob = this._azureBlob ?? new Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.AzureBlobPatchDefinition()); set { {_azureBlob = value;} } }

        /// <summary>Internal Acessors for AzureBlobManagedIdentity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IManagedIdentityPatchDefinition Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IFluxConfigurationPatchPropertiesInternal.AzureBlobManagedIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinitionInternal)AzureBlob).ManagedIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinitionInternal)AzureBlob).ManagedIdentity = value; }

        /// <summary>Internal Acessors for AzureBlobServicePrincipal</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IServicePrincipalPatchDefinition Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IFluxConfigurationPatchPropertiesInternal.AzureBlobServicePrincipal { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinitionInternal)AzureBlob).ServicePrincipal; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinitionInternal)AzureBlob).ServicePrincipal = value; }

        /// <summary>Internal Acessors for Bucket</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IBucketPatchDefinition Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IFluxConfigurationPatchPropertiesInternal.Bucket { get => (this._bucket = this._bucket ?? new Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.BucketPatchDefinition()); set { {_bucket = value;} } }

        /// <summary>Internal Acessors for GitRepository</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IGitRepositoryPatchDefinition Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IFluxConfigurationPatchPropertiesInternal.GitRepository { get => (this._gitRepository = this._gitRepository ?? new Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.GitRepositoryPatchDefinition()); set { {_gitRepository = value;} } }

        /// <summary>Internal Acessors for GitRepositoryRef</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IRepositoryRefDefinition Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IFluxConfigurationPatchPropertiesInternal.GitRepositoryRef { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IGitRepositoryPatchDefinitionInternal)GitRepository).RepositoryRef; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IGitRepositoryPatchDefinitionInternal)GitRepository).RepositoryRef = value; }

        /// <summary>Internal Acessors for OciRepository</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinition Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IFluxConfigurationPatchPropertiesInternal.OciRepository { get => (this._ociRepository = this._ociRepository ?? new Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.OciRepositoryPatchDefinition()); set { {_ociRepository = value;} } }

        /// <summary>Internal Acessors for OciRepositoryLayerSelector</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.ILayerSelectorPatchDefinition Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IFluxConfigurationPatchPropertiesInternal.OciRepositoryLayerSelector { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).LayerSelector; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).LayerSelector = value; }

        /// <summary>Internal Acessors for OciRepositoryRef</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryRefPatchDefinition Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IFluxConfigurationPatchPropertiesInternal.OciRepositoryRef { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).RepositoryRef; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).RepositoryRef = value; }

        /// <summary>Internal Acessors for OciRepositoryTlsConfig</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.ITlsConfigPatchDefinition Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IFluxConfigurationPatchPropertiesInternal.OciRepositoryTlsConfig { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).TlsConfig; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).TlsConfig = value; }

        /// <summary>Internal Acessors for OciRepositoryVerify</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IVerifyPatchDefinition Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IFluxConfigurationPatchPropertiesInternal.OciRepositoryVerify { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).Verify; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).Verify = value; }

        /// <summary>Backing field for <see cref="OciRepository" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinition _ociRepository;

        /// <summary>Parameters to reconcile to the OCIRepository source kind type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinition OciRepository { get => (this._ociRepository = this._ociRepository ?? new Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.OciRepositoryPatchDefinition()); set => this._ociRepository = value; }

        /// <summary>Specify whether to allow connecting to a non-TLS HTTP container registry.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public bool? OciRepositoryInsecure { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).Insecure; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).Insecure = value ?? default(bool); }

        /// <summary>
        /// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided
        /// configuration secrets.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string OciRepositoryLocalAuthRef { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).LocalAuthRef; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).LocalAuthRef = value ?? null; }

        /// <summary>
        /// The semver range used to match against OCI repository tags. This takes precedence over tag.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string OciRepositoryRefSemver { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).RepositoryRefSemver; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).RepositoryRefSemver = value ?? null; }

        /// <summary>The OCI repository image tag name to pull. This defaults to 'latest'.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string OciRepositoryRefTag { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).RepositoryRefTag; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).RepositoryRefTag = value ?? null; }

        /// <summary>The service account name to authenticate with the OCI repository.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string OciRepositoryServiceAccountName { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).ServiceAccountName; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).ServiceAccountName = value ?? null; }

        /// <summary>
        /// The interval at which to re-reconcile the cluster OCI repository source with the remote.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public long? OciRepositorySyncIntervalInSecond { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).SyncIntervalInSecond; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).SyncIntervalInSecond = value ?? default(long); }

        /// <summary>
        /// The maximum time to attempt to reconcile the cluster OCI repository source with the remote.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public long? OciRepositoryTimeoutInSecond { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).TimeoutInSecond; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).TimeoutInSecond = value ?? default(long); }

        /// <summary>The URL to sync for the flux configuration OCI repository.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string OciRepositoryUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).Url; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).Url = value ?? null; }

        /// <summary>
        /// Specifies whether to use Workload Identity to authenticate with the OCI repository.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public bool? OciRepositoryUseWorkloadIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).UseWorkloadIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).UseWorkloadIdentity = value ?? default(bool); }

        /// <summary>The git repository branch name to checkout.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string RepositoryRefBranch { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IGitRepositoryPatchDefinitionInternal)GitRepository).RepositoryRefBranch; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IGitRepositoryPatchDefinitionInternal)GitRepository).RepositoryRefBranch = value ?? null; }

        /// <summary>
        /// The commit SHA to checkout. This value must be combined with the branch name to be valid. This takes precedence over semver.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string RepositoryRefCommit { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IGitRepositoryPatchDefinitionInternal)GitRepository).RepositoryRefCommit; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IGitRepositoryPatchDefinitionInternal)GitRepository).RepositoryRefCommit = value ?? null; }

        /// <summary>
        /// The image digest to pull from OCI repository, the value should be in the format ‘sha256:’. This takes precedence over
        /// semver.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string RepositoryRefDigest { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).RepositoryRefDigest; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).RepositoryRefDigest = value ?? null; }

        /// <summary>Base64-encoded certificate used to authenticate a Service Principal</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string ServicePrincipalClientCertificate { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinitionInternal)AzureBlob).ServicePrincipalClientCertificate; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinitionInternal)AzureBlob).ServicePrincipalClientCertificate = value ?? null; }

        /// <summary>The password for the certificate used to authenticate a Service Principal</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string ServicePrincipalClientCertificatePassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinitionInternal)AzureBlob).ServicePrincipalClientCertificatePassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinitionInternal)AzureBlob).ServicePrincipalClientCertificatePassword = value ?? null; }

        /// <summary>
        /// Specifies whether to include x5c header in client claims when acquiring a token to enable subject name / issuer based
        /// authentication for the Client Certificate
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public bool? ServicePrincipalClientCertificateSendChain { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinitionInternal)AzureBlob).ServicePrincipalClientCertificateSendChain; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinitionInternal)AzureBlob).ServicePrincipalClientCertificateSendChain = value ?? default(bool); }

        /// <summary>The client Id for authenticating a Service Principal.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string ServicePrincipalClientId { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinitionInternal)AzureBlob).ServicePrincipalClientId; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinitionInternal)AzureBlob).ServicePrincipalClientId = value ?? null; }

        /// <summary>The client secret for authenticating a Service Principal</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string ServicePrincipalClientSecret { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinitionInternal)AzureBlob).ServicePrincipalClientSecret; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinitionInternal)AzureBlob).ServicePrincipalClientSecret = value ?? null; }

        /// <summary>The tenant Id for authenticating a Service Principal</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string ServicePrincipalTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinitionInternal)AzureBlob).ServicePrincipalTenantId; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinitionInternal)AzureBlob).ServicePrincipalTenantId = value ?? null; }

        /// <summary>Backing field for <see cref="SourceKind" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Support.SourceKindType? _sourceKind;

        /// <summary>Source Kind to pull the configuration data from.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Support.SourceKindType? SourceKind { get => this._sourceKind; set => this._sourceKind = value; }

        /// <summary>Backing field for <see cref="Suspend" /> property.</summary>
        private bool? _suspend;

        /// <summary>
        /// Whether this configuration should suspend its reconciliation of its kustomizations and sources.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Owned)]
        public bool? Suspend { get => this._suspend; set => this._suspend = value; }

        /// <summary>Base64-encoded CA certificate used to verify the server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string TlConfigCaCertificate { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).TlConfigCaCertificate; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).TlConfigCaCertificate = value ?? null; }

        /// <summary>
        /// Base64-encoded certificate used to authenticate a client with the OCI repository.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string TlConfigClientCertificate { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).TlConfigClientCertificate; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).TlConfigClientCertificate = value ?? null; }

        /// <summary>
        /// Base64-encoded private key used to authenticate a client with the OCI repository.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string TlConfigPrivateKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).TlConfigPrivateKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).TlConfigPrivateKey = value ?? null; }

        /// <summary>
        /// Array defining the criteria for matching the OIDC identity while verifying an OCI artifact.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IMatchOidcIdentityPatchDefinition[] VerifyMatchOidcIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).VerifyMatchOidcIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).VerifyMatchOidcIdentity = value ?? null /* arrayOf */; }

        /// <summary>Verification provider name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public string VerifyProvider { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).VerifyProvider; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).VerifyProvider = value ?? null; }

        /// <summary>An object containing trusted public keys of trusted authors.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IVerifyPatchDefinitionVerificationConfig VerifyVerificationConfig { get => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).VerifyVerificationConfig; set => ((Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinitionInternal)OciRepository).VerifyVerificationConfig = value ?? null /* model class */; }

        /// <summary>Creates an new <see cref="FluxConfigurationPatchProperties" /> instance.</summary>
        public FluxConfigurationPatchProperties()
        {

        }
    }
    /// Updatable properties of an Flux Configuration Patch Request
    public partial interface IFluxConfigurationPatchProperties :
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.IJsonSerializable
    {
        /// <summary>The account key (shared key) to access the storage account</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The account key (shared key) to access the storage account",
        SerializedName = @"accountKey",
        PossibleTypes = new [] { typeof(string) })]
        string AzureBlobAccountKey { get; set; }
        /// <summary>
        /// The Azure Blob container name to sync from the url endpoint for the flux configuration.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Azure Blob container name to sync from the url endpoint for the flux configuration.",
        SerializedName = @"containerName",
        PossibleTypes = new [] { typeof(string) })]
        string AzureBlobContainerName { get; set; }
        /// <summary>
        /// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided
        /// configuration secrets.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.",
        SerializedName = @"localAuthRef",
        PossibleTypes = new [] { typeof(string) })]
        string AzureBlobLocalAuthRef { get; set; }
        /// <summary>The Shared Access token to access the storage container</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Shared Access token to access the storage container",
        SerializedName = @"sasToken",
        PossibleTypes = new [] { typeof(string) })]
        string AzureBlobSasToken { get; set; }
        /// <summary>
        /// The interval at which to re-reconcile the cluster Azure Blob source with the remote.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The interval at which to re-reconcile the cluster Azure Blob source with the remote.",
        SerializedName = @"syncIntervalInSeconds",
        PossibleTypes = new [] { typeof(long) })]
        long? AzureBlobSyncIntervalInSecond { get; set; }
        /// <summary>
        /// The maximum time to attempt to reconcile the cluster Azure Blob source with the remote.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum time to attempt to reconcile the cluster Azure Blob source with the remote.",
        SerializedName = @"timeoutInSeconds",
        PossibleTypes = new [] { typeof(long) })]
        long? AzureBlobTimeoutInSecond { get; set; }
        /// <summary>The URL to sync for the flux configuration Azure Blob storage account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The URL to sync for the flux configuration Azure Blob storage account.",
        SerializedName = @"url",
        PossibleTypes = new [] { typeof(string) })]
        string AzureBlobUrl { get; set; }
        /// <summary>Plaintext access key used to securely access the S3 bucket</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Plaintext access key used to securely access the S3 bucket",
        SerializedName = @"accessKey",
        PossibleTypes = new [] { typeof(string) })]
        string BucketAccessKey { get; set; }
        /// <summary>
        /// Specify whether to use insecure communication when puling data from the S3 bucket.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specify whether to use insecure communication when puling data from the S3 bucket.",
        SerializedName = @"insecure",
        PossibleTypes = new [] { typeof(bool) })]
        bool? BucketInsecure { get; set; }
        /// <summary>
        /// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided
        /// configuration secrets.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.",
        SerializedName = @"localAuthRef",
        PossibleTypes = new [] { typeof(string) })]
        string BucketLocalAuthRef { get; set; }
        /// <summary>The bucket name to sync from the url endpoint for the flux configuration.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The bucket name to sync from the url endpoint for the flux configuration.",
        SerializedName = @"bucketName",
        PossibleTypes = new [] { typeof(string) })]
        string BucketName { get; set; }
        /// <summary>
        /// The interval at which to re-reconcile the cluster bucket source with the remote.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The interval at which to re-reconcile the cluster bucket source with the remote.",
        SerializedName = @"syncIntervalInSeconds",
        PossibleTypes = new [] { typeof(long) })]
        long? BucketSyncIntervalInSecond { get; set; }
        /// <summary>
        /// The maximum time to attempt to reconcile the cluster bucket source with the remote.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum time to attempt to reconcile the cluster bucket source with the remote.",
        SerializedName = @"timeoutInSeconds",
        PossibleTypes = new [] { typeof(long) })]
        long? BucketTimeoutInSecond { get; set; }
        /// <summary>The URL to sync for the flux configuration S3 bucket.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The URL to sync for the flux configuration S3 bucket.",
        SerializedName = @"url",
        PossibleTypes = new [] { typeof(string) })]
        string BucketUrl { get; set; }
        /// <summary>Key-value pairs of protected configuration settings for the configuration</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Key-value pairs of protected configuration settings for the configuration",
        SerializedName = @"configurationProtectedSettings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IFluxConfigurationPatchPropertiesConfigurationProtectedSettings) })]
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IFluxConfigurationPatchPropertiesConfigurationProtectedSettings ConfigurationProtectedSetting { get; set; }
        /// <summary>
        /// Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS",
        SerializedName = @"httpsCACert",
        PossibleTypes = new [] { typeof(string) })]
        string GitRepositoryHttpsCaCert { get; set; }
        /// <summary>Plaintext HTTPS username used to access private git repositories over HTTPS</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Plaintext HTTPS username used to access private git repositories over HTTPS",
        SerializedName = @"httpsUser",
        PossibleTypes = new [] { typeof(string) })]
        string GitRepositoryHttpsUser { get; set; }
        /// <summary>
        /// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided
        /// configuration secrets.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.",
        SerializedName = @"localAuthRef",
        PossibleTypes = new [] { typeof(string) })]
        string GitRepositoryLocalAuthRef { get; set; }
        /// <summary>
        /// The semver range used to match against git repository tags. This takes precedence over tag.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The semver range used to match against git repository tags. This takes precedence over tag.",
        SerializedName = @"semver",
        PossibleTypes = new [] { typeof(string) })]
        string GitRepositoryRefSemver { get; set; }
        /// <summary>The git repository tag name to checkout. This takes precedence over branch.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The git repository tag name to checkout. This takes precedence over branch.",
        SerializedName = @"tag",
        PossibleTypes = new [] { typeof(string) })]
        string GitRepositoryRefTag { get; set; }
        /// <summary>
        /// Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH",
        SerializedName = @"sshKnownHosts",
        PossibleTypes = new [] { typeof(string) })]
        string GitRepositorySshKnownHost { get; set; }
        /// <summary>
        /// The interval at which to re-reconcile the cluster git repository source with the remote.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The interval at which to re-reconcile the cluster git repository source with the remote.",
        SerializedName = @"syncIntervalInSeconds",
        PossibleTypes = new [] { typeof(long) })]
        long? GitRepositorySyncIntervalInSecond { get; set; }
        /// <summary>
        /// The maximum time to attempt to reconcile the cluster git repository source with the remote.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum time to attempt to reconcile the cluster git repository source with the remote.",
        SerializedName = @"timeoutInSeconds",
        PossibleTypes = new [] { typeof(long) })]
        long? GitRepositoryTimeoutInSecond { get; set; }
        /// <summary>The URL to sync for the flux configuration git repository.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The URL to sync for the flux configuration git repository.",
        SerializedName = @"url",
        PossibleTypes = new [] { typeof(string) })]
        string GitRepositoryUrl { get; set; }
        /// <summary>
        /// Array of kustomizations used to reconcile the artifact pulled by the source type on the cluster.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Array of kustomizations used to reconcile the artifact pulled by the source type on the cluster.",
        SerializedName = @"kustomizations",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IFluxConfigurationPatchPropertiesKustomizations) })]
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IFluxConfigurationPatchPropertiesKustomizations Kustomization { get; set; }
        /// <summary>The first layer matching the specified media type will be used.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The first layer matching the specified media type will be used.",
        SerializedName = @"mediaType",
        PossibleTypes = new [] { typeof(string) })]
        string LayerSelectorMediaType { get; set; }
        /// <summary>
        /// The operation to be performed on the selected layer. The default value is 'extract', but it can be set to 'copy'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The operation to be performed on the selected layer. The default value is 'extract', but it can be set to 'copy'.",
        SerializedName = @"operation",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Support.OperationType) })]
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Support.OperationType? LayerSelectorOperation { get; set; }
        /// <summary>The client Id for authenticating a Managed Identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The client Id for authenticating a Managed Identity.",
        SerializedName = @"clientId",
        PossibleTypes = new [] { typeof(string) })]
        string ManagedIdentityClientId { get; set; }
        /// <summary>Specify whether to allow connecting to a non-TLS HTTP container registry.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specify whether to allow connecting to a non-TLS HTTP container registry.",
        SerializedName = @"insecure",
        PossibleTypes = new [] { typeof(bool) })]
        bool? OciRepositoryInsecure { get; set; }
        /// <summary>
        /// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided
        /// configuration secrets.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.",
        SerializedName = @"localAuthRef",
        PossibleTypes = new [] { typeof(string) })]
        string OciRepositoryLocalAuthRef { get; set; }
        /// <summary>
        /// The semver range used to match against OCI repository tags. This takes precedence over tag.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The semver range used to match against OCI repository tags. This takes precedence over tag.",
        SerializedName = @"semver",
        PossibleTypes = new [] { typeof(string) })]
        string OciRepositoryRefSemver { get; set; }
        /// <summary>The OCI repository image tag name to pull. This defaults to 'latest'.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The OCI repository image tag name to pull. This defaults to 'latest'.",
        SerializedName = @"tag",
        PossibleTypes = new [] { typeof(string) })]
        string OciRepositoryRefTag { get; set; }
        /// <summary>The service account name to authenticate with the OCI repository.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The service account name to authenticate with the OCI repository.",
        SerializedName = @"serviceAccountName",
        PossibleTypes = new [] { typeof(string) })]
        string OciRepositoryServiceAccountName { get; set; }
        /// <summary>
        /// The interval at which to re-reconcile the cluster OCI repository source with the remote.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The interval at which to re-reconcile the cluster OCI repository source with the remote.",
        SerializedName = @"syncIntervalInSeconds",
        PossibleTypes = new [] { typeof(long) })]
        long? OciRepositorySyncIntervalInSecond { get; set; }
        /// <summary>
        /// The maximum time to attempt to reconcile the cluster OCI repository source with the remote.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum time to attempt to reconcile the cluster OCI repository source with the remote.",
        SerializedName = @"timeoutInSeconds",
        PossibleTypes = new [] { typeof(long) })]
        long? OciRepositoryTimeoutInSecond { get; set; }
        /// <summary>The URL to sync for the flux configuration OCI repository.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The URL to sync for the flux configuration OCI repository.",
        SerializedName = @"url",
        PossibleTypes = new [] { typeof(string) })]
        string OciRepositoryUrl { get; set; }
        /// <summary>
        /// Specifies whether to use Workload Identity to authenticate with the OCI repository.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether to use Workload Identity to authenticate with the OCI repository.",
        SerializedName = @"useWorkloadIdentity",
        PossibleTypes = new [] { typeof(bool) })]
        bool? OciRepositoryUseWorkloadIdentity { get; set; }
        /// <summary>The git repository branch name to checkout.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The git repository branch name to checkout.",
        SerializedName = @"branch",
        PossibleTypes = new [] { typeof(string) })]
        string RepositoryRefBranch { get; set; }
        /// <summary>
        /// The commit SHA to checkout. This value must be combined with the branch name to be valid. This takes precedence over semver.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The commit SHA to checkout. This value must be combined with the branch name to be valid. This takes precedence over semver.",
        SerializedName = @"commit",
        PossibleTypes = new [] { typeof(string) })]
        string RepositoryRefCommit { get; set; }
        /// <summary>
        /// The image digest to pull from OCI repository, the value should be in the format ‘sha256:’. This takes precedence over
        /// semver.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The image digest to pull from OCI repository, the value should be in the format ‘sha256:’. This takes precedence over semver.",
        SerializedName = @"digest",
        PossibleTypes = new [] { typeof(string) })]
        string RepositoryRefDigest { get; set; }
        /// <summary>Base64-encoded certificate used to authenticate a Service Principal</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Base64-encoded certificate used to authenticate a Service Principal ",
        SerializedName = @"clientCertificate",
        PossibleTypes = new [] { typeof(string) })]
        string ServicePrincipalClientCertificate { get; set; }
        /// <summary>The password for the certificate used to authenticate a Service Principal</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The password for the certificate used to authenticate a Service Principal ",
        SerializedName = @"clientCertificatePassword",
        PossibleTypes = new [] { typeof(string) })]
        string ServicePrincipalClientCertificatePassword { get; set; }
        /// <summary>
        /// Specifies whether to include x5c header in client claims when acquiring a token to enable subject name / issuer based
        /// authentication for the Client Certificate
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether to include x5c header in client claims when acquiring a token to enable subject name / issuer based authentication for the Client Certificate",
        SerializedName = @"clientCertificateSendChain",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ServicePrincipalClientCertificateSendChain { get; set; }
        /// <summary>The client Id for authenticating a Service Principal.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The client Id for authenticating a Service Principal.",
        SerializedName = @"clientId",
        PossibleTypes = new [] { typeof(string) })]
        string ServicePrincipalClientId { get; set; }
        /// <summary>The client secret for authenticating a Service Principal</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The client secret for authenticating a Service Principal",
        SerializedName = @"clientSecret",
        PossibleTypes = new [] { typeof(string) })]
        string ServicePrincipalClientSecret { get; set; }
        /// <summary>The tenant Id for authenticating a Service Principal</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The tenant Id for authenticating a Service Principal",
        SerializedName = @"tenantId",
        PossibleTypes = new [] { typeof(string) })]
        string ServicePrincipalTenantId { get; set; }
        /// <summary>Source Kind to pull the configuration data from.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Source Kind to pull the configuration data from.",
        SerializedName = @"sourceKind",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Support.SourceKindType) })]
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Support.SourceKindType? SourceKind { get; set; }
        /// <summary>
        /// Whether this configuration should suspend its reconciliation of its kustomizations and sources.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether this configuration should suspend its reconciliation of its kustomizations and sources.",
        SerializedName = @"suspend",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Suspend { get; set; }
        /// <summary>Base64-encoded CA certificate used to verify the server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Base64-encoded CA certificate used to verify the server.",
        SerializedName = @"caCertificate",
        PossibleTypes = new [] { typeof(string) })]
        string TlConfigCaCertificate { get; set; }
        /// <summary>
        /// Base64-encoded certificate used to authenticate a client with the OCI repository.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Base64-encoded certificate used to authenticate a client with the OCI repository.",
        SerializedName = @"clientCertificate",
        PossibleTypes = new [] { typeof(string) })]
        string TlConfigClientCertificate { get; set; }
        /// <summary>
        /// Base64-encoded private key used to authenticate a client with the OCI repository.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Base64-encoded private key used to authenticate a client with the OCI repository.",
        SerializedName = @"privateKey",
        PossibleTypes = new [] { typeof(string) })]
        string TlConfigPrivateKey { get; set; }
        /// <summary>
        /// Array defining the criteria for matching the OIDC identity while verifying an OCI artifact.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Array defining the criteria for matching the OIDC identity while verifying an OCI artifact.",
        SerializedName = @"matchOidcIdentity",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IMatchOidcIdentityPatchDefinition) })]
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IMatchOidcIdentityPatchDefinition[] VerifyMatchOidcIdentity { get; set; }
        /// <summary>Verification provider name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Verification provider name.",
        SerializedName = @"provider",
        PossibleTypes = new [] { typeof(string) })]
        string VerifyProvider { get; set; }
        /// <summary>An object containing trusted public keys of trusted authors.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An object containing trusted public keys of trusted authors.",
        SerializedName = @"verificationConfig",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IVerifyPatchDefinitionVerificationConfig) })]
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IVerifyPatchDefinitionVerificationConfig VerifyVerificationConfig { get; set; }

    }
    /// Updatable properties of an Flux Configuration Patch Request
    internal partial interface IFluxConfigurationPatchPropertiesInternal

    {
        /// <summary>Parameters to reconcile to the AzureBlob source kind type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IAzureBlobPatchDefinition AzureBlob { get; set; }
        /// <summary>The account key (shared key) to access the storage account</summary>
        string AzureBlobAccountKey { get; set; }
        /// <summary>
        /// The Azure Blob container name to sync from the url endpoint for the flux configuration.
        /// </summary>
        string AzureBlobContainerName { get; set; }
        /// <summary>
        /// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided
        /// configuration secrets.
        /// </summary>
        string AzureBlobLocalAuthRef { get; set; }
        /// <summary>Parameters to authenticate using a Managed Identity.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IManagedIdentityPatchDefinition AzureBlobManagedIdentity { get; set; }
        /// <summary>The Shared Access token to access the storage container</summary>
        string AzureBlobSasToken { get; set; }
        /// <summary>Parameters to authenticate using Service Principal.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IServicePrincipalPatchDefinition AzureBlobServicePrincipal { get; set; }
        /// <summary>
        /// The interval at which to re-reconcile the cluster Azure Blob source with the remote.
        /// </summary>
        long? AzureBlobSyncIntervalInSecond { get; set; }
        /// <summary>
        /// The maximum time to attempt to reconcile the cluster Azure Blob source with the remote.
        /// </summary>
        long? AzureBlobTimeoutInSecond { get; set; }
        /// <summary>The URL to sync for the flux configuration Azure Blob storage account.</summary>
        string AzureBlobUrl { get; set; }
        /// <summary>Parameters to reconcile to the Bucket source kind type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IBucketPatchDefinition Bucket { get; set; }
        /// <summary>Plaintext access key used to securely access the S3 bucket</summary>
        string BucketAccessKey { get; set; }
        /// <summary>
        /// Specify whether to use insecure communication when puling data from the S3 bucket.
        /// </summary>
        bool? BucketInsecure { get; set; }
        /// <summary>
        /// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided
        /// configuration secrets.
        /// </summary>
        string BucketLocalAuthRef { get; set; }
        /// <summary>The bucket name to sync from the url endpoint for the flux configuration.</summary>
        string BucketName { get; set; }
        /// <summary>
        /// The interval at which to re-reconcile the cluster bucket source with the remote.
        /// </summary>
        long? BucketSyncIntervalInSecond { get; set; }
        /// <summary>
        /// The maximum time to attempt to reconcile the cluster bucket source with the remote.
        /// </summary>
        long? BucketTimeoutInSecond { get; set; }
        /// <summary>The URL to sync for the flux configuration S3 bucket.</summary>
        string BucketUrl { get; set; }
        /// <summary>Key-value pairs of protected configuration settings for the configuration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IFluxConfigurationPatchPropertiesConfigurationProtectedSettings ConfigurationProtectedSetting { get; set; }
        /// <summary>Parameters to reconcile to the GitRepository source kind type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IGitRepositoryPatchDefinition GitRepository { get; set; }
        /// <summary>
        /// Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS
        /// </summary>
        string GitRepositoryHttpsCaCert { get; set; }
        /// <summary>Plaintext HTTPS username used to access private git repositories over HTTPS</summary>
        string GitRepositoryHttpsUser { get; set; }
        /// <summary>
        /// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided
        /// configuration secrets.
        /// </summary>
        string GitRepositoryLocalAuthRef { get; set; }
        /// <summary>The source reference for the GitRepository object.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IRepositoryRefDefinition GitRepositoryRef { get; set; }
        /// <summary>
        /// The semver range used to match against git repository tags. This takes precedence over tag.
        /// </summary>
        string GitRepositoryRefSemver { get; set; }
        /// <summary>The git repository tag name to checkout. This takes precedence over branch.</summary>
        string GitRepositoryRefTag { get; set; }
        /// <summary>
        /// Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH
        /// </summary>
        string GitRepositorySshKnownHost { get; set; }
        /// <summary>
        /// The interval at which to re-reconcile the cluster git repository source with the remote.
        /// </summary>
        long? GitRepositorySyncIntervalInSecond { get; set; }
        /// <summary>
        /// The maximum time to attempt to reconcile the cluster git repository source with the remote.
        /// </summary>
        long? GitRepositoryTimeoutInSecond { get; set; }
        /// <summary>The URL to sync for the flux configuration git repository.</summary>
        string GitRepositoryUrl { get; set; }
        /// <summary>
        /// Array of kustomizations used to reconcile the artifact pulled by the source type on the cluster.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IFluxConfigurationPatchPropertiesKustomizations Kustomization { get; set; }
        /// <summary>The first layer matching the specified media type will be used.</summary>
        string LayerSelectorMediaType { get; set; }
        /// <summary>
        /// The operation to be performed on the selected layer. The default value is 'extract', but it can be set to 'copy'.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Support.OperationType? LayerSelectorOperation { get; set; }
        /// <summary>The client Id for authenticating a Managed Identity.</summary>
        string ManagedIdentityClientId { get; set; }
        /// <summary>Parameters to reconcile to the OCIRepository source kind type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryPatchDefinition OciRepository { get; set; }
        /// <summary>Specify whether to allow connecting to a non-TLS HTTP container registry.</summary>
        bool? OciRepositoryInsecure { get; set; }
        /// <summary>The layer to be pulled from the OCI artifact.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.ILayerSelectorPatchDefinition OciRepositoryLayerSelector { get; set; }
        /// <summary>
        /// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided
        /// configuration secrets.
        /// </summary>
        string OciRepositoryLocalAuthRef { get; set; }
        /// <summary>The source reference for the OCIRepository object.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IOciRepositoryRefPatchDefinition OciRepositoryRef { get; set; }
        /// <summary>
        /// The semver range used to match against OCI repository tags. This takes precedence over tag.
        /// </summary>
        string OciRepositoryRefSemver { get; set; }
        /// <summary>The OCI repository image tag name to pull. This defaults to 'latest'.</summary>
        string OciRepositoryRefTag { get; set; }
        /// <summary>The service account name to authenticate with the OCI repository.</summary>
        string OciRepositoryServiceAccountName { get; set; }
        /// <summary>
        /// The interval at which to re-reconcile the cluster OCI repository source with the remote.
        /// </summary>
        long? OciRepositorySyncIntervalInSecond { get; set; }
        /// <summary>
        /// The maximum time to attempt to reconcile the cluster OCI repository source with the remote.
        /// </summary>
        long? OciRepositoryTimeoutInSecond { get; set; }
        /// <summary>Parameters to authenticate using TLS config for OCI repository.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.ITlsConfigPatchDefinition OciRepositoryTlsConfig { get; set; }
        /// <summary>The URL to sync for the flux configuration OCI repository.</summary>
        string OciRepositoryUrl { get; set; }
        /// <summary>
        /// Specifies whether to use Workload Identity to authenticate with the OCI repository.
        /// </summary>
        bool? OciRepositoryUseWorkloadIdentity { get; set; }
        /// <summary>Verification of the authenticity of an OCI Artifact.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IVerifyPatchDefinition OciRepositoryVerify { get; set; }
        /// <summary>The git repository branch name to checkout.</summary>
        string RepositoryRefBranch { get; set; }
        /// <summary>
        /// The commit SHA to checkout. This value must be combined with the branch name to be valid. This takes precedence over semver.
        /// </summary>
        string RepositoryRefCommit { get; set; }
        /// <summary>
        /// The image digest to pull from OCI repository, the value should be in the format ‘sha256:’. This takes precedence over
        /// semver.
        /// </summary>
        string RepositoryRefDigest { get; set; }
        /// <summary>Base64-encoded certificate used to authenticate a Service Principal</summary>
        string ServicePrincipalClientCertificate { get; set; }
        /// <summary>The password for the certificate used to authenticate a Service Principal</summary>
        string ServicePrincipalClientCertificatePassword { get; set; }
        /// <summary>
        /// Specifies whether to include x5c header in client claims when acquiring a token to enable subject name / issuer based
        /// authentication for the Client Certificate
        /// </summary>
        bool? ServicePrincipalClientCertificateSendChain { get; set; }
        /// <summary>The client Id for authenticating a Service Principal.</summary>
        string ServicePrincipalClientId { get; set; }
        /// <summary>The client secret for authenticating a Service Principal</summary>
        string ServicePrincipalClientSecret { get; set; }
        /// <summary>The tenant Id for authenticating a Service Principal</summary>
        string ServicePrincipalTenantId { get; set; }
        /// <summary>Source Kind to pull the configuration data from.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Support.SourceKindType? SourceKind { get; set; }
        /// <summary>
        /// Whether this configuration should suspend its reconciliation of its kustomizations and sources.
        /// </summary>
        bool? Suspend { get; set; }
        /// <summary>Base64-encoded CA certificate used to verify the server.</summary>
        string TlConfigCaCertificate { get; set; }
        /// <summary>
        /// Base64-encoded certificate used to authenticate a client with the OCI repository.
        /// </summary>
        string TlConfigClientCertificate { get; set; }
        /// <summary>
        /// Base64-encoded private key used to authenticate a client with the OCI repository.
        /// </summary>
        string TlConfigPrivateKey { get; set; }
        /// <summary>
        /// Array defining the criteria for matching the OIDC identity while verifying an OCI artifact.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IMatchOidcIdentityPatchDefinition[] VerifyMatchOidcIdentity { get; set; }
        /// <summary>Verification provider name.</summary>
        string VerifyProvider { get; set; }
        /// <summary>An object containing trusted public keys of trusted authors.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IVerifyPatchDefinitionVerificationConfig VerifyVerificationConfig { get; set; }

    }
}