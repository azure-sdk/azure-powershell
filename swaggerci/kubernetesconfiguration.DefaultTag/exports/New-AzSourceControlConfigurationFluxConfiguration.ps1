
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create a new Kubernetes Flux Configuration.
.Description
Create a new Kubernetes Flux Configuration.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IFluxConfiguration
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

VERIFYMATCHOIDCIDENTITY <IMatchOidcIdentityDefinition[]>: Array defining the criteria for matching the identity while verifying an OCI artifact.
  [Issuer <String>]: The regex pattern to match against to verify the OIDC issuer.
  [Subject <String>]: The regex pattern to match against to verify the identity subject.
.Link
https://learn.microsoft.com/powershell/module/az.sourcecontrolconfiguration/new-azsourcecontrolconfigurationfluxconfiguration
#>
function New-AzSourceControlConfigurationFluxConfiguration {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IFluxConfiguration])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Path')]
    [System.String]
    # The name of the kubernetes cluster.
    ${ClusterName},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Path')]
    [System.String]
    # The Kubernetes cluster resource name - i.e.
    # managedClusters, connectedClusters, provisionedClusters.
    ${ClusterResourceName},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Path')]
    [System.String]
    # The Kubernetes cluster RP - i.e.
    # Microsoft.ContainerService, Microsoft.Kubernetes, Microsoft.HybridContainerService.
    ${ClusterRp},

    [Parameter(Mandatory)]
    [Alias('FluxConfigurationName')]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Path')]
    [System.String]
    # Name of the Flux Configuration.
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    ${SubscriptionId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # The account key (shared key) to access the storage account
    ${AzureBlobAccountKey},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # The Azure Blob container name to sync from the url endpoint for the flux configuration.
    ${AzureBlobContainerName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
    ${AzureBlobLocalAuthRef},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # The Shared Access token to access the storage container
    ${AzureBlobSasToken},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.Int64]
    # The interval at which to re-reconcile the cluster Azure Blob source with the remote.
    ${AzureBlobSyncIntervalInSecond},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.Int64]
    # The maximum time to attempt to reconcile the cluster Azure Blob source with the remote.
    ${AzureBlobTimeoutInSecond},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # The URL to sync for the flux configuration Azure Blob storage account.
    ${AzureBlobUrl},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # Plaintext access key used to securely access the S3 bucket
    ${BucketAccessKey},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Specify whether to use insecure communication when puling data from the S3 bucket.
    ${BucketInsecure},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
    ${BucketLocalAuthRef},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # The bucket name to sync from the url endpoint for the flux configuration.
    ${BucketName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.Int64]
    # The interval at which to re-reconcile the cluster bucket source with the remote.
    ${BucketSyncIntervalInSecond},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.Int64]
    # The maximum time to attempt to reconcile the cluster bucket source with the remote.
    ${BucketTimeoutInSecond},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # The URL to sync for the flux configuration S3 bucket.
    ${BucketUrl},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IFluxConfigurationPropertiesConfigurationProtectedSettings]))]
    [System.Collections.Hashtable]
    # Key-value pairs of protected configuration settings for the configuration
    ${ConfigurationProtectedSetting},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS
    ${GitRepositoryHttpsCaCert},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # Plaintext HTTPS username used to access private git repositories over HTTPS
    ${GitRepositoryHttpsUser},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
    ${GitRepositoryLocalAuthRef},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # The semver range used to match against git repository tags.
    # This takes precedence over tag.
    ${GitRepositoryRefSemver},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # The git repository tag name to checkout.
    # This takes precedence over branch.
    ${GitRepositoryRefTag},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH
    ${GitRepositorySshKnownHost},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.Int64]
    # The interval at which to re-reconcile the cluster git repository source with the remote.
    ${GitRepositorySyncIntervalInSecond},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.Int64]
    # The maximum time to attempt to reconcile the cluster git repository source with the remote.
    ${GitRepositoryTimeoutInSecond},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # The URL to sync for the flux configuration git repository.
    ${GitRepositoryUrl},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IFluxConfigurationPropertiesKustomizations]))]
    [System.Collections.Hashtable]
    # Array of kustomizations used to reconcile the artifact pulled by the source type on the cluster.
    ${Kustomization},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # The first layer matching the specified media type will be used.
    ${LayerSelectorMediaType},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Support.OperationType])]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Support.OperationType]
    # The operation to be performed on the selected layer.
    # The default value is 'extract', but it can be set to 'copy'.
    ${LayerSelectorOperation},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # The client Id for authenticating a Managed Identity.
    ${ManagedIdentityClientId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # The namespace to which this configuration is installed to.
    # Maximum of 253 lower case alphanumeric characters, hyphen and period only.
    ${Namespace},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Specify whether to allow connecting to a non-TLS HTTP container registry.
    ${OciRepositoryInsecure},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
    ${OciRepositoryLocalAuthRef},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # The semver range used to match against OCI repository tags.
    # This takes precedence over tag.
    ${OciRepositoryRefSemver},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # The OCI repository image tag name to pull.
    # This defaults to 'latest'.
    ${OciRepositoryRefTag},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # The service account name to authenticate with the OCI repository.
    ${OciRepositoryServiceAccountName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.Int64]
    # The interval at which to re-reconcile the cluster OCI repository source with the remote.
    ${OciRepositorySyncIntervalInSecond},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.Int64]
    # The maximum time to attempt to reconcile the cluster OCI repository source with the remote.
    ${OciRepositoryTimeoutInSecond},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # The URL to sync for the flux configuration OCI repository.
    ${OciRepositoryUrl},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Specifies whether to use Workload Identity to authenticate with the OCI repository.
    ${OciRepositoryUseWorkloadIdentity},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # Maximum duration to wait for flux configuration reconciliation.
    # E.g PT1H, PT5M, P1D
    ${ReconciliationWaitDuration},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # The git repository branch name to checkout.
    ${RepositoryRefBranch},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # The commit SHA to checkout.
    # This value must be combined with the branch name to be valid.
    # This takes precedence over semver.
    ${RepositoryRefCommit},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # The image digest to pull from OCI repository, the value should be in the format ‘sha256:’.
    # This takes precedence over semver.
    ${RepositoryRefDigest},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Support.ScopeType])]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Support.ScopeType]
    # Scope at which the operator will be installed.
    ${Scope},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # Base64-encoded certificate used to authenticate a Service Principal
    ${ServicePrincipalClientCertificate},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # The password for the certificate used to authenticate a Service Principal
    ${ServicePrincipalClientCertificatePassword},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Specifies whether to include x5c header in client claims when acquiring a token to enable subject name / issuer based authentication for the Client Certificate
    ${ServicePrincipalClientCertificateSendChain},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # The client Id for authenticating a Service Principal.
    ${ServicePrincipalClientId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # The client secret for authenticating a Service Principal
    ${ServicePrincipalClientSecret},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # The tenant Id for authenticating a Service Principal
    ${ServicePrincipalTenantId},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Support.SourceKindType])]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Support.SourceKindType]
    # Source Kind to pull the configuration data from.
    ${SourceKind},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Whether this configuration should suspend its reconciliation of its kustomizations and sources.
    ${Suspend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # Base64-encoded CA certificate used to verify the server.
    ${TlConfigCaCertificate},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # Base64-encoded certificate used to authenticate a client with the OCI repository.
    ${TlConfigClientCertificate},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # Base64-encoded private key used to authenticate a client with the OCI repository.
    ${TlConfigPrivateKey},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IMatchOidcIdentityDefinition[]]
    # Array defining the criteria for matching the identity while verifying an OCI artifact.
    # To construct, see NOTES section for VERIFYMATCHOIDCIDENTITY properties and create a hash table.
    ${VerifyMatchOidcIdentity},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.String]
    # Verification provider name.
    ${VerifyProvider},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Models.Api20240401Preview.IVerifyDefinitionVerificationConfig]))]
    [System.Collections.Hashtable]
    # An object containing trusted public keys of trusted authors.
    ${VerifyVerificationConfig},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Whether flux configuration deployment should wait for cluster to reconcile the kustomizations.
    ${WaitForReconciliation},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.SourceControlConfiguration.private\New-AzSourceControlConfigurationFluxConfiguration_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $testPlayback = $false
            $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.SourceControlConfiguration.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
