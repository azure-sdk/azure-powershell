// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Extensions;

    /// <summary>A class that describes the properties of the resource</summary>
    public partial class SignalRProperties :
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRProperties,
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRPropertiesInternal
    {

        /// <summary>Backing field for <see cref="Cor" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRCorsSettings _cor;

        /// <summary>Cross-Origin Resource Sharing (CORS) settings.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRCorsSettings Cor { get => (this._cor = this._cor ?? new Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.SignalRCorsSettings()); set => this._cor = value; }

        /// <summary>
        /// Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345).
        /// Use "*" to allow all. If omitted, allow all by default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public string[] CorAllowedOrigin { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRCorsSettingsInternal)Cor).AllowedOrigin; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRCorsSettingsInternal)Cor).AllowedOrigin = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="DisableAadAuth" /> property.</summary>
        private bool? _disableAadAuth;

        /// <summary>
        /// DisableLocalAuth
        /// Enable or disable aad auth
        /// When set as true, connection with AuthType=aad won't work.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Owned)]
        public bool? DisableAadAuth { get => this._disableAadAuth; set => this._disableAadAuth = value; }

        /// <summary>Backing field for <see cref="DisableLocalAuth" /> property.</summary>
        private bool? _disableLocalAuth;

        /// <summary>
        /// DisableLocalAuth
        /// Enable or disable local auth with AccessKey
        /// When set as true, connection with AccessKey=xxx won't work.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Owned)]
        public bool? DisableLocalAuth { get => this._disableLocalAuth; set => this._disableLocalAuth = value; }

        /// <summary>Backing field for <see cref="ExternalIP" /> property.</summary>
        private string _externalIP;

        /// <summary>The publicly accessible IP of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Owned)]
        public string ExternalIP { get => this._externalIP; }

        /// <summary>Backing field for <see cref="Feature" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRFeature[] _feature;

        /// <summary>
        /// List of the featureFlags.
        ///
        /// FeatureFlags that are not included in the parameters for the update operation will not be modified.
        /// And the response will only include featureFlags that are explicitly set.
        /// When a featureFlag is not explicitly set, its globally default value will be used
        /// But keep in mind, the default value doesn't mean "false". It varies in terms of different FeatureFlags.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRFeature[] Feature { get => this._feature; set => this._feature = value; }

        /// <summary>Backing field for <see cref="HostName" /> property.</summary>
        private string _hostName;

        /// <summary>FQDN of the service instance.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Owned)]
        public string HostName { get => this._hostName; }

        /// <summary>Backing field for <see cref="HostNamePrefix" /> property.</summary>
        private string _hostNamePrefix;

        /// <summary>Deprecated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Owned)]
        public string HostNamePrefix { get => this._hostNamePrefix; }

        /// <summary>Backing field for <see cref="LiveTraceConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ILiveTraceConfiguration _liveTraceConfiguration;

        /// <summary>Live trace configuration of a Microsoft.SignalRService resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ILiveTraceConfiguration LiveTraceConfiguration { get => (this._liveTraceConfiguration = this._liveTraceConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.LiveTraceConfiguration()); set => this._liveTraceConfiguration = value; }

        /// <summary>Gets or sets the list of category configurations.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ILiveTraceCategory[] LiveTraceConfigurationCategory { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ILiveTraceConfigurationInternal)LiveTraceConfiguration).Category; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ILiveTraceConfigurationInternal)LiveTraceConfiguration).Category = value ?? null /* arrayOf */; }

        /// <summary>
        /// Indicates whether or not enable live trace.
        /// When it's set to true, live trace client can connect to the service.
        /// Otherwise, live trace client can't connect to the service, so that you are unable to receive any log, no matter what you
        /// configure in "categories".
        /// Available values: true, false.
        /// Case insensitive.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public string LiveTraceConfigurationEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ILiveTraceConfigurationInternal)LiveTraceConfiguration).Enabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ILiveTraceConfigurationInternal)LiveTraceConfiguration).Enabled = value ?? null; }

        /// <summary>Internal Acessors for Cor</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRCorsSettings Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRPropertiesInternal.Cor { get => (this._cor = this._cor ?? new Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.SignalRCorsSettings()); set { {_cor = value;} } }

        /// <summary>Internal Acessors for ExternalIP</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRPropertiesInternal.ExternalIP { get => this._externalIP; set { {_externalIP = value;} } }

        /// <summary>Internal Acessors for HostName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRPropertiesInternal.HostName { get => this._hostName; set { {_hostName = value;} } }

        /// <summary>Internal Acessors for HostNamePrefix</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRPropertiesInternal.HostNamePrefix { get => this._hostNamePrefix; set { {_hostNamePrefix = value;} } }

        /// <summary>Internal Acessors for LiveTraceConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ILiveTraceConfiguration Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRPropertiesInternal.LiveTraceConfiguration { get => (this._liveTraceConfiguration = this._liveTraceConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.LiveTraceConfiguration()); set { {_liveTraceConfiguration = value;} } }

        /// <summary>Internal Acessors for NetworkAcL</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRNetworkAcls Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRPropertiesInternal.NetworkAcL { get => (this._networkAcL = this._networkAcL ?? new Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.SignalRNetworkAcls()); set { {_networkAcL = value;} } }

        /// <summary>Internal Acessors for NetworkAcLPublicNetwork</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.INetworkAcl Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRPropertiesInternal.NetworkAcLPublicNetwork { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRNetworkAclsInternal)NetworkAcL).PublicNetwork; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRNetworkAclsInternal)NetworkAcL).PublicNetwork = value; }

        /// <summary>Internal Acessors for PrivateEndpointConnection</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IPrivateEndpointConnection[] Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRPropertiesInternal.PrivateEndpointConnection { get => this._privateEndpointConnection; set { {_privateEndpointConnection = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.ProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRPropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Internal Acessors for PublicPort</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRPropertiesInternal.PublicPort { get => this._publicPort; set { {_publicPort = value;} } }

        /// <summary>Internal Acessors for ResourceLogConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IResourceLogConfiguration Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRPropertiesInternal.ResourceLogConfiguration { get => (this._resourceLogConfiguration = this._resourceLogConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ResourceLogConfiguration()); set { {_resourceLogConfiguration = value;} } }

        /// <summary>Internal Acessors for ServerPort</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRPropertiesInternal.ServerPort { get => this._serverPort; set { {_serverPort = value;} } }

        /// <summary>Internal Acessors for Serverless</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IServerlessSettings Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRPropertiesInternal.Serverless { get => (this._serverless = this._serverless ?? new Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ServerlessSettings()); set { {_serverless = value;} } }

        /// <summary>Internal Acessors for SharedPrivateLinkResource</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISharedPrivateLinkResource[] Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRPropertiesInternal.SharedPrivateLinkResource { get => this._sharedPrivateLinkResource; set { {_sharedPrivateLinkResource = value;} } }

        /// <summary>Internal Acessors for Tl</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRTlsSettings Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRPropertiesInternal.Tl { get => (this._tl = this._tl ?? new Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.SignalRTlsSettings()); set { {_tl = value;} } }

        /// <summary>Internal Acessors for Upstream</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IServerlessUpstreamSettings Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRPropertiesInternal.Upstream { get => (this._upstream = this._upstream ?? new Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ServerlessUpstreamSettings()); set { {_upstream = value;} } }

        /// <summary>Internal Acessors for Version</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRPropertiesInternal.Version { get => this._version; set { {_version = value;} } }

        /// <summary>Backing field for <see cref="NetworkAcL" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRNetworkAcls _networkAcL;

        /// <summary>Network ACLs for the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRNetworkAcls NetworkAcL { get => (this._networkAcL = this._networkAcL ?? new Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.SignalRNetworkAcls()); set => this._networkAcL = value; }

        /// <summary>Azure Networking ACL Action.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.AclAction? NetworkAcLDefaultAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRNetworkAclsInternal)NetworkAcL).DefaultAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRNetworkAclsInternal)NetworkAcL).DefaultAction = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.AclAction)""); }

        /// <summary>ACLs for requests from private endpoints</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IPrivateEndpointAcl[] NetworkAcLPrivateEndpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRNetworkAclsInternal)NetworkAcL).PrivateEndpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRNetworkAclsInternal)NetworkAcL).PrivateEndpoint = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="PrivateEndpointConnection" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IPrivateEndpointConnection[] _privateEndpointConnection;

        /// <summary>Private endpoint connections to the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IPrivateEndpointConnection[] PrivateEndpointConnection { get => this._privateEndpointConnection; }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.ProvisioningState? _provisioningState;

        /// <summary>Provisioning state of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.ProvisioningState? ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="PublicNetworkAccess" /> property.</summary>
        private string _publicNetworkAccess;

        /// <summary>
        /// Enable or disable public network access. Default to "Enabled".
        /// When it's Enabled, network ACLs still apply.
        /// When it's Disabled, public network access is always disabled no matter what you set in network ACLs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Owned)]
        public string PublicNetworkAccess { get => this._publicNetworkAccess; set => this._publicNetworkAccess = value; }

        /// <summary>
        /// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.SignalRRequestType[] PublicNetworkAllow { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRNetworkAclsInternal)NetworkAcL).PublicNetworkAllow; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRNetworkAclsInternal)NetworkAcL).PublicNetworkAllow = value ?? null /* arrayOf */; }

        /// <summary>
        /// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.SignalRRequestType[] PublicNetworkDeny { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRNetworkAclsInternal)NetworkAcL).PublicNetworkDeny; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRNetworkAclsInternal)NetworkAcL).PublicNetworkDeny = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="PublicPort" /> property.</summary>
        private int? _publicPort;

        /// <summary>
        /// The publicly accessible port of the resource which is designed for browser/client side usage.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Owned)]
        public int? PublicPort { get => this._publicPort; }

        /// <summary>Backing field for <see cref="ResourceLogConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IResourceLogConfiguration _resourceLogConfiguration;

        /// <summary>Resource log configuration of a Microsoft.SignalRService resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IResourceLogConfiguration ResourceLogConfiguration { get => (this._resourceLogConfiguration = this._resourceLogConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ResourceLogConfiguration()); set => this._resourceLogConfiguration = value; }

        /// <summary>Gets or sets the list of category configurations.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IResourceLogCategory[] ResourceLogConfigurationCategory { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IResourceLogConfigurationInternal)ResourceLogConfiguration).Category; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IResourceLogConfigurationInternal)ResourceLogConfiguration).Category = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="ServerPort" /> property.</summary>
        private int? _serverPort;

        /// <summary>
        /// The publicly accessible port of the resource which is designed for customer server side usage.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Owned)]
        public int? ServerPort { get => this._serverPort; }

        /// <summary>Backing field for <see cref="Serverless" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IServerlessSettings _serverless;

        /// <summary>Serverless settings.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IServerlessSettings Serverless { get => (this._serverless = this._serverless ?? new Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ServerlessSettings()); set => this._serverless = value; }

        /// <summary>
        /// Gets or sets Client Connection Timeout. Optional to be set.
        /// Value in seconds.
        /// Default value is 30 seconds.
        /// Customer should set the timeout to a shorter period if messages are expected to be sent in shorter intervals,
        /// and want the client to disconnect more quickly after the last message is sent.
        /// You can set the timeout to a longer period if messages are expected to be sent in longer intervals,
        /// and they want to keep the same client connection alive during this session.
        /// The service considers the client disconnected if it hasn't received a message (including keep-alive) in this interval.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public int? ServerlessConnectionTimeoutInSecond { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IServerlessSettingsInternal)Serverless).ConnectionTimeoutInSecond; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IServerlessSettingsInternal)Serverless).ConnectionTimeoutInSecond = value ?? default(int); }

        /// <summary>Backing field for <see cref="SharedPrivateLinkResource" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISharedPrivateLinkResource[] _sharedPrivateLinkResource;

        /// <summary>The list of shared private link resources.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISharedPrivateLinkResource[] SharedPrivateLinkResource { get => this._sharedPrivateLinkResource; }

        /// <summary>Backing field for <see cref="Tl" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRTlsSettings _tl;

        /// <summary>TLS settings for the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRTlsSettings Tl { get => (this._tl = this._tl ?? new Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.SignalRTlsSettings()); set => this._tl = value; }

        /// <summary>Request client certificate during TLS handshake if enabled</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public bool? TlClientCertEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRTlsSettingsInternal)Tl).ClientCertEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRTlsSettingsInternal)Tl).ClientCertEnabled = value ?? default(bool); }

        /// <summary>Backing field for <see cref="Upstream" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IServerlessUpstreamSettings _upstream;

        /// <summary>The settings for the Upstream when the service is in server-less mode.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IServerlessUpstreamSettings Upstream { get => (this._upstream = this._upstream ?? new Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ServerlessUpstreamSettings()); set => this._upstream = value; }

        /// <summary>
        /// Gets or sets the list of Upstream URL templates. Order matters, and the first matching template takes effects.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IUpstreamTemplate[] UpstreamTemplate { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IServerlessUpstreamSettingsInternal)Upstream).Template; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IServerlessUpstreamSettingsInternal)Upstream).Template = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="Version" /> property.</summary>
        private string _version;

        /// <summary>
        /// Version of the resource. Probably you need the same or higher version of client SDKs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Owned)]
        public string Version { get => this._version; }

        /// <summary>Creates an new <see cref="SignalRProperties" /> instance.</summary>
        public SignalRProperties()
        {

        }
    }
    /// A class that describes the properties of the resource
    public partial interface ISignalRProperties :
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345).
        /// Use "*" to allow all. If omitted, allow all by default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345). Use ""*"" to allow all. If omitted, allow all by default.",
        SerializedName = @"allowedOrigins",
        PossibleTypes = new [] { typeof(string) })]
        string[] CorAllowedOrigin { get; set; }
        /// <summary>
        /// DisableLocalAuth
        /// Enable or disable aad auth
        /// When set as true, connection with AuthType=aad won't work.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"DisableLocalAuth
        Enable or disable aad auth
        When set as true, connection with AuthType=aad won't work.",
        SerializedName = @"disableAadAuth",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DisableAadAuth { get; set; }
        /// <summary>
        /// DisableLocalAuth
        /// Enable or disable local auth with AccessKey
        /// When set as true, connection with AccessKey=xxx won't work.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"DisableLocalAuth
        Enable or disable local auth with AccessKey
        When set as true, connection with AccessKey=xxx won't work.",
        SerializedName = @"disableLocalAuth",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DisableLocalAuth { get; set; }
        /// <summary>The publicly accessible IP of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The publicly accessible IP of the resource.",
        SerializedName = @"externalIP",
        PossibleTypes = new [] { typeof(string) })]
        string ExternalIP { get;  }
        /// <summary>
        /// List of the featureFlags.
        ///
        /// FeatureFlags that are not included in the parameters for the update operation will not be modified.
        /// And the response will only include featureFlags that are explicitly set.
        /// When a featureFlag is not explicitly set, its globally default value will be used
        /// But keep in mind, the default value doesn't mean "false". It varies in terms of different FeatureFlags.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of the featureFlags.

        FeatureFlags that are not included in the parameters for the update operation will not be modified.
        And the response will only include featureFlags that are explicitly set.
        When a featureFlag is not explicitly set, its globally default value will be used
        But keep in mind, the default value doesn't mean ""false"". It varies in terms of different FeatureFlags.",
        SerializedName = @"features",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRFeature) })]
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRFeature[] Feature { get; set; }
        /// <summary>FQDN of the service instance.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"FQDN of the service instance.",
        SerializedName = @"hostName",
        PossibleTypes = new [] { typeof(string) })]
        string HostName { get;  }
        /// <summary>Deprecated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Deprecated.",
        SerializedName = @"hostNamePrefix",
        PossibleTypes = new [] { typeof(string) })]
        string HostNamePrefix { get;  }
        /// <summary>Gets or sets the list of category configurations.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the list of category configurations.",
        SerializedName = @"categories",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ILiveTraceCategory) })]
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ILiveTraceCategory[] LiveTraceConfigurationCategory { get; set; }
        /// <summary>
        /// Indicates whether or not enable live trace.
        /// When it's set to true, live trace client can connect to the service.
        /// Otherwise, live trace client can't connect to the service, so that you are unable to receive any log, no matter what you
        /// configure in "categories".
        /// Available values: true, false.
        /// Case insensitive.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether or not enable live trace.
        When it's set to true, live trace client can connect to the service.
        Otherwise, live trace client can't connect to the service, so that you are unable to receive any log, no matter what you configure in ""categories"".
        Available values: true, false.
        Case insensitive.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(string) })]
        string LiveTraceConfigurationEnabled { get; set; }
        /// <summary>Azure Networking ACL Action.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Azure Networking ACL Action.",
        SerializedName = @"defaultAction",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.AclAction) })]
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.AclAction? NetworkAcLDefaultAction { get; set; }
        /// <summary>ACLs for requests from private endpoints</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"ACLs for requests from private endpoints",
        SerializedName = @"privateEndpoints",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IPrivateEndpointAcl) })]
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IPrivateEndpointAcl[] NetworkAcLPrivateEndpoint { get; set; }
        /// <summary>Private endpoint connections to the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Private endpoint connections to the resource.",
        SerializedName = @"privateEndpointConnections",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IPrivateEndpointConnection) })]
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IPrivateEndpointConnection[] PrivateEndpointConnection { get;  }
        /// <summary>Provisioning state of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Provisioning state of the resource.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.ProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.ProvisioningState? ProvisioningState { get;  }
        /// <summary>
        /// Enable or disable public network access. Default to "Enabled".
        /// When it's Enabled, network ACLs still apply.
        /// When it's Disabled, public network access is always disabled no matter what you set in network ACLs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable or disable public network access. Default to ""Enabled"".
        When it's Enabled, network ACLs still apply.
        When it's Disabled, public network access is always disabled no matter what you set in network ACLs.",
        SerializedName = @"publicNetworkAccess",
        PossibleTypes = new [] { typeof(string) })]
        string PublicNetworkAccess { get; set; }
        /// <summary>
        /// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.",
        SerializedName = @"allow",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.SignalRRequestType) })]
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.SignalRRequestType[] PublicNetworkAllow { get; set; }
        /// <summary>
        /// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.",
        SerializedName = @"deny",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.SignalRRequestType) })]
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.SignalRRequestType[] PublicNetworkDeny { get; set; }
        /// <summary>
        /// The publicly accessible port of the resource which is designed for browser/client side usage.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The publicly accessible port of the resource which is designed for browser/client side usage.",
        SerializedName = @"publicPort",
        PossibleTypes = new [] { typeof(int) })]
        int? PublicPort { get;  }
        /// <summary>Gets or sets the list of category configurations.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the list of category configurations.",
        SerializedName = @"categories",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IResourceLogCategory) })]
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IResourceLogCategory[] ResourceLogConfigurationCategory { get; set; }
        /// <summary>
        /// The publicly accessible port of the resource which is designed for customer server side usage.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The publicly accessible port of the resource which is designed for customer server side usage.",
        SerializedName = @"serverPort",
        PossibleTypes = new [] { typeof(int) })]
        int? ServerPort { get;  }
        /// <summary>
        /// Gets or sets Client Connection Timeout. Optional to be set.
        /// Value in seconds.
        /// Default value is 30 seconds.
        /// Customer should set the timeout to a shorter period if messages are expected to be sent in shorter intervals,
        /// and want the client to disconnect more quickly after the last message is sent.
        /// You can set the timeout to a longer period if messages are expected to be sent in longer intervals,
        /// and they want to keep the same client connection alive during this session.
        /// The service considers the client disconnected if it hasn't received a message (including keep-alive) in this interval.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets Client Connection Timeout. Optional to be set.
        Value in seconds.
        Default value is 30 seconds.
        Customer should set the timeout to a shorter period if messages are expected to be sent in shorter intervals,
        and want the client to disconnect more quickly after the last message is sent.
        You can set the timeout to a longer period if messages are expected to be sent in longer intervals,
        and they want to keep the same client connection alive during this session.
        The service considers the client disconnected if it hasn't received a message (including keep-alive) in this interval.",
        SerializedName = @"connectionTimeoutInSeconds",
        PossibleTypes = new [] { typeof(int) })]
        int? ServerlessConnectionTimeoutInSecond { get; set; }
        /// <summary>The list of shared private link resources.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The list of shared private link resources.",
        SerializedName = @"sharedPrivateLinkResources",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISharedPrivateLinkResource) })]
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISharedPrivateLinkResource[] SharedPrivateLinkResource { get;  }
        /// <summary>Request client certificate during TLS handshake if enabled</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Request client certificate during TLS handshake if enabled",
        SerializedName = @"clientCertEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? TlClientCertEnabled { get; set; }
        /// <summary>
        /// Gets or sets the list of Upstream URL templates. Order matters, and the first matching template takes effects.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the list of Upstream URL templates. Order matters, and the first matching template takes effects.",
        SerializedName = @"templates",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IUpstreamTemplate) })]
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IUpstreamTemplate[] UpstreamTemplate { get; set; }
        /// <summary>
        /// Version of the resource. Probably you need the same or higher version of client SDKs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Version of the resource. Probably you need the same or higher version of client SDKs.",
        SerializedName = @"version",
        PossibleTypes = new [] { typeof(string) })]
        string Version { get;  }

    }
    /// A class that describes the properties of the resource
    internal partial interface ISignalRPropertiesInternal

    {
        /// <summary>Cross-Origin Resource Sharing (CORS) settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRCorsSettings Cor { get; set; }
        /// <summary>
        /// Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345).
        /// Use "*" to allow all. If omitted, allow all by default.
        /// </summary>
        string[] CorAllowedOrigin { get; set; }
        /// <summary>
        /// DisableLocalAuth
        /// Enable or disable aad auth
        /// When set as true, connection with AuthType=aad won't work.
        /// </summary>
        bool? DisableAadAuth { get; set; }
        /// <summary>
        /// DisableLocalAuth
        /// Enable or disable local auth with AccessKey
        /// When set as true, connection with AccessKey=xxx won't work.
        /// </summary>
        bool? DisableLocalAuth { get; set; }
        /// <summary>The publicly accessible IP of the resource.</summary>
        string ExternalIP { get; set; }
        /// <summary>
        /// List of the featureFlags.
        ///
        /// FeatureFlags that are not included in the parameters for the update operation will not be modified.
        /// And the response will only include featureFlags that are explicitly set.
        /// When a featureFlag is not explicitly set, its globally default value will be used
        /// But keep in mind, the default value doesn't mean "false". It varies in terms of different FeatureFlags.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRFeature[] Feature { get; set; }
        /// <summary>FQDN of the service instance.</summary>
        string HostName { get; set; }
        /// <summary>Deprecated.</summary>
        string HostNamePrefix { get; set; }
        /// <summary>Live trace configuration of a Microsoft.SignalRService resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ILiveTraceConfiguration LiveTraceConfiguration { get; set; }
        /// <summary>Gets or sets the list of category configurations.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ILiveTraceCategory[] LiveTraceConfigurationCategory { get; set; }
        /// <summary>
        /// Indicates whether or not enable live trace.
        /// When it's set to true, live trace client can connect to the service.
        /// Otherwise, live trace client can't connect to the service, so that you are unable to receive any log, no matter what you
        /// configure in "categories".
        /// Available values: true, false.
        /// Case insensitive.
        /// </summary>
        string LiveTraceConfigurationEnabled { get; set; }
        /// <summary>Network ACLs for the resource</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRNetworkAcls NetworkAcL { get; set; }
        /// <summary>Azure Networking ACL Action.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.AclAction? NetworkAcLDefaultAction { get; set; }
        /// <summary>ACLs for requests from private endpoints</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IPrivateEndpointAcl[] NetworkAcLPrivateEndpoint { get; set; }
        /// <summary>Network ACL</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.INetworkAcl NetworkAcLPublicNetwork { get; set; }
        /// <summary>Private endpoint connections to the resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IPrivateEndpointConnection[] PrivateEndpointConnection { get; set; }
        /// <summary>Provisioning state of the resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.ProvisioningState? ProvisioningState { get; set; }
        /// <summary>
        /// Enable or disable public network access. Default to "Enabled".
        /// When it's Enabled, network ACLs still apply.
        /// When it's Disabled, public network access is always disabled no matter what you set in network ACLs.
        /// </summary>
        string PublicNetworkAccess { get; set; }
        /// <summary>
        /// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.SignalRRequestType[] PublicNetworkAllow { get; set; }
        /// <summary>
        /// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.SignalRRequestType[] PublicNetworkDeny { get; set; }
        /// <summary>
        /// The publicly accessible port of the resource which is designed for browser/client side usage.
        /// </summary>
        int? PublicPort { get; set; }
        /// <summary>Resource log configuration of a Microsoft.SignalRService resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IResourceLogConfiguration ResourceLogConfiguration { get; set; }
        /// <summary>Gets or sets the list of category configurations.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IResourceLogCategory[] ResourceLogConfigurationCategory { get; set; }
        /// <summary>
        /// The publicly accessible port of the resource which is designed for customer server side usage.
        /// </summary>
        int? ServerPort { get; set; }
        /// <summary>Serverless settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IServerlessSettings Serverless { get; set; }
        /// <summary>
        /// Gets or sets Client Connection Timeout. Optional to be set.
        /// Value in seconds.
        /// Default value is 30 seconds.
        /// Customer should set the timeout to a shorter period if messages are expected to be sent in shorter intervals,
        /// and want the client to disconnect more quickly after the last message is sent.
        /// You can set the timeout to a longer period if messages are expected to be sent in longer intervals,
        /// and they want to keep the same client connection alive during this session.
        /// The service considers the client disconnected if it hasn't received a message (including keep-alive) in this interval.
        /// </summary>
        int? ServerlessConnectionTimeoutInSecond { get; set; }
        /// <summary>The list of shared private link resources.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISharedPrivateLinkResource[] SharedPrivateLinkResource { get; set; }
        /// <summary>TLS settings for the resource</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.ISignalRTlsSettings Tl { get; set; }
        /// <summary>Request client certificate during TLS handshake if enabled</summary>
        bool? TlClientCertEnabled { get; set; }
        /// <summary>The settings for the Upstream when the service is in server-less mode.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IServerlessUpstreamSettings Upstream { get; set; }
        /// <summary>
        /// Gets or sets the list of Upstream URL templates. Order matters, and the first matching template takes effects.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20220801Preview.IUpstreamTemplate[] UpstreamTemplate { get; set; }
        /// <summary>
        /// Version of the resource. Probably you need the same or higher version of client SDKs.
        /// </summary>
        string Version { get; set; }

    }
}