// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Extensions;

    /// <summary>A class represent a resource.</summary>
    public partial class SignalRResource :
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRResource,
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRResourceInternal,
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.ITrackedResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.ITrackedResource __trackedResource = new Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.TrackedResource();

        /// <summary>
        /// Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345).
        /// Use "*" to allow all. If omitted, allow all by default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public string[] CorAllowedOrigin { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).CorAllowedOrigin; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).CorAllowedOrigin = value ?? null /* arrayOf */; }

        /// <summary>
        /// DisableLocalAuth
        /// Enable or disable aad auth
        /// When set as true, connection with AuthType=aad won't work.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public bool? DisableAadAuth { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).DisableAadAuth; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).DisableAadAuth = value ?? default(bool); }

        /// <summary>
        /// DisableLocalAuth
        /// Enable or disable local auth with AccessKey
        /// When set as true, connection with AccessKey=xxx won't work.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public bool? DisableLocalAuth { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).DisableLocalAuth; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).DisableLocalAuth = value ?? default(bool); }

        /// <summary>The publicly accessible IP of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public string ExternalIP { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).ExternalIP; }

        /// <summary>
        /// List of the featureFlags.
        ///
        /// FeatureFlags that are not included in the parameters for the update operation will not be modified.
        /// And the response will only include featureFlags that are explicitly set.
        /// When a featureFlag is not explicitly set, its globally default value will be used
        /// But keep in mind, the default value doesn't mean "false". It varies in terms of different FeatureFlags.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRFeature[] Feature { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).Feature; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).Feature = value ?? null /* arrayOf */; }

        /// <summary>FQDN of the service instance.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public string HostName { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).HostName; }

        /// <summary>Deprecated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public string HostNamePrefix { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).HostNamePrefix; }

        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.IResourceAutoGeneratedInternal)__trackedResource).Id; }

        /// <summary>Backing field for <see cref="Identity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IManagedIdentity _identity;

        /// <summary>A class represent managed identities used for request and response</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IManagedIdentity Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ManagedIdentity()); set => this._identity = value; }

        /// <summary>
        /// Get the principal id for the system assigned identity.
        /// Only be used in response.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public string IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IManagedIdentityInternal)Identity).PrincipalId; }

        /// <summary>
        /// Get the tenant id for the system assigned identity.
        /// Only be used in response
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public string IdentityTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IManagedIdentityInternal)Identity).TenantId; }

        /// <summary>Represents the identity type: systemAssigned, userAssigned, None</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.ManagedIdentityType? IdentityType { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IManagedIdentityInternal)Identity).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IManagedIdentityInternal)Identity).Type = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.ManagedIdentityType)""); }

        /// <summary>Get or set the user assigned identities</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IManagedIdentityUserAssignedIdentities IdentityUserAssignedIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IManagedIdentityInternal)Identity).UserAssignedIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IManagedIdentityInternal)Identity).UserAssignedIdentity = value ?? null /* model class */; }

        /// <summary>Backing field for <see cref="Kind" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.ServiceKind? _kind;

        /// <summary>The kind of the service, it can be SignalR or RawWebSockets</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.ServiceKind? Kind { get => this._kind; set => this._kind = value; }

        /// <summary>Gets or sets the list of category configurations.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ILiveTraceCategory[] LiveTraceConfigurationCategory { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).LiveTraceConfigurationCategory; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).LiveTraceConfigurationCategory = value ?? null /* arrayOf */; }

        /// <summary>
        /// Indicates whether or not enable live trace.
        /// When it's set to true, live trace client can connect to the service.
        /// Otherwise, live trace client can't connect to the service, so that you are unable to receive any log, no matter what you
        /// configure in "categories".
        /// Available values: true, false.
        /// Case insensitive.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public string LiveTraceConfigurationEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).LiveTraceConfigurationEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).LiveTraceConfigurationEnabled = value ?? null; }

        /// <summary>The geo-location where the resource lives</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inherited)]
        public string Location { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.ITrackedResourceInternal)__trackedResource).Location; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.ITrackedResourceInternal)__trackedResource).Location = value ; }

        /// <summary>Internal Acessors for Cor</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRCorsSettings Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRResourceInternal.Cor { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).Cor; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).Cor = value; }

        /// <summary>Internal Acessors for ExternalIP</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRResourceInternal.ExternalIP { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).ExternalIP; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).ExternalIP = value; }

        /// <summary>Internal Acessors for HostName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRResourceInternal.HostName { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).HostName; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).HostName = value; }

        /// <summary>Internal Acessors for HostNamePrefix</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRResourceInternal.HostNamePrefix { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).HostNamePrefix; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).HostNamePrefix = value; }

        /// <summary>Internal Acessors for Identity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IManagedIdentity Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRResourceInternal.Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ManagedIdentity()); set { {_identity = value;} } }

        /// <summary>Internal Acessors for IdentityPrincipalId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRResourceInternal.IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IManagedIdentityInternal)Identity).PrincipalId; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IManagedIdentityInternal)Identity).PrincipalId = value; }

        /// <summary>Internal Acessors for IdentityTenantId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRResourceInternal.IdentityTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IManagedIdentityInternal)Identity).TenantId; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IManagedIdentityInternal)Identity).TenantId = value; }

        /// <summary>Internal Acessors for LiveTraceConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ILiveTraceConfiguration Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRResourceInternal.LiveTraceConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).LiveTraceConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).LiveTraceConfiguration = value; }

        /// <summary>Internal Acessors for NetworkAcL</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRNetworkAcls Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRResourceInternal.NetworkAcL { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).NetworkAcL; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).NetworkAcL = value; }

        /// <summary>Internal Acessors for NetworkAcLPublicNetwork</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.INetworkAcl Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRResourceInternal.NetworkAcLPublicNetwork { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).NetworkAcLPublicNetwork; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).NetworkAcLPublicNetwork = value; }

        /// <summary>Internal Acessors for PrivateEndpointConnection</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IPrivateEndpointConnection[] Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRResourceInternal.PrivateEndpointConnection { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).PrivateEndpointConnection; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).PrivateEndpointConnection = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRProperties Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRResourceInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.SignalRProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.ProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRResourceInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).ProvisioningState = value; }

        /// <summary>Internal Acessors for PublicPort</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRResourceInternal.PublicPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).PublicPort; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).PublicPort = value; }

        /// <summary>Internal Acessors for ResourceLogConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IResourceLogConfiguration Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRResourceInternal.ResourceLogConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).ResourceLogConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).ResourceLogConfiguration = value; }

        /// <summary>Internal Acessors for ServerPort</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRResourceInternal.ServerPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).ServerPort; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).ServerPort = value; }

        /// <summary>Internal Acessors for Serverless</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IServerlessSettings Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRResourceInternal.Serverless { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).Serverless; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).Serverless = value; }

        /// <summary>Internal Acessors for SharedPrivateLinkResource</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISharedPrivateLinkResource[] Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRResourceInternal.SharedPrivateLinkResource { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).SharedPrivateLinkResource; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).SharedPrivateLinkResource = value; }

        /// <summary>Internal Acessors for Sku</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IResourceSku Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRResourceInternal.Sku { get => (this._sku = this._sku ?? new Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ResourceSku()); set { {_sku = value;} } }

        /// <summary>Internal Acessors for SkuFamily</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRResourceInternal.SkuFamily { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IResourceSkuInternal)Sku).Family; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IResourceSkuInternal)Sku).Family = value; }

        /// <summary>Internal Acessors for SkuSize</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRResourceInternal.SkuSize { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IResourceSkuInternal)Sku).Size; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IResourceSkuInternal)Sku).Size = value; }

        /// <summary>Internal Acessors for Tl</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRTlsSettings Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRResourceInternal.Tl { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).Tl; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).Tl = value; }

        /// <summary>Internal Acessors for Upstream</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IServerlessUpstreamSettings Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRResourceInternal.Upstream { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).Upstream; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).Upstream = value; }

        /// <summary>Internal Acessors for Version</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRResourceInternal.Version { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).Version; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).Version = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.IResourceAutoGeneratedInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.IResourceAutoGeneratedInternal)__trackedResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.IResourceAutoGeneratedInternal)__trackedResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.IResourceAutoGeneratedInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.IResourceAutoGeneratedInternal)__trackedResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.IResourceAutoGeneratedInternal)__trackedResource).Name = value; }

        /// <summary>Internal Acessors for SystemData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.ISystemData Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.IResourceAutoGeneratedInternal.SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.IResourceAutoGeneratedInternal)__trackedResource).SystemData; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.IResourceAutoGeneratedInternal)__trackedResource).SystemData = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.IResourceAutoGeneratedInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.IResourceAutoGeneratedInternal)__trackedResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.IResourceAutoGeneratedInternal)__trackedResource).Type = value; }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.IResourceAutoGeneratedInternal)__trackedResource).Name; }

        /// <summary>Azure Networking ACL Action.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.AclAction? NetworkAcLDefaultAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).NetworkAcLDefaultAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).NetworkAcLDefaultAction = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.AclAction)""); }

        /// <summary>ACLs for requests from private endpoints</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IPrivateEndpointAcl[] NetworkAcLPrivateEndpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).NetworkAcLPrivateEndpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).NetworkAcLPrivateEndpoint = value ?? null /* arrayOf */; }

        /// <summary>Private endpoint connections to the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IPrivateEndpointConnection[] PrivateEndpointConnection { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).PrivateEndpointConnection; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRProperties _property;

        /// <summary>A class that describes the properties of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.SignalRProperties()); set => this._property = value; }

        /// <summary>Provisioning state of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.ProvisioningState? ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).ProvisioningState; }

        /// <summary>
        /// Enable or disable public network access. Default to "Enabled".
        /// When it's Enabled, network ACLs still apply.
        /// When it's Disabled, public network access is always disabled no matter what you set in network ACLs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public string PublicNetworkAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).PublicNetworkAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).PublicNetworkAccess = value ?? null; }

        /// <summary>
        /// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.SignalRRequestType[] PublicNetworkAllow { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).PublicNetworkAllow; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).PublicNetworkAllow = value ?? null /* arrayOf */; }

        /// <summary>
        /// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.SignalRRequestType[] PublicNetworkDeny { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).PublicNetworkDeny; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).PublicNetworkDeny = value ?? null /* arrayOf */; }

        /// <summary>
        /// The publicly accessible port of the resource which is designed for browser/client side usage.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public int? PublicPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).PublicPort; }

        /// <summary>Gets or sets the list of category configurations.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IResourceLogCategory[] ResourceLogConfigurationCategory { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).ResourceLogConfigurationCategory; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).ResourceLogConfigurationCategory = value ?? null /* arrayOf */; }

        /// <summary>
        /// The publicly accessible port of the resource which is designed for customer server side usage.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public int? ServerPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).ServerPort; }

        /// <summary>
        /// Gets or sets Client Connection Timeout. Optional to be set.
        /// Value in seconds.
        /// Default value is 30 seconds.
        /// Customer should set the timeout to a shorter period if messages are expected to be sent in shorter intervals,
        /// and want the client to disconnect more quickly after the last message is sent.
        /// You can set the timeout to a longer period if messages are expected to be sent in longer intervals,
        /// and they want to keep the same client connection alive during this session.
        /// The service considers the client disconnected if it hasn't received a message (including keep-alive) in this interval.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public int? ServerlessConnectionTimeoutInSecond { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).ServerlessConnectionTimeoutInSecond; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).ServerlessConnectionTimeoutInSecond = value ?? default(int); }

        /// <summary>The list of shared private link resources.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISharedPrivateLinkResource[] SharedPrivateLinkResource { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).SharedPrivateLinkResource; }

        /// <summary>Backing field for <see cref="Sku" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IResourceSku _sku;

        /// <summary>The billing information of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IResourceSku Sku { get => (this._sku = this._sku ?? new Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ResourceSku()); set => this._sku = value; }

        /// <summary>
        /// Optional, integer. The unit count of the resource. 1 by default.
        ///
        /// If present, following values are allowed:
        /// Free: 1;
        /// Standard: 1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100;
        /// Premium: 1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100;
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public int? SkuCapacity { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IResourceSkuInternal)Sku).Capacity; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IResourceSkuInternal)Sku).Capacity = value ?? default(int); }

        /// <summary>Not used. Retained for future use.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public string SkuFamily { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IResourceSkuInternal)Sku).Family; }

        /// <summary>
        /// The name of the SKU. Required.
        ///
        /// Allowed values: Standard_S1, Free_F1, Premium_P1
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public string SkuName { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IResourceSkuInternal)Sku).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IResourceSkuInternal)Sku).Name = value ?? null; }

        /// <summary>Not used. Retained for future use.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public string SkuSize { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IResourceSkuInternal)Sku).Size; }

        /// <summary>
        /// Optional tier of this particular SKU. 'Standard' or 'Free'.
        ///
        /// `Basic` is deprecated, use `Standard` instead.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.SignalRSkuTier? SkuTier { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IResourceSkuInternal)Sku).Tier; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IResourceSkuInternal)Sku).Tier = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.SignalRSkuTier)""); }

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.ISystemData SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.IResourceAutoGeneratedInternal)__trackedResource).SystemData; }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.IResourceAutoGeneratedInternal)__trackedResource).SystemDataCreatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.IResourceAutoGeneratedInternal)__trackedResource).SystemDataCreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inherited)]
        public string SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.IResourceAutoGeneratedInternal)__trackedResource).SystemDataCreatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.IResourceAutoGeneratedInternal)__trackedResource).SystemDataCreatedBy = value ?? null; }

        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.CreatedByType? SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.IResourceAutoGeneratedInternal)__trackedResource).SystemDataCreatedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.IResourceAutoGeneratedInternal)__trackedResource).SystemDataCreatedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.CreatedByType)""); }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.IResourceAutoGeneratedInternal)__trackedResource).SystemDataLastModifiedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.IResourceAutoGeneratedInternal)__trackedResource).SystemDataLastModifiedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inherited)]
        public string SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.IResourceAutoGeneratedInternal)__trackedResource).SystemDataLastModifiedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.IResourceAutoGeneratedInternal)__trackedResource).SystemDataLastModifiedBy = value ?? null; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.CreatedByType? SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.IResourceAutoGeneratedInternal)__trackedResource).SystemDataLastModifiedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.IResourceAutoGeneratedInternal)__trackedResource).SystemDataLastModifiedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.CreatedByType)""); }

        /// <summary>Resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.ITrackedResourceTags Tag { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.ITrackedResourceInternal)__trackedResource).Tag; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.ITrackedResourceInternal)__trackedResource).Tag = value ?? null /* model class */; }

        /// <summary>Request client certificate during TLS handshake if enabled</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public bool? TlClientCertEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).TlClientCertEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).TlClientCertEnabled = value ?? default(bool); }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.IResourceAutoGeneratedInternal)__trackedResource).Type; }

        /// <summary>
        /// Gets or sets the list of Upstream URL templates. Order matters, and the first matching template takes effects.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IUpstreamTemplate[] UpstreamTemplate { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).UpstreamTemplate; set => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).UpstreamTemplate = value ?? null /* arrayOf */; }

        /// <summary>
        /// Version of the resource. Probably you need the same or higher version of client SDKs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Origin(Microsoft.Azure.PowerShell.Cmdlets.SignalR.PropertyOrigin.Inlined)]
        public string Version { get => ((Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRPropertiesInternal)Property).Version; }

        /// <summary>Creates an new <see cref="SignalRResource" /> instance.</summary>
        public SignalRResource()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__trackedResource), __trackedResource);
            await eventListener.AssertObjectIsValid(nameof(__trackedResource), __trackedResource);
        }
    }
    /// A class represent a resource.
    public partial interface ISignalRResource :
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.ITrackedResource
    {
        /// <summary>
        /// Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345).
        /// Use "*" to allow all. If omitted, allow all by default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345). Use ""*"" to allow all. If omitted, allow all by default.",
        SerializedName = @"allowedOrigins",
        PossibleTypes = new [] { typeof(string) })]
        string[] CorAllowedOrigin { get; set; }
        /// <summary>
        /// DisableLocalAuth
        /// Enable or disable aad auth
        /// When set as true, connection with AuthType=aad won't work.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"DisableLocalAuth
        Enable or disable aad auth
        When set as true, connection with AuthType=aad won't work.",
        SerializedName = @"disableAadAuth",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DisableAadAuth { get; set; }
        /// <summary>
        /// DisableLocalAuth
        /// Enable or disable local auth with AccessKey
        /// When set as true, connection with AccessKey=xxx won't work.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"DisableLocalAuth
        Enable or disable local auth with AccessKey
        When set as true, connection with AccessKey=xxx won't work.",
        SerializedName = @"disableLocalAuth",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DisableLocalAuth { get; set; }
        /// <summary>The publicly accessible IP of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The publicly accessible IP of the resource.",
        SerializedName = @"externalIP",
        PossibleTypes = new [] { typeof(string) })]
        string ExternalIP { get;  }
        /// <summary>
        /// List of the featureFlags.
        ///
        /// FeatureFlags that are not included in the parameters for the update operation will not be modified.
        /// And the response will only include featureFlags that are explicitly set.
        /// When a featureFlag is not explicitly set, its globally default value will be used
        /// But keep in mind, the default value doesn't mean "false". It varies in terms of different FeatureFlags.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of the featureFlags.

        FeatureFlags that are not included in the parameters for the update operation will not be modified.
        And the response will only include featureFlags that are explicitly set.
        When a featureFlag is not explicitly set, its globally default value will be used
        But keep in mind, the default value doesn't mean ""false"". It varies in terms of different FeatureFlags.",
        SerializedName = @"features",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRFeature) })]
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRFeature[] Feature { get; set; }
        /// <summary>FQDN of the service instance.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"FQDN of the service instance.",
        SerializedName = @"hostName",
        PossibleTypes = new [] { typeof(string) })]
        string HostName { get;  }
        /// <summary>Deprecated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Deprecated.",
        SerializedName = @"hostNamePrefix",
        PossibleTypes = new [] { typeof(string) })]
        string HostNamePrefix { get;  }
        /// <summary>
        /// Get the principal id for the system assigned identity.
        /// Only be used in response.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Get the principal id for the system assigned identity.
        Only be used in response.",
        SerializedName = @"principalId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityPrincipalId { get;  }
        /// <summary>
        /// Get the tenant id for the system assigned identity.
        /// Only be used in response
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Get the tenant id for the system assigned identity.
        Only be used in response",
        SerializedName = @"tenantId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityTenantId { get;  }
        /// <summary>Represents the identity type: systemAssigned, userAssigned, None</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Represents the identity type: systemAssigned, userAssigned, None",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.ManagedIdentityType) })]
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.ManagedIdentityType? IdentityType { get; set; }
        /// <summary>Get or set the user assigned identities</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Get or set the user assigned identities",
        SerializedName = @"userAssignedIdentities",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IManagedIdentityUserAssignedIdentities) })]
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IManagedIdentityUserAssignedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>The kind of the service, it can be SignalR or RawWebSockets</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The kind of the service, it can be SignalR or RawWebSockets",
        SerializedName = @"kind",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.ServiceKind) })]
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.ServiceKind? Kind { get; set; }
        /// <summary>Gets or sets the list of category configurations.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the list of category configurations.",
        SerializedName = @"categories",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ILiveTraceCategory) })]
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ILiveTraceCategory[] LiveTraceConfigurationCategory { get; set; }
        /// <summary>
        /// Indicates whether or not enable live trace.
        /// When it's set to true, live trace client can connect to the service.
        /// Otherwise, live trace client can't connect to the service, so that you are unable to receive any log, no matter what you
        /// configure in "categories".
        /// Available values: true, false.
        /// Case insensitive.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether or not enable live trace.
        When it's set to true, live trace client can connect to the service.
        Otherwise, live trace client can't connect to the service, so that you are unable to receive any log, no matter what you configure in ""categories"".
        Available values: true, false.
        Case insensitive.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(string) })]
        string LiveTraceConfigurationEnabled { get; set; }
        /// <summary>Azure Networking ACL Action.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Azure Networking ACL Action.",
        SerializedName = @"defaultAction",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.AclAction) })]
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.AclAction? NetworkAcLDefaultAction { get; set; }
        /// <summary>ACLs for requests from private endpoints</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"ACLs for requests from private endpoints",
        SerializedName = @"privateEndpoints",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IPrivateEndpointAcl) })]
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IPrivateEndpointAcl[] NetworkAcLPrivateEndpoint { get; set; }
        /// <summary>Private endpoint connections to the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Private endpoint connections to the resource.",
        SerializedName = @"privateEndpointConnections",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IPrivateEndpointConnection) })]
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IPrivateEndpointConnection[] PrivateEndpointConnection { get;  }
        /// <summary>Provisioning state of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Provisioning state of the resource.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.ProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.ProvisioningState? ProvisioningState { get;  }
        /// <summary>
        /// Enable or disable public network access. Default to "Enabled".
        /// When it's Enabled, network ACLs still apply.
        /// When it's Disabled, public network access is always disabled no matter what you set in network ACLs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable or disable public network access. Default to ""Enabled"".
        When it's Enabled, network ACLs still apply.
        When it's Disabled, public network access is always disabled no matter what you set in network ACLs.",
        SerializedName = @"publicNetworkAccess",
        PossibleTypes = new [] { typeof(string) })]
        string PublicNetworkAccess { get; set; }
        /// <summary>
        /// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.",
        SerializedName = @"allow",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.SignalRRequestType) })]
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.SignalRRequestType[] PublicNetworkAllow { get; set; }
        /// <summary>
        /// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.",
        SerializedName = @"deny",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.SignalRRequestType) })]
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.SignalRRequestType[] PublicNetworkDeny { get; set; }
        /// <summary>
        /// The publicly accessible port of the resource which is designed for browser/client side usage.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The publicly accessible port of the resource which is designed for browser/client side usage.",
        SerializedName = @"publicPort",
        PossibleTypes = new [] { typeof(int) })]
        int? PublicPort { get;  }
        /// <summary>Gets or sets the list of category configurations.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the list of category configurations.",
        SerializedName = @"categories",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IResourceLogCategory) })]
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IResourceLogCategory[] ResourceLogConfigurationCategory { get; set; }
        /// <summary>
        /// The publicly accessible port of the resource which is designed for customer server side usage.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The publicly accessible port of the resource which is designed for customer server side usage.",
        SerializedName = @"serverPort",
        PossibleTypes = new [] { typeof(int) })]
        int? ServerPort { get;  }
        /// <summary>
        /// Gets or sets Client Connection Timeout. Optional to be set.
        /// Value in seconds.
        /// Default value is 30 seconds.
        /// Customer should set the timeout to a shorter period if messages are expected to be sent in shorter intervals,
        /// and want the client to disconnect more quickly after the last message is sent.
        /// You can set the timeout to a longer period if messages are expected to be sent in longer intervals,
        /// and they want to keep the same client connection alive during this session.
        /// The service considers the client disconnected if it hasn't received a message (including keep-alive) in this interval.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets Client Connection Timeout. Optional to be set.
        Value in seconds.
        Default value is 30 seconds.
        Customer should set the timeout to a shorter period if messages are expected to be sent in shorter intervals,
        and want the client to disconnect more quickly after the last message is sent.
        You can set the timeout to a longer period if messages are expected to be sent in longer intervals,
        and they want to keep the same client connection alive during this session.
        The service considers the client disconnected if it hasn't received a message (including keep-alive) in this interval.",
        SerializedName = @"connectionTimeoutInSeconds",
        PossibleTypes = new [] { typeof(int) })]
        int? ServerlessConnectionTimeoutInSecond { get; set; }
        /// <summary>The list of shared private link resources.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The list of shared private link resources.",
        SerializedName = @"sharedPrivateLinkResources",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISharedPrivateLinkResource) })]
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISharedPrivateLinkResource[] SharedPrivateLinkResource { get;  }
        /// <summary>
        /// Optional, integer. The unit count of the resource. 1 by default.
        ///
        /// If present, following values are allowed:
        /// Free: 1;
        /// Standard: 1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100;
        /// Premium: 1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100;
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Optional, integer. The unit count of the resource. 1 by default.

        If present, following values are allowed:
            Free: 1;
            Standard: 1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100;
            Premium:  1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100;",
        SerializedName = @"capacity",
        PossibleTypes = new [] { typeof(int) })]
        int? SkuCapacity { get; set; }
        /// <summary>Not used. Retained for future use.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Not used. Retained for future use.",
        SerializedName = @"family",
        PossibleTypes = new [] { typeof(string) })]
        string SkuFamily { get;  }
        /// <summary>
        /// The name of the SKU. Required.
        ///
        /// Allowed values: Standard_S1, Free_F1, Premium_P1
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the SKU. Required.

        Allowed values: Standard_S1, Free_F1, Premium_P1",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string SkuName { get; set; }
        /// <summary>Not used. Retained for future use.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Not used. Retained for future use.",
        SerializedName = @"size",
        PossibleTypes = new [] { typeof(string) })]
        string SkuSize { get;  }
        /// <summary>
        /// Optional tier of this particular SKU. 'Standard' or 'Free'.
        ///
        /// `Basic` is deprecated, use `Standard` instead.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Optional tier of this particular SKU. 'Standard' or 'Free'.

        `Basic` is deprecated, use `Standard` instead.",
        SerializedName = @"tier",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.SignalRSkuTier) })]
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.SignalRSkuTier? SkuTier { get; set; }
        /// <summary>Request client certificate during TLS handshake if enabled</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Request client certificate during TLS handshake if enabled",
        SerializedName = @"clientCertEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? TlClientCertEnabled { get; set; }
        /// <summary>
        /// Gets or sets the list of Upstream URL templates. Order matters, and the first matching template takes effects.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the list of Upstream URL templates. Order matters, and the first matching template takes effects.",
        SerializedName = @"templates",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IUpstreamTemplate) })]
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IUpstreamTemplate[] UpstreamTemplate { get; set; }
        /// <summary>
        /// Version of the resource. Probably you need the same or higher version of client SDKs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SignalR.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Version of the resource. Probably you need the same or higher version of client SDKs.",
        SerializedName = @"version",
        PossibleTypes = new [] { typeof(string) })]
        string Version { get;  }

    }
    /// A class represent a resource.
    internal partial interface ISignalRResourceInternal :
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api40.ITrackedResourceInternal
    {
        /// <summary>Cross-Origin Resource Sharing (CORS) settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRCorsSettings Cor { get; set; }
        /// <summary>
        /// Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345).
        /// Use "*" to allow all. If omitted, allow all by default.
        /// </summary>
        string[] CorAllowedOrigin { get; set; }
        /// <summary>
        /// DisableLocalAuth
        /// Enable or disable aad auth
        /// When set as true, connection with AuthType=aad won't work.
        /// </summary>
        bool? DisableAadAuth { get; set; }
        /// <summary>
        /// DisableLocalAuth
        /// Enable or disable local auth with AccessKey
        /// When set as true, connection with AccessKey=xxx won't work.
        /// </summary>
        bool? DisableLocalAuth { get; set; }
        /// <summary>The publicly accessible IP of the resource.</summary>
        string ExternalIP { get; set; }
        /// <summary>
        /// List of the featureFlags.
        ///
        /// FeatureFlags that are not included in the parameters for the update operation will not be modified.
        /// And the response will only include featureFlags that are explicitly set.
        /// When a featureFlag is not explicitly set, its globally default value will be used
        /// But keep in mind, the default value doesn't mean "false". It varies in terms of different FeatureFlags.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRFeature[] Feature { get; set; }
        /// <summary>FQDN of the service instance.</summary>
        string HostName { get; set; }
        /// <summary>Deprecated.</summary>
        string HostNamePrefix { get; set; }
        /// <summary>A class represent managed identities used for request and response</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IManagedIdentity Identity { get; set; }
        /// <summary>
        /// Get the principal id for the system assigned identity.
        /// Only be used in response.
        /// </summary>
        string IdentityPrincipalId { get; set; }
        /// <summary>
        /// Get the tenant id for the system assigned identity.
        /// Only be used in response
        /// </summary>
        string IdentityTenantId { get; set; }
        /// <summary>Represents the identity type: systemAssigned, userAssigned, None</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.ManagedIdentityType? IdentityType { get; set; }
        /// <summary>Get or set the user assigned identities</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IManagedIdentityUserAssignedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>The kind of the service, it can be SignalR or RawWebSockets</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.ServiceKind? Kind { get; set; }
        /// <summary>Live trace configuration of a Microsoft.SignalRService resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ILiveTraceConfiguration LiveTraceConfiguration { get; set; }
        /// <summary>Gets or sets the list of category configurations.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ILiveTraceCategory[] LiveTraceConfigurationCategory { get; set; }
        /// <summary>
        /// Indicates whether or not enable live trace.
        /// When it's set to true, live trace client can connect to the service.
        /// Otherwise, live trace client can't connect to the service, so that you are unable to receive any log, no matter what you
        /// configure in "categories".
        /// Available values: true, false.
        /// Case insensitive.
        /// </summary>
        string LiveTraceConfigurationEnabled { get; set; }
        /// <summary>Network ACLs for the resource</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRNetworkAcls NetworkAcL { get; set; }
        /// <summary>Azure Networking ACL Action.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.AclAction? NetworkAcLDefaultAction { get; set; }
        /// <summary>ACLs for requests from private endpoints</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IPrivateEndpointAcl[] NetworkAcLPrivateEndpoint { get; set; }
        /// <summary>Network ACL</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.INetworkAcl NetworkAcLPublicNetwork { get; set; }
        /// <summary>Private endpoint connections to the resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IPrivateEndpointConnection[] PrivateEndpointConnection { get; set; }
        /// <summary>A class that describes the properties of the resource</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRProperties Property { get; set; }
        /// <summary>Provisioning state of the resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.ProvisioningState? ProvisioningState { get; set; }
        /// <summary>
        /// Enable or disable public network access. Default to "Enabled".
        /// When it's Enabled, network ACLs still apply.
        /// When it's Disabled, public network access is always disabled no matter what you set in network ACLs.
        /// </summary>
        string PublicNetworkAccess { get; set; }
        /// <summary>
        /// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.SignalRRequestType[] PublicNetworkAllow { get; set; }
        /// <summary>
        /// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.SignalRRequestType[] PublicNetworkDeny { get; set; }
        /// <summary>
        /// The publicly accessible port of the resource which is designed for browser/client side usage.
        /// </summary>
        int? PublicPort { get; set; }
        /// <summary>Resource log configuration of a Microsoft.SignalRService resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IResourceLogConfiguration ResourceLogConfiguration { get; set; }
        /// <summary>Gets or sets the list of category configurations.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IResourceLogCategory[] ResourceLogConfigurationCategory { get; set; }
        /// <summary>
        /// The publicly accessible port of the resource which is designed for customer server side usage.
        /// </summary>
        int? ServerPort { get; set; }
        /// <summary>Serverless settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IServerlessSettings Serverless { get; set; }
        /// <summary>
        /// Gets or sets Client Connection Timeout. Optional to be set.
        /// Value in seconds.
        /// Default value is 30 seconds.
        /// Customer should set the timeout to a shorter period if messages are expected to be sent in shorter intervals,
        /// and want the client to disconnect more quickly after the last message is sent.
        /// You can set the timeout to a longer period if messages are expected to be sent in longer intervals,
        /// and they want to keep the same client connection alive during this session.
        /// The service considers the client disconnected if it hasn't received a message (including keep-alive) in this interval.
        /// </summary>
        int? ServerlessConnectionTimeoutInSecond { get; set; }
        /// <summary>The list of shared private link resources.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISharedPrivateLinkResource[] SharedPrivateLinkResource { get; set; }
        /// <summary>The billing information of the resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IResourceSku Sku { get; set; }
        /// <summary>
        /// Optional, integer. The unit count of the resource. 1 by default.
        ///
        /// If present, following values are allowed:
        /// Free: 1;
        /// Standard: 1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100;
        /// Premium: 1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100;
        /// </summary>
        int? SkuCapacity { get; set; }
        /// <summary>Not used. Retained for future use.</summary>
        string SkuFamily { get; set; }
        /// <summary>
        /// The name of the SKU. Required.
        ///
        /// Allowed values: Standard_S1, Free_F1, Premium_P1
        /// </summary>
        string SkuName { get; set; }
        /// <summary>Not used. Retained for future use.</summary>
        string SkuSize { get; set; }
        /// <summary>
        /// Optional tier of this particular SKU. 'Standard' or 'Free'.
        ///
        /// `Basic` is deprecated, use `Standard` instead.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Support.SignalRSkuTier? SkuTier { get; set; }
        /// <summary>TLS settings for the resource</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.ISignalRTlsSettings Tl { get; set; }
        /// <summary>Request client certificate during TLS handshake if enabled</summary>
        bool? TlClientCertEnabled { get; set; }
        /// <summary>The settings for the Upstream when the service is in server-less mode.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IServerlessUpstreamSettings Upstream { get; set; }
        /// <summary>
        /// Gets or sets the list of Upstream URL templates. Order matters, and the first matching template takes effects.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.SignalR.Models.Api20230301Preview.IUpstreamTemplate[] UpstreamTemplate { get; set; }
        /// <summary>
        /// Version of the resource. Probably you need the same or higher version of client SDKs.
        /// </summary>
        string Version { get; set; }

    }
}