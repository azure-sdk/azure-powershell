// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Extensions;

    /// <summary>Properties of a lab.</summary>
    public partial class LabProperties :
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabProperties,
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabPropertiesInternal
    {

        /// <summary>Backing field for <see cref="Announcement" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabAnnouncementProperties _announcement;

        /// <summary>The properties of any lab announcement associated with this lab</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabAnnouncementProperties Announcement { get => (this._announcement = this._announcement ?? new Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.LabAnnouncementProperties()); set => this._announcement = value; }

        /// <summary>Is the lab announcement active/enabled at this time?</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus? AnnouncementEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabAnnouncementPropertiesInternal)Announcement).Enabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabAnnouncementPropertiesInternal)Announcement).Enabled = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus)""); }

        /// <summary>The time at which the announcement expires (null for never)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Inlined)]
        public global::System.DateTime? AnnouncementExpirationDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabAnnouncementPropertiesInternal)Announcement).ExpirationDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabAnnouncementPropertiesInternal)Announcement).ExpirationDate = value ?? default(global::System.DateTime); }

        /// <summary>Has this announcement expired?</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Inlined)]
        public bool? AnnouncementExpired { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabAnnouncementPropertiesInternal)Announcement).Expired; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabAnnouncementPropertiesInternal)Announcement).Expired = value ?? default(bool); }

        /// <summary>
        /// The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Inlined)]
        public string AnnouncementMarkdown { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabAnnouncementPropertiesInternal)Announcement).Markdown; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabAnnouncementPropertiesInternal)Announcement).Markdown = value ?? null; }

        /// <summary>The provisioning status of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Inlined)]
        public string AnnouncementProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabAnnouncementPropertiesInternal)Announcement).ProvisioningState; }

        /// <summary>The plain text title for the lab announcement</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Inlined)]
        public string AnnouncementTitle { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabAnnouncementPropertiesInternal)Announcement).Title; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabAnnouncementPropertiesInternal)Announcement).Title = value ?? null; }

        /// <summary>The unique immutable identifier of a resource (Guid).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Inlined)]
        public string AnnouncementUniqueIdentifier { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabAnnouncementPropertiesInternal)Announcement).UniqueIdentifier; }

        /// <summary>Backing field for <see cref="ArtifactsStorageAccount" /> property.</summary>
        private string _artifactsStorageAccount;

        /// <summary>The lab's artifact storage account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public string ArtifactsStorageAccount { get => this._artifactsStorageAccount; }

        /// <summary>Backing field for <see cref="BrowserConnect" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus? _browserConnect;

        /// <summary>Is browser connect enabled for the lab</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus? BrowserConnect { get => this._browserConnect; set => this._browserConnect = value; }

        /// <summary>Backing field for <see cref="CreatedDate" /> property.</summary>
        private global::System.DateTime? _createdDate;

        /// <summary>The creation date of the lab.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public global::System.DateTime? CreatedDate { get => this._createdDate; }

        /// <summary>Backing field for <see cref="DefaultPremiumStorageAccount" /> property.</summary>
        private string _defaultPremiumStorageAccount;

        /// <summary>The lab's default premium storage account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public string DefaultPremiumStorageAccount { get => this._defaultPremiumStorageAccount; }

        /// <summary>Backing field for <see cref="DefaultSecretName" /> property.</summary>
        private string _defaultSecretName;

        /// <summary>Default secret for creating virtual machines.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public string DefaultSecretName { get => this._defaultSecretName; set => this._defaultSecretName = value; }

        /// <summary>Backing field for <see cref="DefaultStorageAccount" /> property.</summary>
        private string _defaultStorageAccount;

        /// <summary>The lab's default storage account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public string DefaultStorageAccount { get => this._defaultStorageAccount; }

        /// <summary>Backing field for <see cref="DisableAutoUpgradeCseMinorVersion" /> property.</summary>
        private bool? _disableAutoUpgradeCseMinorVersion;

        /// <summary>Is auto upgrade of CSE disabled for the lab?</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public bool? DisableAutoUpgradeCseMinorVersion { get => this._disableAutoUpgradeCseMinorVersion; set => this._disableAutoUpgradeCseMinorVersion = value; }

        /// <summary>Backing field for <see cref="Encryption" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.IEncryption _encryption;

        /// <summary>Mechanism used for encryption of resources in a lab (such as virtual machines).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.IEncryption Encryption { get => (this._encryption = this._encryption ?? new Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.Encryption()); set => this._encryption = value; }

        /// <summary>
        /// Gets or sets resourceId of the disk encryption set to use for enabling encryption at rest.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Inlined)]
        public string EncryptionDiskEncryptionSetId { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.IEncryptionInternal)Encryption).DiskEncryptionSetId; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.IEncryptionInternal)Encryption).DiskEncryptionSetId = value ?? null; }

        /// <summary>
        /// Gets or sets the type of key used to encrypt the data of the disk. Possible values include: 'EncryptionAtRestWithPlatformKey',
        /// 'EncryptionAtRestWithCustomerKey'
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EncryptionType? EncryptionType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.IEncryptionInternal)Encryption).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.IEncryptionInternal)Encryption).Type = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EncryptionType)""); }

        /// <summary>Backing field for <see cref="EnvironmentPermission" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnvironmentPermission? _environmentPermission;

        /// <summary>The access rights to be granted to the user when provisioning an environment</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnvironmentPermission? EnvironmentPermission { get => this._environmentPermission; set => this._environmentPermission = value; }

        /// <summary>Backing field for <see cref="ExtendedProperty" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabPropertiesExtendedProperties _extendedProperty;

        /// <summary>Extended properties of the lab used for experimental features</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabPropertiesExtendedProperties ExtendedProperty { get => (this._extendedProperty = this._extendedProperty ?? new Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.LabPropertiesExtendedProperties()); set => this._extendedProperty = value; }

        /// <summary>Backing field for <see cref="IsolateLabResource" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus? _isolateLabResource;

        /// <summary>
        /// Indicates whether to create Lab resources (e.g. Storage accounts and Key Vaults) in network isolation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus? IsolateLabResource { get => this._isolateLabResource; set => this._isolateLabResource = value; }

        /// <summary>Backing field for <see cref="LabStorageType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.StorageType? _labStorageType;

        /// <summary>
        /// Type of storage used by the lab. It can be either Premium or Standard. Default is Premium.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.StorageType? LabStorageType { get => this._labStorageType; set => this._labStorageType = value; }

        /// <summary>Backing field for <see cref="LoadBalancerId" /> property.</summary>
        private string _loadBalancerId;

        /// <summary>The load balancer used to for lab VMs that use shared IP address.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public string LoadBalancerId { get => this._loadBalancerId; }

        /// <summary>Backing field for <see cref="ManagementIdentity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabPropertiesManagementIdentities _managementIdentity;

        /// <summary>List of identities which can be used for management of resources.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabPropertiesManagementIdentities ManagementIdentity { get => (this._managementIdentity = this._managementIdentity ?? new Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.LabPropertiesManagementIdentities()); set => this._managementIdentity = value; }

        /// <summary>Backing field for <see cref="MandatoryArtifactsResourceIdsLinux" /> property.</summary>
        private string[] _mandatoryArtifactsResourceIdsLinux;

        /// <summary>
        /// The ordered list of artifact resource IDs that should be applied on all Linux VM creations by default, prior to the artifacts
        /// specified by the user.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public string[] MandatoryArtifactsResourceIdsLinux { get => this._mandatoryArtifactsResourceIdsLinux; set => this._mandatoryArtifactsResourceIdsLinux = value; }

        /// <summary>Backing field for <see cref="MandatoryArtifactsResourceIdsWindow" /> property.</summary>
        private string[] _mandatoryArtifactsResourceIdsWindow;

        /// <summary>
        /// The ordered list of artifact resource IDs that should be applied on all Windows VM creations by default, prior to the
        /// artifacts specified by the user.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public string[] MandatoryArtifactsResourceIdsWindow { get => this._mandatoryArtifactsResourceIdsWindow; set => this._mandatoryArtifactsResourceIdsWindow = value; }

        /// <summary>Internal Acessors for Announcement</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabAnnouncementProperties Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabPropertiesInternal.Announcement { get => (this._announcement = this._announcement ?? new Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.LabAnnouncementProperties()); set { {_announcement = value;} } }

        /// <summary>Internal Acessors for AnnouncementProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabPropertiesInternal.AnnouncementProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabAnnouncementPropertiesInternal)Announcement).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabAnnouncementPropertiesInternal)Announcement).ProvisioningState = value; }

        /// <summary>Internal Acessors for AnnouncementUniqueIdentifier</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabPropertiesInternal.AnnouncementUniqueIdentifier { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabAnnouncementPropertiesInternal)Announcement).UniqueIdentifier; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabAnnouncementPropertiesInternal)Announcement).UniqueIdentifier = value; }

        /// <summary>Internal Acessors for ArtifactsStorageAccount</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabPropertiesInternal.ArtifactsStorageAccount { get => this._artifactsStorageAccount; set { {_artifactsStorageAccount = value;} } }

        /// <summary>Internal Acessors for CreatedDate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabPropertiesInternal.CreatedDate { get => this._createdDate; set { {_createdDate = value;} } }

        /// <summary>Internal Acessors for DefaultPremiumStorageAccount</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabPropertiesInternal.DefaultPremiumStorageAccount { get => this._defaultPremiumStorageAccount; set { {_defaultPremiumStorageAccount = value;} } }

        /// <summary>Internal Acessors for DefaultStorageAccount</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabPropertiesInternal.DefaultStorageAccount { get => this._defaultStorageAccount; set { {_defaultStorageAccount = value;} } }

        /// <summary>Internal Acessors for Encryption</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.IEncryption Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabPropertiesInternal.Encryption { get => (this._encryption = this._encryption ?? new Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.Encryption()); set { {_encryption = value;} } }

        /// <summary>Internal Acessors for LoadBalancerId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabPropertiesInternal.LoadBalancerId { get => this._loadBalancerId; set { {_loadBalancerId = value;} } }

        /// <summary>Internal Acessors for NetworkSecurityGroupId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabPropertiesInternal.NetworkSecurityGroupId { get => this._networkSecurityGroupId; set { {_networkSecurityGroupId = value;} } }

        /// <summary>Internal Acessors for PremiumDataDiskStorageAccount</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabPropertiesInternal.PremiumDataDiskStorageAccount { get => this._premiumDataDiskStorageAccount; set { {_premiumDataDiskStorageAccount = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabPropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Internal Acessors for PublicIPId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabPropertiesInternal.PublicIPId { get => this._publicIPId; set { {_publicIPId = value;} } }

        /// <summary>Internal Acessors for Support</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabSupportProperties Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabPropertiesInternal.Support { get => (this._support = this._support ?? new Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.LabSupportProperties()); set { {_support = value;} } }

        /// <summary>Internal Acessors for UniqueIdentifier</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabPropertiesInternal.UniqueIdentifier { get => this._uniqueIdentifier; set { {_uniqueIdentifier = value;} } }

        /// <summary>Internal Acessors for VMCreationResourceGroup</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabPropertiesInternal.VMCreationResourceGroup { get => this._vMCreationResourceGroup; set { {_vMCreationResourceGroup = value;} } }

        /// <summary>Internal Acessors for VaultName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabPropertiesInternal.VaultName { get => this._vaultName; set { {_vaultName = value;} } }

        /// <summary>Backing field for <see cref="NetworkSecurityGroupId" /> property.</summary>
        private string _networkSecurityGroupId;

        /// <summary>
        /// The Network Security Group attached to the lab VMs Network interfaces to restrict open ports.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public string NetworkSecurityGroupId { get => this._networkSecurityGroupId; }

        /// <summary>Backing field for <see cref="PremiumDataDisk" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.PremiumDataDisk? _premiumDataDisk;

        /// <summary>
        /// The setting to enable usage of premium data disks.
        /// When its value is 'Enabled', creation of standard or premium data disks is allowed.
        /// When its value is 'Disabled', only creation of standard data disks is allowed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.PremiumDataDisk? PremiumDataDisk { get => this._premiumDataDisk; set => this._premiumDataDisk = value; }

        /// <summary>Backing field for <see cref="PremiumDataDiskStorageAccount" /> property.</summary>
        private string _premiumDataDiskStorageAccount;

        /// <summary>The lab's premium data disk storage account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public string PremiumDataDiskStorageAccount { get => this._premiumDataDiskStorageAccount; }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private string _provisioningState;

        /// <summary>The provisioning status of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public string ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="PublicIPId" /> property.</summary>
        private string _publicIPId;

        /// <summary>The public IP address for the lab's load balancer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public string PublicIPId { get => this._publicIPId; }

        /// <summary>Backing field for <see cref="Support" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabSupportProperties _support;

        /// <summary>The properties of any lab support message associated with this lab</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabSupportProperties Support { get => (this._support = this._support ?? new Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.LabSupportProperties()); set => this._support = value; }

        /// <summary>Is the lab support banner active/enabled at this time?</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus? SupportEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabSupportPropertiesInternal)Support).Enabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabSupportPropertiesInternal)Support).Enabled = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus)""); }

        /// <summary>
        /// The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Inlined)]
        public string SupportMarkdown { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabSupportPropertiesInternal)Support).Markdown; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabSupportPropertiesInternal)Support).Markdown = value ?? null; }

        /// <summary>Backing field for <see cref="UniqueIdentifier" /> property.</summary>
        private string _uniqueIdentifier;

        /// <summary>The unique immutable identifier of a resource (Guid).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public string UniqueIdentifier { get => this._uniqueIdentifier; }

        /// <summary>Backing field for <see cref="VMCreationResourceGroup" /> property.</summary>
        private string _vMCreationResourceGroup;

        /// <summary>
        /// The resource group ID in which all new lab virtual machines will be created. Ex: /subscriptions/subId/resourceGroups/rgName
        /// To let DevTest Labs manage resource group creation, set this value to null.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public string VMCreationResourceGroup { get => this._vMCreationResourceGroup; }

        /// <summary>Backing field for <see cref="VaultName" /> property.</summary>
        private string _vaultName;

        /// <summary>The lab's Key vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.PropertyOrigin.Owned)]
        public string VaultName { get => this._vaultName; }

        /// <summary>Creates an new <see cref="LabProperties" /> instance.</summary>
        public LabProperties()
        {

        }
    }
    /// Properties of a lab.
    public partial interface ILabProperties :
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.IJsonSerializable
    {
        /// <summary>Is the lab announcement active/enabled at this time?</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Is the lab announcement active/enabled at this time?",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus? AnnouncementEnabled { get; set; }
        /// <summary>The time at which the announcement expires (null for never)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The time at which the announcement expires (null for never)",
        SerializedName = @"expirationDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? AnnouncementExpirationDate { get; set; }
        /// <summary>Has this announcement expired?</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Has this announcement expired?",
        SerializedName = @"expired",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AnnouncementExpired { get; set; }
        /// <summary>
        /// The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown.",
        SerializedName = @"markdown",
        PossibleTypes = new [] { typeof(string) })]
        string AnnouncementMarkdown { get; set; }
        /// <summary>The provisioning status of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The provisioning status of the resource.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        string AnnouncementProvisioningState { get;  }
        /// <summary>The plain text title for the lab announcement</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The plain text title for the lab announcement",
        SerializedName = @"title",
        PossibleTypes = new [] { typeof(string) })]
        string AnnouncementTitle { get; set; }
        /// <summary>The unique immutable identifier of a resource (Guid).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The unique immutable identifier of a resource (Guid).",
        SerializedName = @"uniqueIdentifier",
        PossibleTypes = new [] { typeof(string) })]
        string AnnouncementUniqueIdentifier { get;  }
        /// <summary>The lab's artifact storage account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The lab's artifact storage account.",
        SerializedName = @"artifactsStorageAccount",
        PossibleTypes = new [] { typeof(string) })]
        string ArtifactsStorageAccount { get;  }
        /// <summary>Is browser connect enabled for the lab</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Is browser connect enabled for the lab",
        SerializedName = @"browserConnect",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus? BrowserConnect { get; set; }
        /// <summary>The creation date of the lab.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The creation date of the lab.",
        SerializedName = @"createdDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? CreatedDate { get;  }
        /// <summary>The lab's default premium storage account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The lab's default premium storage account.",
        SerializedName = @"defaultPremiumStorageAccount",
        PossibleTypes = new [] { typeof(string) })]
        string DefaultPremiumStorageAccount { get;  }
        /// <summary>Default secret for creating virtual machines.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Default secret for creating virtual machines.",
        SerializedName = @"defaultSecretName",
        PossibleTypes = new [] { typeof(string) })]
        string DefaultSecretName { get; set; }
        /// <summary>The lab's default storage account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The lab's default storage account.",
        SerializedName = @"defaultStorageAccount",
        PossibleTypes = new [] { typeof(string) })]
        string DefaultStorageAccount { get;  }
        /// <summary>Is auto upgrade of CSE disabled for the lab?</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Is auto upgrade of CSE disabled for the lab?",
        SerializedName = @"disableAutoUpgradeCseMinorVersion",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DisableAutoUpgradeCseMinorVersion { get; set; }
        /// <summary>
        /// Gets or sets resourceId of the disk encryption set to use for enabling encryption at rest.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets resourceId of the disk encryption set to use for enabling encryption at rest.",
        SerializedName = @"diskEncryptionSetId",
        PossibleTypes = new [] { typeof(string) })]
        string EncryptionDiskEncryptionSetId { get; set; }
        /// <summary>
        /// Gets or sets the type of key used to encrypt the data of the disk. Possible values include: 'EncryptionAtRestWithPlatformKey',
        /// 'EncryptionAtRestWithCustomerKey'
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the type of key used to encrypt the data of the disk. Possible values include: 'EncryptionAtRestWithPlatformKey', 'EncryptionAtRestWithCustomerKey'",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EncryptionType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EncryptionType? EncryptionType { get; set; }
        /// <summary>The access rights to be granted to the user when provisioning an environment</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The access rights to be granted to the user when provisioning an environment",
        SerializedName = @"environmentPermission",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnvironmentPermission) })]
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnvironmentPermission? EnvironmentPermission { get; set; }
        /// <summary>Extended properties of the lab used for experimental features</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Extended properties of the lab used for experimental features",
        SerializedName = @"extendedProperties",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabPropertiesExtendedProperties) })]
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabPropertiesExtendedProperties ExtendedProperty { get; set; }
        /// <summary>
        /// Indicates whether to create Lab resources (e.g. Storage accounts and Key Vaults) in network isolation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether to create Lab resources (e.g. Storage accounts and Key Vaults) in network isolation.",
        SerializedName = @"isolateLabResources",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus? IsolateLabResource { get; set; }
        /// <summary>
        /// Type of storage used by the lab. It can be either Premium or Standard. Default is Premium.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Type of storage used by the lab. It can be either Premium or Standard. Default is Premium.",
        SerializedName = @"labStorageType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.StorageType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.StorageType? LabStorageType { get; set; }
        /// <summary>The load balancer used to for lab VMs that use shared IP address.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The load balancer used to for lab VMs that use shared IP address.",
        SerializedName = @"loadBalancerId",
        PossibleTypes = new [] { typeof(string) })]
        string LoadBalancerId { get;  }
        /// <summary>List of identities which can be used for management of resources.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of identities which can be used for management of resources.",
        SerializedName = @"managementIdentities",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabPropertiesManagementIdentities) })]
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabPropertiesManagementIdentities ManagementIdentity { get; set; }
        /// <summary>
        /// The ordered list of artifact resource IDs that should be applied on all Linux VM creations by default, prior to the artifacts
        /// specified by the user.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ordered list of artifact resource IDs that should be applied on all Linux VM creations by default, prior to the artifacts specified by the user.",
        SerializedName = @"mandatoryArtifactsResourceIdsLinux",
        PossibleTypes = new [] { typeof(string) })]
        string[] MandatoryArtifactsResourceIdsLinux { get; set; }
        /// <summary>
        /// The ordered list of artifact resource IDs that should be applied on all Windows VM creations by default, prior to the
        /// artifacts specified by the user.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ordered list of artifact resource IDs that should be applied on all Windows VM creations by default, prior to the artifacts specified by the user.",
        SerializedName = @"mandatoryArtifactsResourceIdsWindows",
        PossibleTypes = new [] { typeof(string) })]
        string[] MandatoryArtifactsResourceIdsWindow { get; set; }
        /// <summary>
        /// The Network Security Group attached to the lab VMs Network interfaces to restrict open ports.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The Network Security Group attached to the lab VMs Network interfaces to restrict open ports.",
        SerializedName = @"networkSecurityGroupId",
        PossibleTypes = new [] { typeof(string) })]
        string NetworkSecurityGroupId { get;  }
        /// <summary>
        /// The setting to enable usage of premium data disks.
        /// When its value is 'Enabled', creation of standard or premium data disks is allowed.
        /// When its value is 'Disabled', only creation of standard data disks is allowed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The setting to enable usage of premium data disks.
        When its value is 'Enabled', creation of standard or premium data disks is allowed.
        When its value is 'Disabled', only creation of standard data disks is allowed.",
        SerializedName = @"premiumDataDisks",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.PremiumDataDisk) })]
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.PremiumDataDisk? PremiumDataDisk { get; set; }
        /// <summary>The lab's premium data disk storage account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The lab's premium data disk storage account.",
        SerializedName = @"premiumDataDiskStorageAccount",
        PossibleTypes = new [] { typeof(string) })]
        string PremiumDataDiskStorageAccount { get;  }
        /// <summary>The provisioning status of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The provisioning status of the resource.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        string ProvisioningState { get;  }
        /// <summary>The public IP address for the lab's load balancer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The public IP address for the lab's load balancer.",
        SerializedName = @"publicIpId",
        PossibleTypes = new [] { typeof(string) })]
        string PublicIPId { get;  }
        /// <summary>Is the lab support banner active/enabled at this time?</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Is the lab support banner active/enabled at this time?",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus? SupportEnabled { get; set; }
        /// <summary>
        /// The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown.",
        SerializedName = @"markdown",
        PossibleTypes = new [] { typeof(string) })]
        string SupportMarkdown { get; set; }
        /// <summary>The unique immutable identifier of a resource (Guid).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The unique immutable identifier of a resource (Guid).",
        SerializedName = @"uniqueIdentifier",
        PossibleTypes = new [] { typeof(string) })]
        string UniqueIdentifier { get;  }
        /// <summary>
        /// The resource group ID in which all new lab virtual machines will be created. Ex: /subscriptions/subId/resourceGroups/rgName
        /// To let DevTest Labs manage resource group creation, set this value to null.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The resource group ID in which all new lab virtual machines will be created. Ex: /subscriptions/subId/resourceGroups/rgName To let DevTest Labs manage resource group creation, set this value to null.",
        SerializedName = @"vmCreationResourceGroup",
        PossibleTypes = new [] { typeof(string) })]
        string VMCreationResourceGroup { get;  }
        /// <summary>The lab's Key vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The lab's Key vault.",
        SerializedName = @"vaultName",
        PossibleTypes = new [] { typeof(string) })]
        string VaultName { get;  }

    }
    /// Properties of a lab.
    internal partial interface ILabPropertiesInternal

    {
        /// <summary>The properties of any lab announcement associated with this lab</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabAnnouncementProperties Announcement { get; set; }
        /// <summary>Is the lab announcement active/enabled at this time?</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus? AnnouncementEnabled { get; set; }
        /// <summary>The time at which the announcement expires (null for never)</summary>
        global::System.DateTime? AnnouncementExpirationDate { get; set; }
        /// <summary>Has this announcement expired?</summary>
        bool? AnnouncementExpired { get; set; }
        /// <summary>
        /// The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown.
        /// </summary>
        string AnnouncementMarkdown { get; set; }
        /// <summary>The provisioning status of the resource.</summary>
        string AnnouncementProvisioningState { get; set; }
        /// <summary>The plain text title for the lab announcement</summary>
        string AnnouncementTitle { get; set; }
        /// <summary>The unique immutable identifier of a resource (Guid).</summary>
        string AnnouncementUniqueIdentifier { get; set; }
        /// <summary>The lab's artifact storage account.</summary>
        string ArtifactsStorageAccount { get; set; }
        /// <summary>Is browser connect enabled for the lab</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus? BrowserConnect { get; set; }
        /// <summary>The creation date of the lab.</summary>
        global::System.DateTime? CreatedDate { get; set; }
        /// <summary>The lab's default premium storage account.</summary>
        string DefaultPremiumStorageAccount { get; set; }
        /// <summary>Default secret for creating virtual machines.</summary>
        string DefaultSecretName { get; set; }
        /// <summary>The lab's default storage account.</summary>
        string DefaultStorageAccount { get; set; }
        /// <summary>Is auto upgrade of CSE disabled for the lab?</summary>
        bool? DisableAutoUpgradeCseMinorVersion { get; set; }
        /// <summary>Mechanism used for encryption of resources in a lab (such as virtual machines).</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.IEncryption Encryption { get; set; }
        /// <summary>
        /// Gets or sets resourceId of the disk encryption set to use for enabling encryption at rest.
        /// </summary>
        string EncryptionDiskEncryptionSetId { get; set; }
        /// <summary>
        /// Gets or sets the type of key used to encrypt the data of the disk. Possible values include: 'EncryptionAtRestWithPlatformKey',
        /// 'EncryptionAtRestWithCustomerKey'
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EncryptionType? EncryptionType { get; set; }
        /// <summary>The access rights to be granted to the user when provisioning an environment</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnvironmentPermission? EnvironmentPermission { get; set; }
        /// <summary>Extended properties of the lab used for experimental features</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabPropertiesExtendedProperties ExtendedProperty { get; set; }
        /// <summary>
        /// Indicates whether to create Lab resources (e.g. Storage accounts and Key Vaults) in network isolation.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus? IsolateLabResource { get; set; }
        /// <summary>
        /// Type of storage used by the lab. It can be either Premium or Standard. Default is Premium.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.StorageType? LabStorageType { get; set; }
        /// <summary>The load balancer used to for lab VMs that use shared IP address.</summary>
        string LoadBalancerId { get; set; }
        /// <summary>List of identities which can be used for management of resources.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabPropertiesManagementIdentities ManagementIdentity { get; set; }
        /// <summary>
        /// The ordered list of artifact resource IDs that should be applied on all Linux VM creations by default, prior to the artifacts
        /// specified by the user.
        /// </summary>
        string[] MandatoryArtifactsResourceIdsLinux { get; set; }
        /// <summary>
        /// The ordered list of artifact resource IDs that should be applied on all Windows VM creations by default, prior to the
        /// artifacts specified by the user.
        /// </summary>
        string[] MandatoryArtifactsResourceIdsWindow { get; set; }
        /// <summary>
        /// The Network Security Group attached to the lab VMs Network interfaces to restrict open ports.
        /// </summary>
        string NetworkSecurityGroupId { get; set; }
        /// <summary>
        /// The setting to enable usage of premium data disks.
        /// When its value is 'Enabled', creation of standard or premium data disks is allowed.
        /// When its value is 'Disabled', only creation of standard data disks is allowed.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.PremiumDataDisk? PremiumDataDisk { get; set; }
        /// <summary>The lab's premium data disk storage account.</summary>
        string PremiumDataDiskStorageAccount { get; set; }
        /// <summary>The provisioning status of the resource.</summary>
        string ProvisioningState { get; set; }
        /// <summary>The public IP address for the lab's load balancer.</summary>
        string PublicIPId { get; set; }
        /// <summary>The properties of any lab support message associated with this lab</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Models.Api20210901.ILabSupportProperties Support { get; set; }
        /// <summary>Is the lab support banner active/enabled at this time?</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevTestLabs.Support.EnableStatus? SupportEnabled { get; set; }
        /// <summary>
        /// The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown.
        /// </summary>
        string SupportMarkdown { get; set; }
        /// <summary>The unique immutable identifier of a resource (Guid).</summary>
        string UniqueIdentifier { get; set; }
        /// <summary>
        /// The resource group ID in which all new lab virtual machines will be created. Ex: /subscriptions/subId/resourceGroups/rgName
        /// To let DevTest Labs manage resource group creation, set this value to null.
        /// </summary>
        string VMCreationResourceGroup { get; set; }
        /// <summary>The lab's Key vault.</summary>
        string VaultName { get; set; }

    }
}