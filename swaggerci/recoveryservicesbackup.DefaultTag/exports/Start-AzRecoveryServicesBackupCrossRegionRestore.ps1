
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Restores the specified backed up data in a different region as compared to where the data is backed up.
.Description
Restores the specified backed up data in a different region as compared to where the data is backed up.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.RecoveryServicesBackup.Models.Api20241115.ICrossRegionRestoreRequest
.Inputs
Microsoft.Azure.PowerShell.Cmdlets.RecoveryServicesBackup.Models.IRecoveryServicesBackupIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

CROSSREGIONRESTOREACCESSDETAIL <ICrrAccessToken>: Access details for cross region restore
  ObjectType <String>: Type of the specific object - used for deserializing
  [AccessTokenString <String>]: Access token used for authentication
  [BackupManagementType <String>]: Backup Management Type
  [BmsActiveRegion <String>]: Active region name of BMS Stamp
  [ContainerName <String>]: Container Unique name
  [ContainerType <String>]: Container Type
  [CoordinatorServiceStampId <String>]: CoordinatorServiceStampId to be used by BCM in restore call
  [CoordinatorServiceStampUri <String>]: CoordinatorServiceStampUri to be used by BCM in restore call
  [DatasourceContainerName <String>]: Datasource Container Unique Name
  [DatasourceId <String>]: Datasource Id
  [DatasourceName <String>]: Datasource Friendly Name
  [DatasourceType <String>]: Datasource Type
  [ProtectionContainerId <Int64?>]: Protected item container id
  [ProtectionServiceStampId <String>]: ProtectionServiceStampId to be used by BCM in restore call
  [ProtectionServiceStampUri <String>]: ProtectionServiceStampUri to be used by BCM in restore call
  [RecoveryPointId <String>]: Recovery Point Id
  [RecoveryPointTime <String>]: Recovery Point Time
  [ResourceGroupName <String>]: Resource Group name of the source vault
  [ResourceId <String>]: Resource Id of the source vault
  [ResourceName <String>]: Resource Name of the source vault
  [RpIsManagedVirtualMachine <Boolean?>]: Recovery point information: Managed virtual machine
  [RpOriginalSaOption <Boolean?>]: Recovery point information: Original SA option
  [RpTierInformation <ICrrAccessTokenRpTierInformation>]: Recovery point Tier Information
    [(Any) <String>]: This indicates any property can be added to this object.
  [RpVMSizeDescription <String>]: Recovery point information: VM size description
  [SubscriptionId <String>]: Subscription Id of the source vault
  [TokenExtendedInformation <String>]: Extended Information about the token like FileSpec etc.

INPUTOBJECT <IRecoveryServicesBackupIdentity>: Identity Parameter
  [AzureRegion <String>]: Azure region to hit Api
  [ContainerName <String>]: Name of the container.
  [FabricName <String>]: Fabric name associated with the container.
  [Id <String>]: Resource identity path
  [OperationId <String>]: 
  [ProtectedItemName <String>]: Name of the Protected Item.
  [RecoveryPointId <String>]: Recovery Point Id
  [ResourceGroupName <String>]: The name of the resource group where the recovery services vault is present.
  [SubscriptionId <String>]: The subscription Id.
  [VaultName <String>]: The name of the recovery services vault.

PARAMETER <ICrossRegionRestoreRequest>: .
  [CrossRegionRestoreAccessDetail <ICrrAccessToken>]: Access details for cross region restore
    ObjectType <String>: Type of the specific object - used for deserializing
    [AccessTokenString <String>]: Access token used for authentication
    [BackupManagementType <String>]: Backup Management Type
    [BmsActiveRegion <String>]: Active region name of BMS Stamp
    [ContainerName <String>]: Container Unique name
    [ContainerType <String>]: Container Type
    [CoordinatorServiceStampId <String>]: CoordinatorServiceStampId to be used by BCM in restore call
    [CoordinatorServiceStampUri <String>]: CoordinatorServiceStampUri to be used by BCM in restore call
    [DatasourceContainerName <String>]: Datasource Container Unique Name
    [DatasourceId <String>]: Datasource Id
    [DatasourceName <String>]: Datasource Friendly Name
    [DatasourceType <String>]: Datasource Type
    [ProtectionContainerId <Int64?>]: Protected item container id
    [ProtectionServiceStampId <String>]: ProtectionServiceStampId to be used by BCM in restore call
    [ProtectionServiceStampUri <String>]: ProtectionServiceStampUri to be used by BCM in restore call
    [RecoveryPointId <String>]: Recovery Point Id
    [RecoveryPointTime <String>]: Recovery Point Time
    [ResourceGroupName <String>]: Resource Group name of the source vault
    [ResourceId <String>]: Resource Id of the source vault
    [ResourceName <String>]: Resource Name of the source vault
    [RpIsManagedVirtualMachine <Boolean?>]: Recovery point information: Managed virtual machine
    [RpOriginalSaOption <Boolean?>]: Recovery point information: Original SA option
    [RpTierInformation <ICrrAccessTokenRpTierInformation>]: Recovery point Tier Information
      [(Any) <String>]: This indicates any property can be added to this object.
    [RpVMSizeDescription <String>]: Recovery point information: VM size description
    [SubscriptionId <String>]: Subscription Id of the source vault
    [TokenExtendedInformation <String>]: Extended Information about the token like FileSpec etc.
  [RestoreRequestObjectType <String>]: This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
.Link
https://learn.microsoft.com/powershell/module/az.recoveryservicesbackup/start-azrecoveryservicesbackupcrossregionrestore
#>
function Start-AzRecoveryServicesBackupCrossRegionRestore {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='TriggerExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Trigger', Mandatory)]
    [Parameter(ParameterSetName='TriggerExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServicesBackup.Category('Path')]
    [System.String]
    # Azure region to hit Api
    ${AzureRegion},

    [Parameter(ParameterSetName='Trigger')]
    [Parameter(ParameterSetName='TriggerExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServicesBackup.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServicesBackup.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The subscription Id.
    ${SubscriptionId},

    [Parameter(ParameterSetName='TriggerViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='TriggerViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServicesBackup.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServicesBackup.Models.IRecoveryServicesBackupIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Trigger', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='TriggerViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServicesBackup.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServicesBackup.Models.Api20241115.ICrossRegionRestoreRequest]
    # .
    # To construct, see NOTES section for PARAMETER properties and create a hash table.
    ${Parameter},

    [Parameter(ParameterSetName='TriggerExpanded')]
    [Parameter(ParameterSetName='TriggerViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServicesBackup.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServicesBackup.Models.Api20241115.ICrrAccessToken]
    # Access details for cross region restore
    # To construct, see NOTES section for CROSSREGIONRESTOREACCESSDETAIL properties and create a hash table.
    ${CrossRegionRestoreAccessDetail},

    [Parameter(ParameterSetName='TriggerExpanded')]
    [Parameter(ParameterSetName='TriggerViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServicesBackup.Category('Body')]
    [System.String]
    # This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
    ${RestoreRequestObjectType},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServicesBackup.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServicesBackup.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServicesBackup.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServicesBackup.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServicesBackup.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServicesBackup.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServicesBackup.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServicesBackup.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServicesBackup.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServicesBackup.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServicesBackup.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServicesBackup.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServicesBackup.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Trigger = 'Az.RecoveryServicesBackup.private\Start-AzRecoveryServicesBackupCrossRegionRestore_Trigger';
            TriggerExpanded = 'Az.RecoveryServicesBackup.private\Start-AzRecoveryServicesBackupCrossRegionRestore_TriggerExpanded';
            TriggerViaIdentity = 'Az.RecoveryServicesBackup.private\Start-AzRecoveryServicesBackupCrossRegionRestore_TriggerViaIdentity';
            TriggerViaIdentityExpanded = 'Az.RecoveryServicesBackup.private\Start-AzRecoveryServicesBackupCrossRegionRestore_TriggerViaIdentityExpanded';
        }
        if (('Trigger', 'TriggerExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $testPlayback = $false
            $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.RecoveryServicesBackup.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServicesBackup.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServicesBackup.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServicesBackup.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServicesBackup.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
