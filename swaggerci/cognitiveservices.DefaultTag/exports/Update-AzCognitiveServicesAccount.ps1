
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Updates a Cognitive Services account
.Description
Updates a Cognitive Services account
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Models.ICognitiveServicesIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Models.Api20240401Preview.IAccount
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

APIPROPERTY <IApiProperties>: The api properties for special APIs.
  [(Any) <Object>]: This indicates any property can be added to this object.
  [AadClientId <String>]: (Metrics Advisor Only) The Azure AD Client Id (Application Id).
  [AadTenantId <String>]: (Metrics Advisor Only) The Azure AD Tenant Id.
  [EventHubConnectionString <String>]: (Personalization Only) The flag to enable statistics of Bing Search.
  [QnaAzureSearchEndpointId <String>]: (QnAMaker Only) The Azure Search endpoint id of QnAMaker.
  [QnaAzureSearchEndpointKey <String>]: (QnAMaker Only) The Azure Search endpoint key of QnAMaker.
  [QnaRuntimeEndpoint <String>]: (QnAMaker Only) The runtime endpoint of QnAMaker.
  [StatisticsEnabled <Boolean?>]: (Bing Search Only) The flag to enable statistics of Bing Search.
  [StorageAccountConnectionString <String>]: (Personalization Only) The storage account connection string.
  [SuperUser <String>]: (Metrics Advisor Only) The super user of Metrics Advisor.
  [WebsiteName <String>]: (Metrics Advisor Only) The website name of Metrics Advisor.

INPUTOBJECT <ICognitiveServicesIdentity>: Identity Parameter
  [AccountName <String>]: The name of Cognitive Services account.
  [CommitmentPlanAssociationName <String>]: The name of the commitment plan association with the Cognitive Services Account
  [CommitmentPlanName <String>]: The name of the commitmentPlan associated with the Cognitive Services Account
  [DefenderForAiSettingName <String>]: The name of the defender for AI setting.
  [DeploymentName <String>]: The name of the deployment associated with the Cognitive Services Account
  [EncryptionScopeName <String>]: The name of the encryptionScope associated with the Cognitive Services Account
  [Id <String>]: Resource identity path
  [Location <String>]: Resource location.
  [NspConfigurationName <String>]: The name of the NSP Configuration.
  [PrivateEndpointConnectionName <String>]: The name of the private endpoint connection associated with the Cognitive Services Account
  [RaiBlocklistItemName <String>]: The name of the RaiBlocklist Item associated with the custom blocklist
  [RaiBlocklistName <String>]: The name of the RaiBlocklist associated with the Cognitive Services Account
  [RaiPolicyName <String>]: The name of the RaiPolicy associated with the Cognitive Services Account
  [ResourceGroupName <String>]: The name of the resource group. The name is case insensitive.
  [SubscriptionId <String>]: The ID of the target subscription.

LOCATIONREGION <IRegionSetting[]>: .
  [Customsubdomain <String>]: Maps the region to the regional custom subdomain.
  [Name <String>]: Name of the region.
  [Value <Single?>]: A value for priority or weighted routing methods.

NETWORKACLSIPRULE <IIPRule[]>: The list of IP address rules.
  Value <String>: An IPv4 address range in CIDR notation, such as '124.56.78.91' (simple IP address) or '124.56.78.0/24' (all addresses that start with 124.56.78).

NETWORKACLSVIRTUALNETWORKRULE <IVirtualNetworkRule[]>: The list of virtual network rules.
  Id <String>: Full resource id of a vnet subnet, such as '/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1'.
  [IgnoreMissingVnetServiceEndpoint <Boolean?>]: Ignore missing vnet service endpoint or not.
  [State <String>]: Gets the state of virtual network rule.

USEROWNEDSTORAGE <IUserOwnedStorage[]>: The storage accounts for this resource.
  [IdentityClientId <String>]: 
  [ResourceId <String>]: Full resource id of a Microsoft.Storage resource.
.Link
https://learn.microsoft.com/powershell/module/az.cognitiveservices/update-azcognitiveservicesaccount
#>
function Update-AzCognitiveServicesAccount {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Models.Api20240401Preview.IAccount])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Alias('AccountName')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Path')]
    [System.String]
    # The name of Cognitive Services account.
    ${Name},

    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    ${SubscriptionId},

    [Parameter(ParameterSetName='UpdateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Models.ICognitiveServicesIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [System.String[]]
    # .
    ${AllowedFqdnList},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [System.String]
    # Identity Client id of a AML workspace resource.
    ${AmlWorkspaceIdentityClientId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [System.String]
    # Full resource id of a AML workspace resource.
    ${AmlWorkspaceResourceId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Models.Api20240401Preview.IApiProperties]
    # The api properties for special APIs.
    # To construct, see NOTES section for APIPROPERTY properties and create a hash table.
    ${ApiProperty},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [System.String]
    # Optional subdomain name used for token-based authentication.
    ${CustomSubDomainName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${DisableLocalAuth},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # The flag to enable dynamic throttling.
    ${DynamicThrottlingEnabled},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Support.KeySource])]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Support.KeySource]
    # Enumerates the possible value of keySource for Encryption
    ${EncryptionKeySource},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Support.ResourceIdentityType])]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Support.ResourceIdentityType]
    # The identity type.
    ${IdentityType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Models.Api20240401Preview.IIdentityUserAssignedIdentities]))]
    [System.Collections.Hashtable]
    # The list of user assigned identities associated with the resource.
    # The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}
    ${IdentityUserAssignedIdentity},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [System.String]
    # .
    ${KeyVaultPropertyIdentityClientId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [System.String]
    # Name of the Key from KeyVault
    ${KeyVaultPropertyKeyName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [System.String]
    # Uri of KeyVault
    ${KeyVaultPropertyKeyVaultUri},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [System.String]
    # Version of the Key from KeyVault
    ${KeyVaultPropertyKeyVersion},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [System.String]
    # The Kind of the resource.
    ${Kind},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [System.String]
    # The geo-location where the resource lives
    ${Location},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Models.Api20240401Preview.IRegionSetting[]]
    # .
    # To construct, see NOTES section for LOCATIONREGION properties and create a hash table.
    ${LocationRegion},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Support.RoutingMethods])]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Support.RoutingMethods]
    # Multiregion routing methods.
    ${LocationRoutingMethod},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [System.String]
    # Resource migration token.
    ${MigrationToken},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Support.ByPassSelection])]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Support.ByPassSelection]
    # Setting for trusted services.
    ${NetworkAclsBypass},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Support.NetworkRuleAction])]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Support.NetworkRuleAction]
    # The default action when no rule from ipRules and from virtualNetworkRules match.
    # This is only used after the bypass property has been evaluated.
    ${NetworkAclsDefaultAction},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Models.Api20240401Preview.IIPRule[]]
    # The list of IP address rules.
    # To construct, see NOTES section for NETWORKACLSIPRULE properties and create a hash table.
    ${NetworkAclsIPRule},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Models.Api20240401Preview.IVirtualNetworkRule[]]
    # The list of virtual network rules.
    # To construct, see NOTES section for NETWORKACLSVIRTUALNETWORKRULE properties and create a hash table.
    ${NetworkAclsVirtualNetworkRule},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Support.PublicNetworkAccess])]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Support.PublicNetworkAccess]
    # Whether or not public endpoint access is allowed for this account.
    ${PublicNetworkAccess},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [System.String]
    # The storage resource Id.
    ${RaiMonitorConfigAdxStorageResourceId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [System.String]
    # The identity client Id to access the storage.
    ${RaiMonitorConfigIdentityClientId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${Restore},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${RestrictOutboundNetworkAccess},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [System.Int32]
    # If the SKU supports scale out/in then the capacity integer should be included.
    # If scale out/in is not possible for the resource this may be omitted.
    ${SkuCapacity},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [System.String]
    # If the service has different generations of hardware, for the same SKU, then that can be captured here.
    ${SkuFamily},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [System.String]
    # The name of the SKU.
    # Ex - P3.
    # It is typically a letter+number code
    ${SkuName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [System.String]
    # The SKU size.
    # When the name field is the combination of tier and some other value, this would be the standalone code.
    ${SkuSize},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Support.SkuTier])]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Support.SkuTier]
    # This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
    ${SkuTier},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Models.Api20240401Preview.IAccountTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Models.Api20240401Preview.IUserOwnedStorage[]]
    # The storage accounts for this resource.
    # To construct, see NOTES section for USEROWNEDSTORAGE properties and create a hash table.
    ${UserOwnedStorage},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            UpdateExpanded = 'Az.CognitiveServices.private\Update-AzCognitiveServicesAccount_UpdateExpanded';
            UpdateViaIdentityExpanded = 'Az.CognitiveServices.private\Update-AzCognitiveServicesAccount_UpdateViaIdentityExpanded';
        }
        if (('UpdateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $testPlayback = $false
            $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
