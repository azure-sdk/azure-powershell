
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Model capacity calculator.
.Description
Model capacity calculator.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Models.Api20241001.ICalculateModelCapacityParameter
.Inputs
Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Models.ICognitiveServicesIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Models.Api20241001.ICalculateModelCapacityResult
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <ICognitiveServicesIdentity>: Identity Parameter
  [AccountName <String>]: The name of Cognitive Services account.
  [CommitmentPlanAssociationName <String>]: The name of the commitment plan association with the Cognitive Services Account
  [CommitmentPlanName <String>]: The name of the commitmentPlan associated with the Cognitive Services Account
  [DefenderForAiSettingName <String>]: The name of the defender for AI setting.
  [DeploymentName <String>]: The name of the deployment associated with the Cognitive Services Account
  [EncryptionScopeName <String>]: The name of the encryptionScope associated with the Cognitive Services Account
  [FilterName <String>]: The name of the RAI Content Filter.
  [Id <String>]: Resource identity path
  [Location <String>]: Resource location.
  [NspConfigurationName <String>]: The name of the NSP Configuration.
  [PrivateEndpointConnectionName <String>]: The name of the private endpoint connection associated with the Cognitive Services Account
  [RaiBlocklistItemName <String>]: The name of the RaiBlocklist Item associated with the custom blocklist
  [RaiBlocklistName <String>]: The name of the RaiBlocklist associated with the Cognitive Services Account
  [RaiPolicyName <String>]: The name of the RaiPolicy associated with the Cognitive Services Account
  [ResourceGroupName <String>]: The name of the resource group. The name is case insensitive.
  [SubscriptionId <String>]: The ID of the target subscription.

PARAMETER <ICalculateModelCapacityParameter>: Calculate Model Capacity parameter.
  [CallRateLimitCount <Single?>]: The count value of Call Rate Limit.
  [CallRateLimitRenewalPeriod <Single?>]: The renewal period in seconds of Call Rate Limit.
  [CallRateLimitRule <IThrottlingRule[]>]: 
    [Count <Single?>]: 
    [DynamicThrottlingEnabled <Boolean?>]: 
    [Key <String>]: 
    [MatchPattern <IRequestMatchPattern[]>]: 
      [Method <String>]: 
      [Path <String>]: 
    [MinCount <Single?>]: 
    [RenewalPeriod <Single?>]: 
  [ModelFormat <String>]: Deployment model format.
  [ModelName <String>]: Deployment model name.
  [ModelPublisher <String>]: Deployment model publisher.
  [ModelSource <String>]: Optional. Deployment model source ARM resource ID.
  [ModelSourceAccount <String>]: Optional. Source of the model, another Microsoft.CognitiveServices accounts ARM resource ID.
  [ModelVersion <String>]: Optional. Deployment model version. If version is not specified, a default version will be assigned. The default version is different for different models and might change when there is new version available for a model. Default version for a model could be found from list models API.
  [SkuName <String>]: The name of SKU.
  [Workload <IModelCapacityCalculatorWorkload[]>]: List of Model Capacity Calculator Workload.
    [RequestParameterAvgGeneratedToken <Int64?>]: Average generated tokens.
    [RequestParameterAvgPromptToken <Int64?>]: Average prompt tokens.
    [RequestPerMinute <Int64?>]: Request per minute.

WORKLOAD <IModelCapacityCalculatorWorkload[]>: List of Model Capacity Calculator Workload.
  [RequestParameterAvgGeneratedToken <Int64?>]: Average generated tokens.
  [RequestParameterAvgPromptToken <Int64?>]: Average prompt tokens.
  [RequestPerMinute <Int64?>]: Request per minute.
.Link
https://learn.microsoft.com/powershell/module/az.cognitiveservices/invoke-azcognitiveservicescalculatemodelcapacity
#>
function Invoke-AzCognitiveServicesCalculateModelCapacity {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Models.Api20241001.ICalculateModelCapacityResult])]
[CmdletBinding(DefaultParameterSetName='CalculateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Calculate')]
    [Parameter(ParameterSetName='CalculateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    ${SubscriptionId},

    [Parameter(ParameterSetName='CalculateViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CalculateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Models.ICognitiveServicesIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Calculate', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CalculateViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Models.Api20241001.ICalculateModelCapacityParameter]
    # Calculate Model Capacity parameter.
    # To construct, see NOTES section for PARAMETER properties and create a hash table.
    ${Parameter},

    [Parameter(ParameterSetName='CalculateExpanded')]
    [Parameter(ParameterSetName='CalculateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [System.String]
    # Deployment model format.
    ${ModelFormat},

    [Parameter(ParameterSetName='CalculateExpanded')]
    [Parameter(ParameterSetName='CalculateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [System.String]
    # Deployment model name.
    ${ModelName},

    [Parameter(ParameterSetName='CalculateExpanded')]
    [Parameter(ParameterSetName='CalculateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [System.String]
    # Deployment model publisher.
    ${ModelPublisher},

    [Parameter(ParameterSetName='CalculateExpanded')]
    [Parameter(ParameterSetName='CalculateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [System.String]
    # Optional.
    # Deployment model source ARM resource ID.
    ${ModelSource},

    [Parameter(ParameterSetName='CalculateExpanded')]
    [Parameter(ParameterSetName='CalculateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [System.String]
    # Optional.
    # Source of the model, another Microsoft.CognitiveServices accounts ARM resource ID.
    ${ModelSourceAccount},

    [Parameter(ParameterSetName='CalculateExpanded')]
    [Parameter(ParameterSetName='CalculateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [System.String]
    # Optional.
    # Deployment model version.
    # If version is not specified, a default version will be assigned.
    # The default version is different for different models and might change when there is new version available for a model.
    # Default version for a model could be found from list models API.
    ${ModelVersion},

    [Parameter(ParameterSetName='CalculateExpanded')]
    [Parameter(ParameterSetName='CalculateViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [System.String]
    # The name of SKU.
    ${SkuName},

    [Parameter(ParameterSetName='CalculateExpanded')]
    [Parameter(ParameterSetName='CalculateViaIdentityExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Models.Api20241001.IModelCapacityCalculatorWorkload[]]
    # List of Model Capacity Calculator Workload.
    # To construct, see NOTES section for WORKLOAD properties and create a hash table.
    ${Workload},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Calculate = 'Az.CognitiveServices.private\Invoke-AzCognitiveServicesCalculateModelCapacity_Calculate';
            CalculateExpanded = 'Az.CognitiveServices.private\Invoke-AzCognitiveServicesCalculateModelCapacity_CalculateExpanded';
            CalculateViaIdentity = 'Az.CognitiveServices.private\Invoke-AzCognitiveServicesCalculateModelCapacity_CalculateViaIdentity';
            CalculateViaIdentityExpanded = 'Az.CognitiveServices.private\Invoke-AzCognitiveServicesCalculateModelCapacity_CalculateViaIdentityExpanded';
        }
        if (('Calculate', 'CalculateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $testPlayback = $false
            $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
