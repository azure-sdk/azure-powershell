// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Models.Api20250601
{
    using static Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Runtime.Extensions;

    /// <summary>
    /// Specifies in AI Foundry where virtual network injection occurs to secure scenarios like Agents entirely within the user's
    /// private network, eliminating public internet exposure while maintaining control over network configurations and resources.
    /// </summary>
    public partial class NetworkInjections :
        Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Models.Api20250601.INetworkInjections,
        Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Models.Api20250601.INetworkInjectionsInternal
    {

        /// <summary>Backing field for <see cref="Scenario" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Support.ScenarioType? _scenario;

        /// <summary>
        /// Specifies what features in AI Foundry network injection applies to. Currently only supports 'agent' for agent scenarios.
        /// 'none' means no network injection.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Support.ScenarioType? Scenario { get => this._scenario; set => this._scenario = value; }

        /// <summary>Backing field for <see cref="SubnetArmId" /> property.</summary>
        private string _subnetArmId;

        /// <summary>Specify the subnet for which your Agent Client is injected into.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.PropertyOrigin.Owned)]
        public string SubnetArmId { get => this._subnetArmId; set => this._subnetArmId = value; }

        /// <summary>Backing field for <see cref="UseMicrosoftManagedNetwork" /> property.</summary>
        private bool? _useMicrosoftManagedNetwork;

        /// <summary>Boolean to enable Microsoft Managed Network for subnet delegation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.PropertyOrigin.Owned)]
        public bool? UseMicrosoftManagedNetwork { get => this._useMicrosoftManagedNetwork; set => this._useMicrosoftManagedNetwork = value; }

        /// <summary>Creates an new <see cref="NetworkInjections" /> instance.</summary>
        public NetworkInjections()
        {

        }
    }
    /// Specifies in AI Foundry where virtual network injection occurs to secure scenarios like Agents entirely within the user's
    /// private network, eliminating public internet exposure while maintaining control over network configurations and resources.
    public partial interface INetworkInjections :
        Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Specifies what features in AI Foundry network injection applies to. Currently only supports 'agent' for agent scenarios.
        /// 'none' means no network injection.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies what features in AI Foundry network injection applies to. Currently only supports 'agent' for agent scenarios. 'none' means no network injection.",
        SerializedName = @"scenario",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Support.ScenarioType) })]
        Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Support.ScenarioType? Scenario { get; set; }
        /// <summary>Specify the subnet for which your Agent Client is injected into.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specify the subnet for which your Agent Client is injected into.",
        SerializedName = @"subnetArmId",
        PossibleTypes = new [] { typeof(string) })]
        string SubnetArmId { get; set; }
        /// <summary>Boolean to enable Microsoft Managed Network for subnet delegation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Boolean to enable Microsoft Managed Network for subnet delegation",
        SerializedName = @"useMicrosoftManagedNetwork",
        PossibleTypes = new [] { typeof(bool) })]
        bool? UseMicrosoftManagedNetwork { get; set; }

    }
    /// Specifies in AI Foundry where virtual network injection occurs to secure scenarios like Agents entirely within the user's
    /// private network, eliminating public internet exposure while maintaining control over network configurations and resources.
    internal partial interface INetworkInjectionsInternal

    {
        /// <summary>
        /// Specifies what features in AI Foundry network injection applies to. Currently only supports 'agent' for agent scenarios.
        /// 'none' means no network injection.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Support.ScenarioType? Scenario { get; set; }
        /// <summary>Specify the subnet for which your Agent Client is injected into.</summary>
        string SubnetArmId { get; set; }
        /// <summary>Boolean to enable Microsoft Managed Network for subnet delegation</summary>
        bool? UseMicrosoftManagedNetwork { get; set; }

    }
}