// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Models.Api20241001
{
    using static Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Runtime.Extensions;

    /// <summary>Azure OpenAI Content Filter Properties.</summary>
    public partial class RaiContentFilterProperties :
        Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Models.Api20241001.IRaiContentFilterProperties,
        Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Models.Api20241001.IRaiContentFilterPropertiesInternal
    {

        /// <summary>Backing field for <see cref="IsMultiLevelFilter" /> property.</summary>
        private bool? _isMultiLevelFilter;

        /// <summary>If the Content Filter has multi severity levels(Low, Medium, or High).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.PropertyOrigin.Owned)]
        public bool? IsMultiLevelFilter { get => this._isMultiLevelFilter; set => this._isMultiLevelFilter = value; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>Name of Content Filter.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="Source" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Support.RaiPolicyContentSource? _source;

        /// <summary>Content source to apply the Content Filters.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Support.RaiPolicyContentSource? Source { get => this._source; set => this._source = value; }

        /// <summary>Creates an new <see cref="RaiContentFilterProperties" /> instance.</summary>
        public RaiContentFilterProperties()
        {

        }
    }
    /// Azure OpenAI Content Filter Properties.
    public partial interface IRaiContentFilterProperties :
        Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Runtime.IJsonSerializable
    {
        /// <summary>If the Content Filter has multi severity levels(Low, Medium, or High).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If the Content Filter has multi severity levels(Low, Medium, or High).",
        SerializedName = @"isMultiLevelFilter",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsMultiLevelFilter { get; set; }
        /// <summary>Name of Content Filter.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of Content Filter.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>Content source to apply the Content Filters.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Content source to apply the Content Filters.",
        SerializedName = @"source",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Support.RaiPolicyContentSource) })]
        Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Support.RaiPolicyContentSource? Source { get; set; }

    }
    /// Azure OpenAI Content Filter Properties.
    internal partial interface IRaiContentFilterPropertiesInternal

    {
        /// <summary>If the Content Filter has multi severity levels(Low, Medium, or High).</summary>
        bool? IsMultiLevelFilter { get; set; }
        /// <summary>Name of Content Filter.</summary>
        string Name { get; set; }
        /// <summary>Content source to apply the Content Filters.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CognitiveServices.Support.RaiPolicyContentSource? Source { get; set; }

    }
}