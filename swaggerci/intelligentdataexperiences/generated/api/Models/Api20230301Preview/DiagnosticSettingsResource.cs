// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Runtime.Extensions;

    /// <summary>The diagnostic setting resource.</summary>
    public partial class DiagnosticSettingsResource :
        Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IDiagnosticSettingsResource,
        Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IDiagnosticSettingsResourceInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IProxyOnlyResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IProxyOnlyResource __proxyOnlyResource = new Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.ProxyOnlyResource();

        /// <summary>The resource Id for the event hub authorization rule.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Origin(Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.PropertyOrigin.Inlined)]
        public string EventHubAuthorizationRuleId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IDiagnosticSettingsInternal)Property).EventHubAuthorizationRuleId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IDiagnosticSettingsInternal)Property).EventHubAuthorizationRuleId = value ?? null; }

        /// <summary>
        /// The name of the event hub. If none is specified, the default event hub will be selected.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Origin(Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.PropertyOrigin.Inlined)]
        public string EventHubName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IDiagnosticSettingsInternal)Property).EventHubName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IDiagnosticSettingsInternal)Property).EventHubName = value ?? null; }

        /// <summary>Azure resource Id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Origin(Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IProxyOnlyResourceInternal)__proxyOnlyResource).Id; }

        /// <summary>The list of logs settings.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Origin(Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.ILogSettings[] Log { get => ((Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IDiagnosticSettingsInternal)Property).Log; set => ((Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IDiagnosticSettingsInternal)Property).Log = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IDiagnosticSettings Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IDiagnosticSettingsResourceInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.DiagnosticSettings()); set { {_property = value;} } }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IProxyOnlyResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IProxyOnlyResourceInternal)__proxyOnlyResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IProxyOnlyResourceInternal)__proxyOnlyResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IProxyOnlyResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IProxyOnlyResourceInternal)__proxyOnlyResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IProxyOnlyResourceInternal)__proxyOnlyResource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IProxyOnlyResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IProxyOnlyResourceInternal)__proxyOnlyResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IProxyOnlyResourceInternal)__proxyOnlyResource).Type = value; }

        /// <summary>Azure resource name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Origin(Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IProxyOnlyResourceInternal)__proxyOnlyResource).Name; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IDiagnosticSettings _property;

        /// <summary>Properties of a Diagnostic Settings Resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Origin(Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IDiagnosticSettings Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.DiagnosticSettings()); set => this._property = value; }

        /// <summary>
        /// The service bus rule Id of the diagnostic setting. This is here to maintain backwards compatibility.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Origin(Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.PropertyOrigin.Inlined)]
        public string ServiceBusRuleId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IDiagnosticSettingsInternal)Property).ServiceBusRuleId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IDiagnosticSettingsInternal)Property).ServiceBusRuleId = value ?? null; }

        /// <summary>
        /// The resource ID of the storage account to which you would like to send Diagnostic Logs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Origin(Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.PropertyOrigin.Inlined)]
        public string StorageAccountId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IDiagnosticSettingsInternal)Property).StorageAccountId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IDiagnosticSettingsInternal)Property).StorageAccountId = value ?? null; }

        /// <summary>Azure resource type</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Origin(Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IProxyOnlyResourceInternal)__proxyOnlyResource).Type; }

        /// <summary>
        /// The workspace ID (resource ID of a Log Analytics workspace) for a Log Analytics workspace to which you would like to send
        /// Diagnostic Logs. Example: /subscriptions/4b9e8510-67ab-4e9a-95a9-e2f1e570ea9c/resourceGroups/insights-integration/providers/Microsoft.OperationalInsights/workspaces/viruela2
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Origin(Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.PropertyOrigin.Inlined)]
        public string WorkspaceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IDiagnosticSettingsInternal)Property).WorkspaceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IDiagnosticSettingsInternal)Property).WorkspaceId = value ?? null; }

        /// <summary>Creates an new <see cref="DiagnosticSettingsResource" /> instance.</summary>
        public DiagnosticSettingsResource()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__proxyOnlyResource), __proxyOnlyResource);
            await eventListener.AssertObjectIsValid(nameof(__proxyOnlyResource), __proxyOnlyResource);
        }
    }
    /// The diagnostic setting resource.
    public partial interface IDiagnosticSettingsResource :
        Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IProxyOnlyResource
    {
        /// <summary>The resource Id for the event hub authorization rule.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource Id for the event hub authorization rule.",
        SerializedName = @"eventHubAuthorizationRuleId",
        PossibleTypes = new [] { typeof(string) })]
        string EventHubAuthorizationRuleId { get; set; }
        /// <summary>
        /// The name of the event hub. If none is specified, the default event hub will be selected.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the event hub. If none is specified, the default event hub will be selected.",
        SerializedName = @"eventHubName",
        PossibleTypes = new [] { typeof(string) })]
        string EventHubName { get; set; }
        /// <summary>The list of logs settings.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of logs settings.",
        SerializedName = @"logs",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.ILogSettings) })]
        Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.ILogSettings[] Log { get; set; }
        /// <summary>
        /// The service bus rule Id of the diagnostic setting. This is here to maintain backwards compatibility.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The service bus rule Id of the diagnostic setting. This is here to maintain backwards compatibility.",
        SerializedName = @"serviceBusRuleId",
        PossibleTypes = new [] { typeof(string) })]
        string ServiceBusRuleId { get; set; }
        /// <summary>
        /// The resource ID of the storage account to which you would like to send Diagnostic Logs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource ID of the storage account to which you would like to send Diagnostic Logs.",
        SerializedName = @"storageAccountId",
        PossibleTypes = new [] { typeof(string) })]
        string StorageAccountId { get; set; }
        /// <summary>
        /// The workspace ID (resource ID of a Log Analytics workspace) for a Log Analytics workspace to which you would like to send
        /// Diagnostic Logs. Example: /subscriptions/4b9e8510-67ab-4e9a-95a9-e2f1e570ea9c/resourceGroups/insights-integration/providers/Microsoft.OperationalInsights/workspaces/viruela2
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The workspace ID (resource ID of a Log Analytics workspace) for a Log Analytics workspace to which you would like to send Diagnostic Logs. Example: /subscriptions/4b9e8510-67ab-4e9a-95a9-e2f1e570ea9c/resourceGroups/insights-integration/providers/Microsoft.OperationalInsights/workspaces/viruela2",
        SerializedName = @"workspaceId",
        PossibleTypes = new [] { typeof(string) })]
        string WorkspaceId { get; set; }

    }
    /// The diagnostic setting resource.
    internal partial interface IDiagnosticSettingsResourceInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IProxyOnlyResourceInternal
    {
        /// <summary>The resource Id for the event hub authorization rule.</summary>
        string EventHubAuthorizationRuleId { get; set; }
        /// <summary>
        /// The name of the event hub. If none is specified, the default event hub will be selected.
        /// </summary>
        string EventHubName { get; set; }
        /// <summary>The list of logs settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.ILogSettings[] Log { get; set; }
        /// <summary>Properties of a Diagnostic Settings Resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Intelligentdataexperiences.Models.Api20230301Preview.IDiagnosticSettings Property { get; set; }
        /// <summary>
        /// The service bus rule Id of the diagnostic setting. This is here to maintain backwards compatibility.
        /// </summary>
        string ServiceBusRuleId { get; set; }
        /// <summary>
        /// The resource ID of the storage account to which you would like to send Diagnostic Logs.
        /// </summary>
        string StorageAccountId { get; set; }
        /// <summary>
        /// The workspace ID (resource ID of a Log Analytics workspace) for a Log Analytics workspace to which you would like to send
        /// Diagnostic Logs. Example: /subscriptions/4b9e8510-67ab-4e9a-95a9-e2f1e570ea9c/resourceGroups/insights-integration/providers/Microsoft.OperationalInsights/workspaces/viruela2
        /// </summary>
        string WorkspaceId { get; set; }

    }
}