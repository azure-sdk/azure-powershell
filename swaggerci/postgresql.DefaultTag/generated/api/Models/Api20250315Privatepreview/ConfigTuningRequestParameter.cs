// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.PostgreSql.Models.Api20250315Privatepreview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.PostgreSql.Runtime.Extensions;

    /// <summary>Config tuning request parameters.</summary>
    public partial class ConfigTuningRequestParameter :
        Microsoft.Azure.PowerShell.Cmdlets.PostgreSql.Models.Api20250315Privatepreview.IConfigTuningRequestParameter,
        Microsoft.Azure.PowerShell.Cmdlets.PostgreSql.Models.Api20250315Privatepreview.IConfigTuningRequestParameterInternal
    {

        /// <summary>Backing field for <see cref="AllowServerRestart" /> property.</summary>
        private bool? _allowServerRestart;

        /// <summary>Indicates whether PG should be restarted during a tuning session.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.PostgreSql.PropertyOrigin.Owned)]
        public bool? AllowServerRestart { get => this._allowServerRestart; set => this._allowServerRestart = value; }

        /// <summary>Backing field for <see cref="ConfigTuningUsageMode" /> property.</summary>
        private bool? _configTuningUsageMode;

        /// <summary>The mode with which the feature will be enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.PostgreSql.PropertyOrigin.Owned)]
        public bool? ConfigTuningUsageMode { get => this._configTuningUsageMode; set => this._configTuningUsageMode = value; }

        /// <summary>Backing field for <see cref="ServerName" /> property.</summary>
        private string _serverName;

        /// <summary>The name of server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.PostgreSql.PropertyOrigin.Owned)]
        public string ServerName { get => this._serverName; set => this._serverName = value; }

        /// <summary>Backing field for <see cref="TargetImprovementMetric" /> property.</summary>
        private string _targetImprovementMetric;

        /// <summary>The target metric the tuning session is trying to improve.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PostgreSql.Origin(Microsoft.Azure.PowerShell.Cmdlets.PostgreSql.PropertyOrigin.Owned)]
        public string TargetImprovementMetric { get => this._targetImprovementMetric; set => this._targetImprovementMetric = value; }

        /// <summary>Creates an new <see cref="ConfigTuningRequestParameter" /> instance.</summary>
        public ConfigTuningRequestParameter()
        {

        }
    }
    /// Config tuning request parameters.
    public partial interface IConfigTuningRequestParameter :
        Microsoft.Azure.PowerShell.Cmdlets.PostgreSql.Runtime.IJsonSerializable
    {
        /// <summary>Indicates whether PG should be restarted during a tuning session.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether PG should be restarted during a tuning session.",
        SerializedName = @"allowServerRestarts",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AllowServerRestart { get; set; }
        /// <summary>The mode with which the feature will be enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The mode with which the feature will be enabled.",
        SerializedName = @"configTuningUsageMode",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ConfigTuningUsageMode { get; set; }
        /// <summary>The name of server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of server.",
        SerializedName = @"serverName",
        PossibleTypes = new [] { typeof(string) })]
        string ServerName { get; set; }
        /// <summary>The target metric the tuning session is trying to improve.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.PostgreSql.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The target metric the tuning session is trying to improve.",
        SerializedName = @"targetImprovementMetric",
        PossibleTypes = new [] { typeof(string) })]
        string TargetImprovementMetric { get; set; }

    }
    /// Config tuning request parameters.
    internal partial interface IConfigTuningRequestParameterInternal

    {
        /// <summary>Indicates whether PG should be restarted during a tuning session.</summary>
        bool? AllowServerRestart { get; set; }
        /// <summary>The mode with which the feature will be enabled.</summary>
        bool? ConfigTuningUsageMode { get; set; }
        /// <summary>The name of server.</summary>
        string ServerName { get; set; }
        /// <summary>The target metric the tuning session is trying to improve.</summary>
        string TargetImprovementMetric { get; set; }

    }
}