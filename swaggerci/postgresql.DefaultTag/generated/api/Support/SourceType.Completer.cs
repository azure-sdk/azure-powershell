// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlServer.Support
{

    /// <summary>
    /// Migration source server type : OnPremises, AWS, GCP, AzureVM, PostgreSQLSingleServer, AWS_RDS, AWS_AURORA, AWS_EC2, GCP_CloudSQL,
    /// GCP_AlloyDB, GCP_Compute, or EDB
    /// </summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlServer.Support.SourceTypeTypeConverter))]
    public partial struct SourceType :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "OnPremises".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'OnPremises'", "OnPremises", global::System.Management.Automation.CompletionResultType.ParameterValue, "OnPremises");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AWS".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AWS'", "AWS", global::System.Management.Automation.CompletionResultType.ParameterValue, "AWS");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "GCP".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'GCP'", "GCP", global::System.Management.Automation.CompletionResultType.ParameterValue, "GCP");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AzureVM".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AzureVM'", "AzureVM", global::System.Management.Automation.CompletionResultType.ParameterValue, "AzureVM");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "PostgreSQLSingleServer".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'PostgreSQLSingleServer'", "PostgreSQLSingleServer", global::System.Management.Automation.CompletionResultType.ParameterValue, "PostgreSQLSingleServer");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AWS_RDS".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AWS_RDS'", "AWS_RDS", global::System.Management.Automation.CompletionResultType.ParameterValue, "AWS_RDS");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AWS_AURORA".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AWS_AURORA'", "AWS_AURORA", global::System.Management.Automation.CompletionResultType.ParameterValue, "AWS_AURORA");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AWS_EC2".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AWS_EC2'", "AWS_EC2", global::System.Management.Automation.CompletionResultType.ParameterValue, "AWS_EC2");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "GCP_CloudSQL".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'GCP_CloudSQL'", "GCP_CloudSQL", global::System.Management.Automation.CompletionResultType.ParameterValue, "GCP_CloudSQL");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "GCP_AlloyDB".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'GCP_AlloyDB'", "GCP_AlloyDB", global::System.Management.Automation.CompletionResultType.ParameterValue, "GCP_AlloyDB");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "GCP_Compute".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'GCP_Compute'", "GCP_Compute", global::System.Management.Automation.CompletionResultType.ParameterValue, "GCP_Compute");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "EDB".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'EDB'", "EDB", global::System.Management.Automation.CompletionResultType.ParameterValue, "EDB");
            }
        }
    }
}