// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlServer.Support
{

    /// <summary>Name of storage tier for IOPS.</summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlServer.Support.AzureManagedDiskPerformanceTiersTypeConverter))]
    public partial struct AzureManagedDiskPerformanceTiers :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "P1".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'P1'", "P1", global::System.Management.Automation.CompletionResultType.ParameterValue, "P1");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "P2".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'P2'", "P2", global::System.Management.Automation.CompletionResultType.ParameterValue, "P2");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "P3".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'P3'", "P3", global::System.Management.Automation.CompletionResultType.ParameterValue, "P3");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "P4".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'P4'", "P4", global::System.Management.Automation.CompletionResultType.ParameterValue, "P4");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "P6".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'P6'", "P6", global::System.Management.Automation.CompletionResultType.ParameterValue, "P6");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "P10".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'P10'", "P10", global::System.Management.Automation.CompletionResultType.ParameterValue, "P10");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "P15".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'P15'", "P15", global::System.Management.Automation.CompletionResultType.ParameterValue, "P15");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "P20".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'P20'", "P20", global::System.Management.Automation.CompletionResultType.ParameterValue, "P20");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "P30".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'P30'", "P30", global::System.Management.Automation.CompletionResultType.ParameterValue, "P30");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "P40".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'P40'", "P40", global::System.Management.Automation.CompletionResultType.ParameterValue, "P40");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "P50".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'P50'", "P50", global::System.Management.Automation.CompletionResultType.ParameterValue, "P50");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "P60".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'P60'", "P60", global::System.Management.Automation.CompletionResultType.ParameterValue, "P60");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "P70".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'P70'", "P70", global::System.Management.Automation.CompletionResultType.ParameterValue, "P70");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "P80".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'P80'", "P80", global::System.Management.Automation.CompletionResultType.ParameterValue, "P80");
            }
        }
    }
}