// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlServer.Support
{

    /// <summary>Migration sub state.</summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.PostgreSqlServer.Support.MigrationSubStateTypeConverter))]
    public partial struct MigrationSubState :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "PerformingPreRequisiteSteps".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'PerformingPreRequisiteSteps'", "PerformingPreRequisiteSteps", global::System.Management.Automation.CompletionResultType.ParameterValue, "PerformingPreRequisiteSteps");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "WaitingForLogicalReplicationSetupRequestOnSourceDB".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'WaitingForLogicalReplicationSetupRequestOnSourceDB'", "WaitingForLogicalReplicationSetupRequestOnSourceDB", global::System.Management.Automation.CompletionResultType.ParameterValue, "WaitingForLogicalReplicationSetupRequestOnSourceDB");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "WaitingForDBsToMigrateSpecification".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'WaitingForDBsToMigrateSpecification'", "WaitingForDBsToMigrateSpecification", global::System.Management.Automation.CompletionResultType.ParameterValue, "WaitingForDBsToMigrateSpecification");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "WaitingForTargetDBOverwriteConfirmation".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'WaitingForTargetDBOverwriteConfirmation'", "WaitingForTargetDBOverwriteConfirmation", global::System.Management.Automation.CompletionResultType.ParameterValue, "WaitingForTargetDBOverwriteConfirmation");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "WaitingForDataMigrationScheduling".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'WaitingForDataMigrationScheduling'", "WaitingForDataMigrationScheduling", global::System.Management.Automation.CompletionResultType.ParameterValue, "WaitingForDataMigrationScheduling");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "WaitingForDataMigrationWindow".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'WaitingForDataMigrationWindow'", "WaitingForDataMigrationWindow", global::System.Management.Automation.CompletionResultType.ParameterValue, "WaitingForDataMigrationWindow");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "MigratingData".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'MigratingData'", "MigratingData", global::System.Management.Automation.CompletionResultType.ParameterValue, "MigratingData");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "WaitingForCutoverTrigger".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'WaitingForCutoverTrigger'", "WaitingForCutoverTrigger", global::System.Management.Automation.CompletionResultType.ParameterValue, "WaitingForCutoverTrigger");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CompletingMigration".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'CompletingMigration'", "CompletingMigration", global::System.Management.Automation.CompletionResultType.ParameterValue, "CompletingMigration");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Completed".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Completed'", "Completed", global::System.Management.Automation.CompletionResultType.ParameterValue, "Completed");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CancelingRequestedDBMigrations".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'CancelingRequestedDBMigrations'", "CancelingRequestedDBMigrations", global::System.Management.Automation.CompletionResultType.ParameterValue, "CancelingRequestedDBMigrations");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ValidationInProgress".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ValidationInProgress'", "ValidationInProgress", global::System.Management.Automation.CompletionResultType.ParameterValue, "ValidationInProgress");
            }
        }
    }
}