
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create a SecretsManagerSecret.
Please note that end user resource creation is currently restricted, but it will be enabled in the future.
.Description
Create a SecretsManagerSecret.
Please note that end user resource creation is currently restricted, but it will be enabled in the future.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ISecretsManagerSecret
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

AWPROPERTYREPLICAREGION <IReplicaRegion[]>: A custom type that specifies a ``Region`` and the ``KmsKeyId`` for a replica secret.
  [KmsKeyId <String>]: The ARN, key ID, or alias of the KMS key to encrypt the secret. If you don't include this field, Secrets Manager uses ``aws/secretsmanager``.
  [Region <String>]: A string that represents a ``Region``, for example 'us-east-1'.

AWPROPERTYTAG <ITagAutoGenerated54[]>: A list of tags to attach to the secret. Each tag is a key and value pair of strings in a JSON text string, for example: ``[{'Key':'CostCenter','Value':'12345'},{'Key':'environment','Value':'production'}]`` Secrets Manager tag key names are case sensitive. A tag with the key 'ABC' is a different tag from one with key 'abc'. Stack-level tags, tags you apply to the CloudFormation stack, are also attached to the secret. If you check tags in permissions policies as part of your security strategy, then adding or removing a tag can change permissions. If the completion of this operation would result in you losing your permissions for this secret, then Secrets Manager blocks the operation and returns an ``Access Denied`` error. For more information, see [Control access to secrets using tags](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_examples.html#tag-secrets-abac) and [Limit access to identities with tags that match secrets' tags](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_examples.html#auth-and-access_tags2). For information about how to format a JSON parameter for the various command line tool environments, see [Using JSON for Parameters](https://docs.aws.amazon.com/cli/latest/userguide/cli-using-param.html#cli-using-param-json). If your command-line tool or SDK requires quotation marks around the parameter, you should use single quotes to avoid confusion with the double quotes required in the JSON text. The following restrictions apply to tags: + Maximum number of tags per secret: 50 + Maximum key length: 127 Unicode characters in UTF-8 + Maximum value length: 255 Unicode characters in UTF-8 + Tag keys and values are case sensitive. + Do not use the ``aws:`` prefix in your tag names or values because AWS reserves it for AWS use. You can't edit or delete tag names or values with this prefix. Tags with this prefix do not count against your tags per secret limit. + If you use your tagging schema across multiple services and resources, other services might have restrictions on allowed characters. Generally allowed characters: letters, spaces, and numbers representable in UTF-8, plus the following special characters: + - = . _ : / @.
  [Key <String>]: The key identifier, or name, of the tag.
  [Value <String>]: The string value associated with the key of the tag.
.Link
https://learn.microsoft.com/powershell/module/az.awsconnector/new-azawsconnectorsecretmanagersecret
#>
function New-AzAwsConnectorSecretManagerSecret {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ISecretsManagerSecret])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Path')]
    [System.String]
    # Name of SecretsManagerSecret
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    # The value must be an UUID.
    ${SubscriptionId},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # The geo-location where the resource lives
    ${Location},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # Amazon Resource Name (ARN)
    ${Arn},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # The description of the secret.
    ${AwPropertyDescription},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # Property id
    ${AwPropertyId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # The ARN, key ID, or alias of the KMS key that Secrets Manager uses to encrypt the secret value in the secret.
    # An alias is always prefixed by ``alias/``, for example ``alias/aws/secretsmanager``.
    # For more information, see [About aliases](https://docs.aws.amazon.com/kms/latest/developerguide/alias-about.html).
    # To use a KMS key in a different account, use the key ARN or the alias ARN.
    # If you don't specify this value, then Secrets Manager uses the key ``aws/secretsmanager``.
    # If that key doesn't yet exist, then Secrets Manager creates it for you automatically the first time it encrypts the secret value.
    # If the secret is in a different AWS account from the credentials calling the API, then you can't use ``aws/secretsmanager`` to encrypt the secret, and you must create and use a customer managed KMS key.
    ${AwPropertyKmsKeyId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # The name of the new secret.
    # The secret name can contain ASCII letters, numbers, and the following characters: /_+=.@- Do not end your secret name with a hyphen followed by six characters.
    # If you do so, you risk confusion and unexpected results when searching for a secret by partial ARN.
    # Secrets Manager automatically adds a hyphen and six random characters after the secret name at the end of the ARN.
    ${AwPropertyName},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IReplicaRegion[]]
    # A custom type that specifies a ``Region`` and the ``KmsKeyId`` for a replica secret.
    # To construct, see NOTES section for AWPROPERTYREPLICAREGION properties and create a hash table.
    ${AwPropertyReplicaRegion},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # The text to encrypt and store in the secret.
    # We recommend you use a JSON structure of key/value pairs for your secret value.
    # To generate a random password, use ``GenerateSecretString`` instead.
    # If you omit both ``GenerateSecretString`` and ``SecretString``, you create an empty secret.
    # When you make a change to this property, a new secret version is created.
    ${AwPropertySecretString},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated54[]]
    # A list of tags to attach to the secret.
    # Each tag is a key and value pair of strings in a JSON text string, for example: ``[{'Key':'CostCenter','Value':'12345'},{'Key':'environment','Value':'production'}]`` Secrets Manager tag key names are case sensitive.
    # A tag with the key 'ABC' is a different tag from one with key 'abc'.
    # Stack-level tags, tags you apply to the CloudFormation stack, are also attached to the secret.
    # If you check tags in permissions policies as part of your security strategy, then adding or removing a tag can change permissions.
    # If the completion of this operation would result in you losing your permissions for this secret, then Secrets Manager blocks the operation and returns an ``Access Denied`` error.
    # For more information, see [Control access to secrets using tags](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_examples.html#tag-secrets-abac) and [Limit access to identities with tags that match secrets' tags](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_examples.html#auth-and-access_tags2).
    # For information about how to format a JSON parameter for the various command line tool environments, see [Using JSON for Parameters](https://docs.aws.amazon.com/cli/latest/userguide/cli-using-param.html#cli-using-param-json).
    # If your command-line tool or SDK requires quotation marks around the parameter, you should use single quotes to avoid confusion with the double quotes required in the JSON text.
    # The following restrictions apply to tags: + Maximum number of tags per secret: 50 + Maximum key length: 127 Unicode characters in UTF-8 + Maximum value length: 255 Unicode characters in UTF-8 + Tag keys and values are case sensitive.
    # + Do not use the ``aws:`` prefix in your tag names or values because AWS reserves it for AWS use.
    # You can't edit or delete tag names or values with this prefix.
    # Tags with this prefix do not count against your tags per secret limit.
    # + If you use your tagging schema across multiple services and resources, other services might have restrictions on allowed characters.
    # Generally allowed characters: letters, spaces, and numbers representable in UTF-8, plus the following special characters: + - = .
    # _ : / @.
    # To construct, see NOTES section for AWPROPERTYTAG properties and create a hash table.
    ${AwPropertyTag},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # AWS Account ID
    ${AwsAccountId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # AWS Region
    ${AwsRegion},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # AWS Source Schema
    ${AwsSourceSchema},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ISecretsManagerSecretPropertiesAwsTags]))]
    [System.Collections.Hashtable]
    # AWS Tags
    ${AwsTag},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # A string of the characters that you don't want in the password.
    ${GenerateSecretStringExcludeCharacter},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Specifies whether to exclude lowercase letters from the password.
    # If you don't include this switch, the password can contain lowercase letters.
    ${GenerateSecretStringExcludeLowercase},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Specifies whether to exclude numbers from the password.
    # If you don't include this switch, the password can contain numbers.
    ${GenerateSecretStringExcludeNumber},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Specifies whether to exclude the following punctuation characters from the password: ``! ' # $ % & ' ( ) * + , - .
    # / : ; < = > @ [ \ ] ^ _ ` { | } ~``.
    # If you don't include this switch, the password can contain punctuation.
    ${GenerateSecretStringExcludePunctuation},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Specifies whether to exclude uppercase letters from the password.
    # If you don't include this switch, the password can contain uppercase letters.
    ${GenerateSecretStringExcludeUppercase},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # The JSON key name for the key/value pair, where the value is the generated password.
    # This pair is added to the JSON structure specified by the ``SecretStringTemplate`` parameter.
    # If you specify this parameter, then you must also specify ``SecretStringTemplate``.
    ${GenerateSecretStringGenerateStringKey},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Specifies whether to include the space character.
    # If you include this switch, the password can contain space characters.
    ${GenerateSecretStringIncludeSpace},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.Int32]
    # The length of the password.
    # If you don't include this parameter, the default length is 32 characters.
    ${GenerateSecretStringPasswordLength},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Specifies whether to include at least one upper and lowercase letter, one number, and one punctuation.
    # If you don't include this switch, the password contains at least one of every character type.
    ${GenerateSecretStringRequireEachIncludedType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # A template that the generated string must match.
    # When you make a change to this property, a new secret version is created.
    ${GenerateSecretStringTemplate},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # Public Cloud Connectors Resource ID
    ${PublicCloudConnectorsResourceId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # Public Cloud Resource Name
    ${PublicCloudResourceName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.AwsConnector.private\New-AzAwsConnectorSecretManagerSecret_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $testPlayback = $false
            $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
