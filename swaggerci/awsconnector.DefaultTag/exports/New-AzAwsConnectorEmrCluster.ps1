
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create a EmrCluster.
Please note that end user resource creation is currently restricted, but it will be enabled in the future.
.Description
Create a EmrCluster.
Please note that end user resource creation is currently restricted, but it will be enabled in the future.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEmrCluster
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

AWSPROPERTY <IAwsEmrClusterProperties>: AWS Properties
  [Application <IApplication[]>]: <p>The applications installed on this cluster.</p>
    [AdditionalInfo <IApplicationAdditionalInfo>]: <p>This option is for advanced users only. This is meta information about third-party applications that third-party vendors use for testing purposes.</p>
      [(Any) <String>]: This indicates any property can be added to this object.
    [Arg <String[]>]: <p>Arguments for Amazon EMR to pass to the application.</p>
    [Name <String>]: <p>The name of the application.</p>
    [Version <String>]: <p>The version of the application.</p>
  [AutoScalingRole <String>]: <p>An IAM role for automatic scaling policies. The default role is <code>EMR_AutoScaling_DefaultRole</code>. The IAM role provides permissions that the automatic scaling feature requires to launch and terminate Amazon EC2 instances in an instance group.</p>
  [AutoTerminate <Boolean?>]: <p>Specifies whether the cluster should terminate after completing all steps.</p>
  [ClusterArn <String>]: <p>The Amazon Resource Name of the cluster.</p>
  [CodeValue <ClusterStateChangeReasonCode?>]: Property value
  [Configuration <IConfiguration[]>]: <p>Applies only to Amazon EMR releases 4.x and later. The list of configurations that are supplied to the Amazon EMR cluster.</p>
    [Classification <String>]: <p>The classification within a configuration.</p>
    [Configurations <IConfiguration[]>]: <p>A list of additional configurations to apply within a configuration object.</p>
    [Property <IConfigurationProperties>]: <p>A set of properties specified within a configuration classification.</p>
      [(Any) <String>]: This indicates any property can be added to this object.
  [CustomAmiId <String>]: <p>Available only in Amazon EMR releases 5.7.0 and later. The ID of a custom Amazon EBS-backed Linux AMI if the cluster uses a custom AMI.</p>
  [EbsRootVolumeIop <Int32?>]: <p>The IOPS, of the Amazon EBS root device volume of the Linux AMI that is used for each Amazon EC2 instance. Available in Amazon EMR releases 6.15.0 and later.</p>
  [EbsRootVolumeSize <Int32?>]: <p>The size, in GiB, of the Amazon EBS root device volume of the Linux AMI that is used for each Amazon EC2 instance. Available in Amazon EMR releases 4.x and later.</p>
  [EbsRootVolumeThroughput <Int32?>]: <p>The throughput, in MiB/s, of the Amazon EBS root device volume of the Linux AMI that is used for each Amazon EC2 instance. Available in Amazon EMR releases 6.15.0 and later.</p>
  [Ec2InstanceAttributeAdditionalMasterSecurityGroup <String[]>]: <p>A list of additional Amazon EC2 security group IDs for the master node.</p>
  [Ec2InstanceAttributeAdditionalSlaveSecurityGroup <String[]>]: <p>A list of additional Amazon EC2 security group IDs for the core and task nodes.</p>
  [Ec2InstanceAttributeEc2AvailabilityZone <String>]: <p>The Availability Zone in which the cluster will run. </p>
  [Ec2InstanceAttributeEc2KeyName <String>]: <p>The name of the Amazon EC2 key pair to use when connecting with SSH into the master node as a user named 'hadoop'.</p>
  [Ec2InstanceAttributeEc2SubnetId <String>]: <p>Set this parameter to the identifier of the Amazon VPC subnet where you want the cluster to launch. If you do not specify this value, and your account supports EC2-Classic, the cluster launches in EC2-Classic.</p>
  [Ec2InstanceAttributeEmrManagedMasterSecurityGroup <String>]: <p>The identifier of the Amazon EC2 security group for the master node.</p>
  [Ec2InstanceAttributeEmrManagedSlaveSecurityGroup <String>]: <p>The identifier of the Amazon EC2 security group for the core and task nodes.</p>
  [Ec2InstanceAttributeIamInstanceProfile <String>]: <p>The IAM role that was specified when the cluster was launched. The Amazon EC2 instances of the cluster assume this role.</p>
  [Ec2InstanceAttributeRequestedEc2AvailabilityZone <String[]>]: <p>Applies to clusters configured with the instance fleets option. Specifies one or more Availability Zones in which to launch Amazon EC2 cluster instances when the EC2-Classic network configuration is supported. Amazon EMR chooses the Availability Zone with the best fit from among the list of <code>RequestedEc2AvailabilityZones</code>, and then launches all cluster instances within that Availability Zone. If you do not specify this value, Amazon EMR chooses the Availability Zone for you. <code>RequestedEc2SubnetIDs</code> and <code>RequestedEc2AvailabilityZones</code> cannot be specified together.</p>
  [Ec2InstanceAttributeRequestedEc2SubnetId <String[]>]: <p>Applies to clusters configured with the instance fleets option. Specifies the unique identifier of one or more Amazon EC2 subnets in which to launch Amazon EC2 cluster instances. Subnets must exist within the same VPC. Amazon EMR chooses the Amazon EC2 subnet with the best fit from among the list of <code>RequestedEc2SubnetIds</code>, and then launches all cluster instances within that Subnet. If this value is not specified, and the account and Region support EC2-Classic networks, the cluster launches instances in the EC2-Classic network and uses <code>RequestedEc2AvailabilityZones</code> instead of this setting. If EC2-Classic is not supported, and no Subnet is specified, Amazon EMR chooses the subnet for you. <code>RequestedEc2SubnetIDs</code> and <code>RequestedEc2AvailabilityZones</code> cannot be specified together.</p>
  [Ec2InstanceAttributeServiceAccessSecurityGroup <String>]: <p>The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.</p>
  [Id <String>]: <p>The unique identifier for the cluster.</p>
  [InstanceCollectionTypeValue <InstanceCollectionType?>]: Property value
  [KerberoAttributeAdDomainJoinPassword <String>]: <p>The Active Directory password for <code>ADDomainJoinUser</code>.</p>
  [KerberoAttributeAdDomainJoinUser <String>]: <p>Required only when establishing a cross-realm trust with an Active Directory domain. A user with sufficient privileges to join resources to the domain.</p>
  [KerberoAttributeCrossRealmTrustPrincipalPassword <String>]: <p>Required only when establishing a cross-realm trust with a KDC in a different realm. The cross-realm principal password, which must be identical across realms.</p>
  [KerberoAttributeKdcAdminPassword <String>]: <p>The password used within the cluster for the kadmin service on the cluster-dedicated KDC, which maintains Kerberos principals, password policies, and keytabs for the cluster.</p>
  [KerberoAttributeRealm <String>]: <p>The name of the Kerberos realm to which all nodes in a cluster belong. For example, <code>EC2.INTERNAL</code>. </p>
  [LogEncryptionKmsKeyId <String>]: <p> The KMS key used for encrypting log files. This attribute is only available with Amazon EMR 5.30.0 and later, excluding Amazon EMR 6.0.0. </p>
  [LogUri <String>]: <p>The path to the Amazon S3 location where logs for this cluster are stored.</p>
  [MasterPublicDnsName <String>]: <p>The DNS name of the master node. If the cluster is on a private subnet, this is the private DNS name. On a public subnet, this is the public DNS name.</p>
  [Name <String>]: <p>The name of the cluster. This parameter can't contain the characters &lt;, &gt;, $, |, or ` (backtick).</p>
  [NormalizedInstanceHour <Int32?>]: <p>An approximation of the cost of the cluster, represented in m1.small/hours. This value is incremented one time for every hour an m1.small instance runs. Larger instances are weighted more, so an Amazon EC2 instance that is roughly four times more expensive would result in the normalized instance hours being incremented by four. This result is only an approximation and does not reflect the actual billing rate.</p>
  [OSReleaseLabel <String>]: <p>The Amazon Linux release specified in a cluster launch RunJobFlow request. If no Amazon Linux release was specified, the default Amazon Linux release is shown in the response.</p>
  [OutpostArn <String>]: <p> The Amazon Resource Name (ARN) of the Outpost where the cluster is launched. </p>
  [PlacementGroup <IPlacementGroupConfig[]>]: <p>Placement group configured for an Amazon EMR cluster.</p>
    [InstanceRoleValue <InstanceRoleType?>]: Property value
    [PlacementStrategyValue <PlacementGroupStrategy?>]: Property value
  [ReleaseLabel <String>]: <p>The Amazon EMR release label, which determines the version of open-source application packages installed on the cluster. Release labels are in the form <code>emr-x.x.x</code>, where x.x.x is an Amazon EMR release version such as <code>emr-5.14.0</code>. For more information about Amazon EMR release versions and included application versions and features, see <a href='https://docs.aws.amazon.com/emr/latest/ReleaseGuide/'>https://docs.aws.amazon.com/emr/latest/ReleaseGuide/</a>. The release label applies only to Amazon EMR releases version 4.0 and later. Earlier versions use <code>AmiVersion</code>.</p>
  [RepoUpgradeOnBootValue <RepoUpgradeOnBoot?>]: Property value
  [RequestedAmiVersion <String>]: <p>The AMI version requested for this cluster.</p>
  [RunningAmiVersion <String>]: <p>The AMI version running on this cluster.</p>
  [ScaleDownBehaviorValue <ScaleDownBehavior?>]: Property value
  [SecurityConfiguration <String>]: <p>The name of the security configuration applied to the cluster.</p>
  [ServiceRole <String>]: <p>The IAM role that Amazon EMR assumes in order to access Amazon Web Services resources on your behalf.</p>
  [StateChangeReasonMessage <String>]: <p>The descriptive message for the state change reason.</p>
  [StateValue <ClusterState?>]: Property value
  [StatusErrorDetail <IErrorDetailAutoGenerated[]>]: <p>A list of tuples that provides information about the errors that caused a cluster to terminate. This structure can contain up to 10 different <code>ErrorDetail</code> tuples.</p>
    [ErrorCode <String>]: <p>The name or code associated with the error.</p>
    [ErrorData <IAny[]>]: <p>A list of key value pairs that provides contextual information about why an error occured.</p>
    [ErrorMessage <String>]: <p>A message that describes the error.</p>
  [StepConcurrencyLevel <Int32?>]: <p>Specifies the number of steps that can be executed concurrently.</p>
  [Tag <ITagAutoGenerated32[]>]: <p>A list of tags associated with a cluster.</p>
    [Key <String>]: <p>A user-defined key, which is the minimum required information for a valid tag. For more information, see <a href='https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-tags.html'>Tag</a>. </p>
    [Value <String>]: <p>A user-defined value, which is optional in a tag. For more information, see <a href='https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-tags.html'>Tag Clusters</a>. </p>
  [TerminationProtected <Boolean?>]: <p>Indicates whether Amazon EMR will lock the cluster to prevent the Amazon EC2 instances from being terminated by an API call or user intervention, or in the event of a cluster error.</p>
  [TimelineCreationDateTime <DateTime?>]: <p>The creation date and time of the cluster.</p>
  [TimelineEndDateTime <DateTime?>]: <p>The date and time when the cluster was terminated.</p>
  [TimelineReadyDateTime <DateTime?>]: <p>The date and time when the cluster was ready to run steps.</p>
  [UnhealthyNodeReplacement <Boolean?>]: <p>Indicates whether Amazon EMR should gracefully replace Amazon EC2 core instances that have degraded within the cluster.</p>
  [VisibleToAllUser <Boolean?>]: <p>Indicates whether the cluster is visible to IAM principals in the Amazon Web Services account associated with the cluster. When <code>true</code>, IAM principals in the Amazon Web Services account can perform Amazon EMR cluster actions on the cluster that their IAM policies allow. When <code>false</code>, only the IAM principal that created the cluster and the Amazon Web Services account root user can perform Amazon EMR actions, regardless of IAM permissions policies attached to other IAM principals.</p> <p>The default value is <code>true</code> if a value is not provided when creating a cluster using the Amazon EMR API <a>RunJobFlow</a> command, the CLI <a href='https://docs.aws.amazon.com/cli/latest/reference/emr/create-cluster.html'>create-cluster</a> command, or the Amazon Web Services Management Console.</p>
.Link
https://learn.microsoft.com/powershell/module/az.awsconnector/new-azawsconnectoremrcluster
#>
function New-AzAwsConnectorEmrCluster {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEmrCluster])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Path')]
    [System.String]
    # Name of EmrCluster
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    # The value must be an UUID.
    ${SubscriptionId},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # The geo-location where the resource lives
    ${Location},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # Amazon Resource Name (ARN)
    ${Arn},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # AWS Account ID
    ${AwsAccountId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEmrClusterProperties]
    # AWS Properties
    # To construct, see NOTES section for AWSPROPERTY properties and create a hash table.
    ${AwsProperty},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # AWS Region
    ${AwsRegion},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # AWS Source Schema
    ${AwsSourceSchema},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEmrClusterPropertiesAwsTags]))]
    [System.Collections.Hashtable]
    # AWS Tags
    ${AwsTag},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # Public Cloud Connectors Resource ID
    ${PublicCloudConnectorsResourceId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # Public Cloud Resource Name
    ${PublicCloudResourceName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.AwsConnector.private\New-AzAwsConnectorEmrCluster_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $testPlayback = $false
            $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
