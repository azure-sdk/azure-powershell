
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create a SnsTopic.
Please note that end user resource creation is currently restricted, but it will be enabled in the future.
.Description
Create a SnsTopic.
Please note that end user resource creation is currently restricted, but it will be enabled in the future.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ISnsTopic
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

AWPROPERTYDELIVERYSTATUSLOGGING <ILoggingConfigAutoGenerated[]>: Property deliveryStatusLogging
  [FailureFeedbackRoleArn <String>]: Property failureFeedbackRoleArn
  [Protocol <LoggingConfigProtocol?>]: Property protocol
  [SuccessFeedbackRoleArn <String>]: Property successFeedbackRoleArn
  [SuccessFeedbackSampleRate <String>]: Property successFeedbackSampleRate

AWPROPERTYSUBSCRIPTION <ISubscription[]>: The SNS subscriptions (endpoints) for this topic. If you specify the ``Subscription`` property in the ``AWS::SNS::Topic`` resource and it creates an associated subscription resource, the associated subscription is not deleted when the ``AWS::SNS::Topic`` resource is deleted.
  [Endpoint <String>]: The endpoint that receives notifications from the SNS topic. The endpoint value depends on the protocol that you specify. For more information, see the ``Endpoint`` parameter of the ``Subscribe`` action in the *API Reference*.
  [Protocol <String>]: The subscription's protocol. For more information, see the ``Protocol`` parameter of the ``Subscribe`` action in the *API Reference*.

AWPROPERTYTAG <ITagAutoGenerated55[]>: The list of tags to add to a new topic. To be able to tag a topic on creation, you must have the ``sns:CreateTopic`` and ``sns:TagResource`` permissions.
  [Key <String>]: The required key portion of the tag.
  [Value <String>]: The optional value portion of the tag.
.Link
https://learn.microsoft.com/powershell/module/az.awsconnector/new-azawsconnectorsntopic
#>
function New-AzAwsConnectorSnTopic {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ISnsTopic])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Path')]
    [System.String]
    # Name of SnsTopic
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    # The value must be an UUID.
    ${SubscriptionId},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # The geo-location where the resource lives
    ${Location},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # Amazon Resource Name (ARN)
    ${Arn},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.IAny]
    # The archive policy determines the number of days SNS retains messages.
    # You can set a retention period from 1 to 365 days.
    ${AwPropertyArchivePolicy},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Enables content-based deduplication for FIFO topics.
    # + By default, ``ContentBasedDeduplication`` is set to ``false``.
    # If you create a FIFO topic and this attribute is ``false``, you must specify a value for the ``MessageDeduplicationId`` parameter for the [Publish](https://docs.aws.amazon.com/sns/latest/api/API_Publish.html) action.
    # + When you set ``ContentBasedDeduplication`` to ``true``, SNS uses a SHA-256 hash to generate the ``MessageDeduplicationId`` using the body of the message (but not the attributes of the message).
    # (Optional) To override the generated value, you can specify a value for the the ``MessageDeduplicationId`` parameter for the ``Publish`` action.
    ${AwPropertyContentBasedDeduplication},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.IAny]
    # The body of the policy document you want to use for this topic.
    # You can only add one policy per topic.
    # The policy must be in JSON string format.
    # Length Constraints: Maximum length of 30,720.
    ${AwPropertyDataProtectionPolicy},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILoggingConfigAutoGenerated[]]
    # Property deliveryStatusLogging
    # To construct, see NOTES section for AWPROPERTYDELIVERYSTATUSLOGGING properties and create a hash table.
    ${AwPropertyDeliveryStatusLogging},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # The display name to use for an SNS topic with SMS subscriptions.
    # The display name must be maximum 100 characters long, including hyphens (-), underscores (_), spaces, and tabs.
    ${AwPropertyDisplayName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Set to true to create a FIFO topic.
    ${AwPropertyFifoTopic},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # The ID of an AWS managed customer master key (CMK) for SNS or a custom CMK.
    # For more information, see [Key terms](https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html#sse-key-terms).
    # For more examples, see ``KeyId`` in the *API Reference*.
    # This property applies only to [server-side-encryption](https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html).
    ${AwPropertyKmsMasterKeyId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # The signature version corresponds to the hashing algorithm used while creating the signature of the notifications, subscription confirmations, or unsubscribe confirmation messages sent by Amazon SNS.
    # By default, ``SignatureVersion`` is set to ``1``.
    ${AwPropertySignatureVersion},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ISubscription[]]
    # The SNS subscriptions (endpoints) for this topic.
    # If you specify the ``Subscription`` property in the ``AWS::SNS::Topic`` resource and it creates an associated subscription resource, the associated subscription is not deleted when the ``AWS::SNS::Topic`` resource is deleted.
    # To construct, see NOTES section for AWPROPERTYSUBSCRIPTION properties and create a hash table.
    ${AwPropertySubscription},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated55[]]
    # The list of tags to add to a new topic.
    # To be able to tag a topic on creation, you must have the ``sns:CreateTopic`` and ``sns:TagResource`` permissions.
    # To construct, see NOTES section for AWPROPERTYTAG properties and create a hash table.
    ${AwPropertyTag},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # Property topicArn
    ${AwPropertyTopicArn},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # The name of the topic you want to create.
    # Topic names must include only uppercase and lowercase ASCII letters, numbers, underscores, and hyphens, and must be between 1 and 256 characters long.
    # FIFO topic names must end with ``.fifo``.
    # If you don't specify a name, CFN generates a unique physical ID and uses that ID for the topic name.
    # For more information, see [Name type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html).
    # If you specify a name, you can't perform updates that require replacement of this resource.
    # You can perform updates that require no or some interruption.
    # If you must replace the resource, specify a new name.
    ${AwPropertyTopicName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # Tracing mode of an SNS topic.
    # By default ``TracingConfig`` is set to ``PassThrough``, and the topic passes through the tracing header it receives from an SNS publisher to its subscriptions.
    # If set to ``Active``, SNS will vend X-Ray segment data to topic owner account if the sampled flag in the tracing header is true.
    ${AwPropertyTracingConfig},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # AWS Account ID
    ${AwsAccountId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # AWS Region
    ${AwsRegion},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # AWS Source Schema
    ${AwsSourceSchema},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ISnsTopicPropertiesAwsTags]))]
    [System.Collections.Hashtable]
    # AWS Tags
    ${AwsTag},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # Public Cloud Connectors Resource ID
    ${PublicCloudConnectorsResourceId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # Public Cloud Resource Name
    ${PublicCloudResourceName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.AwsConnector.private\New-AzAwsConnectorSnTopic_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $testPlayback = $false
            $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
