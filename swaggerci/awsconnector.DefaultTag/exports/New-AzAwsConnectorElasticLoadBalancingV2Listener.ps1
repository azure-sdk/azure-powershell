
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create a ElasticLoadBalancingV2Listener.
Please note that end user resource creation is currently restricted, but it will be enabled in the future.
.Description
Create a ElasticLoadBalancingV2Listener.
Please note that end user resource creation is currently restricted, but it will be enabled in the future.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IElasticLoadBalancingV2Listener
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

AWPROPERTYCERTIFICATE <ICertificateAutoGenerated[]>: The default SSL server certificate for a secure listener. You must provide exactly one certificate if the listener protocol is HTTPS or TLS. To create a certificate list for a secure listener, use [AWS::ElasticLoadBalancingV2::ListenerCertificate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listenercertificate.html).
  [CertificateArn <String>]: The Amazon Resource Name (ARN) of the certificate.

AWPROPERTYDEFAULTACTION <IAction1[]>: The actions for the default rule. You cannot define a condition for a default rule. To create additional rules for an Application Load Balancer, use [AWS::ElasticLoadBalancingV2::ListenerRule](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listenerrule.html).
  [AuthenticateCognitoConfigAuthenticationRequestExtraParam <IAuthenticateCognitoConfigAuthenticationRequestExtraParams>]: The query parameters (up to 10) to include in the redirect request to the authorization endpoint.
    [(Any) <String>]: This indicates any property can be added to this object.
  [AuthenticateCognitoConfigOnUnauthenticatedRequest <String>]: The behavior if the user is not authenticated. The following are possible values:  +  deny```` - Return an HTTP 401 Unauthorized error.  +  allow```` - Allow the request to be forwarded to the target.  +  authenticate```` - Redirect the request to the IdP authorization endpoint. This is the default value.
  [AuthenticateCognitoConfigScope <String>]: The set of user claims to be requested from the IdP. The default is ``openid``. To verify which scope values your IdP supports and how to separate multiple values, see the documentation for your IdP.
  [AuthenticateCognitoConfigSessionCookieName <String>]: The name of the cookie used to maintain session information. The default is AWSELBAuthSessionCookie.
  [AuthenticateCognitoConfigSessionTimeout <String>]: The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days).
  [AuthenticateCognitoConfigUserPoolArn <String>]: The Amazon Resource Name (ARN) of the Amazon Cognito user pool.
  [AuthenticateCognitoConfigUserPoolClientId <String>]: The ID of the Amazon Cognito user pool client.
  [AuthenticateCognitoConfigUserPoolDomain <String>]: The domain prefix or fully-qualified domain name of the Amazon Cognito user pool.
  [AuthenticateOidcConfigAuthenticationRequestExtraParam <IAuthenticateOidcConfigAuthenticationRequestExtraParams>]: The query parameters (up to 10) to include in the redirect request to the authorization endpoint.
    [(Any) <String>]: This indicates any property can be added to this object.
  [AuthenticateOidcConfigAuthorizationEndpoint <String>]: The authorization endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
  [AuthenticateOidcConfigClientId <String>]: The OAuth 2.0 client identifier.
  [AuthenticateOidcConfigClientSecret <String>]: The OAuth 2.0 client secret. This parameter is required if you are creating a rule. If you are modifying a rule, you can omit this parameter if you set ``UseExistingClientSecret`` to true.
  [AuthenticateOidcConfigIssuer <String>]: The OIDC issuer identifier of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
  [AuthenticateOidcConfigOnUnauthenticatedRequest <String>]: The behavior if the user is not authenticated. The following are possible values:  +  deny```` - Return an HTTP 401 Unauthorized error.  +  allow```` - Allow the request to be forwarded to the target.  +  authenticate```` - Redirect the request to the IdP authorization endpoint. This is the default value.
  [AuthenticateOidcConfigScope <String>]: The set of user claims to be requested from the IdP. The default is ``openid``. To verify which scope values your IdP supports and how to separate multiple values, see the documentation for your IdP.
  [AuthenticateOidcConfigSessionCookieName <String>]: The name of the cookie used to maintain session information. The default is AWSELBAuthSessionCookie.
  [AuthenticateOidcConfigSessionTimeout <String>]: The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days).
  [AuthenticateOidcConfigTokenEndpoint <String>]: The token endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
  [AuthenticateOidcConfigUseExistingClientSecret <Boolean?>]: Indicates whether to use the existing client secret when modifying a rule. If you are creating a rule, you can omit this parameter or set it to false.
  [AuthenticateOidcConfigUserInfoEndpoint <String>]: The user info endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
  [FixedResponseConfigContentType <String>]: The content type. Valid Values: text/plain | text/css | text/html | application/javascript | application/json
  [FixedResponseConfigMessageBody <String>]: The message.
  [FixedResponseConfigStatusCode <String>]: The HTTP response code (2XX, 4XX, or 5XX).
  [ForwardConfigTargetGroup <ITargetGroupTuple[]>]: Information about how traffic will be distributed between multiple target groups in a forward rule.
    [TargetGroupArn <String>]: The Amazon Resource Name (ARN) of the target group.
    [Weight <Int32?>]: The weight. The range is 0 to 999.
  [Order <Int32?>]: The order for the action. This value is required for rules with multiple actions. The action with the lowest value for order is performed first.
  [RedirectConfigHost <String>]: The hostname. This component is not percent-encoded. The hostname can contain #{host}.
  [RedirectConfigPath <String>]: The absolute path, starting with the leading '/'. This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}.
  [RedirectConfigPort <String>]: The port. You can specify a value from 1 to 65535 or #{port}.
  [RedirectConfigProtocol <String>]: The protocol. You can specify HTTP, HTTPS, or #{protocol}. You can redirect HTTP to HTTP, HTTP to HTTPS, and HTTPS to HTTPS. You cannot redirect HTTPS to HTTP.
  [RedirectConfigQuery <String>]: The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading '?', as it is automatically added. You can specify any of the reserved keywords.
  [RedirectConfigStatusCode <String>]: The HTTP redirect code. The redirect is either permanent (HTTP 301) or temporary (HTTP 302).
  [TargetGroupArn <String>]: The Amazon Resource Name (ARN) of the target group. Specify only when ``Type`` is ``forward`` and you want to route to a single target group. To route to one or more target groups, use ``ForwardConfig`` instead.
  [TargetGroupStickinessConfigDurationSecond <Int32?>]: The time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
  [TargetGroupStickinessConfigEnabled <Boolean?>]: Indicates whether target group stickiness is enabled.
  [Type <String>]: The type of action.
.Link
https://learn.microsoft.com/powershell/module/az.awsconnector/new-azawsconnectorelasticloadbalancingv2listener
#>
function New-AzAwsConnectorElasticLoadBalancingV2Listener {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IElasticLoadBalancingV2Listener])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Path')]
    [System.String]
    # Name of ElasticLoadBalancingV2Listener
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    # The value must be an UUID.
    ${SubscriptionId},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # The geo-location where the resource lives
    ${Location},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # Amazon Resource Name (ARN)
    ${Arn},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String[]]
    # [TLS listener] The name of the Application-Layer Protocol Negotiation (ALPN) policy.
    ${AwPropertyAlpnPolicy},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICertificateAutoGenerated[]]
    # The default SSL server certificate for a secure listener.
    # You must provide exactly one certificate if the listener protocol is HTTPS or TLS.
    # To create a certificate list for a secure listener, use [AWS::ElasticLoadBalancingV2::ListenerCertificate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listenercertificate.html).
    # To construct, see NOTES section for AWPROPERTYCERTIFICATE properties and create a hash table.
    ${AwPropertyCertificate},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAction1[]]
    # The actions for the default rule.
    # You cannot define a condition for a default rule.
    # To create additional rules for an Application Load Balancer, use [AWS::ElasticLoadBalancingV2::ListenerRule](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listenerrule.html).
    # To construct, see NOTES section for AWPROPERTYDEFAULTACTION properties and create a hash table.
    ${AwPropertyDefaultAction},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # Property listenerArn
    ${AwPropertyListenerArn},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # The Amazon Resource Name (ARN) of the load balancer.
    ${AwPropertyLoadBalancerArn},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.Int32]
    # The port on which the load balancer is listening.
    # You cannot specify a port for a Gateway Load Balancer.
    ${AwPropertyPort},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # The protocol for connections from clients to the load balancer.
    # For Application Load Balancers, the supported protocols are HTTP and HTTPS.
    # For Network Load Balancers, the supported protocols are TCP, TLS, UDP, and TCP_UDP.
    # You can’t specify the UDP or TCP_UDP protocol if dual-stack mode is enabled.
    # You cannot specify a protocol for a Gateway Load Balancer.
    ${AwPropertyProtocol},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # [HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are supported.
    # Updating the security policy can result in interruptions if the load balancer is handling a high volume of traffic.
    # For more information, see [Security policies](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies) in the *Application Load Balancers Guide* and [Security policies](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies) in the *Network Load Balancers Guide*.
    ${AwPropertySslPolicy},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # AWS Account ID
    ${AwsAccountId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # AWS Region
    ${AwsRegion},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # AWS Source Schema
    ${AwsSourceSchema},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IElasticLoadBalancingV2ListenerPropertiesAwsTags]))]
    [System.Collections.Hashtable]
    # AWS Tags
    ${AwsTag},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Indicates whether expired client certificates are ignored.
    ${MutualAuthenticationIgnoreClientCertificateExpiry},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # The client certificate handling method.
    # Options are ``off``, ``passthrough`` or ``verify``.
    # The default value is ``off``.
    ${MutualAuthenticationMode},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # The Amazon Resource Name (ARN) of the trust store.
    ${MutualAuthenticationTrustStoreArn},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # Public Cloud Connectors Resource ID
    ${PublicCloudConnectorsResourceId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [System.String]
    # Public Cloud Resource Name
    ${PublicCloudResourceName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.AwsConnector.private\New-AzAwsConnectorElasticLoadBalancingV2Listener_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $testPlayback = $false
            $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
