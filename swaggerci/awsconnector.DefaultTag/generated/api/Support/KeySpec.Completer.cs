// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support
{

    /// <summary>
    /// Specifies the type of KMS key to create. The default value, ``SYMMETRIC_DEFAULT``, creates a KMS key with a 256-bit symmetric
    /// key for encryption and decryption. In China Regions, ``SYMMETRIC_DEFAULT`` creates a 128-bit symmetric key that uses SM4
    /// encryption. You can't change the ``KeySpec`` value after the KMS key is created. For help choosing a key spec for your
    /// KMS key, see [Choosing a KMS key type](https://docs.aws.amazon.com/kms/latest/developerguide/symm-asymm-choose.html) in
    /// the *Developer Guide*. The ``KeySpec`` property determines the type of key material in the KMS key and the algorithms
    /// that the KMS key supports. To further restrict the algorithms that can be used with the KMS key, use a condition key in
    /// its key policy or IAM policy. For more information, see [condition keys](https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms)
    /// in the *Developer Guide*. If you change the value of the ``KeySpec`` property on an existing KMS key, the update request
    /// fails, regardless of the value of the [UpdateReplacePolicy attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatereplacepolicy.html).
    /// This prevents you from accidentally deleting a KMS key by changing an immutable property value. [services that are integrated
    /// with](https://docs.aws.amazon.com/kms/features/#AWS_Service_Integration) use symmetric encryption KMS keys to protect
    /// your data. These services do not support encryption with asymmetric KMS keys. For help determining whether a KMS key is
    /// asymmetric, see [Identifying asymmetric KMS keys](https://docs.aws.amazon.com/kms/latest/developerguide/find-symm-asymm.html)
    /// in the *Developer Guide*. KMS supports the following key specs for KMS keys: + Symmetric encryption key (default) + ``SYMMETRIC_DEFAULT``
    /// (AES-256-GCM) + HMAC keys (symmetric) + ``HMAC_224`` + ``HMAC_256`` + ``HMAC_384`` + ``HMAC_512`` + Asymmetric RSA key
    /// pairs + ``RSA_2048`` + ``RSA_3072`` + ``RSA_4096`` + Asymmetric NIST-recommended elliptic curve key pairs + ``ECC_NIST_P256``
    /// (secp256r1) + ``ECC_NIST_P384`` (secp384r1) + ``ECC_NIST_P521`` (secp521r1) + Other asymmetric elliptic curve key pairs
    /// + ``ECC_SECG_P256K1`` (secp256k1), commonly used for cryptocurrencies. + SM2 key pairs (China Regions only) + ``SM2``
    /// </summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.KeySpecTypeConverter))]
    public partial struct KeySpec :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ECC_NIST_P256".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ECC_NIST_P256'", "ECC_NIST_P256", global::System.Management.Automation.CompletionResultType.ParameterValue, "ECC_NIST_P256");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ECC_NIST_P384".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ECC_NIST_P384'", "ECC_NIST_P384", global::System.Management.Automation.CompletionResultType.ParameterValue, "ECC_NIST_P384");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ECC_NIST_P521".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ECC_NIST_P521'", "ECC_NIST_P521", global::System.Management.Automation.CompletionResultType.ParameterValue, "ECC_NIST_P521");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ECC_SECG_P256K1".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ECC_SECG_P256K1'", "ECC_SECG_P256K1", global::System.Management.Automation.CompletionResultType.ParameterValue, "ECC_SECG_P256K1");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "HMAC_224".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'HMAC_224'", "HMAC_224", global::System.Management.Automation.CompletionResultType.ParameterValue, "HMAC_224");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "HMAC_256".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'HMAC_256'", "HMAC_256", global::System.Management.Automation.CompletionResultType.ParameterValue, "HMAC_256");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "HMAC_384".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'HMAC_384'", "HMAC_384", global::System.Management.Automation.CompletionResultType.ParameterValue, "HMAC_384");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "HMAC_512".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'HMAC_512'", "HMAC_512", global::System.Management.Automation.CompletionResultType.ParameterValue, "HMAC_512");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "RSA_2048".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'RSA_2048'", "RSA_2048", global::System.Management.Automation.CompletionResultType.ParameterValue, "RSA_2048");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "RSA_3072".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'RSA_3072'", "RSA_3072", global::System.Management.Automation.CompletionResultType.ParameterValue, "RSA_3072");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "RSA_4096".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'RSA_4096'", "RSA_4096", global::System.Management.Automation.CompletionResultType.ParameterValue, "RSA_4096");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SM2".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SM2'", "SM2", global::System.Management.Automation.CompletionResultType.ParameterValue, "SM2");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SYMMETRIC_DEFAULT".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SYMMETRIC_DEFAULT'", "SYMMETRIC_DEFAULT", global::System.Management.Automation.CompletionResultType.ParameterValue, "SYMMETRIC_DEFAULT");
            }
        }
    }
}