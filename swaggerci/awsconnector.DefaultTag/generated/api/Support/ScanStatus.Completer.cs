// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support
{

    /// <summary>ScanStatus enum</summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ScanStatusTypeConverter))]
    public partial struct ScanStatus :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ACTIVE".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ACTIVE'", "ACTIVE", global::System.Management.Automation.CompletionResultType.ParameterValue, "ACTIVE");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "COMPLETE".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'COMPLETE'", "COMPLETE", global::System.Management.Automation.CompletionResultType.ParameterValue, "COMPLETE");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "FAILED".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'FAILED'", "FAILED", global::System.Management.Automation.CompletionResultType.ParameterValue, "FAILED");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "FINDINGS_UNAVAILABLE".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'FINDINGS_UNAVAILABLE'", "FINDINGS_UNAVAILABLE", global::System.Management.Automation.CompletionResultType.ParameterValue, "FINDINGS_UNAVAILABLE");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "IN_PROGRESS".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'IN_PROGRESS'", "IN_PROGRESS", global::System.Management.Automation.CompletionResultType.ParameterValue, "IN_PROGRESS");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "PENDING".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'PENDING'", "PENDING", global::System.Management.Automation.CompletionResultType.ParameterValue, "PENDING");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SCAN_ELIGIBILITY_EXPIRED".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SCAN_ELIGIBILITY_EXPIRED'", "SCAN_ELIGIBILITY_EXPIRED", global::System.Management.Automation.CompletionResultType.ParameterValue, "SCAN_ELIGIBILITY_EXPIRED");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "UNSUPPORTED_IMAGE".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'UNSUPPORTED_IMAGE'", "UNSUPPORTED_IMAGE", global::System.Management.Automation.CompletionResultType.ParameterValue, "UNSUPPORTED_IMAGE");
            }
        }
    }
}