// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support
{

    /// <summary>ResourceRecordSetRegion enum</summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ResourceRecordSetRegionTypeConverter))]
    public partial struct ResourceRecordSetRegion :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "af-south-1".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'af-south-1'", "af-south-1", global::System.Management.Automation.CompletionResultType.ParameterValue, "af-south-1");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ap-east-1".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ap-east-1'", "ap-east-1", global::System.Management.Automation.CompletionResultType.ParameterValue, "ap-east-1");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ap-northeast-1".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ap-northeast-1'", "ap-northeast-1", global::System.Management.Automation.CompletionResultType.ParameterValue, "ap-northeast-1");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ap-northeast-2".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ap-northeast-2'", "ap-northeast-2", global::System.Management.Automation.CompletionResultType.ParameterValue, "ap-northeast-2");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ap-northeast-3".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ap-northeast-3'", "ap-northeast-3", global::System.Management.Automation.CompletionResultType.ParameterValue, "ap-northeast-3");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ap-south-1".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ap-south-1'", "ap-south-1", global::System.Management.Automation.CompletionResultType.ParameterValue, "ap-south-1");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ap-south-2".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ap-south-2'", "ap-south-2", global::System.Management.Automation.CompletionResultType.ParameterValue, "ap-south-2");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ap-southeast-1".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ap-southeast-1'", "ap-southeast-1", global::System.Management.Automation.CompletionResultType.ParameterValue, "ap-southeast-1");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ap-southeast-2".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ap-southeast-2'", "ap-southeast-2", global::System.Management.Automation.CompletionResultType.ParameterValue, "ap-southeast-2");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ap-southeast-3".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ap-southeast-3'", "ap-southeast-3", global::System.Management.Automation.CompletionResultType.ParameterValue, "ap-southeast-3");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ap-southeast-4".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ap-southeast-4'", "ap-southeast-4", global::System.Management.Automation.CompletionResultType.ParameterValue, "ap-southeast-4");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ca-central-1".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ca-central-1'", "ca-central-1", global::System.Management.Automation.CompletionResultType.ParameterValue, "ca-central-1");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ca-west-1".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ca-west-1'", "ca-west-1", global::System.Management.Automation.CompletionResultType.ParameterValue, "ca-west-1");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "cn-north-1".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'cn-north-1'", "cn-north-1", global::System.Management.Automation.CompletionResultType.ParameterValue, "cn-north-1");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "cn-northwest-1".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'cn-northwest-1'", "cn-northwest-1", global::System.Management.Automation.CompletionResultType.ParameterValue, "cn-northwest-1");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "eu-central-1".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'eu-central-1'", "eu-central-1", global::System.Management.Automation.CompletionResultType.ParameterValue, "eu-central-1");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "eu-central-2".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'eu-central-2'", "eu-central-2", global::System.Management.Automation.CompletionResultType.ParameterValue, "eu-central-2");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "eu-north-1".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'eu-north-1'", "eu-north-1", global::System.Management.Automation.CompletionResultType.ParameterValue, "eu-north-1");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "eu-south-1".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'eu-south-1'", "eu-south-1", global::System.Management.Automation.CompletionResultType.ParameterValue, "eu-south-1");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "eu-south-2".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'eu-south-2'", "eu-south-2", global::System.Management.Automation.CompletionResultType.ParameterValue, "eu-south-2");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "eu-west-1".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'eu-west-1'", "eu-west-1", global::System.Management.Automation.CompletionResultType.ParameterValue, "eu-west-1");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "eu-west-2".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'eu-west-2'", "eu-west-2", global::System.Management.Automation.CompletionResultType.ParameterValue, "eu-west-2");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "eu-west-3".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'eu-west-3'", "eu-west-3", global::System.Management.Automation.CompletionResultType.ParameterValue, "eu-west-3");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "il-central-1".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'il-central-1'", "il-central-1", global::System.Management.Automation.CompletionResultType.ParameterValue, "il-central-1");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "me-central-1".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'me-central-1'", "me-central-1", global::System.Management.Automation.CompletionResultType.ParameterValue, "me-central-1");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "me-south-1".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'me-south-1'", "me-south-1", global::System.Management.Automation.CompletionResultType.ParameterValue, "me-south-1");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "sa-east-1".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'sa-east-1'", "sa-east-1", global::System.Management.Automation.CompletionResultType.ParameterValue, "sa-east-1");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "us-east-1".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'us-east-1'", "us-east-1", global::System.Management.Automation.CompletionResultType.ParameterValue, "us-east-1");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "us-east-2".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'us-east-2'", "us-east-2", global::System.Management.Automation.CompletionResultType.ParameterValue, "us-east-2");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "us-west-1".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'us-west-1'", "us-west-1", global::System.Management.Automation.CompletionResultType.ParameterValue, "us-west-1");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "us-west-2".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'us-west-2'", "us-west-2", global::System.Management.Automation.CompletionResultType.ParameterValue, "us-west-2");
            }
        }
    }
}