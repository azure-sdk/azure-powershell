// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support
{

    /// <summary>KeyUsageName enum</summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.KeyUsageNameTypeConverter))]
    public partial struct KeyUsageName :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ANY".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ANY'", "ANY", global::System.Management.Automation.CompletionResultType.ParameterValue, "ANY");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CERTIFICATE_SIGNING".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'CERTIFICATE_SIGNING'", "CERTIFICATE_SIGNING", global::System.Management.Automation.CompletionResultType.ParameterValue, "CERTIFICATE_SIGNING");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CRL_SIGNING".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'CRL_SIGNING'", "CRL_SIGNING", global::System.Management.Automation.CompletionResultType.ParameterValue, "CRL_SIGNING");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CUSTOM".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'CUSTOM'", "CUSTOM", global::System.Management.Automation.CompletionResultType.ParameterValue, "CUSTOM");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "DATA_ENCIPHERMENT".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'DATA_ENCIPHERMENT'", "DATA_ENCIPHERMENT", global::System.Management.Automation.CompletionResultType.ParameterValue, "DATA_ENCIPHERMENT");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "DECIPHER_ONLY".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'DECIPHER_ONLY'", "DECIPHER_ONLY", global::System.Management.Automation.CompletionResultType.ParameterValue, "DECIPHER_ONLY");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "DIGITAL_SIGNATURE".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'DIGITAL_SIGNATURE'", "DIGITAL_SIGNATURE", global::System.Management.Automation.CompletionResultType.ParameterValue, "DIGITAL_SIGNATURE");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ENCIPHER_ONLY".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ENCIPHER_ONLY'", "ENCIPHER_ONLY", global::System.Management.Automation.CompletionResultType.ParameterValue, "ENCIPHER_ONLY");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "KEY_AGREEMENT".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'KEY_AGREEMENT'", "KEY_AGREEMENT", global::System.Management.Automation.CompletionResultType.ParameterValue, "KEY_AGREEMENT");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "KEY_ENCIPHERMENT".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'KEY_ENCIPHERMENT'", "KEY_ENCIPHERMENT", global::System.Management.Automation.CompletionResultType.ParameterValue, "KEY_ENCIPHERMENT");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NON_REPUDIATION".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'NON_REPUDIATION'", "NON_REPUDIATION", global::System.Management.Automation.CompletionResultType.ParameterValue, "NON_REPUDIATION");
            }
        }
    }
}