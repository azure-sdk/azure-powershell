// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support
{

    /// <summary>TargetHealthReasonEnum enum</summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.TargetHealthReasonEnumTypeConverter))]
    public partial struct TargetHealthReasonEnum :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Elb.InitialHealthChecking".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Elb.InitialHealthChecking'", "Elb.InitialHealthChecking", global::System.Management.Automation.CompletionResultType.ParameterValue, "Elb.InitialHealthChecking");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Elb.InternalError".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Elb.InternalError'", "Elb.InternalError", global::System.Management.Automation.CompletionResultType.ParameterValue, "Elb.InternalError");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Elb.RegistrationInProgress".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Elb.RegistrationInProgress'", "Elb.RegistrationInProgress", global::System.Management.Automation.CompletionResultType.ParameterValue, "Elb.RegistrationInProgress");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Target.DeregistrationInProgress".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Target.DeregistrationInProgress'", "Target.DeregistrationInProgress", global::System.Management.Automation.CompletionResultType.ParameterValue, "Target.DeregistrationInProgress");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Target.FailedHealthChecks".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Target.FailedHealthChecks'", "Target.FailedHealthChecks", global::System.Management.Automation.CompletionResultType.ParameterValue, "Target.FailedHealthChecks");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Target.HealthCheckDisabled".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Target.HealthCheckDisabled'", "Target.HealthCheckDisabled", global::System.Management.Automation.CompletionResultType.ParameterValue, "Target.HealthCheckDisabled");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Target.InvalidState".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Target.InvalidState'", "Target.InvalidState", global::System.Management.Automation.CompletionResultType.ParameterValue, "Target.InvalidState");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Target.IpUnusable".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Target.IpUnusable'", "Target.IpUnusable", global::System.Management.Automation.CompletionResultType.ParameterValue, "Target.IpUnusable");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Target.NotInUse".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Target.NotInUse'", "Target.NotInUse", global::System.Management.Automation.CompletionResultType.ParameterValue, "Target.NotInUse");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Target.NotRegistered".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Target.NotRegistered'", "Target.NotRegistered", global::System.Management.Automation.CompletionResultType.ParameterValue, "Target.NotRegistered");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Target.ResponseCodeMismatch".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Target.ResponseCodeMismatch'", "Target.ResponseCodeMismatch", global::System.Management.Automation.CompletionResultType.ParameterValue, "Target.ResponseCodeMismatch");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Target.Timeout".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Target.Timeout'", "Target.Timeout", global::System.Management.Automation.CompletionResultType.ParameterValue, "Target.Timeout");
            }
        }
    }
}