// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support
{

    /// <summary>InventoryConfigurationOptionalFields enum</summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.InventoryConfigurationOptionalFieldsTypeConverter))]
    public partial struct InventoryConfigurationOptionalFields :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "BucketKeyStatus".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'BucketKeyStatus'", "BucketKeyStatus", global::System.Management.Automation.CompletionResultType.ParameterValue, "BucketKeyStatus");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ChecksumAlgorithm".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ChecksumAlgorithm'", "ChecksumAlgorithm", global::System.Management.Automation.CompletionResultType.ParameterValue, "ChecksumAlgorithm");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ETag".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ETag'", "ETag", global::System.Management.Automation.CompletionResultType.ParameterValue, "ETag");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "EncryptionStatus".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'EncryptionStatus'", "EncryptionStatus", global::System.Management.Automation.CompletionResultType.ParameterValue, "EncryptionStatus");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "IntelligentTieringAccessTier".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'IntelligentTieringAccessTier'", "IntelligentTieringAccessTier", global::System.Management.Automation.CompletionResultType.ParameterValue, "IntelligentTieringAccessTier");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "IsMultipartUploaded".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'IsMultipartUploaded'", "IsMultipartUploaded", global::System.Management.Automation.CompletionResultType.ParameterValue, "IsMultipartUploaded");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "LastModifiedDate".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'LastModifiedDate'", "LastModifiedDate", global::System.Management.Automation.CompletionResultType.ParameterValue, "LastModifiedDate");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ObjectAccessControlList".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ObjectAccessControlList'", "ObjectAccessControlList", global::System.Management.Automation.CompletionResultType.ParameterValue, "ObjectAccessControlList");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ObjectLockLegalHoldStatus".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ObjectLockLegalHoldStatus'", "ObjectLockLegalHoldStatus", global::System.Management.Automation.CompletionResultType.ParameterValue, "ObjectLockLegalHoldStatus");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ObjectLockMode".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ObjectLockMode'", "ObjectLockMode", global::System.Management.Automation.CompletionResultType.ParameterValue, "ObjectLockMode");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ObjectLockRetainUntilDate".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ObjectLockRetainUntilDate'", "ObjectLockRetainUntilDate", global::System.Management.Automation.CompletionResultType.ParameterValue, "ObjectLockRetainUntilDate");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ObjectOwner".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ObjectOwner'", "ObjectOwner", global::System.Management.Automation.CompletionResultType.ParameterValue, "ObjectOwner");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ReplicationStatus".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ReplicationStatus'", "ReplicationStatus", global::System.Management.Automation.CompletionResultType.ParameterValue, "ReplicationStatus");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Size".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Size'", "Size", global::System.Management.Automation.CompletionResultType.ParameterValue, "Size");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "StorageClass".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'StorageClass'", "StorageClass", global::System.Management.Automation.CompletionResultType.ParameterValue, "StorageClass");
            }
        }
    }
}