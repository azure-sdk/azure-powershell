// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support
{

    /// <summary>JobComparator enum</summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.JobComparatorTypeConverter))]
    public partial struct JobComparator :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CONTAINS".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'CONTAINS'", "CONTAINS", global::System.Management.Automation.CompletionResultType.ParameterValue, "CONTAINS");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "EQ".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'EQ'", "EQ", global::System.Management.Automation.CompletionResultType.ParameterValue, "EQ");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "GT".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'GT'", "GT", global::System.Management.Automation.CompletionResultType.ParameterValue, "GT");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "GTE".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'GTE'", "GTE", global::System.Management.Automation.CompletionResultType.ParameterValue, "GTE");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "LT".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'LT'", "LT", global::System.Management.Automation.CompletionResultType.ParameterValue, "LT");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "LTE".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'LTE'", "LTE", global::System.Management.Automation.CompletionResultType.ParameterValue, "LTE");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NE".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'NE'", "NE", global::System.Management.Automation.CompletionResultType.ParameterValue, "NE");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "STARTS_WITH".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'STARTS_WITH'", "STARTS_WITH", global::System.Management.Automation.CompletionResultType.ParameterValue, "STARTS_WITH");
            }
        }
    }
}