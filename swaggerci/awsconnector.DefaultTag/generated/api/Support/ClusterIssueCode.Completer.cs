// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support
{

    /// <summary>ClusterIssueCode enum</summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ClusterIssueCodeTypeConverter))]
    public partial struct ClusterIssueCode :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AccessDenied".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AccessDenied'", "AccessDenied", global::System.Management.Automation.CompletionResultType.ParameterValue, "AccessDenied");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ClusterUnreachable".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ClusterUnreachable'", "ClusterUnreachable", global::System.Management.Automation.CompletionResultType.ParameterValue, "ClusterUnreachable");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ConfigurationConflict".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ConfigurationConflict'", "ConfigurationConflict", global::System.Management.Automation.CompletionResultType.ParameterValue, "ConfigurationConflict");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Ec2SecurityGroupNotFound".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Ec2SecurityGroupNotFound'", "Ec2SecurityGroupNotFound", global::System.Management.Automation.CompletionResultType.ParameterValue, "Ec2SecurityGroupNotFound");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Ec2ServiceNotSubscribed".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Ec2ServiceNotSubscribed'", "Ec2ServiceNotSubscribed", global::System.Management.Automation.CompletionResultType.ParameterValue, "Ec2ServiceNotSubscribed");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Ec2SubnetNotFound".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Ec2SubnetNotFound'", "Ec2SubnetNotFound", global::System.Management.Automation.CompletionResultType.ParameterValue, "Ec2SubnetNotFound");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "IamRoleNotFound".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'IamRoleNotFound'", "IamRoleNotFound", global::System.Management.Automation.CompletionResultType.ParameterValue, "IamRoleNotFound");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "InsufficientFreeAddresses".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'InsufficientFreeAddresses'", "InsufficientFreeAddresses", global::System.Management.Automation.CompletionResultType.ParameterValue, "InsufficientFreeAddresses");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "InternalFailure".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'InternalFailure'", "InternalFailure", global::System.Management.Automation.CompletionResultType.ParameterValue, "InternalFailure");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "KmsGrantRevoked".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'KmsGrantRevoked'", "KmsGrantRevoked", global::System.Management.Automation.CompletionResultType.ParameterValue, "KmsGrantRevoked");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "KmsKeyDisabled".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'KmsKeyDisabled'", "KmsKeyDisabled", global::System.Management.Automation.CompletionResultType.ParameterValue, "KmsKeyDisabled");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "KmsKeyMarkedForDeletion".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'KmsKeyMarkedForDeletion'", "KmsKeyMarkedForDeletion", global::System.Management.Automation.CompletionResultType.ParameterValue, "KmsKeyMarkedForDeletion");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "KmsKeyNotFound".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'KmsKeyNotFound'", "KmsKeyNotFound", global::System.Management.Automation.CompletionResultType.ParameterValue, "KmsKeyNotFound");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Other".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Other'", "Other", global::System.Management.Automation.CompletionResultType.ParameterValue, "Other");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ResourceLimitExceeded".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ResourceLimitExceeded'", "ResourceLimitExceeded", global::System.Management.Automation.CompletionResultType.ParameterValue, "ResourceLimitExceeded");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ResourceNotFound".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ResourceNotFound'", "ResourceNotFound", global::System.Management.Automation.CompletionResultType.ParameterValue, "ResourceNotFound");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "StsRegionalEndpointDisabled".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'StsRegionalEndpointDisabled'", "StsRegionalEndpointDisabled", global::System.Management.Automation.CompletionResultType.ParameterValue, "StsRegionalEndpointDisabled");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "UnsupportedVersion".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'UnsupportedVersion'", "UnsupportedVersion", global::System.Management.Automation.CompletionResultType.ParameterValue, "UnsupportedVersion");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "VpcNotFound".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'VpcNotFound'", "VpcNotFound", global::System.Management.Automation.CompletionResultType.ParameterValue, "VpcNotFound");
            }
        }
    }
}