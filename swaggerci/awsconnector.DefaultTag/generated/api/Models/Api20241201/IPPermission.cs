// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of IpPermission</summary>
    public partial class IPPermission :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IIPPermission,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IIPPermissionInternal
    {

        /// <summary>Backing field for <see cref="FromPort" /> property.</summary>
        private int? _fromPort;

        /// <summary>
        /// <p>If the protocol is TCP or UDP, this is the start of the port range. If the protocol is ICMP or ICMPv6, this is the
        /// ICMP type or -1 (all ICMP types).</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? FromPort { get => this._fromPort; set => this._fromPort = value; }

        /// <summary>Backing field for <see cref="IPProtocol" /> property.</summary>
        private string _iPProtocol;

        /// <summary>
        /// <p>The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>, <code>icmpv6</code>) or number (see <a
        /// href='http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml'>Protocol Numbers</a>).</p> <p>Use <code>-1</code>
        /// to specify all protocols. When authorizing security group rules, specifying <code>-1</code> or a protocol number other
        /// than <code>tcp</code>, <code>udp</code>, <code>icmp</code>, or <code>icmpv6</code> allows traffic on all ports, regardless
        /// of any port range you specify. For <code>tcp</code>, <code>udp</code>, and <code>icmp</code>, you must specify a port
        /// range. For <code>icmpv6</code>, the port range is optional; if you omit the port range, traffic for all types and codes
        /// is allowed.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string IPProtocol { get => this._iPProtocol; set => this._iPProtocol = value; }

        /// <summary>Backing field for <see cref="IPRange" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IIPRange[] _iPRange;

        /// <summary><p>The IPv4 address ranges.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IIPRange[] IPRange { get => this._iPRange; set => this._iPRange = value; }

        /// <summary>Backing field for <see cref="Ipv6Range" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IIpv6Range[] _ipv6Range;

        /// <summary><p>The IPv6 address ranges.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IIpv6Range[] Ipv6Range { get => this._ipv6Range; set => this._ipv6Range = value; }

        /// <summary>Backing field for <see cref="PrefixListId" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPrefixListId[] _prefixListId;

        /// <summary><p>The prefix list IDs.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPrefixListId[] PrefixListId { get => this._prefixListId; set => this._prefixListId = value; }

        /// <summary>Backing field for <see cref="ToPort" /> property.</summary>
        private int? _toPort;

        /// <summary>
        /// <p>If the protocol is TCP or UDP, this is the end of the port range. If the protocol is ICMP or ICMPv6, this is the ICMP
        /// code or -1 (all ICMP codes). If the start port is -1 (all ICMP types), then the end port must be -1 (all ICMP codes).</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? ToPort { get => this._toPort; set => this._toPort = value; }

        /// <summary>Backing field for <see cref="UserIdGroupPair" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IUserIdGroupPair[] _userIdGroupPair;

        /// <summary><p>The security group and Amazon Web Services account ID pairs.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IUserIdGroupPair[] UserIdGroupPair { get => this._userIdGroupPair; set => this._userIdGroupPair = value; }

        /// <summary>Creates an new <see cref="IPPermission" /> instance.</summary>
        public IPPermission()
        {

        }
    }
    /// Definition of IpPermission
    public partial interface IIPPermission :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary>
        /// <p>If the protocol is TCP or UDP, this is the start of the port range. If the protocol is ICMP or ICMPv6, this is the
        /// ICMP type or -1 (all ICMP types).</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>If the protocol is TCP or UDP, this is the start of the port range. If the protocol is ICMP or ICMPv6, this is the ICMP type or -1 (all ICMP types).</p>",
        SerializedName = @"fromPort",
        PossibleTypes = new [] { typeof(int) })]
        int? FromPort { get; set; }
        /// <summary>
        /// <p>The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>, <code>icmpv6</code>) or number (see <a
        /// href='http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml'>Protocol Numbers</a>).</p> <p>Use <code>-1</code>
        /// to specify all protocols. When authorizing security group rules, specifying <code>-1</code> or a protocol number other
        /// than <code>tcp</code>, <code>udp</code>, <code>icmp</code>, or <code>icmpv6</code> allows traffic on all ports, regardless
        /// of any port range you specify. For <code>tcp</code>, <code>udp</code>, and <code>icmp</code>, you must specify a port
        /// range. For <code>icmpv6</code>, the port range is optional; if you omit the port range, traffic for all types and codes
        /// is allowed.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>, <code>icmpv6</code>) or number (see <a href='http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml'>Protocol Numbers</a>).</p> <p>Use <code>-1</code> to specify all protocols. When authorizing security group rules, specifying <code>-1</code> or a protocol number other than <code>tcp</code>, <code>udp</code>, <code>icmp</code>, or <code>icmpv6</code> allows traffic on all ports, regardless of any port range you specify. For <code>tcp</code>, <code>udp</code>, and <code>icmp</code>, you must specify a port range. For <code>icmpv6</code>, the port range is optional; if you omit the port range, traffic for all types and codes is allowed.</p>",
        SerializedName = @"ipProtocol",
        PossibleTypes = new [] { typeof(string) })]
        string IPProtocol { get; set; }
        /// <summary><p>The IPv4 address ranges.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The IPv4 address ranges.</p>",
        SerializedName = @"ipRanges",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IIPRange) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IIPRange[] IPRange { get; set; }
        /// <summary><p>The IPv6 address ranges.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The IPv6 address ranges.</p>",
        SerializedName = @"ipv6Ranges",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IIpv6Range) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IIpv6Range[] Ipv6Range { get; set; }
        /// <summary><p>The prefix list IDs.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The prefix list IDs.</p>",
        SerializedName = @"prefixListIds",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPrefixListId) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPrefixListId[] PrefixListId { get; set; }
        /// <summary>
        /// <p>If the protocol is TCP or UDP, this is the end of the port range. If the protocol is ICMP or ICMPv6, this is the ICMP
        /// code or -1 (all ICMP codes). If the start port is -1 (all ICMP types), then the end port must be -1 (all ICMP codes).</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>If the protocol is TCP or UDP, this is the end of the port range. If the protocol is ICMP or ICMPv6, this is the ICMP code or -1 (all ICMP codes). If the start port is -1 (all ICMP types), then the end port must be -1 (all ICMP codes).</p>",
        SerializedName = @"toPort",
        PossibleTypes = new [] { typeof(int) })]
        int? ToPort { get; set; }
        /// <summary><p>The security group and Amazon Web Services account ID pairs.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The security group and Amazon Web Services account ID pairs.</p>",
        SerializedName = @"userIdGroupPairs",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IUserIdGroupPair) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IUserIdGroupPair[] UserIdGroupPair { get; set; }

    }
    /// Definition of IpPermission
    internal partial interface IIPPermissionInternal

    {
        /// <summary>
        /// <p>If the protocol is TCP or UDP, this is the start of the port range. If the protocol is ICMP or ICMPv6, this is the
        /// ICMP type or -1 (all ICMP types).</p>
        /// </summary>
        int? FromPort { get; set; }
        /// <summary>
        /// <p>The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>, <code>icmpv6</code>) or number (see <a
        /// href='http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml'>Protocol Numbers</a>).</p> <p>Use <code>-1</code>
        /// to specify all protocols. When authorizing security group rules, specifying <code>-1</code> or a protocol number other
        /// than <code>tcp</code>, <code>udp</code>, <code>icmp</code>, or <code>icmpv6</code> allows traffic on all ports, regardless
        /// of any port range you specify. For <code>tcp</code>, <code>udp</code>, and <code>icmp</code>, you must specify a port
        /// range. For <code>icmpv6</code>, the port range is optional; if you omit the port range, traffic for all types and codes
        /// is allowed.</p>
        /// </summary>
        string IPProtocol { get; set; }
        /// <summary><p>The IPv4 address ranges.</p></summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IIPRange[] IPRange { get; set; }
        /// <summary><p>The IPv6 address ranges.</p></summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IIpv6Range[] Ipv6Range { get; set; }
        /// <summary><p>The prefix list IDs.</p></summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPrefixListId[] PrefixListId { get; set; }
        /// <summary>
        /// <p>If the protocol is TCP or UDP, this is the end of the port range. If the protocol is ICMP or ICMPv6, this is the ICMP
        /// code or -1 (all ICMP codes). If the start port is -1 (all ICMP types), then the end port must be -1 (all ICMP codes).</p>
        /// </summary>
        int? ToPort { get; set; }
        /// <summary><p>The security group and Amazon Web Services account ID pairs.</p></summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IUserIdGroupPair[] UserIdGroupPair { get; set; }

    }
}