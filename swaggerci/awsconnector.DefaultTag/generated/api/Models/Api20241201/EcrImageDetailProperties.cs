// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of EcrImageDetail</summary>
    public partial class EcrImageDetailProperties :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcrImageDetailProperties,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcrImageDetailPropertiesInternal
    {

        /// <summary>Backing field for <see cref="Arn" /> property.</summary>
        private string _arn;

        /// <summary>Amazon Resource Name (ARN)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string Arn { get => this._arn; set => this._arn = value; }

        /// <summary><p>The artifact media type of the image.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwPropertyArtifactMediaType { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).ArtifactMediaType; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).ArtifactMediaType = value ?? null; }

        /// <summary><p>The <code>sha256</code> digest of the image manifest.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwPropertyImageDigest { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).ImageDigest; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).ImageDigest = value ?? null; }

        /// <summary><p>The media type of the image manifest.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwPropertyImageManifestMediaType { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).ImageManifestMediaType; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).ImageManifestMediaType = value ?? null; }

        /// <summary>
        /// <p>The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository.
        /// </p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public global::System.DateTime? AwPropertyImagePushedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).ImagePushedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).ImagePushedAt = value ?? default(global::System.DateTime); }

        /// <summary>
        /// <p>The size, in bytes, of the image in the repository.</p> <p>If the image is a manifest list, this will be the max size
        /// of all manifests in the list.</p> <note> <p>Beginning with Docker version 1.9, the Docker client compresses image layers
        /// before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed
        /// image size, so it may return a larger image size than the image sizes returned by <a>DescribeImages</a>.</p> </note>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public long? AwPropertyImageSizeInByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).ImageSizeInByte; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).ImageSizeInByte = value ?? default(long); }

        /// <summary><p>The list of tags associated with this image.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string[] AwPropertyImageTag { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).ImageTag; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).ImageTag = value ?? null /* arrayOf */; }

        /// <summary>
        /// <p>The date and time, expressed in standard JavaScript date format, when Amazon ECR recorded the last image pull.</p>
        /// <note> <p>Amazon ECR refreshes the last image pull timestamp at least once every 24 hours. For example, if you pull an
        /// image once a day then the <code>lastRecordedPullTime</code> timestamp will indicate the exact time that the image was
        /// last pulled. However, if you pull an image once an hour, because Amazon ECR refreshes the <code>lastRecordedPullTime</code>
        /// timestamp at least once every 24 hours, the result may not be the exact time that the image was last pulled.</p> </note>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public global::System.DateTime? AwPropertyLastRecordedPullTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).LastRecordedPullTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).LastRecordedPullTime = value ?? default(global::System.DateTime); }

        /// <summary>
        /// <p>The Amazon Web Services account ID associated with the registry to which this image belongs.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwPropertyRegistryId { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).RegistryId; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).RegistryId = value ?? null; }

        /// <summary><p>The name of the repository to which this image belongs.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwPropertyRepositoryName { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).RepositoryName; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).RepositoryName = value ?? null; }

        /// <summary>Backing field for <see cref="AwsAccountId" /> property.</summary>
        private string _awsAccountId;

        /// <summary>AWS Account ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string AwsAccountId { get => this._awsAccountId; set => this._awsAccountId = value; }

        /// <summary>Backing field for <see cref="AwsProperty" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailProperties _awsProperty;

        /// <summary>AWS Properties</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailProperties AwsProperty { get => (this._awsProperty = this._awsProperty ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AwsEcrImageDetailProperties()); set => this._awsProperty = value; }

        /// <summary>Backing field for <see cref="AwsRegion" /> property.</summary>
        private string _awsRegion;

        /// <summary>AWS Region</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string AwsRegion { get => this._awsRegion; set => this._awsRegion = value; }

        /// <summary>Backing field for <see cref="AwsSourceSchema" /> property.</summary>
        private string _awsSourceSchema;

        /// <summary>AWS Source Schema</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string AwsSourceSchema { get => this._awsSourceSchema; set => this._awsSourceSchema = value; }

        /// <summary>Backing field for <see cref="AwsTag" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcrImageDetailPropertiesAwsTags _awsTag;

        /// <summary>AWS Tags</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcrImageDetailPropertiesAwsTags AwsTag { get => (this._awsTag = this._awsTag ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.EcrImageDetailPropertiesAwsTags()); set => this._awsTag = value; }

        /// <summary><p>The image vulnerability counts, sorted by severity.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanFindingsSummaryFindingSeverityCounts ImageScanFindingSummaryFindingSeverityCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).ImageScanFindingSummaryFindingSeverityCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).ImageScanFindingSummaryFindingSeverityCount = value ?? null /* model class */; }

        /// <summary><p>The time of the last completed image scan.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public global::System.DateTime? ImageScanFindingSummaryImageScanCompletedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).ImageScanFindingSummaryImageScanCompletedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).ImageScanFindingSummaryImageScanCompletedAt = value ?? default(global::System.DateTime); }

        /// <summary><p>The time when the vulnerability data was last scanned.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public global::System.DateTime? ImageScanFindingSummaryVulnerabilitySourceUpdatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).ImageScanFindingSummaryVulnerabilitySourceUpdatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).ImageScanFindingSummaryVulnerabilitySourceUpdatedAt = value ?? default(global::System.DateTime); }

        /// <summary><p>The description of the image scan status.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string ImageScanStatusDescription { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).ImageScanStatusDescription; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).ImageScanStatusDescription = value ?? null; }

        /// <summary>Internal Acessors for AwPropertyImageScanFindingsSummary</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanFindingsSummary Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcrImageDetailPropertiesInternal.AwPropertyImageScanFindingsSummary { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).ImageScanFindingsSummary; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).ImageScanFindingsSummary = value; }

        /// <summary>Internal Acessors for AwPropertyImageScanStatus</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanStatus Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcrImageDetailPropertiesInternal.AwPropertyImageScanStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).ImageScanStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).ImageScanStatus = value; }

        /// <summary>Internal Acessors for AwsProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailProperties Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcrImageDetailPropertiesInternal.AwsProperty { get => (this._awsProperty = this._awsProperty ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AwsEcrImageDetailProperties()); set { {_awsProperty = value;} } }

        /// <summary>Internal Acessors for ImageScanStatus</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IScanStatusEnumValue Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcrImageDetailPropertiesInternal.ImageScanStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).ImageScanStatusStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).ImageScanStatusStatus = value; }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcrImageDetailPropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? _provisioningState;

        /// <summary>The status of the last operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="PublicCloudConnectorsResourceId" /> property.</summary>
        private string _publicCloudConnectorsResourceId;

        /// <summary>Public Cloud Connectors Resource ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string PublicCloudConnectorsResourceId { get => this._publicCloudConnectorsResourceId; set => this._publicCloudConnectorsResourceId = value; }

        /// <summary>Backing field for <see cref="PublicCloudResourceName" /> property.</summary>
        private string _publicCloudResourceName;

        /// <summary>Public Cloud Resource Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string PublicCloudResourceName { get => this._publicCloudResourceName; set => this._publicCloudResourceName = value; }

        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ScanStatus? StatusValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).StatusValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal)AwsProperty).StatusValue = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ScanStatus)""); }

        /// <summary>Creates an new <see cref="EcrImageDetailProperties" /> instance.</summary>
        public EcrImageDetailProperties()
        {

        }
    }
    /// Definition of EcrImageDetail
    public partial interface IEcrImageDetailProperties :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary>Amazon Resource Name (ARN)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Amazon Resource Name (ARN)",
        SerializedName = @"arn",
        PossibleTypes = new [] { typeof(string) })]
        string Arn { get; set; }
        /// <summary><p>The artifact media type of the image.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The artifact media type of the image.</p>",
        SerializedName = @"artifactMediaType",
        PossibleTypes = new [] { typeof(string) })]
        string AwPropertyArtifactMediaType { get; set; }
        /// <summary><p>The <code>sha256</code> digest of the image manifest.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The <code>sha256</code> digest of the image manifest.</p>",
        SerializedName = @"imageDigest",
        PossibleTypes = new [] { typeof(string) })]
        string AwPropertyImageDigest { get; set; }
        /// <summary><p>The media type of the image manifest.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The media type of the image manifest.</p>",
        SerializedName = @"imageManifestMediaType",
        PossibleTypes = new [] { typeof(string) })]
        string AwPropertyImageManifestMediaType { get; set; }
        /// <summary>
        /// <p>The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository.
        /// </p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository. </p>",
        SerializedName = @"imagePushedAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? AwPropertyImagePushedAt { get; set; }
        /// <summary>
        /// <p>The size, in bytes, of the image in the repository.</p> <p>If the image is a manifest list, this will be the max size
        /// of all manifests in the list.</p> <note> <p>Beginning with Docker version 1.9, the Docker client compresses image layers
        /// before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed
        /// image size, so it may return a larger image size than the image sizes returned by <a>DescribeImages</a>.</p> </note>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The size, in bytes, of the image in the repository.</p> <p>If the image is a manifest list, this will be the max size of all manifests in the list.</p> <note> <p>Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed image size, so it may return a larger image size than the image sizes returned by <a>DescribeImages</a>.</p> </note>",
        SerializedName = @"imageSizeInBytes",
        PossibleTypes = new [] { typeof(long) })]
        long? AwPropertyImageSizeInByte { get; set; }
        /// <summary><p>The list of tags associated with this image.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The list of tags associated with this image.</p>",
        SerializedName = @"imageTags",
        PossibleTypes = new [] { typeof(string) })]
        string[] AwPropertyImageTag { get; set; }
        /// <summary>
        /// <p>The date and time, expressed in standard JavaScript date format, when Amazon ECR recorded the last image pull.</p>
        /// <note> <p>Amazon ECR refreshes the last image pull timestamp at least once every 24 hours. For example, if you pull an
        /// image once a day then the <code>lastRecordedPullTime</code> timestamp will indicate the exact time that the image was
        /// last pulled. However, if you pull an image once an hour, because Amazon ECR refreshes the <code>lastRecordedPullTime</code>
        /// timestamp at least once every 24 hours, the result may not be the exact time that the image was last pulled.</p> </note>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The date and time, expressed in standard JavaScript date format, when Amazon ECR recorded the last image pull.</p> <note> <p>Amazon ECR refreshes the last image pull timestamp at least once every 24 hours. For example, if you pull an image once a day then the <code>lastRecordedPullTime</code> timestamp will indicate the exact time that the image was last pulled. However, if you pull an image once an hour, because Amazon ECR refreshes the <code>lastRecordedPullTime</code> timestamp at least once every 24 hours, the result may not be the exact time that the image was last pulled.</p> </note>",
        SerializedName = @"lastRecordedPullTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? AwPropertyLastRecordedPullTime { get; set; }
        /// <summary>
        /// <p>The Amazon Web Services account ID associated with the registry to which this image belongs.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The Amazon Web Services account ID associated with the registry to which this image belongs.</p>",
        SerializedName = @"registryId",
        PossibleTypes = new [] { typeof(string) })]
        string AwPropertyRegistryId { get; set; }
        /// <summary><p>The name of the repository to which this image belongs.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The name of the repository to which this image belongs.</p>",
        SerializedName = @"repositoryName",
        PossibleTypes = new [] { typeof(string) })]
        string AwPropertyRepositoryName { get; set; }
        /// <summary>AWS Account ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Account ID",
        SerializedName = @"awsAccountId",
        PossibleTypes = new [] { typeof(string) })]
        string AwsAccountId { get; set; }
        /// <summary>AWS Region</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Region",
        SerializedName = @"awsRegion",
        PossibleTypes = new [] { typeof(string) })]
        string AwsRegion { get; set; }
        /// <summary>AWS Source Schema</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Source Schema",
        SerializedName = @"awsSourceSchema",
        PossibleTypes = new [] { typeof(string) })]
        string AwsSourceSchema { get; set; }
        /// <summary>AWS Tags</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Tags",
        SerializedName = @"awsTags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcrImageDetailPropertiesAwsTags) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcrImageDetailPropertiesAwsTags AwsTag { get; set; }
        /// <summary><p>The image vulnerability counts, sorted by severity.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The image vulnerability counts, sorted by severity.</p>",
        SerializedName = @"findingSeverityCounts",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanFindingsSummaryFindingSeverityCounts) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanFindingsSummaryFindingSeverityCounts ImageScanFindingSummaryFindingSeverityCount { get; set; }
        /// <summary><p>The time of the last completed image scan.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The time of the last completed image scan.</p>",
        SerializedName = @"imageScanCompletedAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ImageScanFindingSummaryImageScanCompletedAt { get; set; }
        /// <summary><p>The time when the vulnerability data was last scanned.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The time when the vulnerability data was last scanned.</p>",
        SerializedName = @"vulnerabilitySourceUpdatedAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ImageScanFindingSummaryVulnerabilitySourceUpdatedAt { get; set; }
        /// <summary><p>The description of the image scan status.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The description of the image scan status.</p>",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        string ImageScanStatusDescription { get; set; }
        /// <summary>The status of the last operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The status of the last operation.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? ProvisioningState { get;  }
        /// <summary>Public Cloud Connectors Resource ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Public Cloud Connectors Resource ID",
        SerializedName = @"publicCloudConnectorsResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string PublicCloudConnectorsResourceId { get; set; }
        /// <summary>Public Cloud Resource Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Public Cloud Resource Name",
        SerializedName = @"publicCloudResourceName",
        PossibleTypes = new [] { typeof(string) })]
        string PublicCloudResourceName { get; set; }
        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property value",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ScanStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ScanStatus? StatusValue { get; set; }

    }
    /// Definition of EcrImageDetail
    internal partial interface IEcrImageDetailPropertiesInternal

    {
        /// <summary>Amazon Resource Name (ARN)</summary>
        string Arn { get; set; }
        /// <summary><p>The artifact media type of the image.</p></summary>
        string AwPropertyArtifactMediaType { get; set; }
        /// <summary><p>The <code>sha256</code> digest of the image manifest.</p></summary>
        string AwPropertyImageDigest { get; set; }
        /// <summary><p>The media type of the image manifest.</p></summary>
        string AwPropertyImageManifestMediaType { get; set; }
        /// <summary>
        /// <p>The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository.
        /// </p>
        /// </summary>
        global::System.DateTime? AwPropertyImagePushedAt { get; set; }
        /// <summary><p>A summary of the last completed image scan.</p></summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanFindingsSummary AwPropertyImageScanFindingsSummary { get; set; }
        /// <summary><p>The current state of the scan.</p></summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanStatus AwPropertyImageScanStatus { get; set; }
        /// <summary>
        /// <p>The size, in bytes, of the image in the repository.</p> <p>If the image is a manifest list, this will be the max size
        /// of all manifests in the list.</p> <note> <p>Beginning with Docker version 1.9, the Docker client compresses image layers
        /// before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed
        /// image size, so it may return a larger image size than the image sizes returned by <a>DescribeImages</a>.</p> </note>
        /// </summary>
        long? AwPropertyImageSizeInByte { get; set; }
        /// <summary><p>The list of tags associated with this image.</p></summary>
        string[] AwPropertyImageTag { get; set; }
        /// <summary>
        /// <p>The date and time, expressed in standard JavaScript date format, when Amazon ECR recorded the last image pull.</p>
        /// <note> <p>Amazon ECR refreshes the last image pull timestamp at least once every 24 hours. For example, if you pull an
        /// image once a day then the <code>lastRecordedPullTime</code> timestamp will indicate the exact time that the image was
        /// last pulled. However, if you pull an image once an hour, because Amazon ECR refreshes the <code>lastRecordedPullTime</code>
        /// timestamp at least once every 24 hours, the result may not be the exact time that the image was last pulled.</p> </note>
        /// </summary>
        global::System.DateTime? AwPropertyLastRecordedPullTime { get; set; }
        /// <summary>
        /// <p>The Amazon Web Services account ID associated with the registry to which this image belongs.</p>
        /// </summary>
        string AwPropertyRegistryId { get; set; }
        /// <summary><p>The name of the repository to which this image belongs.</p></summary>
        string AwPropertyRepositoryName { get; set; }
        /// <summary>AWS Account ID</summary>
        string AwsAccountId { get; set; }
        /// <summary>AWS Properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailProperties AwsProperty { get; set; }
        /// <summary>AWS Region</summary>
        string AwsRegion { get; set; }
        /// <summary>AWS Source Schema</summary>
        string AwsSourceSchema { get; set; }
        /// <summary>AWS Tags</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcrImageDetailPropertiesAwsTags AwsTag { get; set; }
        /// <summary><p>The image vulnerability counts, sorted by severity.</p></summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanFindingsSummaryFindingSeverityCounts ImageScanFindingSummaryFindingSeverityCount { get; set; }
        /// <summary><p>The time of the last completed image scan.</p></summary>
        global::System.DateTime? ImageScanFindingSummaryImageScanCompletedAt { get; set; }
        /// <summary><p>The time when the vulnerability data was last scanned.</p></summary>
        global::System.DateTime? ImageScanFindingSummaryVulnerabilitySourceUpdatedAt { get; set; }
        /// <summary><p>The current state of an image scan.</p></summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IScanStatusEnumValue ImageScanStatus { get; set; }
        /// <summary><p>The description of the image scan status.</p></summary>
        string ImageScanStatusDescription { get; set; }
        /// <summary>The status of the last operation.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? ProvisioningState { get; set; }
        /// <summary>Public Cloud Connectors Resource ID</summary>
        string PublicCloudConnectorsResourceId { get; set; }
        /// <summary>Public Cloud Resource Name</summary>
        string PublicCloudResourceName { get; set; }
        /// <summary>Property value</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ScanStatus? StatusValue { get; set; }

    }
}