// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of awsRedshiftCluster</summary>
    public partial class AwsRedshiftClusterProperties
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json serialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name= "returnNow" />
        /// output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject into a new instance of <see cref="AwsRedshiftClusterProperties" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal AwsRedshiftClusterProperties(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_endpoint = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject>("endpoint"), out var __jsonEndpoint) ? Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.EndpointAutoGenerated3.FromJson(__jsonEndpoint) : Endpoint;}
            {_loggingProperty = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject>("loggingProperties"), out var __jsonLoggingProperties) ? Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.LoggingProperties.FromJson(__jsonLoggingProperties) : LoggingProperty;}
            {_allowVersionUpgrade = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean>("allowVersionUpgrade"), out var __jsonAllowVersionUpgrade) ? (bool?)__jsonAllowVersionUpgrade : AllowVersionUpgrade;}
            {_aquaConfigurationStatus = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("aquaConfigurationStatus"), out var __jsonAquaConfigurationStatus) ? (string)__jsonAquaConfigurationStatus : (string)AquaConfigurationStatus;}
            {_automatedSnapshotRetentionPeriod = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber>("automatedSnapshotRetentionPeriod"), out var __jsonAutomatedSnapshotRetentionPeriod) ? (int?)__jsonAutomatedSnapshotRetentionPeriod : AutomatedSnapshotRetentionPeriod;}
            {_availabilityZone = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("availabilityZone"), out var __jsonAvailabilityZone) ? (string)__jsonAvailabilityZone : (string)AvailabilityZone;}
            {_availabilityZoneRelocation = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean>("availabilityZoneRelocation"), out var __jsonAvailabilityZoneRelocation) ? (bool?)__jsonAvailabilityZoneRelocation : AvailabilityZoneRelocation;}
            {_availabilityZoneRelocationStatus = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("availabilityZoneRelocationStatus"), out var __jsonAvailabilityZoneRelocationStatus) ? (string)__jsonAvailabilityZoneRelocationStatus : (string)AvailabilityZoneRelocationStatus;}
            {_classic = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean>("classic"), out var __jsonClassic) ? (bool?)__jsonClassic : Classic;}
            {_clusterIdentifier = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("clusterIdentifier"), out var __jsonClusterIdentifier) ? (string)__jsonClusterIdentifier : (string)ClusterIdentifier;}
            {_clusterNamespaceArn = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("clusterNamespaceArn"), out var __jsonClusterNamespaceArn) ? (string)__jsonClusterNamespaceArn : (string)ClusterNamespaceArn;}
            {_clusterParameterGroupName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("clusterParameterGroupName"), out var __jsonClusterParameterGroupName) ? (string)__jsonClusterParameterGroupName : (string)ClusterParameterGroupName;}
            {_clusterSecurityGroup = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray>("clusterSecurityGroups"), out var __jsonClusterSecurityGroups) ? If( __jsonClusterSecurityGroups as Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray, out var __v) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__v, (__u)=>(string) (__u is Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString __t ? (string)(__t.ToString()) : null)) ))() : null : ClusterSecurityGroup;}
            {_clusterSubnetGroupName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("clusterSubnetGroupName"), out var __jsonClusterSubnetGroupName) ? (string)__jsonClusterSubnetGroupName : (string)ClusterSubnetGroupName;}
            {_clusterType = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("clusterType"), out var __jsonClusterType) ? (string)__jsonClusterType : (string)ClusterType;}
            {_clusterVersion = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("clusterVersion"), out var __jsonClusterVersion) ? (string)__jsonClusterVersion : (string)ClusterVersion;}
            {_dbName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("dbName"), out var __jsonDbName) ? (string)__jsonDbName : (string)DbName;}
            {_deferMaintenance = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean>("deferMaintenance"), out var __jsonDeferMaintenance) ? (bool?)__jsonDeferMaintenance : DeferMaintenance;}
            {_deferMaintenanceDuration = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber>("deferMaintenanceDuration"), out var __jsonDeferMaintenanceDuration) ? (int?)__jsonDeferMaintenanceDuration : DeferMaintenanceDuration;}
            {_deferMaintenanceEndTime = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("deferMaintenanceEndTime"), out var __jsonDeferMaintenanceEndTime) ? (string)__jsonDeferMaintenanceEndTime : (string)DeferMaintenanceEndTime;}
            {_deferMaintenanceIdentifier = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("deferMaintenanceIdentifier"), out var __jsonDeferMaintenanceIdentifier) ? (string)__jsonDeferMaintenanceIdentifier : (string)DeferMaintenanceIdentifier;}
            {_deferMaintenanceStartTime = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("deferMaintenanceStartTime"), out var __jsonDeferMaintenanceStartTime) ? (string)__jsonDeferMaintenanceStartTime : (string)DeferMaintenanceStartTime;}
            {_destinationRegion = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("destinationRegion"), out var __jsonDestinationRegion) ? (string)__jsonDestinationRegion : (string)DestinationRegion;}
            {_elasticIP = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("elasticIp"), out var __jsonElasticIP) ? (string)__jsonElasticIP : (string)ElasticIP;}
            {_encrypted = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean>("encrypted"), out var __jsonEncrypted) ? (bool?)__jsonEncrypted : Encrypted;}
            {_enhancedVpcRouting = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean>("enhancedVpcRouting"), out var __jsonEnhancedVpcRouting) ? (bool?)__jsonEnhancedVpcRouting : EnhancedVpcRouting;}
            {_hsmClientCertificateIdentifier = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("hsmClientCertificateIdentifier"), out var __jsonHsmClientCertificateIdentifier) ? (string)__jsonHsmClientCertificateIdentifier : (string)HsmClientCertificateIdentifier;}
            {_hsmConfigurationIdentifier = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("hsmConfigurationIdentifier"), out var __jsonHsmConfigurationIdentifier) ? (string)__jsonHsmConfigurationIdentifier : (string)HsmConfigurationIdentifier;}
            {_iamRole = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray>("iamRoles"), out var __jsonIamRoles) ? If( __jsonIamRoles as Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray, out var __q) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__q, (__p)=>(string) (__p is Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString __o ? (string)(__o.ToString()) : null)) ))() : null : IamRole;}
            {_kmsKeyId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("kmsKeyId"), out var __jsonKmsKeyId) ? (string)__jsonKmsKeyId : (string)KmsKeyId;}
            {_maintenanceTrackName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("maintenanceTrackName"), out var __jsonMaintenanceTrackName) ? (string)__jsonMaintenanceTrackName : (string)MaintenanceTrackName;}
            {_manageMasterPassword = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean>("manageMasterPassword"), out var __jsonManageMasterPassword) ? (bool?)__jsonManageMasterPassword : ManageMasterPassword;}
            {_manualSnapshotRetentionPeriod = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber>("manualSnapshotRetentionPeriod"), out var __jsonManualSnapshotRetentionPeriod) ? (int?)__jsonManualSnapshotRetentionPeriod : ManualSnapshotRetentionPeriod;}
            {_masterPasswordSecretArn = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("masterPasswordSecretArn"), out var __jsonMasterPasswordSecretArn) ? (string)__jsonMasterPasswordSecretArn : (string)MasterPasswordSecretArn;}
            {_masterPasswordSecretKmsKeyId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("masterPasswordSecretKmsKeyId"), out var __jsonMasterPasswordSecretKmsKeyId) ? (string)__jsonMasterPasswordSecretKmsKeyId : (string)MasterPasswordSecretKmsKeyId;}
            {_masterUserPassword = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("masterUserPassword"), out var __jsonMasterUserPassword) ? (string)__jsonMasterUserPassword : (string)MasterUserPassword;}
            {_masterUsername = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("masterUsername"), out var __jsonMasterUsername) ? (string)__jsonMasterUsername : (string)MasterUsername;}
            {_multiAz = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean>("multiAZ"), out var __jsonMultiAz) ? (bool?)__jsonMultiAz : MultiAz;}
            {_namespaceResourcePolicy = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject>("namespaceResourcePolicy"), out var __jsonNamespaceResourcePolicy) ? Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Any.FromJson(__jsonNamespaceResourcePolicy) : NamespaceResourcePolicy;}
            {_nodeType = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("nodeType"), out var __jsonNodeType) ? (string)__jsonNodeType : (string)NodeType;}
            {_numberOfNode = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber>("numberOfNodes"), out var __jsonNumberOfNodes) ? (int?)__jsonNumberOfNodes : NumberOfNode;}
            {_ownerAccount = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("ownerAccount"), out var __jsonOwnerAccount) ? (string)__jsonOwnerAccount : (string)OwnerAccount;}
            {_port = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber>("port"), out var __jsonPort) ? (int?)__jsonPort : Port;}
            {_preferredMaintenanceWindow = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("preferredMaintenanceWindow"), out var __jsonPreferredMaintenanceWindow) ? (string)__jsonPreferredMaintenanceWindow : (string)PreferredMaintenanceWindow;}
            {_publiclyAccessible = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean>("publiclyAccessible"), out var __jsonPubliclyAccessible) ? (bool?)__jsonPubliclyAccessible : PubliclyAccessible;}
            {_resourceAction = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("resourceAction"), out var __jsonResourceAction) ? (string)__jsonResourceAction : (string)ResourceAction;}
            {_revisionTarget = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("revisionTarget"), out var __jsonRevisionTarget) ? (string)__jsonRevisionTarget : (string)RevisionTarget;}
            {_rotateEncryptionKey = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean>("rotateEncryptionKey"), out var __jsonRotateEncryptionKey) ? (bool?)__jsonRotateEncryptionKey : RotateEncryptionKey;}
            {_snapshotClusterIdentifier = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("snapshotClusterIdentifier"), out var __jsonSnapshotClusterIdentifier) ? (string)__jsonSnapshotClusterIdentifier : (string)SnapshotClusterIdentifier;}
            {_snapshotCopyGrantName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("snapshotCopyGrantName"), out var __jsonSnapshotCopyGrantName) ? (string)__jsonSnapshotCopyGrantName : (string)SnapshotCopyGrantName;}
            {_snapshotCopyManual = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean>("snapshotCopyManual"), out var __jsonSnapshotCopyManual) ? (bool?)__jsonSnapshotCopyManual : SnapshotCopyManual;}
            {_snapshotCopyRetentionPeriod = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber>("snapshotCopyRetentionPeriod"), out var __jsonSnapshotCopyRetentionPeriod) ? (int?)__jsonSnapshotCopyRetentionPeriod : SnapshotCopyRetentionPeriod;}
            {_snapshotIdentifier = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("snapshotIdentifier"), out var __jsonSnapshotIdentifier) ? (string)__jsonSnapshotIdentifier : (string)SnapshotIdentifier;}
            {_tag = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray>("tags"), out var __jsonTags) ? If( __jsonTags as Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray, out var __l) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated50[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__l, (__k)=>(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated50) (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.TagAutoGenerated50.FromJson(__k) )) ))() : null : Tag;}
            {_vpcSecurityGroupId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray>("vpcSecurityGroupIds"), out var __jsonVpcSecurityGroupIds) ? If( __jsonVpcSecurityGroupIds as Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray, out var __g) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__g, (__f)=>(string) (__f is Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString __e ? (string)(__e.ToString()) : null)) ))() : null : VpcSecurityGroupId;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsRedshiftClusterProperties.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsRedshiftClusterProperties.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsRedshiftClusterProperties FromJson(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode node)
        {
            return node is Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject json ? new AwsRedshiftClusterProperties(json) : null;
        }

        /// <summary>
        /// Serializes this instance of <see cref="AwsRedshiftClusterProperties" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="AwsRedshiftClusterProperties" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode" />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            AddIf( null != this._endpoint ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) this._endpoint.ToJson(null,serializationMode) : null, "endpoint" ,container.Add );
            AddIf( null != this._loggingProperty ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) this._loggingProperty.ToJson(null,serializationMode) : null, "loggingProperties" ,container.Add );
            AddIf( null != this._allowVersionUpgrade ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean((bool)this._allowVersionUpgrade) : null, "allowVersionUpgrade" ,container.Add );
            AddIf( null != (((object)this._aquaConfigurationStatus)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._aquaConfigurationStatus.ToString()) : null, "aquaConfigurationStatus" ,container.Add );
            AddIf( null != this._automatedSnapshotRetentionPeriod ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber((int)this._automatedSnapshotRetentionPeriod) : null, "automatedSnapshotRetentionPeriod" ,container.Add );
            AddIf( null != (((object)this._availabilityZone)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._availabilityZone.ToString()) : null, "availabilityZone" ,container.Add );
            AddIf( null != this._availabilityZoneRelocation ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean((bool)this._availabilityZoneRelocation) : null, "availabilityZoneRelocation" ,container.Add );
            AddIf( null != (((object)this._availabilityZoneRelocationStatus)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._availabilityZoneRelocationStatus.ToString()) : null, "availabilityZoneRelocationStatus" ,container.Add );
            AddIf( null != this._classic ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean((bool)this._classic) : null, "classic" ,container.Add );
            AddIf( null != (((object)this._clusterIdentifier)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._clusterIdentifier.ToString()) : null, "clusterIdentifier" ,container.Add );
            AddIf( null != (((object)this._clusterNamespaceArn)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._clusterNamespaceArn.ToString()) : null, "clusterNamespaceArn" ,container.Add );
            AddIf( null != (((object)this._clusterParameterGroupName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._clusterParameterGroupName.ToString()) : null, "clusterParameterGroupName" ,container.Add );
            if (null != this._clusterSecurityGroup)
            {
                var __w = new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.XNodeArray();
                foreach( var __x in this._clusterSecurityGroup )
                {
                    AddIf(null != (((object)__x)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(__x.ToString()) : null ,__w.Add);
                }
                container.Add("clusterSecurityGroups",__w);
            }
            AddIf( null != (((object)this._clusterSubnetGroupName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._clusterSubnetGroupName.ToString()) : null, "clusterSubnetGroupName" ,container.Add );
            AddIf( null != (((object)this._clusterType)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._clusterType.ToString()) : null, "clusterType" ,container.Add );
            AddIf( null != (((object)this._clusterVersion)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._clusterVersion.ToString()) : null, "clusterVersion" ,container.Add );
            AddIf( null != (((object)this._dbName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._dbName.ToString()) : null, "dbName" ,container.Add );
            AddIf( null != this._deferMaintenance ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean((bool)this._deferMaintenance) : null, "deferMaintenance" ,container.Add );
            AddIf( null != this._deferMaintenanceDuration ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber((int)this._deferMaintenanceDuration) : null, "deferMaintenanceDuration" ,container.Add );
            AddIf( null != (((object)this._deferMaintenanceEndTime)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._deferMaintenanceEndTime.ToString()) : null, "deferMaintenanceEndTime" ,container.Add );
            AddIf( null != (((object)this._deferMaintenanceIdentifier)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._deferMaintenanceIdentifier.ToString()) : null, "deferMaintenanceIdentifier" ,container.Add );
            AddIf( null != (((object)this._deferMaintenanceStartTime)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._deferMaintenanceStartTime.ToString()) : null, "deferMaintenanceStartTime" ,container.Add );
            AddIf( null != (((object)this._destinationRegion)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._destinationRegion.ToString()) : null, "destinationRegion" ,container.Add );
            AddIf( null != (((object)this._elasticIP)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._elasticIP.ToString()) : null, "elasticIp" ,container.Add );
            AddIf( null != this._encrypted ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean((bool)this._encrypted) : null, "encrypted" ,container.Add );
            AddIf( null != this._enhancedVpcRouting ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean((bool)this._enhancedVpcRouting) : null, "enhancedVpcRouting" ,container.Add );
            AddIf( null != (((object)this._hsmClientCertificateIdentifier)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._hsmClientCertificateIdentifier.ToString()) : null, "hsmClientCertificateIdentifier" ,container.Add );
            AddIf( null != (((object)this._hsmConfigurationIdentifier)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._hsmConfigurationIdentifier.ToString()) : null, "hsmConfigurationIdentifier" ,container.Add );
            if (null != this._iamRole)
            {
                var __r = new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.XNodeArray();
                foreach( var __s in this._iamRole )
                {
                    AddIf(null != (((object)__s)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(__s.ToString()) : null ,__r.Add);
                }
                container.Add("iamRoles",__r);
            }
            AddIf( null != (((object)this._kmsKeyId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._kmsKeyId.ToString()) : null, "kmsKeyId" ,container.Add );
            AddIf( null != (((object)this._maintenanceTrackName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._maintenanceTrackName.ToString()) : null, "maintenanceTrackName" ,container.Add );
            AddIf( null != this._manageMasterPassword ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean((bool)this._manageMasterPassword) : null, "manageMasterPassword" ,container.Add );
            AddIf( null != this._manualSnapshotRetentionPeriod ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber((int)this._manualSnapshotRetentionPeriod) : null, "manualSnapshotRetentionPeriod" ,container.Add );
            AddIf( null != (((object)this._masterPasswordSecretArn)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._masterPasswordSecretArn.ToString()) : null, "masterPasswordSecretArn" ,container.Add );
            AddIf( null != (((object)this._masterPasswordSecretKmsKeyId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._masterPasswordSecretKmsKeyId.ToString()) : null, "masterPasswordSecretKmsKeyId" ,container.Add );
            AddIf( null != (((object)this._masterUserPassword)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._masterUserPassword.ToString()) : null, "masterUserPassword" ,container.Add );
            AddIf( null != (((object)this._masterUsername)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._masterUsername.ToString()) : null, "masterUsername" ,container.Add );
            AddIf( null != this._multiAz ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean((bool)this._multiAz) : null, "multiAZ" ,container.Add );
            AddIf( null != this._namespaceResourcePolicy ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) this._namespaceResourcePolicy.ToJson(null,serializationMode) : null, "namespaceResourcePolicy" ,container.Add );
            AddIf( null != (((object)this._nodeType)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._nodeType.ToString()) : null, "nodeType" ,container.Add );
            AddIf( null != this._numberOfNode ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber((int)this._numberOfNode) : null, "numberOfNodes" ,container.Add );
            AddIf( null != (((object)this._ownerAccount)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._ownerAccount.ToString()) : null, "ownerAccount" ,container.Add );
            AddIf( null != this._port ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber((int)this._port) : null, "port" ,container.Add );
            AddIf( null != (((object)this._preferredMaintenanceWindow)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._preferredMaintenanceWindow.ToString()) : null, "preferredMaintenanceWindow" ,container.Add );
            AddIf( null != this._publiclyAccessible ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean((bool)this._publiclyAccessible) : null, "publiclyAccessible" ,container.Add );
            AddIf( null != (((object)this._resourceAction)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._resourceAction.ToString()) : null, "resourceAction" ,container.Add );
            AddIf( null != (((object)this._revisionTarget)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._revisionTarget.ToString()) : null, "revisionTarget" ,container.Add );
            AddIf( null != this._rotateEncryptionKey ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean((bool)this._rotateEncryptionKey) : null, "rotateEncryptionKey" ,container.Add );
            AddIf( null != (((object)this._snapshotClusterIdentifier)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._snapshotClusterIdentifier.ToString()) : null, "snapshotClusterIdentifier" ,container.Add );
            AddIf( null != (((object)this._snapshotCopyGrantName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._snapshotCopyGrantName.ToString()) : null, "snapshotCopyGrantName" ,container.Add );
            AddIf( null != this._snapshotCopyManual ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean((bool)this._snapshotCopyManual) : null, "snapshotCopyManual" ,container.Add );
            AddIf( null != this._snapshotCopyRetentionPeriod ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber((int)this._snapshotCopyRetentionPeriod) : null, "snapshotCopyRetentionPeriod" ,container.Add );
            AddIf( null != (((object)this._snapshotIdentifier)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._snapshotIdentifier.ToString()) : null, "snapshotIdentifier" ,container.Add );
            if (null != this._tag)
            {
                var __m = new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.XNodeArray();
                foreach( var __n in this._tag )
                {
                    AddIf(__n?.ToJson(null, serializationMode) ,__m.Add);
                }
                container.Add("tags",__m);
            }
            if (null != this._vpcSecurityGroupId)
            {
                var __h = new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.XNodeArray();
                foreach( var __i in this._vpcSecurityGroupId )
                {
                    AddIf(null != (((object)__i)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(__i.ToString()) : null ,__h.Add);
                }
                container.Add("vpcSecurityGroupIds",__h);
            }
            AfterToJson(ref container);
            return container;
        }
    }
}