// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.PowerShell;

    /// <summary>Definition of awsEc2Subnet</summary>
    [System.ComponentModel.TypeConverter(typeof(AwsEc2SubnetPropertiesTypeConverter))]
    public partial class AwsEc2SubnetProperties
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AwsEc2SubnetProperties"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal AwsEc2SubnetProperties(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("PrivateDnsNameOptionsOnLaunch"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).PrivateDnsNameOptionsOnLaunch = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPrivateDnsNameOptionsOnLaunchModelProperties) content.GetValueForProperty("PrivateDnsNameOptionsOnLaunch",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).PrivateDnsNameOptionsOnLaunch, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.PrivateDnsNameOptionsOnLaunchModelPropertiesTypeConverter.ConvertFrom);
            }
            if (content.Contains("AssignIpv6AddressOnCreation"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).AssignIpv6AddressOnCreation = (bool?) content.GetValueForProperty("AssignIpv6AddressOnCreation",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).AssignIpv6AddressOnCreation, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("AvailabilityZone"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).AvailabilityZone = (string) content.GetValueForProperty("AvailabilityZone",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).AvailabilityZone, global::System.Convert.ToString);
            }
            if (content.Contains("AvailabilityZoneId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).AvailabilityZoneId = (string) content.GetValueForProperty("AvailabilityZoneId",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).AvailabilityZoneId, global::System.Convert.ToString);
            }
            if (content.Contains("CidrBlock"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).CidrBlock = (string) content.GetValueForProperty("CidrBlock",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).CidrBlock, global::System.Convert.ToString);
            }
            if (content.Contains("EnableDns64"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).EnableDns64 = (bool?) content.GetValueForProperty("EnableDns64",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).EnableDns64, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("EnableLniAtDeviceIndex"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).EnableLniAtDeviceIndex = (int?) content.GetValueForProperty("EnableLniAtDeviceIndex",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).EnableLniAtDeviceIndex, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("Ipv4IpamPoolId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).Ipv4IpamPoolId = (string) content.GetValueForProperty("Ipv4IpamPoolId",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).Ipv4IpamPoolId, global::System.Convert.ToString);
            }
            if (content.Contains("Ipv4NetmaskLength"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).Ipv4NetmaskLength = (int?) content.GetValueForProperty("Ipv4NetmaskLength",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).Ipv4NetmaskLength, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("Ipv6CidrBlock"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).Ipv6CidrBlock = (string) content.GetValueForProperty("Ipv6CidrBlock",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).Ipv6CidrBlock, global::System.Convert.ToString);
            }
            if (content.Contains("Ipv6CidrBlocks"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).Ipv6CidrBlocks = (string[]) content.GetValueForProperty("Ipv6CidrBlocks",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).Ipv6CidrBlocks, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("Ipv6IpamPoolId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).Ipv6IpamPoolId = (string) content.GetValueForProperty("Ipv6IpamPoolId",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).Ipv6IpamPoolId, global::System.Convert.ToString);
            }
            if (content.Contains("Ipv6Native"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).Ipv6Native = (bool?) content.GetValueForProperty("Ipv6Native",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).Ipv6Native, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("Ipv6NetmaskLength"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).Ipv6NetmaskLength = (int?) content.GetValueForProperty("Ipv6NetmaskLength",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).Ipv6NetmaskLength, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("MapPublicIPOnLaunch"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).MapPublicIPOnLaunch = (bool?) content.GetValueForProperty("MapPublicIPOnLaunch",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).MapPublicIPOnLaunch, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("NetworkAclAssociationId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).NetworkAclAssociationId = (string) content.GetValueForProperty("NetworkAclAssociationId",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).NetworkAclAssociationId, global::System.Convert.ToString);
            }
            if (content.Contains("OutpostArn"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).OutpostArn = (string) content.GetValueForProperty("OutpostArn",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).OutpostArn, global::System.Convert.ToString);
            }
            if (content.Contains("SubnetId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).SubnetId = (string) content.GetValueForProperty("SubnetId",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).SubnetId, global::System.Convert.ToString);
            }
            if (content.Contains("Tag"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).Tag = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated21[]) content.GetValueForProperty("Tag",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).Tag, __y => TypeConverterExtensions.SelectToArray<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated21>(__y, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.TagAutoGenerated21TypeConverter.ConvertFrom));
            }
            if (content.Contains("VpcId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).VpcId = (string) content.GetValueForProperty("VpcId",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).VpcId, global::System.Convert.ToString);
            }
            if (content.Contains("PrivateDnsNameOptionOnLaunchEnableResourceNameDnsAaaaRecord"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).PrivateDnsNameOptionOnLaunchEnableResourceNameDnsAaaaRecord = (bool?) content.GetValueForProperty("PrivateDnsNameOptionOnLaunchEnableResourceNameDnsAaaaRecord",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).PrivateDnsNameOptionOnLaunchEnableResourceNameDnsAaaaRecord, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("PrivateDnsNameOptionOnLaunchEnableResourceNameDnsARecord"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).PrivateDnsNameOptionOnLaunchEnableResourceNameDnsARecord = (bool?) content.GetValueForProperty("PrivateDnsNameOptionOnLaunchEnableResourceNameDnsARecord",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).PrivateDnsNameOptionOnLaunchEnableResourceNameDnsARecord, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("PrivateDnsNameOptionOnLaunchHostnameType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).PrivateDnsNameOptionOnLaunchHostnameType = (string) content.GetValueForProperty("PrivateDnsNameOptionOnLaunchHostnameType",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).PrivateDnsNameOptionOnLaunchHostnameType, global::System.Convert.ToString);
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AwsEc2SubnetProperties"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal AwsEc2SubnetProperties(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("PrivateDnsNameOptionsOnLaunch"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).PrivateDnsNameOptionsOnLaunch = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPrivateDnsNameOptionsOnLaunchModelProperties) content.GetValueForProperty("PrivateDnsNameOptionsOnLaunch",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).PrivateDnsNameOptionsOnLaunch, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.PrivateDnsNameOptionsOnLaunchModelPropertiesTypeConverter.ConvertFrom);
            }
            if (content.Contains("AssignIpv6AddressOnCreation"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).AssignIpv6AddressOnCreation = (bool?) content.GetValueForProperty("AssignIpv6AddressOnCreation",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).AssignIpv6AddressOnCreation, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("AvailabilityZone"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).AvailabilityZone = (string) content.GetValueForProperty("AvailabilityZone",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).AvailabilityZone, global::System.Convert.ToString);
            }
            if (content.Contains("AvailabilityZoneId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).AvailabilityZoneId = (string) content.GetValueForProperty("AvailabilityZoneId",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).AvailabilityZoneId, global::System.Convert.ToString);
            }
            if (content.Contains("CidrBlock"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).CidrBlock = (string) content.GetValueForProperty("CidrBlock",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).CidrBlock, global::System.Convert.ToString);
            }
            if (content.Contains("EnableDns64"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).EnableDns64 = (bool?) content.GetValueForProperty("EnableDns64",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).EnableDns64, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("EnableLniAtDeviceIndex"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).EnableLniAtDeviceIndex = (int?) content.GetValueForProperty("EnableLniAtDeviceIndex",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).EnableLniAtDeviceIndex, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("Ipv4IpamPoolId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).Ipv4IpamPoolId = (string) content.GetValueForProperty("Ipv4IpamPoolId",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).Ipv4IpamPoolId, global::System.Convert.ToString);
            }
            if (content.Contains("Ipv4NetmaskLength"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).Ipv4NetmaskLength = (int?) content.GetValueForProperty("Ipv4NetmaskLength",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).Ipv4NetmaskLength, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("Ipv6CidrBlock"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).Ipv6CidrBlock = (string) content.GetValueForProperty("Ipv6CidrBlock",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).Ipv6CidrBlock, global::System.Convert.ToString);
            }
            if (content.Contains("Ipv6CidrBlocks"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).Ipv6CidrBlocks = (string[]) content.GetValueForProperty("Ipv6CidrBlocks",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).Ipv6CidrBlocks, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("Ipv6IpamPoolId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).Ipv6IpamPoolId = (string) content.GetValueForProperty("Ipv6IpamPoolId",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).Ipv6IpamPoolId, global::System.Convert.ToString);
            }
            if (content.Contains("Ipv6Native"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).Ipv6Native = (bool?) content.GetValueForProperty("Ipv6Native",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).Ipv6Native, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("Ipv6NetmaskLength"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).Ipv6NetmaskLength = (int?) content.GetValueForProperty("Ipv6NetmaskLength",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).Ipv6NetmaskLength, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("MapPublicIPOnLaunch"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).MapPublicIPOnLaunch = (bool?) content.GetValueForProperty("MapPublicIPOnLaunch",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).MapPublicIPOnLaunch, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("NetworkAclAssociationId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).NetworkAclAssociationId = (string) content.GetValueForProperty("NetworkAclAssociationId",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).NetworkAclAssociationId, global::System.Convert.ToString);
            }
            if (content.Contains("OutpostArn"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).OutpostArn = (string) content.GetValueForProperty("OutpostArn",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).OutpostArn, global::System.Convert.ToString);
            }
            if (content.Contains("SubnetId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).SubnetId = (string) content.GetValueForProperty("SubnetId",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).SubnetId, global::System.Convert.ToString);
            }
            if (content.Contains("Tag"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).Tag = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated21[]) content.GetValueForProperty("Tag",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).Tag, __y => TypeConverterExtensions.SelectToArray<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated21>(__y, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.TagAutoGenerated21TypeConverter.ConvertFrom));
            }
            if (content.Contains("VpcId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).VpcId = (string) content.GetValueForProperty("VpcId",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).VpcId, global::System.Convert.ToString);
            }
            if (content.Contains("PrivateDnsNameOptionOnLaunchEnableResourceNameDnsAaaaRecord"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).PrivateDnsNameOptionOnLaunchEnableResourceNameDnsAaaaRecord = (bool?) content.GetValueForProperty("PrivateDnsNameOptionOnLaunchEnableResourceNameDnsAaaaRecord",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).PrivateDnsNameOptionOnLaunchEnableResourceNameDnsAaaaRecord, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("PrivateDnsNameOptionOnLaunchEnableResourceNameDnsARecord"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).PrivateDnsNameOptionOnLaunchEnableResourceNameDnsARecord = (bool?) content.GetValueForProperty("PrivateDnsNameOptionOnLaunchEnableResourceNameDnsARecord",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).PrivateDnsNameOptionOnLaunchEnableResourceNameDnsARecord, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("PrivateDnsNameOptionOnLaunchHostnameType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).PrivateDnsNameOptionOnLaunchHostnameType = (string) content.GetValueForProperty("PrivateDnsNameOptionOnLaunchHostnameType",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal)this).PrivateDnsNameOptionOnLaunchHostnameType, global::System.Convert.ToString);
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AwsEc2SubnetProperties"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetProperties"
        /// />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetProperties DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new AwsEc2SubnetProperties(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AwsEc2SubnetProperties"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetProperties"
        /// />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetProperties DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new AwsEc2SubnetProperties(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="AwsEc2SubnetProperties" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="AwsEc2SubnetProperties" /> model class.</returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetProperties FromJsonString(string jsonText) => FromJson(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.SerializationMode.IncludeAll)?.ToString();
    }
    /// Definition of awsEc2Subnet
    [System.ComponentModel.TypeConverter(typeof(AwsEc2SubnetPropertiesTypeConverter))]
    public partial interface IAwsEc2SubnetProperties

    {

    }
}