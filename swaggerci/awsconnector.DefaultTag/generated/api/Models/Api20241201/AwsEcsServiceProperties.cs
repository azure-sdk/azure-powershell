// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of awsEcsService</summary>
    public partial class AwsEcsServiceProperties :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsServiceProperties,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsServicePropertiesInternal
    {

        /// <summary>
        /// Determines whether to use the CloudWatch alarm option in the service deployment process.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? AlarmEnable { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentConfigurationInternal)DeploymentConfiguration).AlarmEnable; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentConfigurationInternal)DeploymentConfiguration).AlarmEnable = value ?? default(bool); }

        /// <summary>One or more CloudWatch alarm names. Use a ',' to separate the alarms.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string[] AlarmName { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentConfigurationInternal)DeploymentConfiguration).AlarmName; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentConfigurationInternal)DeploymentConfiguration).AlarmName = value ?? null /* arrayOf */; }

        /// <summary>
        /// Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is used,
        /// when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? AlarmRollback { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentConfigurationInternal)DeploymentConfiguration).AlarmRollback; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentConfigurationInternal)DeploymentConfiguration).AlarmRollback = value ?? default(bool); }

        /// <summary>
        /// Whether the task's elastic network interface receives a public IP address. The default value is ``DISABLED``.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.AwsVpcConfigurationAssignPublicIP? AwsvpcConfigurationAssignPublicIP { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INetworkConfigurationInternal)NetworkConfiguration).AwsvpcConfigurationAssignPublicIP; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INetworkConfigurationInternal)NetworkConfiguration).AwsvpcConfigurationAssignPublicIP = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.AwsVpcConfigurationAssignPublicIP)""); }

        /// <summary>
        /// The IDs of the security groups associated with the task or service. If you don't specify a security group, the default
        /// security group for the VPC is used. There's a limit of 5 security groups that can be specified per ``AwsVpcConfiguration``.
        /// All specified security groups must be from the same VPC.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string[] AwsvpcConfigurationSecurityGroup { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INetworkConfigurationInternal)NetworkConfiguration).AwsvpcConfigurationSecurityGroup; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INetworkConfigurationInternal)NetworkConfiguration).AwsvpcConfigurationSecurityGroup = value ?? null /* arrayOf */; }

        /// <summary>
        /// The IDs of the subnets associated with the task or service. There's a limit of 16 subnets that can be specified per ``AwsVpcConfiguration``.
        /// All specified subnets must be from the same VPC.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string[] AwsvpcConfigurationSubnet { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INetworkConfigurationInternal)NetworkConfiguration).AwsvpcConfigurationSubnet; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INetworkConfigurationInternal)NetworkConfiguration).AwsvpcConfigurationSubnet = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="CapacityProviderStrategy" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICapacityProviderStrategyItem[] _capacityProviderStrategy;

        /// <summary>
        /// The capacity provider strategy to use for the service. If a ``capacityProviderStrategy`` is specified, the ``launchType``
        /// parameter must be omitted. If no ``capacityProviderStrategy`` or ``launchType`` is specified, the ``defaultCapacityProviderStrategy``
        /// for the cluster is used. A capacity provider strategy may contain a maximum of 6 capacity providers.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICapacityProviderStrategyItem[] CapacityProviderStrategy { get => this._capacityProviderStrategy; set => this._capacityProviderStrategy = value; }

        /// <summary>Backing field for <see cref="Cluster" /> property.</summary>
        private string _cluster;

        /// <summary>
        /// The short name or full Amazon Resource Name (ARN) of the cluster that you run your service on. If you do not specify a
        /// cluster, the default cluster is assumed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string Cluster { get => this._cluster; set => this._cluster = value; }

        /// <summary>Determines whether to use the deployment circuit breaker logic for the service.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? DeploymentCircuitBreakerEnable { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentConfigurationInternal)DeploymentConfiguration).DeploymentCircuitBreakerEnable; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentConfigurationInternal)DeploymentConfiguration).DeploymentCircuitBreakerEnable = value ?? default(bool); }

        /// <summary>
        /// Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is on,
        /// when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? DeploymentCircuitBreakerRollback { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentConfigurationInternal)DeploymentConfiguration).DeploymentCircuitBreakerRollback; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentConfigurationInternal)DeploymentConfiguration).DeploymentCircuitBreakerRollback = value ?? default(bool); }

        /// <summary>Backing field for <see cref="DeploymentConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentConfiguration _deploymentConfiguration;

        /// <summary>
        /// Optional deployment parameters that control how many tasks run during the deployment and the ordering of stopping and
        /// starting tasks. The ``DeploymentConfiguration`` property specifies optional deployment parameters that control how many
        /// tasks run during the deployment and the ordering of stopping and starting tasks.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentConfiguration DeploymentConfiguration { get => (this._deploymentConfiguration = this._deploymentConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.DeploymentConfiguration()); set => this._deploymentConfiguration = value; }

        /// <summary>
        /// If a service is using the rolling update (``ECS``) deployment type, the ``maximumPercent`` parameter represents an upper
        /// limit on the number of your service's tasks that are allowed in the ``RUNNING`` or ``PENDING`` state during a deployment,
        /// as a percentage of the ``desiredCount`` (rounded down to the nearest integer). This parameter enables you to define the
        /// deployment batch size. For example, if your service is using the ``REPLICA`` service scheduler and has a ``desiredCount``
        /// of four tasks and a ``maximumPercent`` value of 200%, the scheduler may start four new tasks before stopping the four
        /// older tasks (provided that the cluster resources required to do this are available). The default ``maximumPercent`` value
        /// for a service using the ``REPLICA`` service scheduler is 200%. If a service is using either the blue/green (``CODE_DEPLOY``)
        /// or ``EXTERNAL`` deployment types and tasks that use the EC2 launch type, the *maximum percent* value is set to the default
        /// value and is used to define the upper limit on the number of the tasks in the service that remain in the ``RUNNING`` state
        /// while the container instances are in the ``DRAINING`` state. If the tasks in the service use the Fargate launch type,
        /// the maximum percent value is not used, although it is returned when describing your service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public int? DeploymentConfigurationMaximumPercent { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentConfigurationInternal)DeploymentConfiguration).MaximumPercent; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentConfigurationInternal)DeploymentConfiguration).MaximumPercent = value ?? default(int); }

        /// <summary>
        /// If a service is using the rolling update (``ECS``) deployment type, the ``minimumHealthyPercent`` represents a lower limit
        /// on the number of your service's tasks that must remain in the ``RUNNING`` state during a deployment, as a percentage of
        /// the ``desiredCount`` (rounded up to the nearest integer). This parameter enables you to deploy without using additional
        /// cluster capacity. For example, if your service has a ``desiredCount`` of four tasks and a ``minimumHealthyPercent`` of
        /// 50%, the service scheduler may stop two existing tasks to free up cluster capacity before starting two new tasks. For
        /// services that *do not* use a load balancer, the following should be noted: + A service is considered healthy if all essential
        /// containers within the tasks in the service pass their health checks. + If a task has no essential containers with a health
        /// check defined, the service scheduler will wait for 40 seconds after a task reaches a ``RUNNING`` state before the task
        /// is counted towards the minimum healthy percent total. + If a task has one or more essential containers with a health check
        /// defined, the service scheduler will wait for the task to reach a healthy status before counting it towards the minimum
        /// healthy percent total. A task is considered healthy when all essential containers within the task have passed their health
        /// checks. The amount of time the service scheduler can wait for is determined by the container health check settings. For
        /// services that *do* use a load balancer, the following should be noted: + If a task has no essential containers with a
        /// health check defined, the service scheduler will wait for the load balancer target group health check to return a healthy
        /// status before counting the task towards the minimum healthy percent total. + If a task has an essential container with
        /// a health check defined, the service scheduler will wait for both the task to reach a healthy status and the load balancer
        /// target group health check to return a healthy status before counting the task towards the minimum healthy percent total.
        /// If a service is using either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types and is running tasks that
        /// use the EC2 launch type, the *minimum healthy percent* value is set to the default value and is used to define the lower
        /// limit on the number of the tasks in the service that remain in the ``RUNNING`` state while the container instances are
        /// in the ``DRAINING`` state. If a service is using either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types
        /// and is running tasks that use the Fargate launch type, the minimum healthy percent value is not used, although it is returned
        /// when describing your service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public int? DeploymentConfigurationMinimumHealthyPercent { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentConfigurationInternal)DeploymentConfiguration).MinimumHealthyPercent; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentConfigurationInternal)DeploymentConfiguration).MinimumHealthyPercent = value ?? default(int); }

        /// <summary>Backing field for <see cref="DeploymentController" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentController _deploymentController;

        /// <summary>
        /// The deployment controller to use for the service. If no deployment controller is specified, the default value of ``ECS``
        /// is used. The deployment controller to use for the service. For more information, see [Amazon ECS deployment types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html)
        /// in the *Amazon Elastic Container Service Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentController DeploymentController { get => (this._deploymentController = this._deploymentController ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.DeploymentController()); set => this._deploymentController = value; }

        /// <summary>
        /// The deployment controller type to use. There are three deployment controller types available: + ECS The rolling update
        /// (ECS) deployment type involves replacing the current running version of the container with the latest version. The number
        /// of containers Amazon ECS adds or removes from the service during a rolling update is controlled by adjusting the minimum
        /// and maximum number of healthy tasks allowed during a service deployment, as specified in the DeploymentConfiguration.
        /// + CODE_DEPLOY The blue/green (CODE_DEPLOY) deployment type uses the blue/green deployment model powered by , which allows
        /// you to verify a new deployment of a service before sending production traffic to it. + EXTERNAL The external (EXTERNAL)
        /// deployment type enables you to use any third-party deployment controller for full control over the deployment process
        /// for an Amazon ECS service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.DeploymentControllerType? DeploymentControllerType { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentControllerInternal)DeploymentController).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentControllerInternal)DeploymentController).Type = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.DeploymentControllerType)""); }

        /// <summary>Backing field for <see cref="DesiredCount" /> property.</summary>
        private int? _desiredCount;

        /// <summary>
        /// The number of instantiations of the specified task definition to place and keep running in your service. For new services,
        /// if a desired count is not specified, a default value of ``1`` is used. When using the ``DAEMON`` scheduling strategy,
        /// the desired count is not required. For existing services, if a desired count is not specified, it is omitted from the
        /// operation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? DesiredCount { get => this._desiredCount; set => this._desiredCount = value; }

        /// <summary>Backing field for <see cref="EnableEcsManagedTag" /> property.</summary>
        private bool? _enableEcsManagedTag;

        /// <summary>
        /// Specifies whether to turn on Amazon ECS managed tags for the tasks within the service. For more information, see [Tagging
        /// your Amazon ECS resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the *Amazon
        /// Elastic Container Service Developer Guide*. When you use Amazon ECS managed tags, you need to set the ``propagateTags``
        /// request parameter.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public bool? EnableEcsManagedTag { get => this._enableEcsManagedTag; set => this._enableEcsManagedTag = value; }

        /// <summary>Backing field for <see cref="EnableExecuteCommand" /> property.</summary>
        private bool? _enableExecuteCommand;

        /// <summary>
        /// Determines whether the execute command functionality is turned on for the service. If ``true``, the execute command functionality
        /// is turned on for all containers in tasks as part of the service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public bool? EnableExecuteCommand { get => this._enableExecuteCommand; set => this._enableExecuteCommand = value; }

        /// <summary>Backing field for <see cref="HealthCheckGracePeriodSecond" /> property.</summary>
        private int? _healthCheckGracePeriodSecond;

        /// <summary>
        /// The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing target
        /// health checks after a task has first started. This is only used when your service is configured to use a load balancer.
        /// If your service has a load balancer defined and you don't specify a health check grace period value, the default value
        /// of ``0`` is used. If you do not use an Elastic Load Balancing, we recommend that you use the ``startPeriod`` in the task
        /// definition health check parameters. For more information, see [Health check](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_HealthCheck.html).
        /// If your service's tasks take a while to start and respond to Elastic Load Balancing health checks, you can specify a health
        /// check grace period of up to 2,147,483,647 seconds (about 69 years). During that time, the Amazon ECS service scheduler
        /// ignores health check status. This grace period can prevent the service scheduler from marking tasks as unhealthy and stopping
        /// them before they have time to come up.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? HealthCheckGracePeriodSecond { get => this._healthCheckGracePeriodSecond; set => this._healthCheckGracePeriodSecond = value; }

        /// <summary>Backing field for <see cref="LaunchType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.LaunchType? _launchType;

        /// <summary>
        /// The launch type on which to run your service. For more information, see [Amazon ECS Launch Types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html)
        /// in the *Amazon Elastic Container Service Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.LaunchType? LaunchType { get => this._launchType; set => this._launchType = value; }

        /// <summary>Backing field for <see cref="LoadBalancer" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILoadBalancer[] _loadBalancer;

        /// <summary>
        /// A list of load balancer objects to associate with the service. If you specify the ``Role`` property, ``LoadBalancers``
        /// must be specified as well. For information about the number of load balancers that you can specify per service, see [Service
        /// Load Balancing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-load-balancing.html) in the *Amazon
        /// Elastic Container Service Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILoadBalancer[] LoadBalancer { get => this._loadBalancer; set => this._loadBalancer = value; }

        /// <summary>
        /// The log driver to use for the container. For tasks on FARGATElong, the supported log drivers are ``awslogs``, ``splunk``,
        /// and ``awsfirelens``. For tasks hosted on Amazon EC2 instances, the supported log drivers are ``awslogs``, ``fluentd``,
        /// ``gelf``, ``json-file``, ``journald``, ``logentries``,``syslog``, ``splunk``, and ``awsfirelens``. For more information
        /// about using the ``awslogs`` log driver, see [Using the awslogs log driver](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html)
        /// in the *Amazon Elastic Container Service Developer Guide*. For more information about using the ``awsfirelens`` log driver,
        /// see [Custom log routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon
        /// Elastic Container Service Developer Guide*. If you have a custom driver that isn't listed, you can fork the Amazon ECS
        /// container agent project that's [available on GitHub](https://docs.aws.amazon.com/https://github.com/aws/amazon-ecs-agent)
        /// and customize it to work with that driver. We encourage you to submit pull requests for changes that you would like to
        /// have included. However, we don't currently provide support for running modified copies of this software.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string LogConfigurationLogDriver { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceConnectConfigurationInternal)ServiceConnectConfiguration).LogConfigurationLogDriver; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceConnectConfigurationInternal)ServiceConnectConfiguration).LogConfigurationLogDriver = value ?? null; }

        /// <summary>
        /// The configuration options to send to the log driver. This parameter requires version 1.19 of the Docker Remote API or
        /// greater on your container instance. To check the Docker Remote API version on your container instance, log in to your
        /// container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.IAny LogConfigurationOption { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceConnectConfigurationInternal)ServiceConnectConfiguration).LogConfigurationOption; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceConnectConfigurationInternal)ServiceConnectConfiguration).LogConfigurationOption = value ?? null /* model class */; }

        /// <summary>
        /// The secrets to pass to the log configuration. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html)
        /// in the *Amazon Elastic Container Service Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ISecret[] LogConfigurationSecretOption { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceConnectConfigurationInternal)ServiceConnectConfiguration).LogConfigurationSecretOption; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceConnectConfigurationInternal)ServiceConnectConfiguration).LogConfigurationSecretOption = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for DeploymentConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentConfiguration Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsServicePropertiesInternal.DeploymentConfiguration { get => (this._deploymentConfiguration = this._deploymentConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.DeploymentConfiguration()); set { {_deploymentConfiguration = value;} } }

        /// <summary>Internal Acessors for DeploymentConfigurationAlarm</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentAlarms Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsServicePropertiesInternal.DeploymentConfigurationAlarm { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentConfigurationInternal)DeploymentConfiguration).Alarm; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentConfigurationInternal)DeploymentConfiguration).Alarm = value; }

        /// <summary>Internal Acessors for DeploymentConfigurationDeploymentCircuitBreaker</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentCircuitBreaker Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsServicePropertiesInternal.DeploymentConfigurationDeploymentCircuitBreaker { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentConfigurationInternal)DeploymentConfiguration).DeploymentCircuitBreaker; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentConfigurationInternal)DeploymentConfiguration).DeploymentCircuitBreaker = value; }

        /// <summary>Internal Acessors for DeploymentController</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentController Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsServicePropertiesInternal.DeploymentController { get => (this._deploymentController = this._deploymentController ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.DeploymentController()); set { {_deploymentController = value;} } }

        /// <summary>Internal Acessors for NetworkConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INetworkConfiguration Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsServicePropertiesInternal.NetworkConfiguration { get => (this._networkConfiguration = this._networkConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.NetworkConfiguration()); set { {_networkConfiguration = value;} } }

        /// <summary>Internal Acessors for NetworkConfigurationAwsvpcConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsVpcConfiguration Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsServicePropertiesInternal.NetworkConfigurationAwsvpcConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INetworkConfigurationInternal)NetworkConfiguration).AwsvpcConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INetworkConfigurationInternal)NetworkConfiguration).AwsvpcConfiguration = value; }

        /// <summary>Internal Acessors for ServiceConnectConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceConnectConfiguration Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsServicePropertiesInternal.ServiceConnectConfiguration { get => (this._serviceConnectConfiguration = this._serviceConnectConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ServiceConnectConfiguration()); set { {_serviceConnectConfiguration = value;} } }

        /// <summary>Internal Acessors for ServiceConnectConfigurationLogConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILogConfiguration Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsServicePropertiesInternal.ServiceConnectConfigurationLogConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceConnectConfigurationInternal)ServiceConnectConfiguration).LogConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceConnectConfigurationInternal)ServiceConnectConfiguration).LogConfiguration = value; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>Property name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="NetworkConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INetworkConfiguration _networkConfiguration;

        /// <summary>
        /// The network configuration for the service. This parameter is required for task definitions that use the ``awsvpc`` network
        /// mode to receive their own elastic network interface, and it is not supported for other network modes. For more information,
        /// see [Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) in the *Amazon
        /// Elastic Container Service Developer Guide*. The ``NetworkConfiguration`` property specifies an object representing the
        /// network configuration for a task or service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INetworkConfiguration NetworkConfiguration { get => (this._networkConfiguration = this._networkConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.NetworkConfiguration()); set => this._networkConfiguration = value; }

        /// <summary>Backing field for <see cref="PlacementConstraint" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPlacementConstraint[] _placementConstraint;

        /// <summary>
        /// An array of placement constraint objects to use for tasks in your service. You can specify a maximum of 10 constraints
        /// for each task. This limit includes constraints in the task definition and those specified at runtime.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPlacementConstraint[] PlacementConstraint { get => this._placementConstraint; set => this._placementConstraint = value; }

        /// <summary>Backing field for <see cref="PlacementStrategy" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPlacementStrategy[] _placementStrategy;

        /// <summary>
        /// The placement strategy objects to use for tasks in your service. You can specify a maximum of 5 strategy rules for each
        /// service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPlacementStrategy[] PlacementStrategy { get => this._placementStrategy; set => this._placementStrategy = value; }

        /// <summary>Backing field for <see cref="PlatformVersion" /> property.</summary>
        private string _platformVersion;

        /// <summary>
        /// The platform version that your tasks in the service are running on. A platform version is specified only for tasks using
        /// the Fargate launch type. If one isn't specified, the ``LATEST`` platform version is used. For more information, see [platform
        /// versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the *Amazon Elastic Container
        /// Service Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string PlatformVersion { get => this._platformVersion; set => this._platformVersion = value; }

        /// <summary>Backing field for <see cref="PropagateTag" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.PropagateTags? _propagateTag;

        /// <summary>
        /// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags aren't
        /// propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use
        /// the [TagResource](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_TagResource.html) API action. The default
        /// is ``NONE``.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.PropagateTags? PropagateTag { get => this._propagateTag; set => this._propagateTag = value; }

        /// <summary>Backing field for <see cref="Role" /> property.</summary>
        private string _role;

        /// <summary>
        /// The name or full Amazon Resource Name (ARN) of the IAM role that allows Amazon ECS to make calls to your load balancer
        /// on your behalf. This parameter is only permitted if you are using a load balancer with your service and your task definition
        /// doesn't use the ``awsvpc`` network mode. If you specify the ``role`` parameter, you must also specify a load balancer
        /// object with the ``loadBalancers`` parameter. If your account has already created the Amazon ECS service-linked role, that
        /// role is used for your service unless you specify a role here. The service-linked role is required if your task definition
        /// uses the ``awsvpc`` network mode or if the service is configured to use service discovery, an external deployment controller,
        /// multiple target groups, or Elastic Inference accelerators in which case you don't specify a role here. For more information,
        /// see [Using service-linked roles for Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html)
        /// in the *Amazon Elastic Container Service Developer Guide*. If your specified role has a path other than ``/``, then you
        /// must either specify the full role ARN (this is recommended) or prefix the role name with the path. For example, if a role
        /// with the name ``bar`` has a path of ``/foo/`` then you would specify ``/foo/bar`` as the role name. For more information,
        /// see [Friendly names and paths](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-friendly-names)
        /// in the *IAM User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string Role { get => this._role; set => this._role = value; }

        /// <summary>Backing field for <see cref="SchedulingStrategy" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.SchedulingStrategy? _schedulingStrategy;

        /// <summary>
        /// The scheduling strategy to use for the service. For more information, see [Services](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html).
        /// There are two service scheduler strategies available: + ``REPLICA``-The replica scheduling strategy places and maintains
        /// the desired number of tasks across your cluster. By default, the service scheduler spreads tasks across Availability Zones.
        /// You can use task placement strategies and constraints to customize task placement decisions. This scheduler strategy is
        /// required if the service uses the ``CODE_DEPLOY`` or ``EXTERNAL`` deployment controller types. + ``DAEMON``-The daemon
        /// scheduling strategy deploys exactly one task on each active container instance that meets all of the task placement constraints
        /// that you specify in your cluster. The service scheduler also evaluates the task placement constraints for running tasks
        /// and will stop tasks that don't meet the placement constraints. When you're using this strategy, you don't need to specify
        /// a desired number of tasks, a task placement strategy, or use Service Auto Scaling policies. Tasks using the Fargate launch
        /// type or the ``CODE_DEPLOY`` or ``EXTERNAL`` deployment controller types don't support the ``DAEMON`` scheduling strategy.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.SchedulingStrategy? SchedulingStrategy { get => this._schedulingStrategy; set => this._schedulingStrategy = value; }

        /// <summary>Backing field for <see cref="ServiceArn" /> property.</summary>
        private string _serviceArn;

        /// <summary>Property serviceArn</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string ServiceArn { get => this._serviceArn; set => this._serviceArn = value; }

        /// <summary>Backing field for <see cref="ServiceConnectConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceConnectConfiguration _serviceConnectConfiguration;

        /// <summary>
        /// The configuration for this service to discover and connect to services, and be discovered by, and connected from, other
        /// services within a namespace. Tasks that run in a namespace can use short names to connect to services in the namespace.
        /// Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container
        /// that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported
        /// with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html)
        /// in the *Amazon Elastic Container Service Developer Guide*. The Service Connect configuration of your Amazon ECS service.
        /// The configuration for this service to discover and connect to services, and be discovered by, and connected from, other
        /// services within a namespace. Tasks that run in a namespace can use short names to connect to services in the namespace.
        /// Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container
        /// that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported
        /// with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html)
        /// in the *Amazon Elastic Container Service Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceConnectConfiguration ServiceConnectConfiguration { get => (this._serviceConnectConfiguration = this._serviceConnectConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ServiceConnectConfiguration()); set => this._serviceConnectConfiguration = value; }

        /// <summary>Specifies whether to use Service Connect with this service.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? ServiceConnectConfigurationEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceConnectConfigurationInternal)ServiceConnectConfiguration).Enabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceConnectConfigurationInternal)ServiceConnectConfiguration).Enabled = value ?? default(bool); }

        /// <summary>
        /// The namespace name or full Amazon Resource Name (ARN) of the CMAPlong namespace for use with Service Connect. The namespace
        /// must be in the same AWS Region as the Amazon ECS service and cluster. The type of namespace doesn't affect Service Connect.
        /// For more information about CMAPlong, see [Working with Services](https://docs.aws.amazon.com/cloud-map/latest/dg/working-with-services.html)
        /// in the *Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string ServiceConnectConfigurationNamespace { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceConnectConfigurationInternal)ServiceConnectConfiguration).Namespace; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceConnectConfigurationInternal)ServiceConnectConfiguration).Namespace = value ?? null; }

        /// <summary>
        /// The list of Service Connect service objects. These are names and aliases (also known as endpoints) that are used by other
        /// Amazon ECS services to connect to this service. This field is not required for a 'client' Amazon ECS service that's a
        /// member of a namespace only to connect to other services within the namespace. An example of this would be a frontend application
        /// that accepts incoming requests from either a load balancer that's attached to the service or by other means. An object
        /// selects a port from the task definition, assigns a name for the CMAPlong service, and a list of aliases (endpoints) and
        /// ports for client applications to refer to this service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceConnectService[] ServiceConnectConfigurationService { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceConnectConfigurationInternal)ServiceConnectConfiguration).Service; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceConnectConfigurationInternal)ServiceConnectConfiguration).Service = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="ServiceName" /> property.</summary>
        private string _serviceName;

        /// <summary>
        /// The name of your service. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed.
        /// Service names must be unique within a cluster, but you can have similarly named services in multiple clusters within a
        /// Region or across multiple Regions. The stack update fails if you change any properties that require replacement and the
        /// ``ServiceName`` is configured. This is because AWS CloudFormation creates the replacement service first, but each ``ServiceName``
        /// must be unique in the cluster.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string ServiceName { get => this._serviceName; set => this._serviceName = value; }

        /// <summary>Backing field for <see cref="ServiceRegistry" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceRegistry[] _serviceRegistry;

        /// <summary>
        /// The details of the service discovery registry to associate with this service. For more information, see [Service discovery](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html).
        /// Each service may be associated with one service registry. Multiple service registries for each service isn't supported.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceRegistry[] ServiceRegistry { get => this._serviceRegistry; set => this._serviceRegistry = value; }

        /// <summary>Backing field for <see cref="Tag" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated27[] _tag;

        /// <summary>
        /// The metadata that you apply to the service to help you categorize and organize them. Each tag consists of a key and an
        /// optional value, both of which you define. When a service is deleted, the tags are deleted as well. The following basic
        /// restrictions apply to tags: + Maximum number of tags per resource - 50 + For each resource, each tag key must be unique,
        /// and each tag key can have only one value. + Maximum key length - 128 Unicode characters in UTF-8 + Maximum value length
        /// - 256 Unicode characters in UTF-8 + If your tagging schema is used across multiple services and resources, remember that
        /// other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces
        /// representable in UTF-8, and the following characters: + - = . _ : / @. + Tag keys and values are case-sensitive. + Do
        /// not use ``aws:``, ``AWS:``, or any upper or lowercase combination of such as a prefix for either keys or values as it
        /// is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count
        /// against your tags per resource limit.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated27[] Tag { get => this._tag; set => this._tag = value; }

        /// <summary>Backing field for <see cref="TaskDefinition" /> property.</summary>
        private string _taskDefinition;

        /// <summary>
        /// The ``family`` and ``revision`` (``family:revision``) or full ARN of the task definition to run in your service. If a
        /// ``revision`` isn't specified, the latest ``ACTIVE`` revision is used. A task definition must be specified if the service
        /// uses either the ``ECS`` or ``CODE_DEPLOY`` deployment controllers. For more information about deployment types, see [Amazon
        /// ECS deployment types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string TaskDefinition { get => this._taskDefinition; set => this._taskDefinition = value; }

        /// <summary>Backing field for <see cref="VolumeConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceVolumeConfiguration[] _volumeConfiguration;

        /// <summary>
        /// The configuration for a volume specified in the task definition as a volume that is configured at launch time. Currently,
        /// the only supported volume type is an Amazon EBS volume.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceVolumeConfiguration[] VolumeConfiguration { get => this._volumeConfiguration; set => this._volumeConfiguration = value; }

        /// <summary>Creates an new <see cref="AwsEcsServiceProperties" /> instance.</summary>
        public AwsEcsServiceProperties()
        {

        }
    }
    /// Definition of awsEcsService
    public partial interface IAwsEcsServiceProperties :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Determines whether to use the CloudWatch alarm option in the service deployment process.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Determines whether to use the CloudWatch alarm option in the service deployment process.",
        SerializedName = @"enable",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AlarmEnable { get; set; }
        /// <summary>One or more CloudWatch alarm names. Use a ',' to separate the alarms.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"One or more CloudWatch alarm names. Use a ',' to separate the alarms.",
        SerializedName = @"alarmNames",
        PossibleTypes = new [] { typeof(string) })]
        string[] AlarmName { get; set; }
        /// <summary>
        /// Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is used,
        /// when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is used, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.",
        SerializedName = @"rollback",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AlarmRollback { get; set; }
        /// <summary>
        /// Whether the task's elastic network interface receives a public IP address. The default value is ``DISABLED``.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether the task's elastic network interface receives a public IP address. The default value is ``DISABLED``.",
        SerializedName = @"assignPublicIp",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.AwsVpcConfigurationAssignPublicIP) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.AwsVpcConfigurationAssignPublicIP? AwsvpcConfigurationAssignPublicIP { get; set; }
        /// <summary>
        /// The IDs of the security groups associated with the task or service. If you don't specify a security group, the default
        /// security group for the VPC is used. There's a limit of 5 security groups that can be specified per ``AwsVpcConfiguration``.
        /// All specified security groups must be from the same VPC.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The IDs of the security groups associated with the task or service. If you don't specify a security group, the default security group for the VPC is used. There's a limit of 5 security groups that can be specified per ``AwsVpcConfiguration``.  All specified security groups must be from the same VPC.",
        SerializedName = @"securityGroups",
        PossibleTypes = new [] { typeof(string) })]
        string[] AwsvpcConfigurationSecurityGroup { get; set; }
        /// <summary>
        /// The IDs of the subnets associated with the task or service. There's a limit of 16 subnets that can be specified per ``AwsVpcConfiguration``.
        /// All specified subnets must be from the same VPC.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The IDs of the subnets associated with the task or service. There's a limit of 16 subnets that can be specified per ``AwsVpcConfiguration``.  All specified subnets must be from the same VPC.",
        SerializedName = @"subnets",
        PossibleTypes = new [] { typeof(string) })]
        string[] AwsvpcConfigurationSubnet { get; set; }
        /// <summary>
        /// The capacity provider strategy to use for the service. If a ``capacityProviderStrategy`` is specified, the ``launchType``
        /// parameter must be omitted. If no ``capacityProviderStrategy`` or ``launchType`` is specified, the ``defaultCapacityProviderStrategy``
        /// for the cluster is used. A capacity provider strategy may contain a maximum of 6 capacity providers.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The capacity provider strategy to use for the service. If a ``capacityProviderStrategy`` is specified, the ``launchType`` parameter must be omitted. If no ``capacityProviderStrategy`` or ``launchType`` is specified, the ``defaultCapacityProviderStrategy`` for the cluster is used. A capacity provider strategy may contain a maximum of 6 capacity providers.",
        SerializedName = @"capacityProviderStrategy",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICapacityProviderStrategyItem) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICapacityProviderStrategyItem[] CapacityProviderStrategy { get; set; }
        /// <summary>
        /// The short name or full Amazon Resource Name (ARN) of the cluster that you run your service on. If you do not specify a
        /// cluster, the default cluster is assumed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The short name or full Amazon Resource Name (ARN) of the cluster that you run your service on. If you do not specify a cluster, the default cluster is assumed.",
        SerializedName = @"cluster",
        PossibleTypes = new [] { typeof(string) })]
        string Cluster { get; set; }
        /// <summary>Determines whether to use the deployment circuit breaker logic for the service.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Determines whether to use the deployment circuit breaker logic for the service.",
        SerializedName = @"enable",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DeploymentCircuitBreakerEnable { get; set; }
        /// <summary>
        /// Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is on,
        /// when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is on, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.",
        SerializedName = @"rollback",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DeploymentCircuitBreakerRollback { get; set; }
        /// <summary>
        /// If a service is using the rolling update (``ECS``) deployment type, the ``maximumPercent`` parameter represents an upper
        /// limit on the number of your service's tasks that are allowed in the ``RUNNING`` or ``PENDING`` state during a deployment,
        /// as a percentage of the ``desiredCount`` (rounded down to the nearest integer). This parameter enables you to define the
        /// deployment batch size. For example, if your service is using the ``REPLICA`` service scheduler and has a ``desiredCount``
        /// of four tasks and a ``maximumPercent`` value of 200%, the scheduler may start four new tasks before stopping the four
        /// older tasks (provided that the cluster resources required to do this are available). The default ``maximumPercent`` value
        /// for a service using the ``REPLICA`` service scheduler is 200%. If a service is using either the blue/green (``CODE_DEPLOY``)
        /// or ``EXTERNAL`` deployment types and tasks that use the EC2 launch type, the *maximum percent* value is set to the default
        /// value and is used to define the upper limit on the number of the tasks in the service that remain in the ``RUNNING`` state
        /// while the container instances are in the ``DRAINING`` state. If the tasks in the service use the Fargate launch type,
        /// the maximum percent value is not used, although it is returned when describing your service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If a service is using the rolling update (``ECS``) deployment type, the ``maximumPercent`` parameter represents an upper limit on the number of your service's tasks that are allowed in the ``RUNNING`` or ``PENDING`` state during a deployment, as a percentage of the ``desiredCount`` (rounded down to the nearest integer). This parameter enables you to define the deployment batch size. For example, if your service is using the ``REPLICA`` service scheduler and has a ``desiredCount`` of four tasks and a ``maximumPercent`` value of 200%, the scheduler may start four new tasks before stopping the four older tasks (provided that the cluster resources required to do this are available). The default ``maximumPercent`` value for a service using the ``REPLICA`` service scheduler is 200%. If a service is using either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types and tasks that use the EC2 launch type, the *maximum percent* value is set to the default value and is used to define the upper limit on the number of the tasks in the service that remain in the ``RUNNING`` state while the container instances are in the ``DRAINING`` state. If the tasks in the service use the Fargate launch type, the maximum percent value is not used, although it is returned when describing your service.",
        SerializedName = @"maximumPercent",
        PossibleTypes = new [] { typeof(int) })]
        int? DeploymentConfigurationMaximumPercent { get; set; }
        /// <summary>
        /// If a service is using the rolling update (``ECS``) deployment type, the ``minimumHealthyPercent`` represents a lower limit
        /// on the number of your service's tasks that must remain in the ``RUNNING`` state during a deployment, as a percentage of
        /// the ``desiredCount`` (rounded up to the nearest integer). This parameter enables you to deploy without using additional
        /// cluster capacity. For example, if your service has a ``desiredCount`` of four tasks and a ``minimumHealthyPercent`` of
        /// 50%, the service scheduler may stop two existing tasks to free up cluster capacity before starting two new tasks. For
        /// services that *do not* use a load balancer, the following should be noted: + A service is considered healthy if all essential
        /// containers within the tasks in the service pass their health checks. + If a task has no essential containers with a health
        /// check defined, the service scheduler will wait for 40 seconds after a task reaches a ``RUNNING`` state before the task
        /// is counted towards the minimum healthy percent total. + If a task has one or more essential containers with a health check
        /// defined, the service scheduler will wait for the task to reach a healthy status before counting it towards the minimum
        /// healthy percent total. A task is considered healthy when all essential containers within the task have passed their health
        /// checks. The amount of time the service scheduler can wait for is determined by the container health check settings. For
        /// services that *do* use a load balancer, the following should be noted: + If a task has no essential containers with a
        /// health check defined, the service scheduler will wait for the load balancer target group health check to return a healthy
        /// status before counting the task towards the minimum healthy percent total. + If a task has an essential container with
        /// a health check defined, the service scheduler will wait for both the task to reach a healthy status and the load balancer
        /// target group health check to return a healthy status before counting the task towards the minimum healthy percent total.
        /// If a service is using either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types and is running tasks that
        /// use the EC2 launch type, the *minimum healthy percent* value is set to the default value and is used to define the lower
        /// limit on the number of the tasks in the service that remain in the ``RUNNING`` state while the container instances are
        /// in the ``DRAINING`` state. If a service is using either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types
        /// and is running tasks that use the Fargate launch type, the minimum healthy percent value is not used, although it is returned
        /// when describing your service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If a service is using the rolling update (``ECS``) deployment type, the ``minimumHealthyPercent`` represents a lower limit on the number of your service's tasks that must remain in the ``RUNNING`` state during a deployment, as a percentage of the ``desiredCount`` (rounded up to the nearest integer). This parameter enables you to deploy without using additional cluster capacity. For example, if your service has a ``desiredCount`` of four tasks and a ``minimumHealthyPercent`` of 50%, the service scheduler may stop two existing tasks to free up cluster capacity before starting two new tasks.  For services that *do not* use a load balancer, the following should be noted:  +  A service is considered healthy if all essential containers within the tasks in the service pass their health checks.  +  If a task has no essential containers with a health check defined, the service scheduler will wait for 40 seconds after a task reaches a ``RUNNING`` state before the task is counted towards the minimum healthy percent total.  +  If a task has one or more essential containers with a health check defined, the service scheduler will wait for the task to reach a healthy status before counting it towards the minimum healthy percent total. A task is considered healthy when all essential containers within the task have passed their health checks. The amount of time the service scheduler can wait for is determined by the container health check settings.    For services that *do* use a load balancer, the following should be noted:  +  If a task has no essential containers with a health check defined, the service scheduler will wait for the load balancer target group health check to return a healthy status before counting the task towards the minimum healthy percent total.  +  If a task has an essential container with a health check defined, the service scheduler will wait for both the task to reach a healthy status and the load balancer target group health check to return a healthy status before counting the task towards the minimum healthy percent total.   If a service is using either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types and is running tasks that use the EC2 launch type, the *minimum healthy percent* value is set to the default value and is used to define the lower limit on the number of the tasks in the service that remain in the ``RUNNING`` state while the container instances are in the ``DRAINING`` state. If a service is using either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types and is running tasks that use the Fargate launch type, the minimum healthy percent value is not used, although it is returned when describing your service.",
        SerializedName = @"minimumHealthyPercent",
        PossibleTypes = new [] { typeof(int) })]
        int? DeploymentConfigurationMinimumHealthyPercent { get; set; }
        /// <summary>
        /// The deployment controller type to use. There are three deployment controller types available: + ECS The rolling update
        /// (ECS) deployment type involves replacing the current running version of the container with the latest version. The number
        /// of containers Amazon ECS adds or removes from the service during a rolling update is controlled by adjusting the minimum
        /// and maximum number of healthy tasks allowed during a service deployment, as specified in the DeploymentConfiguration.
        /// + CODE_DEPLOY The blue/green (CODE_DEPLOY) deployment type uses the blue/green deployment model powered by , which allows
        /// you to verify a new deployment of a service before sending production traffic to it. + EXTERNAL The external (EXTERNAL)
        /// deployment type enables you to use any third-party deployment controller for full control over the deployment process
        /// for an Amazon ECS service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The deployment controller type to use. There are three deployment controller types available:  + ECS The rolling update (ECS) deployment type involves replacing the current running version of the container with the latest version. The number of containers Amazon ECS adds or removes from the service during a rolling update is controlled by adjusting the minimum and maximum number of healthy tasks allowed during a service deployment, as specified in the DeploymentConfiguration. + CODE_DEPLOY The blue/green (CODE_DEPLOY) deployment type uses the blue/green deployment model powered by , which allows you to verify a new deployment of a service before sending production traffic to it. + EXTERNAL The external (EXTERNAL) deployment type enables you to use any third-party deployment controller for full control over the deployment process for an Amazon ECS service.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.DeploymentControllerType) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.DeploymentControllerType? DeploymentControllerType { get; set; }
        /// <summary>
        /// The number of instantiations of the specified task definition to place and keep running in your service. For new services,
        /// if a desired count is not specified, a default value of ``1`` is used. When using the ``DAEMON`` scheduling strategy,
        /// the desired count is not required. For existing services, if a desired count is not specified, it is omitted from the
        /// operation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of instantiations of the specified task definition to place and keep running in your service. For new services, if a desired count is not specified, a default value of ``1`` is used. When using the ``DAEMON`` scheduling strategy, the desired count is not required. For existing services, if a desired count is not specified, it is omitted from the operation.",
        SerializedName = @"desiredCount",
        PossibleTypes = new [] { typeof(int) })]
        int? DesiredCount { get; set; }
        /// <summary>
        /// Specifies whether to turn on Amazon ECS managed tags for the tasks within the service. For more information, see [Tagging
        /// your Amazon ECS resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the *Amazon
        /// Elastic Container Service Developer Guide*. When you use Amazon ECS managed tags, you need to set the ``propagateTags``
        /// request parameter.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether to turn on Amazon ECS managed tags for the tasks within the service. For more information, see [Tagging your Amazon ECS resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the *Amazon Elastic Container Service Developer Guide*. When you use Amazon ECS managed tags, you need to set the ``propagateTags`` request parameter.",
        SerializedName = @"enableECSManagedTags",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnableEcsManagedTag { get; set; }
        /// <summary>
        /// Determines whether the execute command functionality is turned on for the service. If ``true``, the execute command functionality
        /// is turned on for all containers in tasks as part of the service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Determines whether the execute command functionality is turned on for the service. If ``true``, the execute command functionality is turned on for all containers in tasks as part of the service.",
        SerializedName = @"enableExecuteCommand",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnableExecuteCommand { get; set; }
        /// <summary>
        /// The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing target
        /// health checks after a task has first started. This is only used when your service is configured to use a load balancer.
        /// If your service has a load balancer defined and you don't specify a health check grace period value, the default value
        /// of ``0`` is used. If you do not use an Elastic Load Balancing, we recommend that you use the ``startPeriod`` in the task
        /// definition health check parameters. For more information, see [Health check](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_HealthCheck.html).
        /// If your service's tasks take a while to start and respond to Elastic Load Balancing health checks, you can specify a health
        /// check grace period of up to 2,147,483,647 seconds (about 69 years). During that time, the Amazon ECS service scheduler
        /// ignores health check status. This grace period can prevent the service scheduler from marking tasks as unhealthy and stopping
        /// them before they have time to come up.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing target health checks after a task has first started. This is only used when your service is configured to use a load balancer. If your service has a load balancer defined and you don't specify a health check grace period value, the default value of ``0`` is used. If you do not use an Elastic Load Balancing, we recommend that you use the ``startPeriod`` in the task definition health check parameters. For more information, see [Health check](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_HealthCheck.html). If your service's tasks take a while to start and respond to Elastic Load Balancing health checks, you can specify a health check grace period of up to 2,147,483,647 seconds (about 69 years). During that time, the Amazon ECS service scheduler ignores health check status. This grace period can prevent the service scheduler from marking tasks as unhealthy and stopping them before they have time to come up.",
        SerializedName = @"healthCheckGracePeriodSeconds",
        PossibleTypes = new [] { typeof(int) })]
        int? HealthCheckGracePeriodSecond { get; set; }
        /// <summary>
        /// The launch type on which to run your service. For more information, see [Amazon ECS Launch Types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html)
        /// in the *Amazon Elastic Container Service Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The launch type on which to run your service. For more information, see [Amazon ECS Launch Types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) in the *Amazon Elastic Container Service Developer Guide*.",
        SerializedName = @"launchType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.LaunchType) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.LaunchType? LaunchType { get; set; }
        /// <summary>
        /// A list of load balancer objects to associate with the service. If you specify the ``Role`` property, ``LoadBalancers``
        /// must be specified as well. For information about the number of load balancers that you can specify per service, see [Service
        /// Load Balancing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-load-balancing.html) in the *Amazon
        /// Elastic Container Service Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A list of load balancer objects to associate with the service. If you specify the ``Role`` property, ``LoadBalancers`` must be specified as well. For information about the number of load balancers that you can specify per service, see [Service Load Balancing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-load-balancing.html) in the *Amazon Elastic Container Service Developer Guide*.",
        SerializedName = @"loadBalancers",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILoadBalancer) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILoadBalancer[] LoadBalancer { get; set; }
        /// <summary>
        /// The log driver to use for the container. For tasks on FARGATElong, the supported log drivers are ``awslogs``, ``splunk``,
        /// and ``awsfirelens``. For tasks hosted on Amazon EC2 instances, the supported log drivers are ``awslogs``, ``fluentd``,
        /// ``gelf``, ``json-file``, ``journald``, ``logentries``,``syslog``, ``splunk``, and ``awsfirelens``. For more information
        /// about using the ``awslogs`` log driver, see [Using the awslogs log driver](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html)
        /// in the *Amazon Elastic Container Service Developer Guide*. For more information about using the ``awsfirelens`` log driver,
        /// see [Custom log routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon
        /// Elastic Container Service Developer Guide*. If you have a custom driver that isn't listed, you can fork the Amazon ECS
        /// container agent project that's [available on GitHub](https://docs.aws.amazon.com/https://github.com/aws/amazon-ecs-agent)
        /// and customize it to work with that driver. We encourage you to submit pull requests for changes that you would like to
        /// have included. However, we don't currently provide support for running modified copies of this software.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The log driver to use for the container. For tasks on FARGATElong, the supported log drivers are ``awslogs``, ``splunk``, and ``awsfirelens``. For tasks hosted on Amazon EC2 instances, the supported log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``, ``logentries``,``syslog``, ``splunk``, and ``awsfirelens``. For more information about using the ``awslogs`` log driver, see [Using the awslogs log driver](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html) in the *Amazon Elastic Container Service Developer Guide*. For more information about using the ``awsfirelens`` log driver, see [Custom log routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic Container Service Developer Guide*.  If you have a custom driver that isn't listed, you can fork the Amazon ECS container agent project that's [available on GitHub](https://docs.aws.amazon.com/https://github.com/aws/amazon-ecs-agent) and customize it to work with that driver. We encourage you to submit pull requests for changes that you would like to have included. However, we don't currently provide support for running modified copies of this software.",
        SerializedName = @"logDriver",
        PossibleTypes = new [] { typeof(string) })]
        string LogConfigurationLogDriver { get; set; }
        /// <summary>
        /// The configuration options to send to the log driver. This parameter requires version 1.19 of the Docker Remote API or
        /// greater on your container instance. To check the Docker Remote API version on your container instance, log in to your
        /// container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The configuration options to send to the log driver. This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``",
        SerializedName = @"options",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.IAny) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.IAny LogConfigurationOption { get; set; }
        /// <summary>
        /// The secrets to pass to the log configuration. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html)
        /// in the *Amazon Elastic Container Service Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The secrets to pass to the log configuration. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.",
        SerializedName = @"secretOptions",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ISecret) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ISecret[] LogConfigurationSecretOption { get; set; }
        /// <summary>Property name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property name",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>
        /// An array of placement constraint objects to use for tasks in your service. You can specify a maximum of 10 constraints
        /// for each task. This limit includes constraints in the task definition and those specified at runtime.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An array of placement constraint objects to use for tasks in your service. You can specify a maximum of 10 constraints for each task. This limit includes constraints in the task definition and those specified at runtime.",
        SerializedName = @"placementConstraints",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPlacementConstraint) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPlacementConstraint[] PlacementConstraint { get; set; }
        /// <summary>
        /// The placement strategy objects to use for tasks in your service. You can specify a maximum of 5 strategy rules for each
        /// service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The placement strategy objects to use for tasks in your service. You can specify a maximum of 5 strategy rules for each service.",
        SerializedName = @"placementStrategies",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPlacementStrategy) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPlacementStrategy[] PlacementStrategy { get; set; }
        /// <summary>
        /// The platform version that your tasks in the service are running on. A platform version is specified only for tasks using
        /// the Fargate launch type. If one isn't specified, the ``LATEST`` platform version is used. For more information, see [platform
        /// versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the *Amazon Elastic Container
        /// Service Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The platform version that your tasks in the service are running on. A platform version is specified only for tasks using the Fargate launch type. If one isn't specified, the ``LATEST`` platform version is used. For more information, see [platform versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the *Amazon Elastic Container Service Developer Guide*.",
        SerializedName = @"platformVersion",
        PossibleTypes = new [] { typeof(string) })]
        string PlatformVersion { get; set; }
        /// <summary>
        /// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags aren't
        /// propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use
        /// the [TagResource](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_TagResource.html) API action. The default
        /// is ``NONE``.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the [TagResource](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_TagResource.html) API action. The default is ``NONE``.",
        SerializedName = @"propagateTags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.PropagateTags) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.PropagateTags? PropagateTag { get; set; }
        /// <summary>
        /// The name or full Amazon Resource Name (ARN) of the IAM role that allows Amazon ECS to make calls to your load balancer
        /// on your behalf. This parameter is only permitted if you are using a load balancer with your service and your task definition
        /// doesn't use the ``awsvpc`` network mode. If you specify the ``role`` parameter, you must also specify a load balancer
        /// object with the ``loadBalancers`` parameter. If your account has already created the Amazon ECS service-linked role, that
        /// role is used for your service unless you specify a role here. The service-linked role is required if your task definition
        /// uses the ``awsvpc`` network mode or if the service is configured to use service discovery, an external deployment controller,
        /// multiple target groups, or Elastic Inference accelerators in which case you don't specify a role here. For more information,
        /// see [Using service-linked roles for Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html)
        /// in the *Amazon Elastic Container Service Developer Guide*. If your specified role has a path other than ``/``, then you
        /// must either specify the full role ARN (this is recommended) or prefix the role name with the path. For example, if a role
        /// with the name ``bar`` has a path of ``/foo/`` then you would specify ``/foo/bar`` as the role name. For more information,
        /// see [Friendly names and paths](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-friendly-names)
        /// in the *IAM User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name or full Amazon Resource Name (ARN) of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is only permitted if you are using a load balancer with your service and your task definition doesn't use the ``awsvpc`` network mode. If you specify the ``role`` parameter, you must also specify a load balancer object with the ``loadBalancers`` parameter.  If your account has already created the Amazon ECS service-linked role, that role is used for your service unless you specify a role here. The service-linked role is required if your task definition uses the ``awsvpc`` network mode or if the service is configured to use service discovery, an external deployment controller, multiple target groups, or Elastic Inference accelerators in which case you don't specify a role here. For more information, see [Using service-linked roles for Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html) in the *Amazon Elastic Container Service Developer Guide*.  If your specified role has a path other than ``/``, then you must either specify the full role ARN (this is recommended) or prefix the role name with the path. For example, if a role with the name ``bar`` has a path of ``/foo/`` then you would specify ``/foo/bar`` as the role name. For more information, see [Friendly names and paths](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-friendly-names) in the *IAM User Guide*.",
        SerializedName = @"role",
        PossibleTypes = new [] { typeof(string) })]
        string Role { get; set; }
        /// <summary>
        /// The scheduling strategy to use for the service. For more information, see [Services](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html).
        /// There are two service scheduler strategies available: + ``REPLICA``-The replica scheduling strategy places and maintains
        /// the desired number of tasks across your cluster. By default, the service scheduler spreads tasks across Availability Zones.
        /// You can use task placement strategies and constraints to customize task placement decisions. This scheduler strategy is
        /// required if the service uses the ``CODE_DEPLOY`` or ``EXTERNAL`` deployment controller types. + ``DAEMON``-The daemon
        /// scheduling strategy deploys exactly one task on each active container instance that meets all of the task placement constraints
        /// that you specify in your cluster. The service scheduler also evaluates the task placement constraints for running tasks
        /// and will stop tasks that don't meet the placement constraints. When you're using this strategy, you don't need to specify
        /// a desired number of tasks, a task placement strategy, or use Service Auto Scaling policies. Tasks using the Fargate launch
        /// type or the ``CODE_DEPLOY`` or ``EXTERNAL`` deployment controller types don't support the ``DAEMON`` scheduling strategy.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The scheduling strategy to use for the service. For more information, see [Services](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html). There are two service scheduler strategies available:  +   ``REPLICA``-The replica scheduling strategy places and maintains the desired number of tasks across your cluster. By default, the service scheduler spreads tasks across Availability Zones. You can use task placement strategies and constraints to customize task placement decisions. This scheduler strategy is required if the service uses the ``CODE_DEPLOY`` or ``EXTERNAL`` deployment controller types.  +   ``DAEMON``-The daemon scheduling strategy deploys exactly one task on each active container instance that meets all of the task placement constraints that you specify in your cluster. The service scheduler also evaluates the task placement constraints for running tasks and will stop tasks that don't meet the placement constraints. When you're using this strategy, you don't need to specify a desired number of tasks, a task placement strategy, or use Service Auto Scaling policies.  Tasks using the Fargate launch type or the ``CODE_DEPLOY`` or ``EXTERNAL`` deployment controller types don't support the ``DAEMON`` scheduling strategy.",
        SerializedName = @"schedulingStrategy",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.SchedulingStrategy) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.SchedulingStrategy? SchedulingStrategy { get; set; }
        /// <summary>Property serviceArn</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property serviceArn",
        SerializedName = @"serviceArn",
        PossibleTypes = new [] { typeof(string) })]
        string ServiceArn { get; set; }
        /// <summary>Specifies whether to use Service Connect with this service.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether to use Service Connect with this service.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ServiceConnectConfigurationEnabled { get; set; }
        /// <summary>
        /// The namespace name or full Amazon Resource Name (ARN) of the CMAPlong namespace for use with Service Connect. The namespace
        /// must be in the same AWS Region as the Amazon ECS service and cluster. The type of namespace doesn't affect Service Connect.
        /// For more information about CMAPlong, see [Working with Services](https://docs.aws.amazon.com/cloud-map/latest/dg/working-with-services.html)
        /// in the *Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The namespace name or full Amazon Resource Name (ARN) of the CMAPlong namespace for use with Service Connect. The namespace must be in the same AWS Region as the Amazon ECS service and cluster. The type of namespace doesn't affect Service Connect. For more information about CMAPlong, see [Working with Services](https://docs.aws.amazon.com/cloud-map/latest/dg/working-with-services.html) in the *Developer Guide*.",
        SerializedName = @"namespace",
        PossibleTypes = new [] { typeof(string) })]
        string ServiceConnectConfigurationNamespace { get; set; }
        /// <summary>
        /// The list of Service Connect service objects. These are names and aliases (also known as endpoints) that are used by other
        /// Amazon ECS services to connect to this service. This field is not required for a 'client' Amazon ECS service that's a
        /// member of a namespace only to connect to other services within the namespace. An example of this would be a frontend application
        /// that accepts incoming requests from either a load balancer that's attached to the service or by other means. An object
        /// selects a port from the task definition, assigns a name for the CMAPlong service, and a list of aliases (endpoints) and
        /// ports for client applications to refer to this service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of Service Connect service objects. These are names and aliases (also known as endpoints) that are used by other Amazon ECS services to connect to this service.  This field is not required for a 'client' Amazon ECS service that's a member of a namespace only to connect to other services within the namespace. An example of this would be a frontend application that accepts incoming requests from either a load balancer that's attached to the service or by other means. An object selects a port from the task definition, assigns a name for the CMAPlong service, and a list of aliases (endpoints) and ports for client applications to refer to this service.",
        SerializedName = @"services",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceConnectService) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceConnectService[] ServiceConnectConfigurationService { get; set; }
        /// <summary>
        /// The name of your service. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed.
        /// Service names must be unique within a cluster, but you can have similarly named services in multiple clusters within a
        /// Region or across multiple Regions. The stack update fails if you change any properties that require replacement and the
        /// ``ServiceName`` is configured. This is because AWS CloudFormation creates the replacement service first, but each ``ServiceName``
        /// must be unique in the cluster.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of your service. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. Service names must be unique within a cluster, but you can have similarly named services in multiple clusters within a Region or across multiple Regions.  The stack update fails if you change any properties that require replacement and the ``ServiceName`` is configured. This is because AWS CloudFormation creates the replacement service first, but each ``ServiceName`` must be unique in the cluster.",
        SerializedName = @"serviceName",
        PossibleTypes = new [] { typeof(string) })]
        string ServiceName { get; set; }
        /// <summary>
        /// The details of the service discovery registry to associate with this service. For more information, see [Service discovery](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html).
        /// Each service may be associated with one service registry. Multiple service registries for each service isn't supported.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The details of the service discovery registry to associate with this service. For more information, see [Service discovery](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html).  Each service may be associated with one service registry. Multiple service registries for each service isn't supported.",
        SerializedName = @"serviceRegistries",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceRegistry) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceRegistry[] ServiceRegistry { get; set; }
        /// <summary>
        /// The metadata that you apply to the service to help you categorize and organize them. Each tag consists of a key and an
        /// optional value, both of which you define. When a service is deleted, the tags are deleted as well. The following basic
        /// restrictions apply to tags: + Maximum number of tags per resource - 50 + For each resource, each tag key must be unique,
        /// and each tag key can have only one value. + Maximum key length - 128 Unicode characters in UTF-8 + Maximum value length
        /// - 256 Unicode characters in UTF-8 + If your tagging schema is used across multiple services and resources, remember that
        /// other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces
        /// representable in UTF-8, and the following characters: + - = . _ : / @. + Tag keys and values are case-sensitive. + Do
        /// not use ``aws:``, ``AWS:``, or any upper or lowercase combination of such as a prefix for either keys or values as it
        /// is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count
        /// against your tags per resource limit.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The metadata that you apply to the service to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. When a service is deleted, the tags are deleted as well. The following basic restrictions apply to tags:  +  Maximum number of tags per resource - 50  +  For each resource, each tag key must be unique, and each tag key can have only one value.  +  Maximum key length - 128 Unicode characters in UTF-8  +  Maximum value length - 256 Unicode characters in UTF-8  +  If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.  +  Tag keys and values are case-sensitive.  +  Do not use ``aws:``, ``AWS:``, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated27) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated27[] Tag { get; set; }
        /// <summary>
        /// The ``family`` and ``revision`` (``family:revision``) or full ARN of the task definition to run in your service. If a
        /// ``revision`` isn't specified, the latest ``ACTIVE`` revision is used. A task definition must be specified if the service
        /// uses either the ``ECS`` or ``CODE_DEPLOY`` deployment controllers. For more information about deployment types, see [Amazon
        /// ECS deployment types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ``family`` and ``revision`` (``family:revision``) or full ARN of the task definition to run in your service. If a ``revision`` isn't specified, the latest ``ACTIVE`` revision is used. A task definition must be specified if the service uses either the ``ECS`` or ``CODE_DEPLOY`` deployment controllers. For more information about deployment types, see [Amazon ECS deployment types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html).",
        SerializedName = @"taskDefinition",
        PossibleTypes = new [] { typeof(string) })]
        string TaskDefinition { get; set; }
        /// <summary>
        /// The configuration for a volume specified in the task definition as a volume that is configured at launch time. Currently,
        /// the only supported volume type is an Amazon EBS volume.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The configuration for a volume specified in the task definition as a volume that is configured at launch time. Currently, the only supported volume type is an Amazon EBS volume.",
        SerializedName = @"volumeConfigurations",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceVolumeConfiguration) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceVolumeConfiguration[] VolumeConfiguration { get; set; }

    }
    /// Definition of awsEcsService
    internal partial interface IAwsEcsServicePropertiesInternal

    {
        /// <summary>
        /// Determines whether to use the CloudWatch alarm option in the service deployment process.
        /// </summary>
        bool? AlarmEnable { get; set; }
        /// <summary>One or more CloudWatch alarm names. Use a ',' to separate the alarms.</summary>
        string[] AlarmName { get; set; }
        /// <summary>
        /// Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is used,
        /// when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
        /// </summary>
        bool? AlarmRollback { get; set; }
        /// <summary>
        /// Whether the task's elastic network interface receives a public IP address. The default value is ``DISABLED``.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.AwsVpcConfigurationAssignPublicIP? AwsvpcConfigurationAssignPublicIP { get; set; }
        /// <summary>
        /// The IDs of the security groups associated with the task or service. If you don't specify a security group, the default
        /// security group for the VPC is used. There's a limit of 5 security groups that can be specified per ``AwsVpcConfiguration``.
        /// All specified security groups must be from the same VPC.
        /// </summary>
        string[] AwsvpcConfigurationSecurityGroup { get; set; }
        /// <summary>
        /// The IDs of the subnets associated with the task or service. There's a limit of 16 subnets that can be specified per ``AwsVpcConfiguration``.
        /// All specified subnets must be from the same VPC.
        /// </summary>
        string[] AwsvpcConfigurationSubnet { get; set; }
        /// <summary>
        /// The capacity provider strategy to use for the service. If a ``capacityProviderStrategy`` is specified, the ``launchType``
        /// parameter must be omitted. If no ``capacityProviderStrategy`` or ``launchType`` is specified, the ``defaultCapacityProviderStrategy``
        /// for the cluster is used. A capacity provider strategy may contain a maximum of 6 capacity providers.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICapacityProviderStrategyItem[] CapacityProviderStrategy { get; set; }
        /// <summary>
        /// The short name or full Amazon Resource Name (ARN) of the cluster that you run your service on. If you do not specify a
        /// cluster, the default cluster is assumed.
        /// </summary>
        string Cluster { get; set; }
        /// <summary>Determines whether to use the deployment circuit breaker logic for the service.</summary>
        bool? DeploymentCircuitBreakerEnable { get; set; }
        /// <summary>
        /// Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is on,
        /// when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
        /// </summary>
        bool? DeploymentCircuitBreakerRollback { get; set; }
        /// <summary>
        /// Optional deployment parameters that control how many tasks run during the deployment and the ordering of stopping and
        /// starting tasks. The ``DeploymentConfiguration`` property specifies optional deployment parameters that control how many
        /// tasks run during the deployment and the ordering of stopping and starting tasks.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentConfiguration DeploymentConfiguration { get; set; }
        /// <summary>
        /// Information about the CloudWatch alarms. One of the methods which provide a way for you to quickly identify when a deployment
        /// has failed, and then to optionally roll back the failure to the last working deployment. When the alarms are generated,
        /// Amazon ECS sets the service deployment to failed. Set the rollback parameter to have Amazon ECS to roll back your service
        /// to the last completed deployment after a failure. You can only use the ``DeploymentAlarms`` method to detect failures
        /// when the ``DeploymentController`` is set to ``ECS`` (rolling update). For more information, see [Rolling update](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html)
        /// in the *Amazon Elastic Container Service Developer Guide*.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentAlarms DeploymentConfigurationAlarm { get; set; }
        /// <summary>
        /// The deployment circuit breaker can only be used for services using the rolling update (``ECS``) deployment type. The *deployment
        /// circuit breaker* determines whether a service deployment will fail if the service can't reach a steady state. If you use
        /// the deployment circuit breaker, a service deployment will transition to a failed state and stop launching new tasks. If
        /// you use the rollback option, when a service deployment fails, the service is rolled back to the last deployment that completed
        /// successfully. For more information, see [Rolling update](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html)
        /// in the *Amazon Elastic Container Service Developer Guide* The deployment circuit breaker can only be used for services
        /// using the rolling update (``ECS``) deployment type. The *deployment circuit breaker* determines whether a service deployment
        /// will fail if the service can't reach a steady state. If it is turned on, a service deployment will transition to a failed
        /// state and stop launching new tasks. You can also configure Amazon ECS to roll back your service to the last completed
        /// deployment after a failure. For more information, see [Rolling update](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html)
        /// in the *Amazon Elastic Container Service Developer Guide*. For more information about API failure reasons, see [API failure
        /// reasons](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/api_failures_messages.html) in the *Amazon Elastic
        /// Container Service Developer Guide*.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentCircuitBreaker DeploymentConfigurationDeploymentCircuitBreaker { get; set; }
        /// <summary>
        /// If a service is using the rolling update (``ECS``) deployment type, the ``maximumPercent`` parameter represents an upper
        /// limit on the number of your service's tasks that are allowed in the ``RUNNING`` or ``PENDING`` state during a deployment,
        /// as a percentage of the ``desiredCount`` (rounded down to the nearest integer). This parameter enables you to define the
        /// deployment batch size. For example, if your service is using the ``REPLICA`` service scheduler and has a ``desiredCount``
        /// of four tasks and a ``maximumPercent`` value of 200%, the scheduler may start four new tasks before stopping the four
        /// older tasks (provided that the cluster resources required to do this are available). The default ``maximumPercent`` value
        /// for a service using the ``REPLICA`` service scheduler is 200%. If a service is using either the blue/green (``CODE_DEPLOY``)
        /// or ``EXTERNAL`` deployment types and tasks that use the EC2 launch type, the *maximum percent* value is set to the default
        /// value and is used to define the upper limit on the number of the tasks in the service that remain in the ``RUNNING`` state
        /// while the container instances are in the ``DRAINING`` state. If the tasks in the service use the Fargate launch type,
        /// the maximum percent value is not used, although it is returned when describing your service.
        /// </summary>
        int? DeploymentConfigurationMaximumPercent { get; set; }
        /// <summary>
        /// If a service is using the rolling update (``ECS``) deployment type, the ``minimumHealthyPercent`` represents a lower limit
        /// on the number of your service's tasks that must remain in the ``RUNNING`` state during a deployment, as a percentage of
        /// the ``desiredCount`` (rounded up to the nearest integer). This parameter enables you to deploy without using additional
        /// cluster capacity. For example, if your service has a ``desiredCount`` of four tasks and a ``minimumHealthyPercent`` of
        /// 50%, the service scheduler may stop two existing tasks to free up cluster capacity before starting two new tasks. For
        /// services that *do not* use a load balancer, the following should be noted: + A service is considered healthy if all essential
        /// containers within the tasks in the service pass their health checks. + If a task has no essential containers with a health
        /// check defined, the service scheduler will wait for 40 seconds after a task reaches a ``RUNNING`` state before the task
        /// is counted towards the minimum healthy percent total. + If a task has one or more essential containers with a health check
        /// defined, the service scheduler will wait for the task to reach a healthy status before counting it towards the minimum
        /// healthy percent total. A task is considered healthy when all essential containers within the task have passed their health
        /// checks. The amount of time the service scheduler can wait for is determined by the container health check settings. For
        /// services that *do* use a load balancer, the following should be noted: + If a task has no essential containers with a
        /// health check defined, the service scheduler will wait for the load balancer target group health check to return a healthy
        /// status before counting the task towards the minimum healthy percent total. + If a task has an essential container with
        /// a health check defined, the service scheduler will wait for both the task to reach a healthy status and the load balancer
        /// target group health check to return a healthy status before counting the task towards the minimum healthy percent total.
        /// If a service is using either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types and is running tasks that
        /// use the EC2 launch type, the *minimum healthy percent* value is set to the default value and is used to define the lower
        /// limit on the number of the tasks in the service that remain in the ``RUNNING`` state while the container instances are
        /// in the ``DRAINING`` state. If a service is using either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types
        /// and is running tasks that use the Fargate launch type, the minimum healthy percent value is not used, although it is returned
        /// when describing your service.
        /// </summary>
        int? DeploymentConfigurationMinimumHealthyPercent { get; set; }
        /// <summary>
        /// The deployment controller to use for the service. If no deployment controller is specified, the default value of ``ECS``
        /// is used. The deployment controller to use for the service. For more information, see [Amazon ECS deployment types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html)
        /// in the *Amazon Elastic Container Service Developer Guide*.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentController DeploymentController { get; set; }
        /// <summary>
        /// The deployment controller type to use. There are three deployment controller types available: + ECS The rolling update
        /// (ECS) deployment type involves replacing the current running version of the container with the latest version. The number
        /// of containers Amazon ECS adds or removes from the service during a rolling update is controlled by adjusting the minimum
        /// and maximum number of healthy tasks allowed during a service deployment, as specified in the DeploymentConfiguration.
        /// + CODE_DEPLOY The blue/green (CODE_DEPLOY) deployment type uses the blue/green deployment model powered by , which allows
        /// you to verify a new deployment of a service before sending production traffic to it. + EXTERNAL The external (EXTERNAL)
        /// deployment type enables you to use any third-party deployment controller for full control over the deployment process
        /// for an Amazon ECS service.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.DeploymentControllerType? DeploymentControllerType { get; set; }
        /// <summary>
        /// The number of instantiations of the specified task definition to place and keep running in your service. For new services,
        /// if a desired count is not specified, a default value of ``1`` is used. When using the ``DAEMON`` scheduling strategy,
        /// the desired count is not required. For existing services, if a desired count is not specified, it is omitted from the
        /// operation.
        /// </summary>
        int? DesiredCount { get; set; }
        /// <summary>
        /// Specifies whether to turn on Amazon ECS managed tags for the tasks within the service. For more information, see [Tagging
        /// your Amazon ECS resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the *Amazon
        /// Elastic Container Service Developer Guide*. When you use Amazon ECS managed tags, you need to set the ``propagateTags``
        /// request parameter.
        /// </summary>
        bool? EnableEcsManagedTag { get; set; }
        /// <summary>
        /// Determines whether the execute command functionality is turned on for the service. If ``true``, the execute command functionality
        /// is turned on for all containers in tasks as part of the service.
        /// </summary>
        bool? EnableExecuteCommand { get; set; }
        /// <summary>
        /// The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing target
        /// health checks after a task has first started. This is only used when your service is configured to use a load balancer.
        /// If your service has a load balancer defined and you don't specify a health check grace period value, the default value
        /// of ``0`` is used. If you do not use an Elastic Load Balancing, we recommend that you use the ``startPeriod`` in the task
        /// definition health check parameters. For more information, see [Health check](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_HealthCheck.html).
        /// If your service's tasks take a while to start and respond to Elastic Load Balancing health checks, you can specify a health
        /// check grace period of up to 2,147,483,647 seconds (about 69 years). During that time, the Amazon ECS service scheduler
        /// ignores health check status. This grace period can prevent the service scheduler from marking tasks as unhealthy and stopping
        /// them before they have time to come up.
        /// </summary>
        int? HealthCheckGracePeriodSecond { get; set; }
        /// <summary>
        /// The launch type on which to run your service. For more information, see [Amazon ECS Launch Types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html)
        /// in the *Amazon Elastic Container Service Developer Guide*.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.LaunchType? LaunchType { get; set; }
        /// <summary>
        /// A list of load balancer objects to associate with the service. If you specify the ``Role`` property, ``LoadBalancers``
        /// must be specified as well. For information about the number of load balancers that you can specify per service, see [Service
        /// Load Balancing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-load-balancing.html) in the *Amazon
        /// Elastic Container Service Developer Guide*.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILoadBalancer[] LoadBalancer { get; set; }
        /// <summary>
        /// The log driver to use for the container. For tasks on FARGATElong, the supported log drivers are ``awslogs``, ``splunk``,
        /// and ``awsfirelens``. For tasks hosted on Amazon EC2 instances, the supported log drivers are ``awslogs``, ``fluentd``,
        /// ``gelf``, ``json-file``, ``journald``, ``logentries``,``syslog``, ``splunk``, and ``awsfirelens``. For more information
        /// about using the ``awslogs`` log driver, see [Using the awslogs log driver](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html)
        /// in the *Amazon Elastic Container Service Developer Guide*. For more information about using the ``awsfirelens`` log driver,
        /// see [Custom log routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon
        /// Elastic Container Service Developer Guide*. If you have a custom driver that isn't listed, you can fork the Amazon ECS
        /// container agent project that's [available on GitHub](https://docs.aws.amazon.com/https://github.com/aws/amazon-ecs-agent)
        /// and customize it to work with that driver. We encourage you to submit pull requests for changes that you would like to
        /// have included. However, we don't currently provide support for running modified copies of this software.
        /// </summary>
        string LogConfigurationLogDriver { get; set; }
        /// <summary>
        /// The configuration options to send to the log driver. This parameter requires version 1.19 of the Docker Remote API or
        /// greater on your container instance. To check the Docker Remote API version on your container instance, log in to your
        /// container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.IAny LogConfigurationOption { get; set; }
        /// <summary>
        /// The secrets to pass to the log configuration. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html)
        /// in the *Amazon Elastic Container Service Developer Guide*.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ISecret[] LogConfigurationSecretOption { get; set; }
        /// <summary>Property name</summary>
        string Name { get; set; }
        /// <summary>
        /// The network configuration for the service. This parameter is required for task definitions that use the ``awsvpc`` network
        /// mode to receive their own elastic network interface, and it is not supported for other network modes. For more information,
        /// see [Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) in the *Amazon
        /// Elastic Container Service Developer Guide*. The ``NetworkConfiguration`` property specifies an object representing the
        /// network configuration for a task or service.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INetworkConfiguration NetworkConfiguration { get; set; }
        /// <summary>
        /// The VPC subnets and security groups that are associated with a task. All specified subnets and security groups must be
        /// from the same VPC. An object representing the networking details for a task or service. For example ``awsvpcConfiguration={subnets=['subnet-12344321'],securityGroups=['sg-12344321']}``
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsVpcConfiguration NetworkConfigurationAwsvpcConfiguration { get; set; }
        /// <summary>
        /// An array of placement constraint objects to use for tasks in your service. You can specify a maximum of 10 constraints
        /// for each task. This limit includes constraints in the task definition and those specified at runtime.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPlacementConstraint[] PlacementConstraint { get; set; }
        /// <summary>
        /// The placement strategy objects to use for tasks in your service. You can specify a maximum of 5 strategy rules for each
        /// service.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPlacementStrategy[] PlacementStrategy { get; set; }
        /// <summary>
        /// The platform version that your tasks in the service are running on. A platform version is specified only for tasks using
        /// the Fargate launch type. If one isn't specified, the ``LATEST`` platform version is used. For more information, see [platform
        /// versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the *Amazon Elastic Container
        /// Service Developer Guide*.
        /// </summary>
        string PlatformVersion { get; set; }
        /// <summary>
        /// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags aren't
        /// propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use
        /// the [TagResource](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_TagResource.html) API action. The default
        /// is ``NONE``.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.PropagateTags? PropagateTag { get; set; }
        /// <summary>
        /// The name or full Amazon Resource Name (ARN) of the IAM role that allows Amazon ECS to make calls to your load balancer
        /// on your behalf. This parameter is only permitted if you are using a load balancer with your service and your task definition
        /// doesn't use the ``awsvpc`` network mode. If you specify the ``role`` parameter, you must also specify a load balancer
        /// object with the ``loadBalancers`` parameter. If your account has already created the Amazon ECS service-linked role, that
        /// role is used for your service unless you specify a role here. The service-linked role is required if your task definition
        /// uses the ``awsvpc`` network mode or if the service is configured to use service discovery, an external deployment controller,
        /// multiple target groups, or Elastic Inference accelerators in which case you don't specify a role here. For more information,
        /// see [Using service-linked roles for Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html)
        /// in the *Amazon Elastic Container Service Developer Guide*. If your specified role has a path other than ``/``, then you
        /// must either specify the full role ARN (this is recommended) or prefix the role name with the path. For example, if a role
        /// with the name ``bar`` has a path of ``/foo/`` then you would specify ``/foo/bar`` as the role name. For more information,
        /// see [Friendly names and paths](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-friendly-names)
        /// in the *IAM User Guide*.
        /// </summary>
        string Role { get; set; }
        /// <summary>
        /// The scheduling strategy to use for the service. For more information, see [Services](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html).
        /// There are two service scheduler strategies available: + ``REPLICA``-The replica scheduling strategy places and maintains
        /// the desired number of tasks across your cluster. By default, the service scheduler spreads tasks across Availability Zones.
        /// You can use task placement strategies and constraints to customize task placement decisions. This scheduler strategy is
        /// required if the service uses the ``CODE_DEPLOY`` or ``EXTERNAL`` deployment controller types. + ``DAEMON``-The daemon
        /// scheduling strategy deploys exactly one task on each active container instance that meets all of the task placement constraints
        /// that you specify in your cluster. The service scheduler also evaluates the task placement constraints for running tasks
        /// and will stop tasks that don't meet the placement constraints. When you're using this strategy, you don't need to specify
        /// a desired number of tasks, a task placement strategy, or use Service Auto Scaling policies. Tasks using the Fargate launch
        /// type or the ``CODE_DEPLOY`` or ``EXTERNAL`` deployment controller types don't support the ``DAEMON`` scheduling strategy.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.SchedulingStrategy? SchedulingStrategy { get; set; }
        /// <summary>Property serviceArn</summary>
        string ServiceArn { get; set; }
        /// <summary>
        /// The configuration for this service to discover and connect to services, and be discovered by, and connected from, other
        /// services within a namespace. Tasks that run in a namespace can use short names to connect to services in the namespace.
        /// Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container
        /// that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported
        /// with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html)
        /// in the *Amazon Elastic Container Service Developer Guide*. The Service Connect configuration of your Amazon ECS service.
        /// The configuration for this service to discover and connect to services, and be discovered by, and connected from, other
        /// services within a namespace. Tasks that run in a namespace can use short names to connect to services in the namespace.
        /// Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container
        /// that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported
        /// with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html)
        /// in the *Amazon Elastic Container Service Developer Guide*.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceConnectConfiguration ServiceConnectConfiguration { get; set; }
        /// <summary>Specifies whether to use Service Connect with this service.</summary>
        bool? ServiceConnectConfigurationEnabled { get; set; }
        /// <summary>
        /// The log configuration for the container. This parameter maps to ``LogConfig`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
        /// section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--log-driver``
        /// option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/run/). By default,
        /// containers use the same logging driver that the Docker daemon uses. However, the container might use a different logging
        /// driver than the Docker daemon by specifying a log driver configuration in the container definition. For more information
        /// about the options for different supported log drivers, see [Configure logging drivers](https://docs.aws.amazon.com/https://docs.docker.com/engine/admin/logging/overview/)
        /// in the Docker documentation. Understand the following when specifying a log configuration for your containers. + Amazon
        /// ECS currently supports a subset of the logging drivers available to the Docker daemon. Additional log drivers may be available
        /// in future releases of the Amazon ECS container agent. For tasks on FARGATElong, the supported log drivers are ``awslogs``,
        /// ``splunk``, and ``awsfirelens``. For tasks hosted on Amazon EC2 instances, the supported log drivers are ``awslogs``,
        /// ``fluentd``, ``gelf``, ``json-file``, ``journald``, ``logentries``,``syslog``, ``splunk``, and ``awsfirelens``. + This
        /// parameter requires version 1.18 of the Docker Remote API or greater on your container instance. + For tasks that are hosted
        /// on Amazon EC2 instances, the Amazon ECS container agent must register the available logging drivers with the ``ECS_AVAILABLE_LOGGING_DRIVERS``
        /// environment variable before containers placed on that instance can use these log configuration options. For more information,
        /// see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html)
        /// in the *Amazon Elastic Container Service Developer Guide*. + For tasks that are on FARGATElong, because you don't have
        /// access to the underlying infrastructure your tasks are hosted on, any additional software needed must be installed outside
        /// of the task. For example, the Fluentd output aggregators or a remote host running Logstash to send Gelf logs to. The log
        /// configuration for the container. This parameter maps to ``LogConfig`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
        /// section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--log-driver``
        /// option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/run/). By default,
        /// containers use the same logging driver that the Docker daemon uses. However, the container might use a different logging
        /// driver than the Docker daemon by specifying a log driver configuration in the container definition. For more information
        /// about the options for different supported log drivers, see [Configure logging drivers](https://docs.aws.amazon.com/https://docs.docker.com/engine/admin/logging/overview/)
        /// in the Docker documentation. Understand the following when specifying a log configuration for your containers. + Amazon
        /// ECS currently supports a subset of the logging drivers available to the Docker daemon. Additional log drivers may be available
        /// in future releases of the Amazon ECS container agent. For tasks on FARGATElong, the supported log drivers are ``awslogs``,
        /// ``splunk``, and ``awsfirelens``. For tasks hosted on Amazon EC2 instances, the supported log drivers are ``awslogs``,
        /// ``fluentd``, ``gelf``, ``json-file``, ``journald``, ``logentries``,``syslog``, ``splunk``, and ``awsfirelens``. + This
        /// parameter requires version 1.18 of the Docker Remote API or greater on your container instance. + For tasks that are hosted
        /// on Amazon EC2 instances, the Amazon ECS container agent must register the available logging drivers with the ``ECS_AVAILABLE_LOGGING_DRIVERS``
        /// environment variable before containers placed on that instance can use these log configuration options. For more information,
        /// see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html)
        /// in the *Amazon Elastic Container Service Developer Guide*. + For tasks that are on FARGATElong, because you don't have
        /// access to the underlying infrastructure your tasks are hosted on, any additional software needed must be installed outside
        /// of the task. For example, the Fluentd output aggregators or a remote host running Logstash to send Gelf logs to.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILogConfiguration ServiceConnectConfigurationLogConfiguration { get; set; }
        /// <summary>
        /// The namespace name or full Amazon Resource Name (ARN) of the CMAPlong namespace for use with Service Connect. The namespace
        /// must be in the same AWS Region as the Amazon ECS service and cluster. The type of namespace doesn't affect Service Connect.
        /// For more information about CMAPlong, see [Working with Services](https://docs.aws.amazon.com/cloud-map/latest/dg/working-with-services.html)
        /// in the *Developer Guide*.
        /// </summary>
        string ServiceConnectConfigurationNamespace { get; set; }
        /// <summary>
        /// The list of Service Connect service objects. These are names and aliases (also known as endpoints) that are used by other
        /// Amazon ECS services to connect to this service. This field is not required for a 'client' Amazon ECS service that's a
        /// member of a namespace only to connect to other services within the namespace. An example of this would be a frontend application
        /// that accepts incoming requests from either a load balancer that's attached to the service or by other means. An object
        /// selects a port from the task definition, assigns a name for the CMAPlong service, and a list of aliases (endpoints) and
        /// ports for client applications to refer to this service.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceConnectService[] ServiceConnectConfigurationService { get; set; }
        /// <summary>
        /// The name of your service. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed.
        /// Service names must be unique within a cluster, but you can have similarly named services in multiple clusters within a
        /// Region or across multiple Regions. The stack update fails if you change any properties that require replacement and the
        /// ``ServiceName`` is configured. This is because AWS CloudFormation creates the replacement service first, but each ``ServiceName``
        /// must be unique in the cluster.
        /// </summary>
        string ServiceName { get; set; }
        /// <summary>
        /// The details of the service discovery registry to associate with this service. For more information, see [Service discovery](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html).
        /// Each service may be associated with one service registry. Multiple service registries for each service isn't supported.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceRegistry[] ServiceRegistry { get; set; }
        /// <summary>
        /// The metadata that you apply to the service to help you categorize and organize them. Each tag consists of a key and an
        /// optional value, both of which you define. When a service is deleted, the tags are deleted as well. The following basic
        /// restrictions apply to tags: + Maximum number of tags per resource - 50 + For each resource, each tag key must be unique,
        /// and each tag key can have only one value. + Maximum key length - 128 Unicode characters in UTF-8 + Maximum value length
        /// - 256 Unicode characters in UTF-8 + If your tagging schema is used across multiple services and resources, remember that
        /// other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces
        /// representable in UTF-8, and the following characters: + - = . _ : / @. + Tag keys and values are case-sensitive. + Do
        /// not use ``aws:``, ``AWS:``, or any upper or lowercase combination of such as a prefix for either keys or values as it
        /// is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count
        /// against your tags per resource limit.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated27[] Tag { get; set; }
        /// <summary>
        /// The ``family`` and ``revision`` (``family:revision``) or full ARN of the task definition to run in your service. If a
        /// ``revision`` isn't specified, the latest ``ACTIVE`` revision is used. A task definition must be specified if the service
        /// uses either the ``ECS`` or ``CODE_DEPLOY`` deployment controllers. For more information about deployment types, see [Amazon
        /// ECS deployment types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html).
        /// </summary>
        string TaskDefinition { get; set; }
        /// <summary>
        /// The configuration for a volume specified in the task definition as a volume that is configured at launch time. Currently,
        /// the only supported volume type is an Amazon EBS volume.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceVolumeConfiguration[] VolumeConfiguration { get; set; }

    }
}