// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of Active</summary>
    public partial class ActiveModel :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IActiveModel,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IActiveModelInternal
    {

        /// <summary>Backing field for <see cref="Active" /> property.</summary>
        private bool? _active;

        /// <summary>
        /// When true, StackSets performs non-conflicting operations concurrently and queues conflicting operations. After conflicting
        /// operations finish, StackSets starts queued operations in request order.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public bool? Active { get => this._active; set => this._active = value; }

        /// <summary>Creates an new <see cref="ActiveModel" /> instance.</summary>
        public ActiveModel()
        {

        }
    }
    /// Definition of Active
    public partial interface IActiveModel :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary>
        /// When true, StackSets performs non-conflicting operations concurrently and queues conflicting operations. After conflicting
        /// operations finish, StackSets starts queued operations in request order.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"When true, StackSets performs non-conflicting operations concurrently and queues conflicting operations. After conflicting operations finish, StackSets starts queued operations in request order.",
        SerializedName = @"active",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Active { get; set; }

    }
    /// Definition of Active
    internal partial interface IActiveModelInternal

    {
        /// <summary>
        /// When true, StackSets performs non-conflicting operations concurrently and queues conflicting operations. After conflicting
        /// operations finish, StackSets starts queued operations in request order.
        /// </summary>
        bool? Active { get; set; }

    }
}