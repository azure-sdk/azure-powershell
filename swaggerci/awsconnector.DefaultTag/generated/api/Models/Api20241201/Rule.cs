// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of Rule</summary>
    public partial class Rule :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IRule,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IRuleInternal
    {

        /// <summary>Backing field for <see cref="AbortIncompleteMultipartUpload" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAbortIncompleteMultipartUpload _abortIncompleteMultipartUpload;

        /// <summary>
        /// Specifies a lifecycle rule that stops incomplete multipart uploads to an Amazon S3 bucket. Specifies the days since the
        /// initiation of an incomplete multipart upload that Amazon S3 will wait before permanently removing all parts of the upload.
        /// For more information, see [Stopping Incomplete Multipart Uploads Using a Bucket Lifecycle Policy](https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config)
        /// in the *Amazon S3 User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAbortIncompleteMultipartUpload AbortIncompleteMultipartUpload { get => (this._abortIncompleteMultipartUpload = this._abortIncompleteMultipartUpload ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AbortIncompleteMultipartUpload()); set => this._abortIncompleteMultipartUpload = value; }

        /// <summary>
        /// Specifies the number of days after which Amazon S3 stops an incomplete multipart upload.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public int? AbortIncompleteMultipartUploadDaysAfterInitiation { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAbortIncompleteMultipartUploadInternal)AbortIncompleteMultipartUpload).DaysAfterInitiation; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAbortIncompleteMultipartUploadInternal)AbortIncompleteMultipartUpload).DaysAfterInitiation = value ?? default(int); }

        /// <summary>Backing field for <see cref="ExpirationDate" /> property.</summary>
        private string _expirationDate;

        /// <summary>
        /// Indicates when objects are deleted from Amazon S3 and Amazon S3 Glacier. The date value must be in ISO 8601 format. The
        /// time is always midnight UTC. If you specify an expiration and transition time, you must use the same time unit for both
        /// properties (either in days or by date). The expiration time must also be later than the transition time. The date value
        /// in ISO 8601 format. The timezone is always UTC. (YYYY-MM-DDThh:mm:ssZ)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string ExpirationDate { get => this._expirationDate; set => this._expirationDate = value; }

        /// <summary>Backing field for <see cref="ExpirationInDay" /> property.</summary>
        private int? _expirationInDay;

        /// <summary>
        /// Indicates the number of days after creation when objects are deleted from Amazon S3 and Amazon S3 Glacier. If you specify
        /// an expiration and transition time, you must use the same time unit for both properties (either in days or by date). The
        /// expiration time must also be later than the transition time.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? ExpirationInDay { get => this._expirationInDay; set => this._expirationInDay = value; }

        /// <summary>Backing field for <see cref="ExpiredObjectDeleteMarker" /> property.</summary>
        private bool? _expiredObjectDeleteMarker;

        /// <summary>
        /// Indicates whether Amazon S3 will remove a delete marker without any noncurrent versions. If set to true, the delete marker
        /// will be removed if there are no noncurrent versions. This cannot be specified with ``ExpirationInDays``, ``ExpirationDate``,
        /// or ``TagFilters``.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public bool? ExpiredObjectDeleteMarker { get => this._expiredObjectDeleteMarker; set => this._expiredObjectDeleteMarker = value; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private string _id;

        /// <summary>Unique identifier for the rule. The value can't be longer than 255 characters.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string Id { get => this._id; set => this._id = value; }

        /// <summary>Internal Acessors for AbortIncompleteMultipartUpload</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAbortIncompleteMultipartUpload Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IRuleInternal.AbortIncompleteMultipartUpload { get => (this._abortIncompleteMultipartUpload = this._abortIncompleteMultipartUpload ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AbortIncompleteMultipartUpload()); set { {_abortIncompleteMultipartUpload = value;} } }

        /// <summary>Internal Acessors for NoncurrentVersionExpiration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INoncurrentVersionExpiration Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IRuleInternal.NoncurrentVersionExpiration { get => (this._noncurrentVersionExpiration = this._noncurrentVersionExpiration ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.NoncurrentVersionExpiration()); set { {_noncurrentVersionExpiration = value;} } }

        /// <summary>Internal Acessors for NoncurrentVersionTransition</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INoncurrentVersionTransition Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IRuleInternal.NoncurrentVersionTransition { get => (this._noncurrentVersionTransition = this._noncurrentVersionTransition ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.NoncurrentVersionTransition()); set { {_noncurrentVersionTransition = value;} } }

        /// <summary>Internal Acessors for Transition</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITransition Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IRuleInternal.Transition { get => (this._transition = this._transition ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.Transition()); set { {_transition = value;} } }

        /// <summary>Backing field for <see cref="NoncurrentVersionExpiration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INoncurrentVersionExpiration _noncurrentVersionExpiration;

        /// <summary>
        /// Specifies when noncurrent object versions expire. Upon expiration, S3 permanently deletes the noncurrent object versions.
        /// You set this lifecycle configuration action on a bucket that has versioning enabled (or suspended) to request that S3
        /// delete noncurrent object versions at a specific period in the object's lifetime. Specifies when noncurrent object versions
        /// expire. Upon expiration, S3 permanently deletes the noncurrent object versions. You set this lifecycle configuration action
        /// on a bucket that has versioning enabled (or suspended) to request that S3 delete noncurrent object versions at a specific
        /// period in the object's lifetime. For more information about setting a lifecycle rule configuration, see [AWS::S3::Bucket
        /// Rule](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-lifecycleconfig-rule.html).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INoncurrentVersionExpiration NoncurrentVersionExpiration { get => (this._noncurrentVersionExpiration = this._noncurrentVersionExpiration ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.NoncurrentVersionExpiration()); set => this._noncurrentVersionExpiration = value; }

        /// <summary>Backing field for <see cref="NoncurrentVersionExpirationInDay" /> property.</summary>
        private int? _noncurrentVersionExpirationInDay;

        /// <summary>
        /// (Deprecated.) For buckets with versioning enabled (or suspended), specifies the time, in days, between when a new version
        /// of the object is uploaded to the bucket and when old versions of the object expire. When object versions expire, Amazon
        /// S3 permanently deletes them. If you specify a transition and expiration time, the expiration time must be later than the
        /// transition time.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? NoncurrentVersionExpirationInDay { get => this._noncurrentVersionExpirationInDay; set => this._noncurrentVersionExpirationInDay = value; }

        /// <summary>
        /// Specifies how many noncurrent versions S3 will retain. If there are this many more recent noncurrent versions, S3 will
        /// take the associated action. For more information about noncurrent versions, see [Lifecycle configuration elements](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html)
        /// in the *Amazon S3 User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public int? NoncurrentVersionExpirationNewerNoncurrentVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INoncurrentVersionExpirationInternal)NoncurrentVersionExpiration).NewerNoncurrentVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INoncurrentVersionExpirationInternal)NoncurrentVersionExpiration).NewerNoncurrentVersion = value ?? default(int); }

        /// <summary>
        /// Specifies the number of days an object is noncurrent before S3 can perform the associated action. For information about
        /// the noncurrent days calculations, see [How Amazon S3 Calculates When an Object Became Noncurrent](https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations)
        /// in the *Amazon S3 User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public int? NoncurrentVersionExpirationNoncurrentDay { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INoncurrentVersionExpirationInternal)NoncurrentVersionExpiration).NoncurrentDay; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INoncurrentVersionExpirationInternal)NoncurrentVersionExpiration).NoncurrentDay = value ?? default(int); }

        /// <summary>Backing field for <see cref="NoncurrentVersionTransition" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INoncurrentVersionTransition _noncurrentVersionTransition;

        /// <summary>
        /// (Deprecated.) For buckets with versioning enabled (or suspended), specifies when non-current objects transition to a specified
        /// storage class. If you specify a transition and expiration time, the expiration time must be later than the transition
        /// time. If you specify this property, don't specify the ``NoncurrentVersionTransitions`` property. Container for the transition
        /// rule that describes when noncurrent objects transition to the ``STANDARD_IA``, ``ONEZONE_IA``, ``INTELLIGENT_TIERING``,
        /// ``GLACIER_IR``, ``GLACIER``, or ``DEEP_ARCHIVE`` storage class. If your bucket is versioning-enabled (or versioning is
        /// suspended), you can set this action to request that Amazon S3 transition noncurrent object versions to the ``STANDARD_IA``,
        /// ``ONEZONE_IA``, ``INTELLIGENT_TIERING``, ``GLACIER_IR``, ``GLACIER``, or ``DEEP_ARCHIVE`` storage class at a specific
        /// period in the object's lifetime. If you specify this property, don't specify the ``NoncurrentVersionTransitions`` property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INoncurrentVersionTransition NoncurrentVersionTransition { get => (this._noncurrentVersionTransition = this._noncurrentVersionTransition ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.NoncurrentVersionTransition()); set => this._noncurrentVersionTransition = value; }

        /// <summary>
        /// Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For information
        /// about the noncurrent days calculations, see [How Amazon S3 Calculates How Long an Object Has Been Noncurrent](https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations)
        /// in the *Amazon S3 User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public int? NoncurrentVersionTransitionInDay { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INoncurrentVersionTransitionInternal)NoncurrentVersionTransition).TransitionInDay; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INoncurrentVersionTransitionInternal)NoncurrentVersionTransition).TransitionInDay = value ?? default(int); }

        /// <summary>
        /// Specifies how many noncurrent versions S3 will retain. If there are this many more recent noncurrent versions, S3 will
        /// take the associated action. For more information about noncurrent versions, see [Lifecycle configuration elements](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html)
        /// in the *Amazon S3 User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public int? NoncurrentVersionTransitionNewerNoncurrentVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INoncurrentVersionTransitionInternal)NoncurrentVersionTransition).NewerNoncurrentVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INoncurrentVersionTransitionInternal)NoncurrentVersionTransition).NewerNoncurrentVersion = value ?? default(int); }

        /// <summary>The class of storage used to store the object.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.NoncurrentVersionTransitionStorageClass? NoncurrentVersionTransitionStorageClass { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INoncurrentVersionTransitionInternal)NoncurrentVersionTransition).StorageClass; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INoncurrentVersionTransitionInternal)NoncurrentVersionTransition).StorageClass = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.NoncurrentVersionTransitionStorageClass)""); }

        /// <summary>Backing field for <see cref="NoncurrentVersionTransitions" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INoncurrentVersionTransition[] _noncurrentVersionTransitions;

        /// <summary>
        /// For buckets with versioning enabled (or suspended), one or more transition rules that specify when non-current objects
        /// transition to a specified storage class. If you specify a transition and expiration time, the expiration time must be
        /// later than the transition time. If you specify this property, don't specify the ``NoncurrentVersionTransition`` property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INoncurrentVersionTransition[] NoncurrentVersionTransitions { get => this._noncurrentVersionTransitions; set => this._noncurrentVersionTransitions = value; }

        /// <summary>Backing field for <see cref="ObjectSizeGreaterThan" /> property.</summary>
        private string _objectSizeGreaterThan;

        /// <summary>
        /// Specifies the minimum object size in bytes for this rule to apply to. Objects must be larger than this value in bytes.
        /// For more information about size based rules, see [Lifecycle configuration using size-based rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-configuration-examples.html#lc-size-rules)
        /// in the *Amazon S3 User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string ObjectSizeGreaterThan { get => this._objectSizeGreaterThan; set => this._objectSizeGreaterThan = value; }

        /// <summary>Backing field for <see cref="ObjectSizeLessThan" /> property.</summary>
        private string _objectSizeLessThan;

        /// <summary>
        /// Specifies the maximum object size in bytes for this rule to apply to. Objects must be smaller than this value in bytes.
        /// For more information about sized based rules, see [Lifecycle configuration using size-based rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-configuration-examples.html#lc-size-rules)
        /// in the *Amazon S3 User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string ObjectSizeLessThan { get => this._objectSizeLessThan; set => this._objectSizeLessThan = value; }

        /// <summary>Backing field for <see cref="Prefix" /> property.</summary>
        private string _prefix;

        /// <summary>
        /// Object key prefix that identifies one or more objects to which this rule applies. Replacement must be made for object
        /// keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML
        /// related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string Prefix { get => this._prefix; set => this._prefix = value; }

        /// <summary>Backing field for <see cref="Status" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.RuleStatus? _status;

        /// <summary>
        /// If ``Enabled``, the rule is currently being applied. If ``Disabled``, the rule is not currently being applied.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.RuleStatus? Status { get => this._status; set => this._status = value; }

        /// <summary>Backing field for <see cref="TagFilter" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagFilter[] _tagFilter;

        /// <summary>
        /// Tags to use to identify a subset of objects to which the lifecycle rule applies.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagFilter[] TagFilter { get => this._tagFilter; set => this._tagFilter = value; }

        /// <summary>Backing field for <see cref="Transition" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITransition _transition;

        /// <summary>
        /// (Deprecated.) Specifies when an object transitions to a specified storage class. If you specify an expiration and transition
        /// time, you must use the same time unit for both properties (either in days or by date). The expiration time must also be
        /// later than the transition time. If you specify this property, don't specify the ``Transitions`` property. Specifies when
        /// an object transitions to a specified storage class. For more information about Amazon S3 lifecycle configuration rules,
        /// see [Transitioning Objects Using Amazon S3 Lifecycle](https://docs.aws.amazon.com/AmazonS3/latest/dev/lifecycle-transition-general-considerations.html)
        /// in the *Amazon S3 User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITransition Transition { get => (this._transition = this._transition ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.Transition()); set => this._transition = value; }

        /// <summary>
        /// Indicates when objects are transitioned to the specified storage class. The date value must be in ISO 8601 format. The
        /// time is always midnight UTC. The date value in ISO 8601 format. The timezone is always UTC. (YYYY-MM-DDThh:mm:ssZ)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string TransitionDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITransitionInternal)Transition).Date; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITransitionInternal)Transition).Date = value ?? null; }

        /// <summary>
        /// Indicates the number of days after creation when objects are transitioned to the specified storage class. The value must
        /// be a positive integer.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public int? TransitionInDay { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITransitionInternal)Transition).InDay; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITransitionInternal)Transition).InDay = value ?? default(int); }

        /// <summary>The storage class to which you want the object to transition.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.TransitionStorageClass? TransitionStorageClass { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITransitionInternal)Transition).StorageClass; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITransitionInternal)Transition).StorageClass = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.TransitionStorageClass)""); }

        /// <summary>Backing field for <see cref="Transitions" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITransition[] _transitions;

        /// <summary>
        /// One or more transition rules that specify when an object transitions to a specified storage class. If you specify an expiration
        /// and transition time, you must use the same time unit for both properties (either in days or by date). The expiration time
        /// must also be later than the transition time. If you specify this property, don't specify the ``Transition`` property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITransition[] Transitions { get => this._transitions; set => this._transitions = value; }

        /// <summary>Creates an new <see cref="Rule" /> instance.</summary>
        public Rule()
        {

        }
    }
    /// Definition of Rule
    public partial interface IRule :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Specifies the number of days after which Amazon S3 stops an incomplete multipart upload.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the number of days after which Amazon S3 stops an incomplete multipart upload.",
        SerializedName = @"daysAfterInitiation",
        PossibleTypes = new [] { typeof(int) })]
        int? AbortIncompleteMultipartUploadDaysAfterInitiation { get; set; }
        /// <summary>
        /// Indicates when objects are deleted from Amazon S3 and Amazon S3 Glacier. The date value must be in ISO 8601 format. The
        /// time is always midnight UTC. If you specify an expiration and transition time, you must use the same time unit for both
        /// properties (either in days or by date). The expiration time must also be later than the transition time. The date value
        /// in ISO 8601 format. The timezone is always UTC. (YYYY-MM-DDThh:mm:ssZ)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates when objects are deleted from Amazon S3 and Amazon S3 Glacier. The date value must be in ISO 8601 format. The time is always midnight UTC. If you specify an expiration and transition time, you must use the same time unit for both properties (either in days or by date). The expiration time must also be later than the transition time. The date value in ISO 8601 format. The timezone is always UTC. (YYYY-MM-DDThh:mm:ssZ)",
        SerializedName = @"expirationDate",
        PossibleTypes = new [] { typeof(string) })]
        string ExpirationDate { get; set; }
        /// <summary>
        /// Indicates the number of days after creation when objects are deleted from Amazon S3 and Amazon S3 Glacier. If you specify
        /// an expiration and transition time, you must use the same time unit for both properties (either in days or by date). The
        /// expiration time must also be later than the transition time.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates the number of days after creation when objects are deleted from Amazon S3 and Amazon S3 Glacier. If you specify an expiration and transition time, you must use the same time unit for both properties (either in days or by date). The expiration time must also be later than the transition time.",
        SerializedName = @"expirationInDays",
        PossibleTypes = new [] { typeof(int) })]
        int? ExpirationInDay { get; set; }
        /// <summary>
        /// Indicates whether Amazon S3 will remove a delete marker without any noncurrent versions. If set to true, the delete marker
        /// will be removed if there are no noncurrent versions. This cannot be specified with ``ExpirationInDays``, ``ExpirationDate``,
        /// or ``TagFilters``.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether Amazon S3 will remove a delete marker without any noncurrent versions. If set to true, the delete marker will be removed if there are no noncurrent versions. This cannot be specified with ``ExpirationInDays``, ``ExpirationDate``, or ``TagFilters``.",
        SerializedName = @"expiredObjectDeleteMarker",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ExpiredObjectDeleteMarker { get; set; }
        /// <summary>Unique identifier for the rule. The value can't be longer than 255 characters.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Unique identifier for the rule. The value can't be longer than 255 characters.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string Id { get; set; }
        /// <summary>
        /// (Deprecated.) For buckets with versioning enabled (or suspended), specifies the time, in days, between when a new version
        /// of the object is uploaded to the bucket and when old versions of the object expire. When object versions expire, Amazon
        /// S3 permanently deletes them. If you specify a transition and expiration time, the expiration time must be later than the
        /// transition time.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"(Deprecated.) For buckets with versioning enabled (or suspended), specifies the time, in days, between when a new version of the object is uploaded to the bucket and when old versions of the object expire. When object versions expire, Amazon S3 permanently deletes them. If you specify a transition and expiration time, the expiration time must be later than the transition time.",
        SerializedName = @"noncurrentVersionExpirationInDays",
        PossibleTypes = new [] { typeof(int) })]
        int? NoncurrentVersionExpirationInDay { get; set; }
        /// <summary>
        /// Specifies how many noncurrent versions S3 will retain. If there are this many more recent noncurrent versions, S3 will
        /// take the associated action. For more information about noncurrent versions, see [Lifecycle configuration elements](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html)
        /// in the *Amazon S3 User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies how many noncurrent versions S3 will retain. If there are this many more recent noncurrent versions, S3 will take the associated action. For more information about noncurrent versions, see [Lifecycle configuration elements](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html) in the *Amazon S3 User Guide*.",
        SerializedName = @"newerNoncurrentVersions",
        PossibleTypes = new [] { typeof(int) })]
        int? NoncurrentVersionExpirationNewerNoncurrentVersion { get; set; }
        /// <summary>
        /// Specifies the number of days an object is noncurrent before S3 can perform the associated action. For information about
        /// the noncurrent days calculations, see [How Amazon S3 Calculates When an Object Became Noncurrent](https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations)
        /// in the *Amazon S3 User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the number of days an object is noncurrent before S3 can perform the associated action. For information about the noncurrent days calculations, see [How Amazon S3 Calculates When an Object Became Noncurrent](https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations) in the *Amazon S3 User Guide*.",
        SerializedName = @"noncurrentDays",
        PossibleTypes = new [] { typeof(int) })]
        int? NoncurrentVersionExpirationNoncurrentDay { get; set; }
        /// <summary>
        /// Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For information
        /// about the noncurrent days calculations, see [How Amazon S3 Calculates How Long an Object Has Been Noncurrent](https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations)
        /// in the *Amazon S3 User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For information about the noncurrent days calculations, see [How Amazon S3 Calculates How Long an Object Has Been Noncurrent](https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations) in the *Amazon S3 User Guide*.",
        SerializedName = @"transitionInDays",
        PossibleTypes = new [] { typeof(int) })]
        int? NoncurrentVersionTransitionInDay { get; set; }
        /// <summary>
        /// Specifies how many noncurrent versions S3 will retain. If there are this many more recent noncurrent versions, S3 will
        /// take the associated action. For more information about noncurrent versions, see [Lifecycle configuration elements](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html)
        /// in the *Amazon S3 User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies how many noncurrent versions S3 will retain. If there are this many more recent noncurrent versions, S3 will take the associated action. For more information about noncurrent versions, see [Lifecycle configuration elements](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html) in the *Amazon S3 User Guide*.",
        SerializedName = @"newerNoncurrentVersions",
        PossibleTypes = new [] { typeof(int) })]
        int? NoncurrentVersionTransitionNewerNoncurrentVersion { get; set; }
        /// <summary>The class of storage used to store the object.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The class of storage used to store the object.",
        SerializedName = @"storageClass",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.NoncurrentVersionTransitionStorageClass) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.NoncurrentVersionTransitionStorageClass? NoncurrentVersionTransitionStorageClass { get; set; }
        /// <summary>
        /// For buckets with versioning enabled (or suspended), one or more transition rules that specify when non-current objects
        /// transition to a specified storage class. If you specify a transition and expiration time, the expiration time must be
        /// later than the transition time. If you specify this property, don't specify the ``NoncurrentVersionTransition`` property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"For buckets with versioning enabled (or suspended), one or more transition rules that specify when non-current objects transition to a specified storage class. If you specify a transition and expiration time, the expiration time must be later than the transition time. If you specify this property, don't specify the ``NoncurrentVersionTransition`` property.",
        SerializedName = @"noncurrentVersionTransitions",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INoncurrentVersionTransition) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INoncurrentVersionTransition[] NoncurrentVersionTransitions { get; set; }
        /// <summary>
        /// Specifies the minimum object size in bytes for this rule to apply to. Objects must be larger than this value in bytes.
        /// For more information about size based rules, see [Lifecycle configuration using size-based rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-configuration-examples.html#lc-size-rules)
        /// in the *Amazon S3 User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the minimum object size in bytes for this rule to apply to. Objects must be larger than this value in bytes. For more information about size based rules, see [Lifecycle configuration using size-based rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-configuration-examples.html#lc-size-rules) in the *Amazon S3 User Guide*.",
        SerializedName = @"objectSizeGreaterThan",
        PossibleTypes = new [] { typeof(string) })]
        string ObjectSizeGreaterThan { get; set; }
        /// <summary>
        /// Specifies the maximum object size in bytes for this rule to apply to. Objects must be smaller than this value in bytes.
        /// For more information about sized based rules, see [Lifecycle configuration using size-based rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-configuration-examples.html#lc-size-rules)
        /// in the *Amazon S3 User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the maximum object size in bytes for this rule to apply to. Objects must be smaller than this value in bytes. For more information about sized based rules, see [Lifecycle configuration using size-based rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-configuration-examples.html#lc-size-rules) in the *Amazon S3 User Guide*.",
        SerializedName = @"objectSizeLessThan",
        PossibleTypes = new [] { typeof(string) })]
        string ObjectSizeLessThan { get; set; }
        /// <summary>
        /// Object key prefix that identifies one or more objects to which this rule applies. Replacement must be made for object
        /// keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML
        /// related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Object key prefix that identifies one or more objects to which this rule applies.  Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).",
        SerializedName = @"prefix",
        PossibleTypes = new [] { typeof(string) })]
        string Prefix { get; set; }
        /// <summary>
        /// If ``Enabled``, the rule is currently being applied. If ``Disabled``, the rule is not currently being applied.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If ``Enabled``, the rule is currently being applied. If ``Disabled``, the rule is not currently being applied.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.RuleStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.RuleStatus? Status { get; set; }
        /// <summary>
        /// Tags to use to identify a subset of objects to which the lifecycle rule applies.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Tags to use to identify a subset of objects to which the lifecycle rule applies.",
        SerializedName = @"tagFilters",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagFilter) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagFilter[] TagFilter { get; set; }
        /// <summary>
        /// Indicates when objects are transitioned to the specified storage class. The date value must be in ISO 8601 format. The
        /// time is always midnight UTC. The date value in ISO 8601 format. The timezone is always UTC. (YYYY-MM-DDThh:mm:ssZ)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates when objects are transitioned to the specified storage class. The date value must be in ISO 8601 format. The time is always midnight UTC. The date value in ISO 8601 format. The timezone is always UTC. (YYYY-MM-DDThh:mm:ssZ)",
        SerializedName = @"transitionDate",
        PossibleTypes = new [] { typeof(string) })]
        string TransitionDate { get; set; }
        /// <summary>
        /// Indicates the number of days after creation when objects are transitioned to the specified storage class. The value must
        /// be a positive integer.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates the number of days after creation when objects are transitioned to the specified storage class. The value must be a positive integer.",
        SerializedName = @"transitionInDays",
        PossibleTypes = new [] { typeof(int) })]
        int? TransitionInDay { get; set; }
        /// <summary>The storage class to which you want the object to transition.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The storage class to which you want the object to transition.",
        SerializedName = @"storageClass",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.TransitionStorageClass) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.TransitionStorageClass? TransitionStorageClass { get; set; }
        /// <summary>
        /// One or more transition rules that specify when an object transitions to a specified storage class. If you specify an expiration
        /// and transition time, you must use the same time unit for both properties (either in days or by date). The expiration time
        /// must also be later than the transition time. If you specify this property, don't specify the ``Transition`` property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"One or more transition rules that specify when an object transitions to a specified storage class. If you specify an expiration and transition time, you must use the same time unit for both properties (either in days or by date). The expiration time must also be later than the transition time. If you specify this property, don't specify the ``Transition`` property.",
        SerializedName = @"transitions",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITransition) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITransition[] Transitions { get; set; }

    }
    /// Definition of Rule
    internal partial interface IRuleInternal

    {
        /// <summary>
        /// Specifies a lifecycle rule that stops incomplete multipart uploads to an Amazon S3 bucket. Specifies the days since the
        /// initiation of an incomplete multipart upload that Amazon S3 will wait before permanently removing all parts of the upload.
        /// For more information, see [Stopping Incomplete Multipart Uploads Using a Bucket Lifecycle Policy](https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config)
        /// in the *Amazon S3 User Guide*.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAbortIncompleteMultipartUpload AbortIncompleteMultipartUpload { get; set; }
        /// <summary>
        /// Specifies the number of days after which Amazon S3 stops an incomplete multipart upload.
        /// </summary>
        int? AbortIncompleteMultipartUploadDaysAfterInitiation { get; set; }
        /// <summary>
        /// Indicates when objects are deleted from Amazon S3 and Amazon S3 Glacier. The date value must be in ISO 8601 format. The
        /// time is always midnight UTC. If you specify an expiration and transition time, you must use the same time unit for both
        /// properties (either in days or by date). The expiration time must also be later than the transition time. The date value
        /// in ISO 8601 format. The timezone is always UTC. (YYYY-MM-DDThh:mm:ssZ)
        /// </summary>
        string ExpirationDate { get; set; }
        /// <summary>
        /// Indicates the number of days after creation when objects are deleted from Amazon S3 and Amazon S3 Glacier. If you specify
        /// an expiration and transition time, you must use the same time unit for both properties (either in days or by date). The
        /// expiration time must also be later than the transition time.
        /// </summary>
        int? ExpirationInDay { get; set; }
        /// <summary>
        /// Indicates whether Amazon S3 will remove a delete marker without any noncurrent versions. If set to true, the delete marker
        /// will be removed if there are no noncurrent versions. This cannot be specified with ``ExpirationInDays``, ``ExpirationDate``,
        /// or ``TagFilters``.
        /// </summary>
        bool? ExpiredObjectDeleteMarker { get; set; }
        /// <summary>Unique identifier for the rule. The value can't be longer than 255 characters.</summary>
        string Id { get; set; }
        /// <summary>
        /// Specifies when noncurrent object versions expire. Upon expiration, S3 permanently deletes the noncurrent object versions.
        /// You set this lifecycle configuration action on a bucket that has versioning enabled (or suspended) to request that S3
        /// delete noncurrent object versions at a specific period in the object's lifetime. Specifies when noncurrent object versions
        /// expire. Upon expiration, S3 permanently deletes the noncurrent object versions. You set this lifecycle configuration action
        /// on a bucket that has versioning enabled (or suspended) to request that S3 delete noncurrent object versions at a specific
        /// period in the object's lifetime. For more information about setting a lifecycle rule configuration, see [AWS::S3::Bucket
        /// Rule](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-lifecycleconfig-rule.html).
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INoncurrentVersionExpiration NoncurrentVersionExpiration { get; set; }
        /// <summary>
        /// (Deprecated.) For buckets with versioning enabled (or suspended), specifies the time, in days, between when a new version
        /// of the object is uploaded to the bucket and when old versions of the object expire. When object versions expire, Amazon
        /// S3 permanently deletes them. If you specify a transition and expiration time, the expiration time must be later than the
        /// transition time.
        /// </summary>
        int? NoncurrentVersionExpirationInDay { get; set; }
        /// <summary>
        /// Specifies how many noncurrent versions S3 will retain. If there are this many more recent noncurrent versions, S3 will
        /// take the associated action. For more information about noncurrent versions, see [Lifecycle configuration elements](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html)
        /// in the *Amazon S3 User Guide*.
        /// </summary>
        int? NoncurrentVersionExpirationNewerNoncurrentVersion { get; set; }
        /// <summary>
        /// Specifies the number of days an object is noncurrent before S3 can perform the associated action. For information about
        /// the noncurrent days calculations, see [How Amazon S3 Calculates When an Object Became Noncurrent](https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations)
        /// in the *Amazon S3 User Guide*.
        /// </summary>
        int? NoncurrentVersionExpirationNoncurrentDay { get; set; }
        /// <summary>
        /// (Deprecated.) For buckets with versioning enabled (or suspended), specifies when non-current objects transition to a specified
        /// storage class. If you specify a transition and expiration time, the expiration time must be later than the transition
        /// time. If you specify this property, don't specify the ``NoncurrentVersionTransitions`` property. Container for the transition
        /// rule that describes when noncurrent objects transition to the ``STANDARD_IA``, ``ONEZONE_IA``, ``INTELLIGENT_TIERING``,
        /// ``GLACIER_IR``, ``GLACIER``, or ``DEEP_ARCHIVE`` storage class. If your bucket is versioning-enabled (or versioning is
        /// suspended), you can set this action to request that Amazon S3 transition noncurrent object versions to the ``STANDARD_IA``,
        /// ``ONEZONE_IA``, ``INTELLIGENT_TIERING``, ``GLACIER_IR``, ``GLACIER``, or ``DEEP_ARCHIVE`` storage class at a specific
        /// period in the object's lifetime. If you specify this property, don't specify the ``NoncurrentVersionTransitions`` property.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INoncurrentVersionTransition NoncurrentVersionTransition { get; set; }
        /// <summary>
        /// Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For information
        /// about the noncurrent days calculations, see [How Amazon S3 Calculates How Long an Object Has Been Noncurrent](https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations)
        /// in the *Amazon S3 User Guide*.
        /// </summary>
        int? NoncurrentVersionTransitionInDay { get; set; }
        /// <summary>
        /// Specifies how many noncurrent versions S3 will retain. If there are this many more recent noncurrent versions, S3 will
        /// take the associated action. For more information about noncurrent versions, see [Lifecycle configuration elements](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html)
        /// in the *Amazon S3 User Guide*.
        /// </summary>
        int? NoncurrentVersionTransitionNewerNoncurrentVersion { get; set; }
        /// <summary>The class of storage used to store the object.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.NoncurrentVersionTransitionStorageClass? NoncurrentVersionTransitionStorageClass { get; set; }
        /// <summary>
        /// For buckets with versioning enabled (or suspended), one or more transition rules that specify when non-current objects
        /// transition to a specified storage class. If you specify a transition and expiration time, the expiration time must be
        /// later than the transition time. If you specify this property, don't specify the ``NoncurrentVersionTransition`` property.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INoncurrentVersionTransition[] NoncurrentVersionTransitions { get; set; }
        /// <summary>
        /// Specifies the minimum object size in bytes for this rule to apply to. Objects must be larger than this value in bytes.
        /// For more information about size based rules, see [Lifecycle configuration using size-based rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-configuration-examples.html#lc-size-rules)
        /// in the *Amazon S3 User Guide*.
        /// </summary>
        string ObjectSizeGreaterThan { get; set; }
        /// <summary>
        /// Specifies the maximum object size in bytes for this rule to apply to. Objects must be smaller than this value in bytes.
        /// For more information about sized based rules, see [Lifecycle configuration using size-based rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-configuration-examples.html#lc-size-rules)
        /// in the *Amazon S3 User Guide*.
        /// </summary>
        string ObjectSizeLessThan { get; set; }
        /// <summary>
        /// Object key prefix that identifies one or more objects to which this rule applies. Replacement must be made for object
        /// keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML
        /// related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        /// </summary>
        string Prefix { get; set; }
        /// <summary>
        /// If ``Enabled``, the rule is currently being applied. If ``Disabled``, the rule is not currently being applied.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.RuleStatus? Status { get; set; }
        /// <summary>
        /// Tags to use to identify a subset of objects to which the lifecycle rule applies.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagFilter[] TagFilter { get; set; }
        /// <summary>
        /// (Deprecated.) Specifies when an object transitions to a specified storage class. If you specify an expiration and transition
        /// time, you must use the same time unit for both properties (either in days or by date). The expiration time must also be
        /// later than the transition time. If you specify this property, don't specify the ``Transitions`` property. Specifies when
        /// an object transitions to a specified storage class. For more information about Amazon S3 lifecycle configuration rules,
        /// see [Transitioning Objects Using Amazon S3 Lifecycle](https://docs.aws.amazon.com/AmazonS3/latest/dev/lifecycle-transition-general-considerations.html)
        /// in the *Amazon S3 User Guide*.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITransition Transition { get; set; }
        /// <summary>
        /// Indicates when objects are transitioned to the specified storage class. The date value must be in ISO 8601 format. The
        /// time is always midnight UTC. The date value in ISO 8601 format. The timezone is always UTC. (YYYY-MM-DDThh:mm:ssZ)
        /// </summary>
        string TransitionDate { get; set; }
        /// <summary>
        /// Indicates the number of days after creation when objects are transitioned to the specified storage class. The value must
        /// be a positive integer.
        /// </summary>
        int? TransitionInDay { get; set; }
        /// <summary>The storage class to which you want the object to transition.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.TransitionStorageClass? TransitionStorageClass { get; set; }
        /// <summary>
        /// One or more transition rules that specify when an object transitions to a specified storage class. If you specify an expiration
        /// and transition time, you must use the same time unit for both properties (either in days or by date). The expiration time
        /// must also be later than the transition time. If you specify this property, don't specify the ``Transition`` property.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITransition[] Transitions { get; set; }

    }
}