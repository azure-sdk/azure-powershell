// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.PowerShell;

    /// <summary>Definition of ClusterConfig</summary>
    [System.ComponentModel.TypeConverter(typeof(ClusterConfigTypeConverter))]
    public partial class ClusterConfig
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ClusterConfig"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal ClusterConfig(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("ColdStorageOption"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).ColdStorageOption = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IColdStorageOptions) content.GetValueForProperty("ColdStorageOption",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).ColdStorageOption, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ColdStorageOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("DedicatedMasterType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).DedicatedMasterType = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IOpenSearchPartitionInstanceTypeEnumValue) content.GetValueForProperty("DedicatedMasterType",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).DedicatedMasterType, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.OpenSearchPartitionInstanceTypeEnumValueTypeConverter.ConvertFrom);
            }
            if (content.Contains("InstanceType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).InstanceType = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IOpenSearchPartitionInstanceTypeEnumValue) content.GetValueForProperty("InstanceType",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).InstanceType, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.OpenSearchPartitionInstanceTypeEnumValueTypeConverter.ConvertFrom);
            }
            if (content.Contains("WarmType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).WarmType = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IOpenSearchWarmPartitionInstanceTypeEnumValue) content.GetValueForProperty("WarmType",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).WarmType, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.OpenSearchWarmPartitionInstanceTypeEnumValueTypeConverter.ConvertFrom);
            }
            if (content.Contains("ZoneAwarenessConfig"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).ZoneAwarenessConfig = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IZoneAwarenessConfig) content.GetValueForProperty("ZoneAwarenessConfig",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).ZoneAwarenessConfig, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ZoneAwarenessConfigTypeConverter.ConvertFrom);
            }
            if (content.Contains("DedicatedMasterCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).DedicatedMasterCount = (int?) content.GetValueForProperty("DedicatedMasterCount",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).DedicatedMasterCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedMasterEnabled"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).DedicatedMasterEnabled = (bool?) content.GetValueForProperty("DedicatedMasterEnabled",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).DedicatedMasterEnabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("InstanceCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).InstanceCount = (int?) content.GetValueForProperty("InstanceCount",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).InstanceCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("MultiAzWithStandbyEnabled"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).MultiAzWithStandbyEnabled = (bool?) content.GetValueForProperty("MultiAzWithStandbyEnabled",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).MultiAzWithStandbyEnabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("WarmCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).WarmCount = (int?) content.GetValueForProperty("WarmCount",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).WarmCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("WarmEnabled"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).WarmEnabled = (bool?) content.GetValueForProperty("WarmEnabled",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).WarmEnabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ZoneAwarenessEnabled"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).ZoneAwarenessEnabled = (bool?) content.GetValueForProperty("ZoneAwarenessEnabled",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).ZoneAwarenessEnabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ColdStorageOptionEnabled"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).ColdStorageOptionEnabled = (bool?) content.GetValueForProperty("ColdStorageOptionEnabled",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).ColdStorageOptionEnabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("DedicatedMasterTypeValue"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).DedicatedMasterTypeValue = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.OpenSearchPartitionInstanceType?) content.GetValueForProperty("DedicatedMasterTypeValue",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).DedicatedMasterTypeValue, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.OpenSearchPartitionInstanceType.CreateFrom);
            }
            if (content.Contains("InstanceTypeValue"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).InstanceTypeValue = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.OpenSearchPartitionInstanceType?) content.GetValueForProperty("InstanceTypeValue",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).InstanceTypeValue, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.OpenSearchPartitionInstanceType.CreateFrom);
            }
            if (content.Contains("WarmTypeValue"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).WarmTypeValue = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.OpenSearchWarmPartitionInstanceType?) content.GetValueForProperty("WarmTypeValue",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).WarmTypeValue, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.OpenSearchWarmPartitionInstanceType.CreateFrom);
            }
            if (content.Contains("ZoneAwarenessConfigAvailabilityZoneCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).ZoneAwarenessConfigAvailabilityZoneCount = (int?) content.GetValueForProperty("ZoneAwarenessConfigAvailabilityZoneCount",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).ZoneAwarenessConfigAvailabilityZoneCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ClusterConfig"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal ClusterConfig(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("ColdStorageOption"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).ColdStorageOption = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IColdStorageOptions) content.GetValueForProperty("ColdStorageOption",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).ColdStorageOption, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ColdStorageOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("DedicatedMasterType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).DedicatedMasterType = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IOpenSearchPartitionInstanceTypeEnumValue) content.GetValueForProperty("DedicatedMasterType",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).DedicatedMasterType, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.OpenSearchPartitionInstanceTypeEnumValueTypeConverter.ConvertFrom);
            }
            if (content.Contains("InstanceType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).InstanceType = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IOpenSearchPartitionInstanceTypeEnumValue) content.GetValueForProperty("InstanceType",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).InstanceType, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.OpenSearchPartitionInstanceTypeEnumValueTypeConverter.ConvertFrom);
            }
            if (content.Contains("WarmType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).WarmType = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IOpenSearchWarmPartitionInstanceTypeEnumValue) content.GetValueForProperty("WarmType",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).WarmType, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.OpenSearchWarmPartitionInstanceTypeEnumValueTypeConverter.ConvertFrom);
            }
            if (content.Contains("ZoneAwarenessConfig"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).ZoneAwarenessConfig = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IZoneAwarenessConfig) content.GetValueForProperty("ZoneAwarenessConfig",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).ZoneAwarenessConfig, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ZoneAwarenessConfigTypeConverter.ConvertFrom);
            }
            if (content.Contains("DedicatedMasterCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).DedicatedMasterCount = (int?) content.GetValueForProperty("DedicatedMasterCount",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).DedicatedMasterCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("DedicatedMasterEnabled"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).DedicatedMasterEnabled = (bool?) content.GetValueForProperty("DedicatedMasterEnabled",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).DedicatedMasterEnabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("InstanceCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).InstanceCount = (int?) content.GetValueForProperty("InstanceCount",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).InstanceCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("MultiAzWithStandbyEnabled"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).MultiAzWithStandbyEnabled = (bool?) content.GetValueForProperty("MultiAzWithStandbyEnabled",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).MultiAzWithStandbyEnabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("WarmCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).WarmCount = (int?) content.GetValueForProperty("WarmCount",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).WarmCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("WarmEnabled"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).WarmEnabled = (bool?) content.GetValueForProperty("WarmEnabled",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).WarmEnabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ZoneAwarenessEnabled"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).ZoneAwarenessEnabled = (bool?) content.GetValueForProperty("ZoneAwarenessEnabled",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).ZoneAwarenessEnabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("ColdStorageOptionEnabled"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).ColdStorageOptionEnabled = (bool?) content.GetValueForProperty("ColdStorageOptionEnabled",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).ColdStorageOptionEnabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("DedicatedMasterTypeValue"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).DedicatedMasterTypeValue = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.OpenSearchPartitionInstanceType?) content.GetValueForProperty("DedicatedMasterTypeValue",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).DedicatedMasterTypeValue, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.OpenSearchPartitionInstanceType.CreateFrom);
            }
            if (content.Contains("InstanceTypeValue"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).InstanceTypeValue = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.OpenSearchPartitionInstanceType?) content.GetValueForProperty("InstanceTypeValue",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).InstanceTypeValue, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.OpenSearchPartitionInstanceType.CreateFrom);
            }
            if (content.Contains("WarmTypeValue"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).WarmTypeValue = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.OpenSearchWarmPartitionInstanceType?) content.GetValueForProperty("WarmTypeValue",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).WarmTypeValue, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.OpenSearchWarmPartitionInstanceType.CreateFrom);
            }
            if (content.Contains("ZoneAwarenessConfigAvailabilityZoneCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).ZoneAwarenessConfigAvailabilityZoneCount = (int?) content.GetValueForProperty("ZoneAwarenessConfigAvailabilityZoneCount",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal)this).ZoneAwarenessConfigAvailabilityZoneCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ClusterConfig"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfig" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfig DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new ClusterConfig(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ClusterConfig"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfig" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfig DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new ClusterConfig(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="ClusterConfig" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="ClusterConfig" /> model class.</returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfig FromJsonString(string jsonText) => FromJson(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.SerializationMode.IncludeAll)?.ToString();
    }
    /// Definition of ClusterConfig
    [System.ComponentModel.TypeConverter(typeof(ClusterConfigTypeConverter))]
    public partial interface IClusterConfig

    {

    }
}