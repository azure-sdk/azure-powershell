// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>A Microsoft.AwsConnector resource</summary>
    public partial class EcsCluster :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsCluster,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterInternal,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IValidates,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IHeaderSerializable
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResource __trackedResource = new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.TrackedResource();

        /// <summary>Amazon Resource Name (ARN)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string Arn { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).Arn; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).Arn = value ?? null; }

        /// <summary>Property arn</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwPropertyArn { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).AwPropertyArn; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).AwPropertyArn = value ?? null; }

        /// <summary>
        /// The short name of one or more capacity providers to associate with the cluster. A capacity provider must be associated
        /// with a cluster before it can be included as part of the default capacity provider strategy of the cluster or used in a
        /// capacity provider strategy when calling the [CreateService](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateService.html)
        /// or [RunTask](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html) actions. If specifying a capacity
        /// provider that uses an Auto Scaling group, the capacity provider must be created but not associated with another cluster.
        /// New Auto Scaling group capacity providers can be created with the [CreateCapacityProvider](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateCapacityProvider.html)
        /// API operation. To use a FARGATElong capacity provider, specify either the ``FARGATE`` or ``FARGATE_SPOT`` capacity providers.
        /// The FARGATElong capacity providers are available to all accounts and only need to be associated with a cluster to be used.
        /// The [PutCapacityProvider](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutCapacityProvider.html) API
        /// operation is used to update the list of available capacity providers for a cluster after the cluster is created.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string[] AwPropertyCapacityProvider { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).AwPropertyCapacityProvider; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).AwPropertyCapacityProvider = value ?? null /* arrayOf */; }

        /// <summary>
        /// A user-generated string that you use to identify your cluster. If you don't specify a name, CFNlong generates a unique
        /// physical ID for the name.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwPropertyClusterName { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).AwPropertyClusterName; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).AwPropertyClusterName = value ?? null; }

        /// <summary>
        /// The settings to use when creating a cluster. This parameter is used to turn on CloudWatch Container Insights for a cluster.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterSettings[] AwPropertyClusterSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).AwPropertyClusterSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).AwPropertyClusterSetting = value ?? null /* arrayOf */; }

        /// <summary>
        /// The default capacity provider strategy for the cluster. When services or tasks are run in the cluster with no launch type
        /// or capacity provider strategy specified, the default capacity provider strategy is used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICapacityProviderStrategyItem[] AwPropertyDefaultCapacityProviderStrategy { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).AwPropertyDefaultCapacityProviderStrategy; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).AwPropertyDefaultCapacityProviderStrategy = value ?? null /* arrayOf */; }

        /// <summary>
        /// The metadata that you apply to the cluster to help you categorize and organize them. Each tag consists of a key and an
        /// optional value. You define both. The following basic restrictions apply to tags: + Maximum number of tags per resource
        /// - 50 + For each resource, each tag key must be unique, and each tag key can have only one value. + Maximum key length
        /// - 128 Unicode characters in UTF-8 + Maximum value length - 256 Unicode characters in UTF-8 + If your tagging schema is
        /// used across multiple services and resources, remember that other services may have restrictions on allowed characters.
        /// Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
        /// - = . _ : / @. + Tag keys and values are case-sensitive. + Do not use ``aws:``, ``AWS:``, or any upper or lowercase combination
        /// of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values
        /// with this prefix. Tags with this prefix do not count against your tags per resource limit.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated26[] AwPropertyTag { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).AwPropertyTag; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).AwPropertyTag = value ?? null /* arrayOf */; }

        /// <summary>AWS Account ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwsAccountId { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).AwsAccountId; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).AwsAccountId = value ?? null; }

        /// <summary>AWS Region</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwsRegion { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).AwsRegion; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).AwsRegion = value ?? null; }

        /// <summary>AWS Source Schema</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwsSourceSchema { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).AwsSourceSchema; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).AwsSourceSchema = value ?? null; }

        /// <summary>AWS Tags</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesAwsTags AwsTag { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).AwsTag; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).AwsTag = value ?? null /* model class */; }

        /// <summary>Backing field for <see cref="AzureAsyncOperation" /> property.</summary>
        private string _azureAsyncOperation;

        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string AzureAsyncOperation { get => this._azureAsyncOperation; set => this._azureAsyncOperation = value; }

        /// <summary>
        /// Specify an KMSlong key ID to encrypt the data between the local client and the container.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string ExecuteCommandConfigurationKmsKeyId { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).ExecuteCommandConfigurationKmsKeyId; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).ExecuteCommandConfigurationKmsKeyId = value ?? null; }

        /// <summary>
        /// The log setting to use for redirecting logs for your execute command results. The following log settings are available.
        /// + ``NONE``: The execute command session is not logged. + ``DEFAULT``: The ``awslogs`` configuration in the task definition
        /// is used. If no logging parameter is specified, it defaults to this value. If no ``awslogs`` log driver is configured in
        /// the task definition, the output won't be logged. + ``OVERRIDE``: Specify the logging details as a part of ``logConfiguration``.
        /// If the ``OVERRIDE`` logging option is specified, the ``logConfiguration`` is required.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string ExecuteCommandConfigurationLogging { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).ExecuteCommandConfigurationLogging; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).ExecuteCommandConfigurationLogging = value ?? null; }

        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).Id; }

        /// <summary>The geo-location where the resource lives</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public string Location { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResourceInternal)__trackedResource).Location; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResourceInternal)__trackedResource).Location = value ; }

        /// <summary>
        /// Determines whether to use encryption on the CloudWatch logs. If not specified, encryption will be off.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? LogConfigurationCloudWatchEncryptionEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).LogConfigurationCloudWatchEncryptionEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).LogConfigurationCloudWatchEncryptionEnabled = value ?? default(bool); }

        /// <summary>
        /// The name of the CloudWatch log group to send logs to. The CloudWatch log group must already be created.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string LogConfigurationCloudWatchLogGroupName { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).LogConfigurationCloudWatchLogGroupName; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).LogConfigurationCloudWatchLogGroupName = value ?? null; }

        /// <summary>
        /// The name of the S3 bucket to send logs to. The S3 bucket must already be created.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string LogConfigurationS3BucketName { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).LogConfigurationS3BucketName; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).LogConfigurationS3BucketName = value ?? null; }

        /// <summary>
        /// Determines whether to use encryption on the S3 logs. If not specified, encryption is not used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? LogConfigurationS3EncryptionEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).LogConfigurationS3EncryptionEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).LogConfigurationS3EncryptionEnabled = value ?? default(bool); }

        /// <summary>An optional folder in the S3 bucket to place logs in.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string LogConfigurationS3KeyPrefix { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).LogConfigurationS3KeyPrefix; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).LogConfigurationS3KeyPrefix = value ?? null; }

        /// <summary>Internal Acessors for AwPropertyConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfiguration Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterInternal.AwPropertyConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).AwPropertyConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).AwPropertyConfiguration = value; }

        /// <summary>Internal Acessors for AwPropertyServiceConnectDefault</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceConnectDefaults Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterInternal.AwPropertyServiceConnectDefault { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).AwPropertyServiceConnectDefault; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).AwPropertyServiceConnectDefault = value; }

        /// <summary>Internal Acessors for AwsProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterProperties Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterInternal.AwsProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).AwsProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).AwsProperty = value; }

        /// <summary>Internal Acessors for ConfigurationExecuteCommandConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IExecuteCommandConfiguration Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterInternal.ConfigurationExecuteCommandConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).ConfigurationExecuteCommandConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).ConfigurationExecuteCommandConfiguration = value; }

        /// <summary>Internal Acessors for ExecuteCommandConfigurationLogConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IExecuteCommandLogConfiguration Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterInternal.ExecuteCommandConfigurationLogConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).ExecuteCommandConfigurationLogConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).ExecuteCommandConfigurationLogConfiguration = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterProperties Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.EcsClusterProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).ProvisioningState = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).Name = value; }

        /// <summary>Internal Acessors for SystemData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ISystemData Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal.SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemData; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemData = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).Type = value; }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).Name; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterProperties _property;

        /// <summary>The resource-specific properties for this resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.EcsClusterProperties()); set => this._property = value; }

        /// <summary>The status of the last operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).ProvisioningState; }

        /// <summary>Public Cloud Connectors Resource ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string PublicCloudConnectorsResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).PublicCloudConnectorsResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).PublicCloudConnectorsResourceId = value ?? null; }

        /// <summary>Public Cloud Resource Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string PublicCloudResourceName { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).PublicCloudResourceName; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).PublicCloudResourceName = value ?? null; }

        /// <summary>Backing field for <see cref="RetryAfter" /> property.</summary>
        private int? _retryAfter;

        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? RetryAfter { get => this._retryAfter; set => this._retryAfter = value; }

        /// <summary>
        /// The namespace name or full Amazon Resource Name (ARN) of the CMAPlong namespace that's used when you create a service
        /// and don't specify a Service Connect configuration. The namespace name can include up to 1024 characters. The name is case-sensitive.
        /// The name can't include hyphens (-), tilde (~), greater than (>), less than (<), or slash (/). If you enter an existing
        /// namespace name or ARN, then that namespace will be used. Any namespace type is supported. The namespace must be in this
        /// account and this AWS Region. If you enter a new name, a CMAPlong namespace will be created. Amazon ECS creates a CMAP
        /// namespace with the 'API calls' method of instance discovery only. This instance discovery method is the 'HTTP' namespace
        /// type in the CLIlong. Other types of instance discovery aren't used by Service Connect. If you update the cluster with
        /// an empty string ``''`` for the namespace name, the cluster configuration for Service Connect is removed. Note that the
        /// namespace will remain in CMAP and must be deleted separately. For more information about CMAPlong, see [Working with Services](https://docs.aws.amazon.com/cloud-map/latest/dg/working-with-services.html)
        /// in the *Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string ServiceConnectDefaultNamespace { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).ServiceConnectDefaultNamespace; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesInternal)Property).ServiceConnectDefaultNamespace = value ?? null; }

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ISystemData SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemData; }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataCreatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataCreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public string SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataCreatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataCreatedBy = value ?? null; }

        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CreatedByType? SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataCreatedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataCreatedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CreatedByType)""); }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataLastModifiedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataLastModifiedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public string SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataLastModifiedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataLastModifiedBy = value ?? null; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CreatedByType? SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataLastModifiedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataLastModifiedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CreatedByType)""); }

        /// <summary>Resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResourceTags Tag { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResourceInternal)__trackedResource).Tag; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResourceInternal)__trackedResource).Tag = value ?? null /* model class */; }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).Type; }

        /// <summary>Creates an new <see cref="EcsCluster" /> instance.</summary>
        public EcsCluster()
        {

        }

        /// <param name="headers"></param>
        void Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IHeaderSerializable.ReadHeaders(global::System.Net.Http.Headers.HttpResponseHeaders headers)
        {
            if (headers.TryGetValues("Azure-AsyncOperation", out var __azureAsyncOperationHeader0))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterInternal)this).AzureAsyncOperation = System.Linq.Enumerable.FirstOrDefault(__azureAsyncOperationHeader0) is string __headerAzureAsyncOperationHeader0 ? __headerAzureAsyncOperationHeader0 : (string)null;
            }
            if (headers.TryGetValues("Retry-After", out var __retryAfterHeader1))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterInternal)this).RetryAfter = System.Linq.Enumerable.FirstOrDefault(__retryAfterHeader1) is string __headerRetryAfterHeader1 ? int.TryParse( __headerRetryAfterHeader1, out int __headerRetryAfterHeader1Value ) ? __headerRetryAfterHeader1Value : default(int?) : default(int?);
            }
        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__trackedResource), __trackedResource);
            await eventListener.AssertObjectIsValid(nameof(__trackedResource), __trackedResource);
        }
    }
    /// A Microsoft.AwsConnector resource
    public partial interface IEcsCluster :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResource
    {
        /// <summary>Amazon Resource Name (ARN)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Amazon Resource Name (ARN)",
        SerializedName = @"arn",
        PossibleTypes = new [] { typeof(string) })]
        string Arn { get; set; }
        /// <summary>Property arn</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property arn",
        SerializedName = @"arn",
        PossibleTypes = new [] { typeof(string) })]
        string AwPropertyArn { get; set; }
        /// <summary>
        /// The short name of one or more capacity providers to associate with the cluster. A capacity provider must be associated
        /// with a cluster before it can be included as part of the default capacity provider strategy of the cluster or used in a
        /// capacity provider strategy when calling the [CreateService](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateService.html)
        /// or [RunTask](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html) actions. If specifying a capacity
        /// provider that uses an Auto Scaling group, the capacity provider must be created but not associated with another cluster.
        /// New Auto Scaling group capacity providers can be created with the [CreateCapacityProvider](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateCapacityProvider.html)
        /// API operation. To use a FARGATElong capacity provider, specify either the ``FARGATE`` or ``FARGATE_SPOT`` capacity providers.
        /// The FARGATElong capacity providers are available to all accounts and only need to be associated with a cluster to be used.
        /// The [PutCapacityProvider](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutCapacityProvider.html) API
        /// operation is used to update the list of available capacity providers for a cluster after the cluster is created.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The short name of one or more capacity providers to associate with the cluster. A capacity provider must be associated with a cluster before it can be included as part of the default capacity provider strategy of the cluster or used in a capacity provider strategy when calling the [CreateService](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateService.html) or [RunTask](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html) actions. If specifying a capacity provider that uses an Auto Scaling group, the capacity provider must be created but not associated with another cluster. New Auto Scaling group capacity providers can be created with the [CreateCapacityProvider](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateCapacityProvider.html) API operation. To use a FARGATElong capacity provider, specify either the ``FARGATE`` or ``FARGATE_SPOT`` capacity providers. The FARGATElong capacity providers are available to all accounts and only need to be associated with a cluster to be used. The [PutCapacityProvider](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutCapacityProvider.html) API operation is used to update the list of available capacity providers for a cluster after the cluster is created.",
        SerializedName = @"capacityProviders",
        PossibleTypes = new [] { typeof(string) })]
        string[] AwPropertyCapacityProvider { get; set; }
        /// <summary>
        /// A user-generated string that you use to identify your cluster. If you don't specify a name, CFNlong generates a unique
        /// physical ID for the name.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A user-generated string that you use to identify your cluster. If you don't specify a name, CFNlong generates a unique physical ID for the name.",
        SerializedName = @"clusterName",
        PossibleTypes = new [] { typeof(string) })]
        string AwPropertyClusterName { get; set; }
        /// <summary>
        /// The settings to use when creating a cluster. This parameter is used to turn on CloudWatch Container Insights for a cluster.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The settings to use when creating a cluster. This parameter is used to turn on CloudWatch Container Insights for a cluster.",
        SerializedName = @"clusterSettings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterSettings) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterSettings[] AwPropertyClusterSetting { get; set; }
        /// <summary>
        /// The default capacity provider strategy for the cluster. When services or tasks are run in the cluster with no launch type
        /// or capacity provider strategy specified, the default capacity provider strategy is used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default capacity provider strategy for the cluster. When services or tasks are run in the cluster with no launch type or capacity provider strategy specified, the default capacity provider strategy is used.",
        SerializedName = @"defaultCapacityProviderStrategy",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICapacityProviderStrategyItem) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICapacityProviderStrategyItem[] AwPropertyDefaultCapacityProviderStrategy { get; set; }
        /// <summary>
        /// The metadata that you apply to the cluster to help you categorize and organize them. Each tag consists of a key and an
        /// optional value. You define both. The following basic restrictions apply to tags: + Maximum number of tags per resource
        /// - 50 + For each resource, each tag key must be unique, and each tag key can have only one value. + Maximum key length
        /// - 128 Unicode characters in UTF-8 + Maximum value length - 256 Unicode characters in UTF-8 + If your tagging schema is
        /// used across multiple services and resources, remember that other services may have restrictions on allowed characters.
        /// Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
        /// - = . _ : / @. + Tag keys and values are case-sensitive. + Do not use ``aws:``, ``AWS:``, or any upper or lowercase combination
        /// of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values
        /// with this prefix. Tags with this prefix do not count against your tags per resource limit.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The metadata that you apply to the cluster to help you categorize and organize them. Each tag consists of a key and an optional value. You define both. The following basic restrictions apply to tags:  +  Maximum number of tags per resource - 50  +  For each resource, each tag key must be unique, and each tag key can have only one value.  +  Maximum key length - 128 Unicode characters in UTF-8  +  Maximum value length - 256 Unicode characters in UTF-8  +  If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.  +  Tag keys and values are case-sensitive.  +  Do not use ``aws:``, ``AWS:``, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated26) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated26[] AwPropertyTag { get; set; }
        /// <summary>AWS Account ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Account ID",
        SerializedName = @"awsAccountId",
        PossibleTypes = new [] { typeof(string) })]
        string AwsAccountId { get; set; }
        /// <summary>AWS Region</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Region",
        SerializedName = @"awsRegion",
        PossibleTypes = new [] { typeof(string) })]
        string AwsRegion { get; set; }
        /// <summary>AWS Source Schema</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Source Schema",
        SerializedName = @"awsSourceSchema",
        PossibleTypes = new [] { typeof(string) })]
        string AwsSourceSchema { get; set; }
        /// <summary>AWS Tags</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Tags",
        SerializedName = @"awsTags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesAwsTags) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesAwsTags AwsTag { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"Azure-AsyncOperation",
        PossibleTypes = new [] { typeof(string) })]
        string AzureAsyncOperation { get; set; }
        /// <summary>
        /// Specify an KMSlong key ID to encrypt the data between the local client and the container.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specify an KMSlong key ID to encrypt the data between the local client and the container.",
        SerializedName = @"kmsKeyId",
        PossibleTypes = new [] { typeof(string) })]
        string ExecuteCommandConfigurationKmsKeyId { get; set; }
        /// <summary>
        /// The log setting to use for redirecting logs for your execute command results. The following log settings are available.
        /// + ``NONE``: The execute command session is not logged. + ``DEFAULT``: The ``awslogs`` configuration in the task definition
        /// is used. If no logging parameter is specified, it defaults to this value. If no ``awslogs`` log driver is configured in
        /// the task definition, the output won't be logged. + ``OVERRIDE``: Specify the logging details as a part of ``logConfiguration``.
        /// If the ``OVERRIDE`` logging option is specified, the ``logConfiguration`` is required.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The log setting to use for redirecting logs for your execute command results. The following log settings are available.  +   ``NONE``: The execute command session is not logged.  +   ``DEFAULT``: The ``awslogs`` configuration in the task definition is used. If no logging parameter is specified, it defaults to this value. If no ``awslogs`` log driver is configured in the task definition, the output won't be logged.  +   ``OVERRIDE``: Specify the logging details as a part of ``logConfiguration``. If the ``OVERRIDE`` logging option is specified, the ``logConfiguration`` is required.",
        SerializedName = @"logging",
        PossibleTypes = new [] { typeof(string) })]
        string ExecuteCommandConfigurationLogging { get; set; }
        /// <summary>
        /// Determines whether to use encryption on the CloudWatch logs. If not specified, encryption will be off.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Determines whether to use encryption on the CloudWatch logs. If not specified, encryption will be off.",
        SerializedName = @"cloudWatchEncryptionEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? LogConfigurationCloudWatchEncryptionEnabled { get; set; }
        /// <summary>
        /// The name of the CloudWatch log group to send logs to. The CloudWatch log group must already be created.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the CloudWatch log group to send logs to.  The CloudWatch log group must already be created.",
        SerializedName = @"cloudWatchLogGroupName",
        PossibleTypes = new [] { typeof(string) })]
        string LogConfigurationCloudWatchLogGroupName { get; set; }
        /// <summary>
        /// The name of the S3 bucket to send logs to. The S3 bucket must already be created.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the S3 bucket to send logs to.  The S3 bucket must already be created.",
        SerializedName = @"s3BucketName",
        PossibleTypes = new [] { typeof(string) })]
        string LogConfigurationS3BucketName { get; set; }
        /// <summary>
        /// Determines whether to use encryption on the S3 logs. If not specified, encryption is not used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Determines whether to use encryption on the S3 logs. If not specified, encryption is not used.",
        SerializedName = @"s3EncryptionEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? LogConfigurationS3EncryptionEnabled { get; set; }
        /// <summary>An optional folder in the S3 bucket to place logs in.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An optional folder in the S3 bucket to place logs in.",
        SerializedName = @"s3KeyPrefix",
        PossibleTypes = new [] { typeof(string) })]
        string LogConfigurationS3KeyPrefix { get; set; }
        /// <summary>The status of the last operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The status of the last operation.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? ProvisioningState { get;  }
        /// <summary>Public Cloud Connectors Resource ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Public Cloud Connectors Resource ID",
        SerializedName = @"publicCloudConnectorsResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string PublicCloudConnectorsResourceId { get; set; }
        /// <summary>Public Cloud Resource Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Public Cloud Resource Name",
        SerializedName = @"publicCloudResourceName",
        PossibleTypes = new [] { typeof(string) })]
        string PublicCloudResourceName { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"Retry-After",
        PossibleTypes = new [] { typeof(int) })]
        int? RetryAfter { get; set; }
        /// <summary>
        /// The namespace name or full Amazon Resource Name (ARN) of the CMAPlong namespace that's used when you create a service
        /// and don't specify a Service Connect configuration. The namespace name can include up to 1024 characters. The name is case-sensitive.
        /// The name can't include hyphens (-), tilde (~), greater than (>), less than (<), or slash (/). If you enter an existing
        /// namespace name or ARN, then that namespace will be used. Any namespace type is supported. The namespace must be in this
        /// account and this AWS Region. If you enter a new name, a CMAPlong namespace will be created. Amazon ECS creates a CMAP
        /// namespace with the 'API calls' method of instance discovery only. This instance discovery method is the 'HTTP' namespace
        /// type in the CLIlong. Other types of instance discovery aren't used by Service Connect. If you update the cluster with
        /// an empty string ``''`` for the namespace name, the cluster configuration for Service Connect is removed. Note that the
        /// namespace will remain in CMAP and must be deleted separately. For more information about CMAPlong, see [Working with Services](https://docs.aws.amazon.com/cloud-map/latest/dg/working-with-services.html)
        /// in the *Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The namespace name or full Amazon Resource Name (ARN) of the CMAPlong namespace that's used when you create a service and don't specify a Service Connect configuration. The namespace name can include up to 1024 characters. The name is case-sensitive. The name can't include hyphens (-), tilde (~), greater than (>), less than (<), or slash (/). If you enter an existing namespace name or ARN, then that namespace will be used. Any namespace type is supported. The namespace must be in this account and this AWS Region. If you enter a new name, a CMAPlong namespace will be created. Amazon ECS creates a CMAP namespace with the 'API calls' method of instance discovery only. This instance discovery method is the 'HTTP' namespace type in the CLIlong. Other types of instance discovery aren't used by Service Connect. If you update the cluster with an empty string ``''`` for the namespace name, the cluster configuration for Service Connect is removed. Note that the namespace will remain in CMAP and must be deleted separately. For more information about CMAPlong, see [Working with Services](https://docs.aws.amazon.com/cloud-map/latest/dg/working-with-services.html) in the *Developer Guide*.",
        SerializedName = @"namespace",
        PossibleTypes = new [] { typeof(string) })]
        string ServiceConnectDefaultNamespace { get; set; }

    }
    /// A Microsoft.AwsConnector resource
    internal partial interface IEcsClusterInternal :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResourceInternal
    {
        /// <summary>Amazon Resource Name (ARN)</summary>
        string Arn { get; set; }
        /// <summary>Property arn</summary>
        string AwPropertyArn { get; set; }
        /// <summary>
        /// The short name of one or more capacity providers to associate with the cluster. A capacity provider must be associated
        /// with a cluster before it can be included as part of the default capacity provider strategy of the cluster or used in a
        /// capacity provider strategy when calling the [CreateService](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateService.html)
        /// or [RunTask](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html) actions. If specifying a capacity
        /// provider that uses an Auto Scaling group, the capacity provider must be created but not associated with another cluster.
        /// New Auto Scaling group capacity providers can be created with the [CreateCapacityProvider](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateCapacityProvider.html)
        /// API operation. To use a FARGATElong capacity provider, specify either the ``FARGATE`` or ``FARGATE_SPOT`` capacity providers.
        /// The FARGATElong capacity providers are available to all accounts and only need to be associated with a cluster to be used.
        /// The [PutCapacityProvider](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutCapacityProvider.html) API
        /// operation is used to update the list of available capacity providers for a cluster after the cluster is created.
        /// </summary>
        string[] AwPropertyCapacityProvider { get; set; }
        /// <summary>
        /// A user-generated string that you use to identify your cluster. If you don't specify a name, CFNlong generates a unique
        /// physical ID for the name.
        /// </summary>
        string AwPropertyClusterName { get; set; }
        /// <summary>
        /// The settings to use when creating a cluster. This parameter is used to turn on CloudWatch Container Insights for a cluster.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterSettings[] AwPropertyClusterSetting { get; set; }
        /// <summary>
        /// The execute command configuration for the cluster. The execute command configuration for the cluster.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfiguration AwPropertyConfiguration { get; set; }
        /// <summary>
        /// The default capacity provider strategy for the cluster. When services or tasks are run in the cluster with no launch type
        /// or capacity provider strategy specified, the default capacity provider strategy is used.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICapacityProviderStrategyItem[] AwPropertyDefaultCapacityProviderStrategy { get; set; }
        /// <summary>
        /// Use this parameter to set a default Service Connect namespace. After you set a default Service Connect namespace, any
        /// new services with Service Connect turned on that are created in the cluster are added as client services in the namespace.
        /// This setting only applies to new services that set the ``enabled`` parameter to ``true`` in the ``ServiceConnectConfiguration``.
        /// You can set the namespace of each service individually in the ``ServiceConnectConfiguration`` to override this default
        /// parameter. Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect
        /// to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects
        /// logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect.
        /// For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html)
        /// in the *Amazon Elastic Container Service Developer Guide*. Use this parameter to set a default Service Connect namespace.
        /// After you set a default Service Connect namespace, any new services with Service Connect turned on that are created in
        /// the cluster are added as client services in the namespace. This setting only applies to new services that set the ``enabled``
        /// parameter to ``true`` in the ``ServiceConnectConfiguration``. You can set the namespace of each service individually in
        /// the ``ServiceConnectConfiguration`` to override this default parameter. Tasks that run in a namespace can use short names
        /// to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks
        /// connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that
        /// Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html)
        /// in the *Amazon Elastic Container Service Developer Guide*.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceConnectDefaults AwPropertyServiceConnectDefault { get; set; }
        /// <summary>
        /// The metadata that you apply to the cluster to help you categorize and organize them. Each tag consists of a key and an
        /// optional value. You define both. The following basic restrictions apply to tags: + Maximum number of tags per resource
        /// - 50 + For each resource, each tag key must be unique, and each tag key can have only one value. + Maximum key length
        /// - 128 Unicode characters in UTF-8 + Maximum value length - 256 Unicode characters in UTF-8 + If your tagging schema is
        /// used across multiple services and resources, remember that other services may have restrictions on allowed characters.
        /// Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
        /// - = . _ : / @. + Tag keys and values are case-sensitive. + Do not use ``aws:``, ``AWS:``, or any upper or lowercase combination
        /// of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values
        /// with this prefix. Tags with this prefix do not count against your tags per resource limit.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated26[] AwPropertyTag { get; set; }
        /// <summary>AWS Account ID</summary>
        string AwsAccountId { get; set; }
        /// <summary>AWS Properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterProperties AwsProperty { get; set; }
        /// <summary>AWS Region</summary>
        string AwsRegion { get; set; }
        /// <summary>AWS Source Schema</summary>
        string AwsSourceSchema { get; set; }
        /// <summary>AWS Tags</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterPropertiesAwsTags AwsTag { get; set; }

        string AzureAsyncOperation { get; set; }
        /// <summary>
        /// The details of the execute command configuration. The details of the execute command configuration.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IExecuteCommandConfiguration ConfigurationExecuteCommandConfiguration { get; set; }
        /// <summary>
        /// Specify an KMSlong key ID to encrypt the data between the local client and the container.
        /// </summary>
        string ExecuteCommandConfigurationKmsKeyId { get; set; }
        /// <summary>
        /// The log configuration for the results of the execute command actions. The logs can be sent to CloudWatch Logs or an Amazon
        /// S3 bucket. When ``logging=OVERRIDE`` is specified, a ``logConfiguration`` must be provided. The log configuration for
        /// the results of the execute command actions. The logs can be sent to CloudWatch Logs or an Amazon S3 bucket.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IExecuteCommandLogConfiguration ExecuteCommandConfigurationLogConfiguration { get; set; }
        /// <summary>
        /// The log setting to use for redirecting logs for your execute command results. The following log settings are available.
        /// + ``NONE``: The execute command session is not logged. + ``DEFAULT``: The ``awslogs`` configuration in the task definition
        /// is used. If no logging parameter is specified, it defaults to this value. If no ``awslogs`` log driver is configured in
        /// the task definition, the output won't be logged. + ``OVERRIDE``: Specify the logging details as a part of ``logConfiguration``.
        /// If the ``OVERRIDE`` logging option is specified, the ``logConfiguration`` is required.
        /// </summary>
        string ExecuteCommandConfigurationLogging { get; set; }
        /// <summary>
        /// Determines whether to use encryption on the CloudWatch logs. If not specified, encryption will be off.
        /// </summary>
        bool? LogConfigurationCloudWatchEncryptionEnabled { get; set; }
        /// <summary>
        /// The name of the CloudWatch log group to send logs to. The CloudWatch log group must already be created.
        /// </summary>
        string LogConfigurationCloudWatchLogGroupName { get; set; }
        /// <summary>
        /// The name of the S3 bucket to send logs to. The S3 bucket must already be created.
        /// </summary>
        string LogConfigurationS3BucketName { get; set; }
        /// <summary>
        /// Determines whether to use encryption on the S3 logs. If not specified, encryption is not used.
        /// </summary>
        bool? LogConfigurationS3EncryptionEnabled { get; set; }
        /// <summary>An optional folder in the S3 bucket to place logs in.</summary>
        string LogConfigurationS3KeyPrefix { get; set; }
        /// <summary>The resource-specific properties for this resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcsClusterProperties Property { get; set; }
        /// <summary>The status of the last operation.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? ProvisioningState { get; set; }
        /// <summary>Public Cloud Connectors Resource ID</summary>
        string PublicCloudConnectorsResourceId { get; set; }
        /// <summary>Public Cloud Resource Name</summary>
        string PublicCloudResourceName { get; set; }

        int? RetryAfter { get; set; }
        /// <summary>
        /// The namespace name or full Amazon Resource Name (ARN) of the CMAPlong namespace that's used when you create a service
        /// and don't specify a Service Connect configuration. The namespace name can include up to 1024 characters. The name is case-sensitive.
        /// The name can't include hyphens (-), tilde (~), greater than (>), less than (<), or slash (/). If you enter an existing
        /// namespace name or ARN, then that namespace will be used. Any namespace type is supported. The namespace must be in this
        /// account and this AWS Region. If you enter a new name, a CMAPlong namespace will be created. Amazon ECS creates a CMAP
        /// namespace with the 'API calls' method of instance discovery only. This instance discovery method is the 'HTTP' namespace
        /// type in the CLIlong. Other types of instance discovery aren't used by Service Connect. If you update the cluster with
        /// an empty string ``''`` for the namespace name, the cluster configuration for Service Connect is removed. Note that the
        /// namespace will remain in CMAP and must be deleted separately. For more information about CMAPlong, see [Working with Services](https://docs.aws.amazon.com/cloud-map/latest/dg/working-with-services.html)
        /// in the *Developer Guide*.
        /// </summary>
        string ServiceConnectDefaultNamespace { get; set; }

    }
}