// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.PowerShell;

    /// <summary>Definition of awsEksNodegroup</summary>
    [System.ComponentModel.TypeConverter(typeof(AwsEksNodegroupPropertiesTypeConverter))]
    public partial class AwsEksNodegroupProperties
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AwsEksNodegroupProperties"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal AwsEksNodegroupProperties(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("LaunchTemplate"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).LaunchTemplate = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILaunchTemplateSpecificationAutoGenerated) content.GetValueForProperty("LaunchTemplate",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).LaunchTemplate, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.LaunchTemplateSpecificationAutoGeneratedTypeConverter.ConvertFrom);
            }
            if (content.Contains("RemoteAccess"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).RemoteAccess = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IRemoteAccess) content.GetValueForProperty("RemoteAccess",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).RemoteAccess, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.RemoteAccessTypeConverter.ConvertFrom);
            }
            if (content.Contains("ScalingConfig"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).ScalingConfig = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IScalingConfig) content.GetValueForProperty("ScalingConfig",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).ScalingConfig, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ScalingConfigTypeConverter.ConvertFrom);
            }
            if (content.Contains("UpdateConfig"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).UpdateConfig = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IUpdateConfig) content.GetValueForProperty("UpdateConfig",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).UpdateConfig, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.UpdateConfigTypeConverter.ConvertFrom);
            }
            if (content.Contains("AmiType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).AmiType = (string) content.GetValueForProperty("AmiType",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).AmiType, global::System.Convert.ToString);
            }
            if (content.Contains("Arn"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).Arn = (string) content.GetValueForProperty("Arn",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).Arn, global::System.Convert.ToString);
            }
            if (content.Contains("CapacityType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).CapacityType = (string) content.GetValueForProperty("CapacityType",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).CapacityType, global::System.Convert.ToString);
            }
            if (content.Contains("ClusterName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).ClusterName = (string) content.GetValueForProperty("ClusterName",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).ClusterName, global::System.Convert.ToString);
            }
            if (content.Contains("DiskSize"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).DiskSize = (int?) content.GetValueForProperty("DiskSize",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).DiskSize, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("ForceUpdateEnabled"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).ForceUpdateEnabled = (bool?) content.GetValueForProperty("ForceUpdateEnabled",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).ForceUpdateEnabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("Id"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).Id = (string) content.GetValueForProperty("Id",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).Id, global::System.Convert.ToString);
            }
            if (content.Contains("InstanceType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).InstanceType = (string[]) content.GetValueForProperty("InstanceType",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).InstanceType, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("Label"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).Label = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesLabels) content.GetValueForProperty("Label",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).Label, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AwsEksNodegroupPropertiesLabelsTypeConverter.ConvertFrom);
            }
            if (content.Contains("NodeRole"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).NodeRole = (string) content.GetValueForProperty("NodeRole",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).NodeRole, global::System.Convert.ToString);
            }
            if (content.Contains("NodegroupName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).NodegroupName = (string) content.GetValueForProperty("NodegroupName",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).NodegroupName, global::System.Convert.ToString);
            }
            if (content.Contains("ReleaseVersion"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).ReleaseVersion = (string) content.GetValueForProperty("ReleaseVersion",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).ReleaseVersion, global::System.Convert.ToString);
            }
            if (content.Contains("Subnet"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).Subnet = (string[]) content.GetValueForProperty("Subnet",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).Subnet, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("Tag"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).Tag = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesTags) content.GetValueForProperty("Tag",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).Tag, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AwsEksNodegroupPropertiesTagsTypeConverter.ConvertFrom);
            }
            if (content.Contains("Taint"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).Taint = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITaint[]) content.GetValueForProperty("Taint",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).Taint, __y => TypeConverterExtensions.SelectToArray<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITaint>(__y, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.TaintTypeConverter.ConvertFrom));
            }
            if (content.Contains("Version"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).Version = (string) content.GetValueForProperty("Version",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).Version, global::System.Convert.ToString);
            }
            if (content.Contains("ScalingConfigDesiredSize"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).ScalingConfigDesiredSize = (int?) content.GetValueForProperty("ScalingConfigDesiredSize",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).ScalingConfigDesiredSize, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("ScalingConfigMaxSize"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).ScalingConfigMaxSize = (int?) content.GetValueForProperty("ScalingConfigMaxSize",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).ScalingConfigMaxSize, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("ScalingConfigMinSize"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).ScalingConfigMinSize = (int?) content.GetValueForProperty("ScalingConfigMinSize",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).ScalingConfigMinSize, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("UpdateConfigMaxUnavailable"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).UpdateConfigMaxUnavailable = (int?) content.GetValueForProperty("UpdateConfigMaxUnavailable",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).UpdateConfigMaxUnavailable, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LaunchTemplateId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).LaunchTemplateId = (string) content.GetValueForProperty("LaunchTemplateId",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).LaunchTemplateId, global::System.Convert.ToString);
            }
            if (content.Contains("LaunchTemplateName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).LaunchTemplateName = (string) content.GetValueForProperty("LaunchTemplateName",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).LaunchTemplateName, global::System.Convert.ToString);
            }
            if (content.Contains("LaunchTemplateVersion"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).LaunchTemplateVersion = (string) content.GetValueForProperty("LaunchTemplateVersion",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).LaunchTemplateVersion, global::System.Convert.ToString);
            }
            if (content.Contains("RemoteAccessEc2SshKey"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).RemoteAccessEc2SshKey = (string) content.GetValueForProperty("RemoteAccessEc2SshKey",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).RemoteAccessEc2SshKey, global::System.Convert.ToString);
            }
            if (content.Contains("RemoteAccessSourceSecurityGroup"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).RemoteAccessSourceSecurityGroup = (string[]) content.GetValueForProperty("RemoteAccessSourceSecurityGroup",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).RemoteAccessSourceSecurityGroup, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("UpdateConfigMaxUnavailablePercentage"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).UpdateConfigMaxUnavailablePercentage = (int?) content.GetValueForProperty("UpdateConfigMaxUnavailablePercentage",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).UpdateConfigMaxUnavailablePercentage, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AwsEksNodegroupProperties"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal AwsEksNodegroupProperties(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("LaunchTemplate"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).LaunchTemplate = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILaunchTemplateSpecificationAutoGenerated) content.GetValueForProperty("LaunchTemplate",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).LaunchTemplate, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.LaunchTemplateSpecificationAutoGeneratedTypeConverter.ConvertFrom);
            }
            if (content.Contains("RemoteAccess"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).RemoteAccess = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IRemoteAccess) content.GetValueForProperty("RemoteAccess",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).RemoteAccess, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.RemoteAccessTypeConverter.ConvertFrom);
            }
            if (content.Contains("ScalingConfig"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).ScalingConfig = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IScalingConfig) content.GetValueForProperty("ScalingConfig",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).ScalingConfig, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ScalingConfigTypeConverter.ConvertFrom);
            }
            if (content.Contains("UpdateConfig"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).UpdateConfig = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IUpdateConfig) content.GetValueForProperty("UpdateConfig",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).UpdateConfig, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.UpdateConfigTypeConverter.ConvertFrom);
            }
            if (content.Contains("AmiType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).AmiType = (string) content.GetValueForProperty("AmiType",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).AmiType, global::System.Convert.ToString);
            }
            if (content.Contains("Arn"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).Arn = (string) content.GetValueForProperty("Arn",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).Arn, global::System.Convert.ToString);
            }
            if (content.Contains("CapacityType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).CapacityType = (string) content.GetValueForProperty("CapacityType",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).CapacityType, global::System.Convert.ToString);
            }
            if (content.Contains("ClusterName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).ClusterName = (string) content.GetValueForProperty("ClusterName",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).ClusterName, global::System.Convert.ToString);
            }
            if (content.Contains("DiskSize"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).DiskSize = (int?) content.GetValueForProperty("DiskSize",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).DiskSize, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("ForceUpdateEnabled"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).ForceUpdateEnabled = (bool?) content.GetValueForProperty("ForceUpdateEnabled",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).ForceUpdateEnabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("Id"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).Id = (string) content.GetValueForProperty("Id",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).Id, global::System.Convert.ToString);
            }
            if (content.Contains("InstanceType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).InstanceType = (string[]) content.GetValueForProperty("InstanceType",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).InstanceType, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("Label"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).Label = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesLabels) content.GetValueForProperty("Label",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).Label, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AwsEksNodegroupPropertiesLabelsTypeConverter.ConvertFrom);
            }
            if (content.Contains("NodeRole"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).NodeRole = (string) content.GetValueForProperty("NodeRole",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).NodeRole, global::System.Convert.ToString);
            }
            if (content.Contains("NodegroupName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).NodegroupName = (string) content.GetValueForProperty("NodegroupName",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).NodegroupName, global::System.Convert.ToString);
            }
            if (content.Contains("ReleaseVersion"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).ReleaseVersion = (string) content.GetValueForProperty("ReleaseVersion",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).ReleaseVersion, global::System.Convert.ToString);
            }
            if (content.Contains("Subnet"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).Subnet = (string[]) content.GetValueForProperty("Subnet",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).Subnet, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("Tag"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).Tag = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesTags) content.GetValueForProperty("Tag",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).Tag, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AwsEksNodegroupPropertiesTagsTypeConverter.ConvertFrom);
            }
            if (content.Contains("Taint"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).Taint = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITaint[]) content.GetValueForProperty("Taint",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).Taint, __y => TypeConverterExtensions.SelectToArray<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITaint>(__y, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.TaintTypeConverter.ConvertFrom));
            }
            if (content.Contains("Version"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).Version = (string) content.GetValueForProperty("Version",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).Version, global::System.Convert.ToString);
            }
            if (content.Contains("ScalingConfigDesiredSize"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).ScalingConfigDesiredSize = (int?) content.GetValueForProperty("ScalingConfigDesiredSize",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).ScalingConfigDesiredSize, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("ScalingConfigMaxSize"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).ScalingConfigMaxSize = (int?) content.GetValueForProperty("ScalingConfigMaxSize",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).ScalingConfigMaxSize, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("ScalingConfigMinSize"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).ScalingConfigMinSize = (int?) content.GetValueForProperty("ScalingConfigMinSize",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).ScalingConfigMinSize, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("UpdateConfigMaxUnavailable"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).UpdateConfigMaxUnavailable = (int?) content.GetValueForProperty("UpdateConfigMaxUnavailable",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).UpdateConfigMaxUnavailable, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LaunchTemplateId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).LaunchTemplateId = (string) content.GetValueForProperty("LaunchTemplateId",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).LaunchTemplateId, global::System.Convert.ToString);
            }
            if (content.Contains("LaunchTemplateName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).LaunchTemplateName = (string) content.GetValueForProperty("LaunchTemplateName",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).LaunchTemplateName, global::System.Convert.ToString);
            }
            if (content.Contains("LaunchTemplateVersion"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).LaunchTemplateVersion = (string) content.GetValueForProperty("LaunchTemplateVersion",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).LaunchTemplateVersion, global::System.Convert.ToString);
            }
            if (content.Contains("RemoteAccessEc2SshKey"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).RemoteAccessEc2SshKey = (string) content.GetValueForProperty("RemoteAccessEc2SshKey",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).RemoteAccessEc2SshKey, global::System.Convert.ToString);
            }
            if (content.Contains("RemoteAccessSourceSecurityGroup"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).RemoteAccessSourceSecurityGroup = (string[]) content.GetValueForProperty("RemoteAccessSourceSecurityGroup",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).RemoteAccessSourceSecurityGroup, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("UpdateConfigMaxUnavailablePercentage"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).UpdateConfigMaxUnavailablePercentage = (int?) content.GetValueForProperty("UpdateConfigMaxUnavailablePercentage",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupPropertiesInternal)this).UpdateConfigMaxUnavailablePercentage, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AwsEksNodegroupProperties"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupProperties"
        /// />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupProperties DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new AwsEksNodegroupProperties(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AwsEksNodegroupProperties"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupProperties"
        /// />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupProperties DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new AwsEksNodegroupProperties(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="AwsEksNodegroupProperties" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="AwsEksNodegroupProperties" /> model class.</returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEksNodegroupProperties FromJsonString(string jsonText) => FromJson(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.SerializationMode.IncludeAll)?.ToString();
    }
    /// Definition of awsEksNodegroup
    [System.ComponentModel.TypeConverter(typeof(AwsEksNodegroupPropertiesTypeConverter))]
    public partial interface IAwsEksNodegroupProperties

    {

    }
}