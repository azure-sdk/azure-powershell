// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of IamPasswordPolicy</summary>
    public partial class IamPasswordPolicyProperties :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IIamPasswordPolicyProperties,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IIamPasswordPolicyPropertiesInternal
    {

        /// <summary>Backing field for <see cref="Arn" /> property.</summary>
        private string _arn;

        /// <summary>Amazon Resource Name (ARN)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string Arn { get => this._arn; set => this._arn = value; }

        /// <summary>
        /// <p>Specifies whether IAM users are allowed to change their own password. Gives IAM users permissions to <code>iam:ChangePassword</code>
        /// for only their user and to the <code>iam:GetAccountPasswordPolicy</code> action. This option does not attach a permissions
        /// policy to each user, rather the permissions are applied at the account-level for all users by IAM.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? AwPropertyAllowUsersToChangePassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsIamPasswordPolicyPropertiesInternal)AwsProperty).AllowUsersToChangePassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsIamPasswordPolicyPropertiesInternal)AwsProperty).AllowUsersToChangePassword = value ?? default(bool); }

        /// <summary>
        /// <p>Indicates whether passwords in the account expire. Returns true if <code>MaxPasswordAge</code> contains a value greater
        /// than 0. Returns false if MaxPasswordAge is 0 or not present.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? AwPropertyExpirePassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsIamPasswordPolicyPropertiesInternal)AwsProperty).ExpirePassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsIamPasswordPolicyPropertiesInternal)AwsProperty).ExpirePassword = value ?? default(bool); }

        /// <summary>
        /// <p>Specifies whether IAM users are prevented from setting a new password via the Amazon Web Services Management Console
        /// after their password has expired. The IAM user cannot access the console until an administrator resets the password. IAM
        /// users with <code>iam:ChangePassword</code> permission and active access keys can reset their own expired console password
        /// using the CLI or API.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? AwPropertyHardExpiry { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsIamPasswordPolicyPropertiesInternal)AwsProperty).HardExpiry; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsIamPasswordPolicyPropertiesInternal)AwsProperty).HardExpiry = value ?? default(bool); }

        /// <summary><p>The number of days that an IAM user password is valid.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public int? AwPropertyMaxPasswordAge { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsIamPasswordPolicyPropertiesInternal)AwsProperty).MaxPasswordAge; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsIamPasswordPolicyPropertiesInternal)AwsProperty).MaxPasswordAge = value ?? default(int); }

        /// <summary><p>Minimum length to require for IAM user passwords.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public int? AwPropertyMinimumPasswordLength { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsIamPasswordPolicyPropertiesInternal)AwsProperty).MinimumPasswordLength; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsIamPasswordPolicyPropertiesInternal)AwsProperty).MinimumPasswordLength = value ?? default(int); }

        /// <summary>
        /// <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public int? AwPropertyPasswordReusePrevention { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsIamPasswordPolicyPropertiesInternal)AwsProperty).PasswordReusePrevention; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsIamPasswordPolicyPropertiesInternal)AwsProperty).PasswordReusePrevention = value ?? default(int); }

        /// <summary>
        /// <p>Specifies whether IAM user passwords must contain at least one lowercase character (a to z).</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? AwPropertyRequireLowercaseCharacter { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsIamPasswordPolicyPropertiesInternal)AwsProperty).RequireLowercaseCharacter; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsIamPasswordPolicyPropertiesInternal)AwsProperty).RequireLowercaseCharacter = value ?? default(bool); }

        /// <summary>
        /// <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? AwPropertyRequireNumber { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsIamPasswordPolicyPropertiesInternal)AwsProperty).RequireNumber; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsIamPasswordPolicyPropertiesInternal)AwsProperty).RequireNumber = value ?? default(bool); }

        /// <summary>
        /// <p>Specifies whether IAM user passwords must contain at least one of the following symbols:</p> <p>! @ # $ % ^ &amp; *
        /// ( ) _ + - = [ ] { } | '</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? AwPropertyRequireSymbol { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsIamPasswordPolicyPropertiesInternal)AwsProperty).RequireSymbol; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsIamPasswordPolicyPropertiesInternal)AwsProperty).RequireSymbol = value ?? default(bool); }

        /// <summary>
        /// <p>Specifies whether IAM user passwords must contain at least one uppercase character (A to Z).</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? AwPropertyRequireUppercaseCharacter { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsIamPasswordPolicyPropertiesInternal)AwsProperty).RequireUppercaseCharacter; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsIamPasswordPolicyPropertiesInternal)AwsProperty).RequireUppercaseCharacter = value ?? default(bool); }

        /// <summary>Backing field for <see cref="AwsAccountId" /> property.</summary>
        private string _awsAccountId;

        /// <summary>AWS Account ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string AwsAccountId { get => this._awsAccountId; set => this._awsAccountId = value; }

        /// <summary>Backing field for <see cref="AwsProperty" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsIamPasswordPolicyProperties _awsProperty;

        /// <summary>AWS Properties</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsIamPasswordPolicyProperties AwsProperty { get => (this._awsProperty = this._awsProperty ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AwsIamPasswordPolicyProperties()); set => this._awsProperty = value; }

        /// <summary>Backing field for <see cref="AwsRegion" /> property.</summary>
        private string _awsRegion;

        /// <summary>AWS Region</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string AwsRegion { get => this._awsRegion; set => this._awsRegion = value; }

        /// <summary>Backing field for <see cref="AwsSourceSchema" /> property.</summary>
        private string _awsSourceSchema;

        /// <summary>AWS Source Schema</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string AwsSourceSchema { get => this._awsSourceSchema; set => this._awsSourceSchema = value; }

        /// <summary>Backing field for <see cref="AwsTag" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IIamPasswordPolicyPropertiesAwsTags _awsTag;

        /// <summary>AWS Tags</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IIamPasswordPolicyPropertiesAwsTags AwsTag { get => (this._awsTag = this._awsTag ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IamPasswordPolicyPropertiesAwsTags()); set => this._awsTag = value; }

        /// <summary>Internal Acessors for AwsProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsIamPasswordPolicyProperties Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IIamPasswordPolicyPropertiesInternal.AwsProperty { get => (this._awsProperty = this._awsProperty ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AwsIamPasswordPolicyProperties()); set { {_awsProperty = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IIamPasswordPolicyPropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? _provisioningState;

        /// <summary>The status of the last operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="PublicCloudConnectorsResourceId" /> property.</summary>
        private string _publicCloudConnectorsResourceId;

        /// <summary>Public Cloud Connectors Resource ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string PublicCloudConnectorsResourceId { get => this._publicCloudConnectorsResourceId; set => this._publicCloudConnectorsResourceId = value; }

        /// <summary>Backing field for <see cref="PublicCloudResourceName" /> property.</summary>
        private string _publicCloudResourceName;

        /// <summary>Public Cloud Resource Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string PublicCloudResourceName { get => this._publicCloudResourceName; set => this._publicCloudResourceName = value; }

        /// <summary>Creates an new <see cref="IamPasswordPolicyProperties" /> instance.</summary>
        public IamPasswordPolicyProperties()
        {

        }
    }
    /// Definition of IamPasswordPolicy
    public partial interface IIamPasswordPolicyProperties :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary>Amazon Resource Name (ARN)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Amazon Resource Name (ARN)",
        SerializedName = @"arn",
        PossibleTypes = new [] { typeof(string) })]
        string Arn { get; set; }
        /// <summary>
        /// <p>Specifies whether IAM users are allowed to change their own password. Gives IAM users permissions to <code>iam:ChangePassword</code>
        /// for only their user and to the <code>iam:GetAccountPasswordPolicy</code> action. This option does not attach a permissions
        /// policy to each user, rather the permissions are applied at the account-level for all users by IAM.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>Specifies whether IAM users are allowed to change their own password. Gives IAM users permissions to <code>iam:ChangePassword</code> for only their user and to the <code>iam:GetAccountPasswordPolicy</code> action. This option does not attach a permissions policy to each user, rather the permissions are applied at the account-level for all users by IAM.</p>",
        SerializedName = @"allowUsersToChangePassword",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AwPropertyAllowUsersToChangePassword { get; set; }
        /// <summary>
        /// <p>Indicates whether passwords in the account expire. Returns true if <code>MaxPasswordAge</code> contains a value greater
        /// than 0. Returns false if MaxPasswordAge is 0 or not present.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>Indicates whether passwords in the account expire. Returns true if <code>MaxPasswordAge</code> contains a value greater than 0. Returns false if MaxPasswordAge is 0 or not present.</p>",
        SerializedName = @"expirePasswords",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AwPropertyExpirePassword { get; set; }
        /// <summary>
        /// <p>Specifies whether IAM users are prevented from setting a new password via the Amazon Web Services Management Console
        /// after their password has expired. The IAM user cannot access the console until an administrator resets the password. IAM
        /// users with <code>iam:ChangePassword</code> permission and active access keys can reset their own expired console password
        /// using the CLI or API.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>Specifies whether IAM users are prevented from setting a new password via the Amazon Web Services Management Console after their password has expired. The IAM user cannot access the console until an administrator resets the password. IAM users with <code>iam:ChangePassword</code> permission and active access keys can reset their own expired console password using the CLI or API.</p>",
        SerializedName = @"hardExpiry",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AwPropertyHardExpiry { get; set; }
        /// <summary><p>The number of days that an IAM user password is valid.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The number of days that an IAM user password is valid.</p>",
        SerializedName = @"maxPasswordAge",
        PossibleTypes = new [] { typeof(int) })]
        int? AwPropertyMaxPasswordAge { get; set; }
        /// <summary><p>Minimum length to require for IAM user passwords.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>Minimum length to require for IAM user passwords.</p>",
        SerializedName = @"minimumPasswordLength",
        PossibleTypes = new [] { typeof(int) })]
        int? AwPropertyMinimumPasswordLength { get; set; }
        /// <summary>
        /// <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p>",
        SerializedName = @"passwordReusePrevention",
        PossibleTypes = new [] { typeof(int) })]
        int? AwPropertyPasswordReusePrevention { get; set; }
        /// <summary>
        /// <p>Specifies whether IAM user passwords must contain at least one lowercase character (a to z).</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>Specifies whether IAM user passwords must contain at least one lowercase character (a to z).</p>",
        SerializedName = @"requireLowercaseCharacters",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AwPropertyRequireLowercaseCharacter { get; set; }
        /// <summary>
        /// <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p>",
        SerializedName = @"requireNumbers",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AwPropertyRequireNumber { get; set; }
        /// <summary>
        /// <p>Specifies whether IAM user passwords must contain at least one of the following symbols:</p> <p>! @ # $ % ^ &amp; *
        /// ( ) _ + - = [ ] { } | '</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>Specifies whether IAM user passwords must contain at least one of the following symbols:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p>",
        SerializedName = @"requireSymbols",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AwPropertyRequireSymbol { get; set; }
        /// <summary>
        /// <p>Specifies whether IAM user passwords must contain at least one uppercase character (A to Z).</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>Specifies whether IAM user passwords must contain at least one uppercase character (A to Z).</p>",
        SerializedName = @"requireUppercaseCharacters",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AwPropertyRequireUppercaseCharacter { get; set; }
        /// <summary>AWS Account ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Account ID",
        SerializedName = @"awsAccountId",
        PossibleTypes = new [] { typeof(string) })]
        string AwsAccountId { get; set; }
        /// <summary>AWS Region</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Region",
        SerializedName = @"awsRegion",
        PossibleTypes = new [] { typeof(string) })]
        string AwsRegion { get; set; }
        /// <summary>AWS Source Schema</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Source Schema",
        SerializedName = @"awsSourceSchema",
        PossibleTypes = new [] { typeof(string) })]
        string AwsSourceSchema { get; set; }
        /// <summary>AWS Tags</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Tags",
        SerializedName = @"awsTags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IIamPasswordPolicyPropertiesAwsTags) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IIamPasswordPolicyPropertiesAwsTags AwsTag { get; set; }
        /// <summary>The status of the last operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The status of the last operation.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? ProvisioningState { get;  }
        /// <summary>Public Cloud Connectors Resource ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Public Cloud Connectors Resource ID",
        SerializedName = @"publicCloudConnectorsResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string PublicCloudConnectorsResourceId { get; set; }
        /// <summary>Public Cloud Resource Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Public Cloud Resource Name",
        SerializedName = @"publicCloudResourceName",
        PossibleTypes = new [] { typeof(string) })]
        string PublicCloudResourceName { get; set; }

    }
    /// Definition of IamPasswordPolicy
    internal partial interface IIamPasswordPolicyPropertiesInternal

    {
        /// <summary>Amazon Resource Name (ARN)</summary>
        string Arn { get; set; }
        /// <summary>
        /// <p>Specifies whether IAM users are allowed to change their own password. Gives IAM users permissions to <code>iam:ChangePassword</code>
        /// for only their user and to the <code>iam:GetAccountPasswordPolicy</code> action. This option does not attach a permissions
        /// policy to each user, rather the permissions are applied at the account-level for all users by IAM.</p>
        /// </summary>
        bool? AwPropertyAllowUsersToChangePassword { get; set; }
        /// <summary>
        /// <p>Indicates whether passwords in the account expire. Returns true if <code>MaxPasswordAge</code> contains a value greater
        /// than 0. Returns false if MaxPasswordAge is 0 or not present.</p>
        /// </summary>
        bool? AwPropertyExpirePassword { get; set; }
        /// <summary>
        /// <p>Specifies whether IAM users are prevented from setting a new password via the Amazon Web Services Management Console
        /// after their password has expired. The IAM user cannot access the console until an administrator resets the password. IAM
        /// users with <code>iam:ChangePassword</code> permission and active access keys can reset their own expired console password
        /// using the CLI or API.</p>
        /// </summary>
        bool? AwPropertyHardExpiry { get; set; }
        /// <summary><p>The number of days that an IAM user password is valid.</p></summary>
        int? AwPropertyMaxPasswordAge { get; set; }
        /// <summary><p>Minimum length to require for IAM user passwords.</p></summary>
        int? AwPropertyMinimumPasswordLength { get; set; }
        /// <summary>
        /// <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p>
        /// </summary>
        int? AwPropertyPasswordReusePrevention { get; set; }
        /// <summary>
        /// <p>Specifies whether IAM user passwords must contain at least one lowercase character (a to z).</p>
        /// </summary>
        bool? AwPropertyRequireLowercaseCharacter { get; set; }
        /// <summary>
        /// <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p>
        /// </summary>
        bool? AwPropertyRequireNumber { get; set; }
        /// <summary>
        /// <p>Specifies whether IAM user passwords must contain at least one of the following symbols:</p> <p>! @ # $ % ^ &amp; *
        /// ( ) _ + - = [ ] { } | '</p>
        /// </summary>
        bool? AwPropertyRequireSymbol { get; set; }
        /// <summary>
        /// <p>Specifies whether IAM user passwords must contain at least one uppercase character (A to Z).</p>
        /// </summary>
        bool? AwPropertyRequireUppercaseCharacter { get; set; }
        /// <summary>AWS Account ID</summary>
        string AwsAccountId { get; set; }
        /// <summary>AWS Properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsIamPasswordPolicyProperties AwsProperty { get; set; }
        /// <summary>AWS Region</summary>
        string AwsRegion { get; set; }
        /// <summary>AWS Source Schema</summary>
        string AwsSourceSchema { get; set; }
        /// <summary>AWS Tags</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IIamPasswordPolicyPropertiesAwsTags AwsTag { get; set; }
        /// <summary>The status of the last operation.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? ProvisioningState { get; set; }
        /// <summary>Public Cloud Connectors Resource ID</summary>
        string PublicCloudConnectorsResourceId { get; set; }
        /// <summary>Public Cloud Resource Name</summary>
        string PublicCloudResourceName { get; set; }

    }
}