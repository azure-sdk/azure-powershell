// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of awsRdsDBInstance</summary>
    public partial class AwsRdsDbInstanceProperties
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json serialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name= "returnNow" />
        /// output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject into a new instance of <see cref="AwsRdsDbInstanceProperties" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal AwsRdsDbInstanceProperties(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_certificateDetail = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject>("certificateDetails"), out var __jsonCertificateDetails) ? Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.CertificateDetails.FromJson(__jsonCertificateDetails) : CertificateDetail;}
            {_endpoint = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject>("endpoint"), out var __jsonEndpoint) ? Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.EndpointAutoGenerated2.FromJson(__jsonEndpoint) : Endpoint;}
            {_masterUserSecret = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject>("masterUserSecret"), out var __jsonMasterUserSecret) ? Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.MasterUserSecret.FromJson(__jsonMasterUserSecret) : MasterUserSecret;}
            {_allocatedStorage = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("allocatedStorage"), out var __jsonAllocatedStorage) ? (string)__jsonAllocatedStorage : (string)AllocatedStorage;}
            {_allowMajorVersionUpgrade = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean>("allowMajorVersionUpgrade"), out var __jsonAllowMajorVersionUpgrade) ? (bool?)__jsonAllowMajorVersionUpgrade : AllowMajorVersionUpgrade;}
            {_associatedRole = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray>("associatedRoles"), out var __jsonAssociatedRoles) ? If( __jsonAssociatedRoles as Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray, out var __v) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDbInstanceRole[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__v, (__u)=>(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDbInstanceRole) (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.DbInstanceRole.FromJson(__u) )) ))() : null : AssociatedRole;}
            {_autoMinorVersionUpgrade = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean>("autoMinorVersionUpgrade"), out var __jsonAutoMinorVersionUpgrade) ? (bool?)__jsonAutoMinorVersionUpgrade : AutoMinorVersionUpgrade;}
            {_automaticBackupReplicationKmsKeyId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("automaticBackupReplicationKmsKeyId"), out var __jsonAutomaticBackupReplicationKmsKeyId) ? (string)__jsonAutomaticBackupReplicationKmsKeyId : (string)AutomaticBackupReplicationKmsKeyId;}
            {_automaticBackupReplicationRegion = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("automaticBackupReplicationRegion"), out var __jsonAutomaticBackupReplicationRegion) ? (string)__jsonAutomaticBackupReplicationRegion : (string)AutomaticBackupReplicationRegion;}
            {_availabilityZone = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("availabilityZone"), out var __jsonAvailabilityZone) ? (string)__jsonAvailabilityZone : (string)AvailabilityZone;}
            {_backupRetentionPeriod = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber>("backupRetentionPeriod"), out var __jsonBackupRetentionPeriod) ? (int?)__jsonBackupRetentionPeriod : BackupRetentionPeriod;}
            {_caCertificateIdentifier = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("caCertificateIdentifier"), out var __jsonCaCertificateIdentifier) ? (string)__jsonCaCertificateIdentifier : (string)CaCertificateIdentifier;}
            {_certificateRotationRestart = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean>("certificateRotationRestart"), out var __jsonCertificateRotationRestart) ? (bool?)__jsonCertificateRotationRestart : CertificateRotationRestart;}
            {_characterSetName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("characterSetName"), out var __jsonCharacterSetName) ? (string)__jsonCharacterSetName : (string)CharacterSetName;}
            {_copyTagsToSnapshot = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean>("copyTagsToSnapshot"), out var __jsonCopyTagsToSnapshot) ? (bool?)__jsonCopyTagsToSnapshot : CopyTagsToSnapshot;}
            {_customIamInstanceProfile = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("customIAMInstanceProfile"), out var __jsonCustomIamInstanceProfile) ? (string)__jsonCustomIamInstanceProfile : (string)CustomIamInstanceProfile;}
            {_dbClusterIdentifier = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("dbClusterIdentifier"), out var __jsonDbClusterIdentifier) ? (string)__jsonDbClusterIdentifier : (string)DbClusterIdentifier;}
            {_dbClusterSnapshotIdentifier = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("dbClusterSnapshotIdentifier"), out var __jsonDbClusterSnapshotIdentifier) ? (string)__jsonDbClusterSnapshotIdentifier : (string)DbClusterSnapshotIdentifier;}
            {_dbInstanceArn = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("dbInstanceArn"), out var __jsonDbInstanceArn) ? (string)__jsonDbInstanceArn : (string)DbInstanceArn;}
            {_dbInstanceClass = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("dbInstanceClass"), out var __jsonDbInstanceClass) ? (string)__jsonDbInstanceClass : (string)DbInstanceClass;}
            {_dbInstanceIdentifier = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("dbInstanceIdentifier"), out var __jsonDbInstanceIdentifier) ? (string)__jsonDbInstanceIdentifier : (string)DbInstanceIdentifier;}
            {_dbName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("dbName"), out var __jsonDbName) ? (string)__jsonDbName : (string)DbName;}
            {_dbParameterGroupName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("dbParameterGroupName"), out var __jsonDbParameterGroupName) ? (string)__jsonDbParameterGroupName : (string)DbParameterGroupName;}
            {_dbSecurityGroup = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray>("dbSecurityGroups"), out var __jsonDbSecurityGroups) ? If( __jsonDbSecurityGroups as Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray, out var __q) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__q, (__p)=>(string) (__p is Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString __o ? (string)(__o.ToString()) : null)) ))() : null : DbSecurityGroup;}
            {_dbSnapshotIdentifier = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("dbSnapshotIdentifier"), out var __jsonDbSnapshotIdentifier) ? (string)__jsonDbSnapshotIdentifier : (string)DbSnapshotIdentifier;}
            {_dbSubnetGroupName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("dbSubnetGroupName"), out var __jsonDbSubnetGroupName) ? (string)__jsonDbSubnetGroupName : (string)DbSubnetGroupName;}
            {_dbSystemId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("dbSystemId"), out var __jsonDbSystemId) ? (string)__jsonDbSystemId : (string)DbSystemId;}
            {_dbiResourceId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("dbiResourceId"), out var __jsonDbiResourceId) ? (string)__jsonDbiResourceId : (string)DbiResourceId;}
            {_dedicatedLogVolume = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean>("dedicatedLogVolume"), out var __jsonDedicatedLogVolume) ? (bool?)__jsonDedicatedLogVolume : DedicatedLogVolume;}
            {_deleteAutomatedBackup = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean>("deleteAutomatedBackups"), out var __jsonDeleteAutomatedBackups) ? (bool?)__jsonDeleteAutomatedBackups : DeleteAutomatedBackup;}
            {_deletionProtection = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean>("deletionProtection"), out var __jsonDeletionProtection) ? (bool?)__jsonDeletionProtection : DeletionProtection;}
            {_domain = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("domain"), out var __jsonDomain) ? (string)__jsonDomain : (string)Domain;}
            {_domainAuthSecretArn = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("domainAuthSecretArn"), out var __jsonDomainAuthSecretArn) ? (string)__jsonDomainAuthSecretArn : (string)DomainAuthSecretArn;}
            {_domainDnsIP = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray>("domainDnsIps"), out var __jsonDomainDnsIps) ? If( __jsonDomainDnsIps as Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray, out var __l) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__l, (__k)=>(string) (__k is Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString __j ? (string)(__j.ToString()) : null)) ))() : null : DomainDnsIP;}
            {_domainFqdn = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("domainFqdn"), out var __jsonDomainFqdn) ? (string)__jsonDomainFqdn : (string)DomainFqdn;}
            {_domainIamRoleName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("domainIAMRoleName"), out var __jsonDomainIamRoleName) ? (string)__jsonDomainIamRoleName : (string)DomainIamRoleName;}
            {_domainOu = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("domainOu"), out var __jsonDomainOu) ? (string)__jsonDomainOu : (string)DomainOu;}
            {_enableCloudwatchLogsExport = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray>("enableCloudwatchLogsExports"), out var __jsonEnableCloudwatchLogsExports) ? If( __jsonEnableCloudwatchLogsExports as Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray, out var __g) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__g, (__f)=>(string) (__f is Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString __e ? (string)(__e.ToString()) : null)) ))() : null : EnableCloudwatchLogsExport;}
            {_enableIamDatabaseAuthentication = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean>("enableIAMDatabaseAuthentication"), out var __jsonEnableIamDatabaseAuthentication) ? (bool?)__jsonEnableIamDatabaseAuthentication : EnableIamDatabaseAuthentication;}
            {_enablePerformanceInsight = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean>("enablePerformanceInsights"), out var __jsonEnablePerformanceInsights) ? (bool?)__jsonEnablePerformanceInsights : EnablePerformanceInsight;}
            {_engine = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("engine"), out var __jsonEngine) ? (string)__jsonEngine : (string)Engine;}
            {_engineVersion = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("engineVersion"), out var __jsonEngineVersion) ? (string)__jsonEngineVersion : (string)EngineVersion;}
            {_iop = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber>("iops"), out var __jsonIops) ? (int?)__jsonIops : Iop;}
            {_kmsKeyId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("kmsKeyId"), out var __jsonKmsKeyId) ? (string)__jsonKmsKeyId : (string)KmsKeyId;}
            {_licenseModel = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("licenseModel"), out var __jsonLicenseModel) ? (string)__jsonLicenseModel : (string)LicenseModel;}
            {_manageMasterUserPassword = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean>("manageMasterUserPassword"), out var __jsonManageMasterUserPassword) ? (bool?)__jsonManageMasterUserPassword : ManageMasterUserPassword;}
            {_masterUserPassword = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("masterUserPassword"), out var __jsonMasterUserPassword) ? (string)__jsonMasterUserPassword : (string)MasterUserPassword;}
            {_masterUsername = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("masterUsername"), out var __jsonMasterUsername) ? (string)__jsonMasterUsername : (string)MasterUsername;}
            {_maxAllocatedStorage = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber>("maxAllocatedStorage"), out var __jsonMaxAllocatedStorage) ? (int?)__jsonMaxAllocatedStorage : MaxAllocatedStorage;}
            {_monitoringInterval = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber>("monitoringInterval"), out var __jsonMonitoringInterval) ? (int?)__jsonMonitoringInterval : MonitoringInterval;}
            {_monitoringRoleArn = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("monitoringRoleArn"), out var __jsonMonitoringRoleArn) ? (string)__jsonMonitoringRoleArn : (string)MonitoringRoleArn;}
            {_multiAz = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean>("multiAZ"), out var __jsonMultiAz) ? (bool?)__jsonMultiAz : MultiAz;}
            {_ncharCharacterSetName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("ncharCharacterSetName"), out var __jsonNcharCharacterSetName) ? (string)__jsonNcharCharacterSetName : (string)NcharCharacterSetName;}
            {_networkType = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("networkType"), out var __jsonNetworkType) ? (string)__jsonNetworkType : (string)NetworkType;}
            {_optionGroupName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("optionGroupName"), out var __jsonOptionGroupName) ? (string)__jsonOptionGroupName : (string)OptionGroupName;}
            {_performanceInsightsKmsKeyId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("performanceInsightsKMSKeyId"), out var __jsonPerformanceInsightsKmsKeyId) ? (string)__jsonPerformanceInsightsKmsKeyId : (string)PerformanceInsightsKmsKeyId;}
            {_performanceInsightsRetentionPeriod = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber>("performanceInsightsRetentionPeriod"), out var __jsonPerformanceInsightsRetentionPeriod) ? (int?)__jsonPerformanceInsightsRetentionPeriod : PerformanceInsightsRetentionPeriod;}
            {_port = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("port"), out var __jsonPort) ? (string)__jsonPort : (string)Port;}
            {_preferredBackupWindow = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("preferredBackupWindow"), out var __jsonPreferredBackupWindow) ? (string)__jsonPreferredBackupWindow : (string)PreferredBackupWindow;}
            {_preferredMaintenanceWindow = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("preferredMaintenanceWindow"), out var __jsonPreferredMaintenanceWindow) ? (string)__jsonPreferredMaintenanceWindow : (string)PreferredMaintenanceWindow;}
            {_processorFeature = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray>("processorFeatures"), out var __jsonProcessorFeatures) ? If( __jsonProcessorFeatures as Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray, out var __b) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IProcessorFeature[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__b, (__a)=>(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IProcessorFeature) (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ProcessorFeature.FromJson(__a) )) ))() : null : ProcessorFeature;}
            {_promotionTier = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber>("promotionTier"), out var __jsonPromotionTier) ? (int?)__jsonPromotionTier : PromotionTier;}
            {_publiclyAccessible = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean>("publiclyAccessible"), out var __jsonPubliclyAccessible) ? (bool?)__jsonPubliclyAccessible : PubliclyAccessible;}
            {_replicaMode = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("replicaMode"), out var __jsonReplicaMode) ? (string)__jsonReplicaMode : (string)ReplicaMode;}
            {_restoreTime = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("restoreTime"), out var __jsonRestoreTime) ? (string)__jsonRestoreTime : (string)RestoreTime;}
            {_sourceDbClusterIdentifier = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("sourceDBClusterIdentifier"), out var __jsonSourceDbClusterIdentifier) ? (string)__jsonSourceDbClusterIdentifier : (string)SourceDbClusterIdentifier;}
            {_sourceDbInstanceAutomatedBackupsArn = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("sourceDBInstanceAutomatedBackupsArn"), out var __jsonSourceDbInstanceAutomatedBackupsArn) ? (string)__jsonSourceDbInstanceAutomatedBackupsArn : (string)SourceDbInstanceAutomatedBackupsArn;}
            {_sourceDbInstanceIdentifier = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("sourceDBInstanceIdentifier"), out var __jsonSourceDbInstanceIdentifier) ? (string)__jsonSourceDbInstanceIdentifier : (string)SourceDbInstanceIdentifier;}
            {_sourceDbiResourceId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("sourceDbiResourceId"), out var __jsonSourceDbiResourceId) ? (string)__jsonSourceDbiResourceId : (string)SourceDbiResourceId;}
            {_sourceRegion = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("sourceRegion"), out var __jsonSourceRegion) ? (string)__jsonSourceRegion : (string)SourceRegion;}
            {_storageEncrypted = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean>("storageEncrypted"), out var __jsonStorageEncrypted) ? (bool?)__jsonStorageEncrypted : StorageEncrypted;}
            {_storageThroughput = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber>("storageThroughput"), out var __jsonStorageThroughput) ? (int?)__jsonStorageThroughput : StorageThroughput;}
            {_storageType = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("storageType"), out var __jsonStorageType) ? (string)__jsonStorageType : (string)StorageType;}
            {_tag = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray>("tags"), out var __jsonTags) ? If( __jsonTags as Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray, out var ___w) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated47[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(___w, (___v)=>(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated47) (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.TagAutoGenerated47.FromJson(___v) )) ))() : null : Tag;}
            {_tdeCredentialArn = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("tdeCredentialArn"), out var __jsonTdeCredentialArn) ? (string)__jsonTdeCredentialArn : (string)TdeCredentialArn;}
            {_tdeCredentialPassword = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("tdeCredentialPassword"), out var __jsonTdeCredentialPassword) ? (string)__jsonTdeCredentialPassword : (string)TdeCredentialPassword;}
            {_timezone = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("timezone"), out var __jsonTimezone) ? (string)__jsonTimezone : (string)Timezone;}
            {_useDefaultProcessorFeature = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean>("useDefaultProcessorFeatures"), out var __jsonUseDefaultProcessorFeatures) ? (bool?)__jsonUseDefaultProcessorFeatures : UseDefaultProcessorFeature;}
            {_useLatestRestorableTime = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean>("useLatestRestorableTime"), out var __jsonUseLatestRestorableTime) ? (bool?)__jsonUseLatestRestorableTime : UseLatestRestorableTime;}
            {_vpcSecurityGroup = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray>("vpcSecurityGroups"), out var __jsonVpcSecurityGroups) ? If( __jsonVpcSecurityGroups as Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray, out var ___r) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(___r, (___q)=>(string) (___q is Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString ___p ? (string)(___p.ToString()) : null)) ))() : null : VpcSecurityGroup;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsRdsDbInstanceProperties.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsRdsDbInstanceProperties.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsRdsDbInstanceProperties FromJson(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode node)
        {
            return node is Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject json ? new AwsRdsDbInstanceProperties(json) : null;
        }

        /// <summary>
        /// Serializes this instance of <see cref="AwsRdsDbInstanceProperties" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="AwsRdsDbInstanceProperties" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode" />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            AddIf( null != this._certificateDetail ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) this._certificateDetail.ToJson(null,serializationMode) : null, "certificateDetails" ,container.Add );
            AddIf( null != this._endpoint ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) this._endpoint.ToJson(null,serializationMode) : null, "endpoint" ,container.Add );
            AddIf( null != this._masterUserSecret ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) this._masterUserSecret.ToJson(null,serializationMode) : null, "masterUserSecret" ,container.Add );
            AddIf( null != (((object)this._allocatedStorage)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._allocatedStorage.ToString()) : null, "allocatedStorage" ,container.Add );
            AddIf( null != this._allowMajorVersionUpgrade ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean((bool)this._allowMajorVersionUpgrade) : null, "allowMajorVersionUpgrade" ,container.Add );
            if (null != this._associatedRole)
            {
                var __w = new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.XNodeArray();
                foreach( var __x in this._associatedRole )
                {
                    AddIf(__x?.ToJson(null, serializationMode) ,__w.Add);
                }
                container.Add("associatedRoles",__w);
            }
            AddIf( null != this._autoMinorVersionUpgrade ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean((bool)this._autoMinorVersionUpgrade) : null, "autoMinorVersionUpgrade" ,container.Add );
            AddIf( null != (((object)this._automaticBackupReplicationKmsKeyId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._automaticBackupReplicationKmsKeyId.ToString()) : null, "automaticBackupReplicationKmsKeyId" ,container.Add );
            AddIf( null != (((object)this._automaticBackupReplicationRegion)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._automaticBackupReplicationRegion.ToString()) : null, "automaticBackupReplicationRegion" ,container.Add );
            AddIf( null != (((object)this._availabilityZone)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._availabilityZone.ToString()) : null, "availabilityZone" ,container.Add );
            AddIf( null != this._backupRetentionPeriod ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber((int)this._backupRetentionPeriod) : null, "backupRetentionPeriod" ,container.Add );
            AddIf( null != (((object)this._caCertificateIdentifier)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._caCertificateIdentifier.ToString()) : null, "caCertificateIdentifier" ,container.Add );
            AddIf( null != this._certificateRotationRestart ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean((bool)this._certificateRotationRestart) : null, "certificateRotationRestart" ,container.Add );
            AddIf( null != (((object)this._characterSetName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._characterSetName.ToString()) : null, "characterSetName" ,container.Add );
            AddIf( null != this._copyTagsToSnapshot ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean((bool)this._copyTagsToSnapshot) : null, "copyTagsToSnapshot" ,container.Add );
            AddIf( null != (((object)this._customIamInstanceProfile)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._customIamInstanceProfile.ToString()) : null, "customIAMInstanceProfile" ,container.Add );
            AddIf( null != (((object)this._dbClusterIdentifier)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._dbClusterIdentifier.ToString()) : null, "dbClusterIdentifier" ,container.Add );
            AddIf( null != (((object)this._dbClusterSnapshotIdentifier)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._dbClusterSnapshotIdentifier.ToString()) : null, "dbClusterSnapshotIdentifier" ,container.Add );
            AddIf( null != (((object)this._dbInstanceArn)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._dbInstanceArn.ToString()) : null, "dbInstanceArn" ,container.Add );
            AddIf( null != (((object)this._dbInstanceClass)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._dbInstanceClass.ToString()) : null, "dbInstanceClass" ,container.Add );
            AddIf( null != (((object)this._dbInstanceIdentifier)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._dbInstanceIdentifier.ToString()) : null, "dbInstanceIdentifier" ,container.Add );
            AddIf( null != (((object)this._dbName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._dbName.ToString()) : null, "dbName" ,container.Add );
            AddIf( null != (((object)this._dbParameterGroupName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._dbParameterGroupName.ToString()) : null, "dbParameterGroupName" ,container.Add );
            if (null != this._dbSecurityGroup)
            {
                var __r = new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.XNodeArray();
                foreach( var __s in this._dbSecurityGroup )
                {
                    AddIf(null != (((object)__s)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(__s.ToString()) : null ,__r.Add);
                }
                container.Add("dbSecurityGroups",__r);
            }
            AddIf( null != (((object)this._dbSnapshotIdentifier)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._dbSnapshotIdentifier.ToString()) : null, "dbSnapshotIdentifier" ,container.Add );
            AddIf( null != (((object)this._dbSubnetGroupName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._dbSubnetGroupName.ToString()) : null, "dbSubnetGroupName" ,container.Add );
            AddIf( null != (((object)this._dbSystemId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._dbSystemId.ToString()) : null, "dbSystemId" ,container.Add );
            AddIf( null != (((object)this._dbiResourceId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._dbiResourceId.ToString()) : null, "dbiResourceId" ,container.Add );
            AddIf( null != this._dedicatedLogVolume ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean((bool)this._dedicatedLogVolume) : null, "dedicatedLogVolume" ,container.Add );
            AddIf( null != this._deleteAutomatedBackup ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean((bool)this._deleteAutomatedBackup) : null, "deleteAutomatedBackups" ,container.Add );
            AddIf( null != this._deletionProtection ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean((bool)this._deletionProtection) : null, "deletionProtection" ,container.Add );
            AddIf( null != (((object)this._domain)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._domain.ToString()) : null, "domain" ,container.Add );
            AddIf( null != (((object)this._domainAuthSecretArn)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._domainAuthSecretArn.ToString()) : null, "domainAuthSecretArn" ,container.Add );
            if (null != this._domainDnsIP)
            {
                var __m = new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.XNodeArray();
                foreach( var __n in this._domainDnsIP )
                {
                    AddIf(null != (((object)__n)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(__n.ToString()) : null ,__m.Add);
                }
                container.Add("domainDnsIps",__m);
            }
            AddIf( null != (((object)this._domainFqdn)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._domainFqdn.ToString()) : null, "domainFqdn" ,container.Add );
            AddIf( null != (((object)this._domainIamRoleName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._domainIamRoleName.ToString()) : null, "domainIAMRoleName" ,container.Add );
            AddIf( null != (((object)this._domainOu)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._domainOu.ToString()) : null, "domainOu" ,container.Add );
            if (null != this._enableCloudwatchLogsExport)
            {
                var __h = new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.XNodeArray();
                foreach( var __i in this._enableCloudwatchLogsExport )
                {
                    AddIf(null != (((object)__i)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(__i.ToString()) : null ,__h.Add);
                }
                container.Add("enableCloudwatchLogsExports",__h);
            }
            AddIf( null != this._enableIamDatabaseAuthentication ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean((bool)this._enableIamDatabaseAuthentication) : null, "enableIAMDatabaseAuthentication" ,container.Add );
            AddIf( null != this._enablePerformanceInsight ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean((bool)this._enablePerformanceInsight) : null, "enablePerformanceInsights" ,container.Add );
            AddIf( null != (((object)this._engine)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._engine.ToString()) : null, "engine" ,container.Add );
            AddIf( null != (((object)this._engineVersion)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._engineVersion.ToString()) : null, "engineVersion" ,container.Add );
            AddIf( null != this._iop ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber((int)this._iop) : null, "iops" ,container.Add );
            AddIf( null != (((object)this._kmsKeyId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._kmsKeyId.ToString()) : null, "kmsKeyId" ,container.Add );
            AddIf( null != (((object)this._licenseModel)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._licenseModel.ToString()) : null, "licenseModel" ,container.Add );
            AddIf( null != this._manageMasterUserPassword ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean((bool)this._manageMasterUserPassword) : null, "manageMasterUserPassword" ,container.Add );
            AddIf( null != (((object)this._masterUserPassword)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._masterUserPassword.ToString()) : null, "masterUserPassword" ,container.Add );
            AddIf( null != (((object)this._masterUsername)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._masterUsername.ToString()) : null, "masterUsername" ,container.Add );
            AddIf( null != this._maxAllocatedStorage ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber((int)this._maxAllocatedStorage) : null, "maxAllocatedStorage" ,container.Add );
            AddIf( null != this._monitoringInterval ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber((int)this._monitoringInterval) : null, "monitoringInterval" ,container.Add );
            AddIf( null != (((object)this._monitoringRoleArn)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._monitoringRoleArn.ToString()) : null, "monitoringRoleArn" ,container.Add );
            AddIf( null != this._multiAz ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean((bool)this._multiAz) : null, "multiAZ" ,container.Add );
            AddIf( null != (((object)this._ncharCharacterSetName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._ncharCharacterSetName.ToString()) : null, "ncharCharacterSetName" ,container.Add );
            AddIf( null != (((object)this._networkType)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._networkType.ToString()) : null, "networkType" ,container.Add );
            AddIf( null != (((object)this._optionGroupName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._optionGroupName.ToString()) : null, "optionGroupName" ,container.Add );
            AddIf( null != (((object)this._performanceInsightsKmsKeyId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._performanceInsightsKmsKeyId.ToString()) : null, "performanceInsightsKMSKeyId" ,container.Add );
            AddIf( null != this._performanceInsightsRetentionPeriod ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber((int)this._performanceInsightsRetentionPeriod) : null, "performanceInsightsRetentionPeriod" ,container.Add );
            AddIf( null != (((object)this._port)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._port.ToString()) : null, "port" ,container.Add );
            AddIf( null != (((object)this._preferredBackupWindow)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._preferredBackupWindow.ToString()) : null, "preferredBackupWindow" ,container.Add );
            AddIf( null != (((object)this._preferredMaintenanceWindow)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._preferredMaintenanceWindow.ToString()) : null, "preferredMaintenanceWindow" ,container.Add );
            if (null != this._processorFeature)
            {
                var __c = new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.XNodeArray();
                foreach( var __d in this._processorFeature )
                {
                    AddIf(__d?.ToJson(null, serializationMode) ,__c.Add);
                }
                container.Add("processorFeatures",__c);
            }
            AddIf( null != this._promotionTier ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber((int)this._promotionTier) : null, "promotionTier" ,container.Add );
            AddIf( null != this._publiclyAccessible ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean((bool)this._publiclyAccessible) : null, "publiclyAccessible" ,container.Add );
            AddIf( null != (((object)this._replicaMode)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._replicaMode.ToString()) : null, "replicaMode" ,container.Add );
            AddIf( null != (((object)this._restoreTime)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._restoreTime.ToString()) : null, "restoreTime" ,container.Add );
            AddIf( null != (((object)this._sourceDbClusterIdentifier)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._sourceDbClusterIdentifier.ToString()) : null, "sourceDBClusterIdentifier" ,container.Add );
            AddIf( null != (((object)this._sourceDbInstanceAutomatedBackupsArn)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._sourceDbInstanceAutomatedBackupsArn.ToString()) : null, "sourceDBInstanceAutomatedBackupsArn" ,container.Add );
            AddIf( null != (((object)this._sourceDbInstanceIdentifier)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._sourceDbInstanceIdentifier.ToString()) : null, "sourceDBInstanceIdentifier" ,container.Add );
            AddIf( null != (((object)this._sourceDbiResourceId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._sourceDbiResourceId.ToString()) : null, "sourceDbiResourceId" ,container.Add );
            AddIf( null != (((object)this._sourceRegion)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._sourceRegion.ToString()) : null, "sourceRegion" ,container.Add );
            AddIf( null != this._storageEncrypted ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean((bool)this._storageEncrypted) : null, "storageEncrypted" ,container.Add );
            AddIf( null != this._storageThroughput ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber((int)this._storageThroughput) : null, "storageThroughput" ,container.Add );
            AddIf( null != (((object)this._storageType)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._storageType.ToString()) : null, "storageType" ,container.Add );
            if (null != this._tag)
            {
                var ___x = new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.XNodeArray();
                foreach( var ___y in this._tag )
                {
                    AddIf(___y?.ToJson(null, serializationMode) ,___x.Add);
                }
                container.Add("tags",___x);
            }
            AddIf( null != (((object)this._tdeCredentialArn)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._tdeCredentialArn.ToString()) : null, "tdeCredentialArn" ,container.Add );
            AddIf( null != (((object)this._tdeCredentialPassword)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._tdeCredentialPassword.ToString()) : null, "tdeCredentialPassword" ,container.Add );
            AddIf( null != (((object)this._timezone)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._timezone.ToString()) : null, "timezone" ,container.Add );
            AddIf( null != this._useDefaultProcessorFeature ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean((bool)this._useDefaultProcessorFeature) : null, "useDefaultProcessorFeatures" ,container.Add );
            AddIf( null != this._useLatestRestorableTime ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean((bool)this._useLatestRestorableTime) : null, "useLatestRestorableTime" ,container.Add );
            if (null != this._vpcSecurityGroup)
            {
                var ___s = new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.XNodeArray();
                foreach( var ___t in this._vpcSecurityGroup )
                {
                    AddIf(null != (((object)___t)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(___t.ToString()) : null ,___s.Add);
                }
                container.Add("vpcSecurityGroups",___s);
            }
            AfterToJson(ref container);
            return container;
        }
    }
}