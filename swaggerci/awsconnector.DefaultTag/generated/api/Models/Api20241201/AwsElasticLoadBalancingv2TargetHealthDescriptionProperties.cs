// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of awsElasticLoadBalancingv2TargetHealthDescription</summary>
    public partial class AwsElasticLoadBalancingv2TargetHealthDescriptionProperties :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsElasticLoadBalancingv2TargetHealthDescriptionProperties,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsElasticLoadBalancingv2TargetHealthDescriptionPropertiesInternal
    {

        /// <summary>Backing field for <see cref="AnomalyDetection" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAnomalyDetection _anomalyDetection;

        /// <summary>
        /// <p>The anomaly detection result for the target.</p> <p>If no anomalies were detected, the result is <code>normal</code>.</p>
        /// <p>If anomalies were detected, the result is <code>anomalous</code>.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAnomalyDetection AnomalyDetection { get => (this._anomalyDetection = this._anomalyDetection ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AnomalyDetection()); set => this._anomalyDetection = value; }

        /// <summary>Backing field for <see cref="HealthCheckPort" /> property.</summary>
        private string _healthCheckPort;

        /// <summary><p>The port to use to connect with the target.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string HealthCheckPort { get => this._healthCheckPort; set => this._healthCheckPort = value; }

        /// <summary>Internal Acessors for AnomalyDetection</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAnomalyDetection Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsElasticLoadBalancingv2TargetHealthDescriptionPropertiesInternal.AnomalyDetection { get => (this._anomalyDetection = this._anomalyDetection ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AnomalyDetection()); set { {_anomalyDetection = value;} } }

        /// <summary>Internal Acessors for AnomalyDetectionMitigationInEffect</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMitigationInEffectEnumValue Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsElasticLoadBalancingv2TargetHealthDescriptionPropertiesInternal.AnomalyDetectionMitigationInEffect { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAnomalyDetectionInternal)AnomalyDetection).MitigationInEffect; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAnomalyDetectionInternal)AnomalyDetection).MitigationInEffect = value; }

        /// <summary>Internal Acessors for AnomalyDetectionResult</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAnomalyResultEnumValue Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsElasticLoadBalancingv2TargetHealthDescriptionPropertiesInternal.AnomalyDetectionResult { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAnomalyDetectionInternal)AnomalyDetection).Result; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAnomalyDetectionInternal)AnomalyDetection).Result = value; }

        /// <summary>Internal Acessors for Target</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetDescriptionAutoGenerated Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsElasticLoadBalancingv2TargetHealthDescriptionPropertiesInternal.Target { get => (this._target = this._target ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.TargetDescriptionAutoGenerated()); set { {_target = value;} } }

        /// <summary>Internal Acessors for TargetHealth</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetHealth Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsElasticLoadBalancingv2TargetHealthDescriptionPropertiesInternal.TargetHealth { get => (this._targetHealth = this._targetHealth ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.TargetHealth()); set { {_targetHealth = value;} } }

        /// <summary>Internal Acessors for TargetHealthReason</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetHealthReasonEnumValue Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsElasticLoadBalancingv2TargetHealthDescriptionPropertiesInternal.TargetHealthReason { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetHealthInternal)TargetHealth).Reason; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetHealthInternal)TargetHealth).Reason = value; }

        /// <summary>Internal Acessors for TargetHealthState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetHealthStateEnumValue Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsElasticLoadBalancingv2TargetHealthDescriptionPropertiesInternal.TargetHealthState { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetHealthInternal)TargetHealth).State; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetHealthInternal)TargetHealth).State = value; }

        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.MitigationInEffectEnum? MitigationInEffectValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAnomalyDetectionInternal)AnomalyDetection).MitigationInEffectValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAnomalyDetectionInternal)AnomalyDetection).MitigationInEffectValue = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.MitigationInEffectEnum)""); }

        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.TargetHealthReasonEnum? ReasonValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetHealthInternal)TargetHealth).ReasonValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetHealthInternal)TargetHealth).ReasonValue = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.TargetHealthReasonEnum)""); }

        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.AnomalyResultEnum? ResultValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAnomalyDetectionInternal)AnomalyDetection).ResultValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAnomalyDetectionInternal)AnomalyDetection).ResultValue = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.AnomalyResultEnum)""); }

        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.TargetHealthStateEnum? StateValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetHealthInternal)TargetHealth).StateValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetHealthInternal)TargetHealth).StateValue = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.TargetHealthStateEnum)""); }

        /// <summary>Backing field for <see cref="Target" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetDescriptionAutoGenerated _target;

        /// <summary><p>The description of the target.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetDescriptionAutoGenerated Target { get => (this._target = this._target ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.TargetDescriptionAutoGenerated()); set => this._target = value; }

        /// <summary>
        /// <p>An Availability Zone or <code>all</code>. This determines whether the target receives traffic from the load balancer
        /// nodes in the specified Availability Zone or from all enabled Availability Zones for the load balancer.</p> <p>For Application
        /// Load Balancer target groups, the specified Availability Zone value is only applicable when cross-zone load balancing is
        /// off. Otherwise the parameter is ignored and treated as <code>all</code>.</p> <p>This parameter is not supported if the
        /// target type of the target group is <code>instance</code> or <code>alb</code>.</p> <p>If the target type is <code>ip</code>
        /// and the IP address is in a subnet of the VPC for the target group, the Availability Zone is automatically detected and
        /// this parameter is optional. If the IP address is outside the VPC, this parameter is required.</p> <p>For Application Load
        /// Balancer target groups with cross-zone load balancing off, if the target type is <code>ip</code> and the IP address is
        /// outside of the VPC for the target group, this should be an Availability Zone inside the VPC for the target group.</p>
        /// <p>If the target type is <code>lambda</code>, this parameter is optional and the only supported value is <code>all</code>.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string TargetAvailabilityZone { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetDescriptionAutoGeneratedInternal)Target).AvailabilityZone; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetDescriptionAutoGeneratedInternal)Target).AvailabilityZone = value ?? null; }

        /// <summary>Backing field for <see cref="TargetHealth" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetHealth _targetHealth;

        /// <summary><p>The health information for the target.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetHealth TargetHealth { get => (this._targetHealth = this._targetHealth ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.TargetHealth()); set => this._targetHealth = value; }

        /// <summary>
        /// <p>A description of the target health that provides additional details. If the state is <code>healthy</code>, a description
        /// is not provided.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string TargetHealthDescription { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetHealthInternal)TargetHealth).Description; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetHealthInternal)TargetHealth).Description = value ?? null; }

        /// <summary>
        /// <p>The ID of the target. If the target type of the target group is <code>instance</code>, specify an instance ID. If the
        /// target type is <code>ip</code>, specify an IP address. If the target type is <code>lambda</code>, specify the ARN of the
        /// Lambda function. If the target type is <code>alb</code>, specify the ARN of the Application Load Balancer target. </p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string TargetId { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetDescriptionAutoGeneratedInternal)Target).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetDescriptionAutoGeneratedInternal)Target).Id = value ?? null; }

        /// <summary>
        /// <p>The port on which the target is listening. If the target group protocol is GENEVE, the supported port is 6081. If the
        /// target type is <code>alb</code>, the targeted Application Load Balancer must have at least one listener whose port matches
        /// the target group port. This parameter is not used if the target is a Lambda function.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public int? TargetPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetDescriptionAutoGeneratedInternal)Target).Port; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetDescriptionAutoGeneratedInternal)Target).Port = value ?? default(int); }

        /// <summary>
        /// Creates an new <see cref="AwsElasticLoadBalancingv2TargetHealthDescriptionProperties" /> instance.
        /// </summary>
        public AwsElasticLoadBalancingv2TargetHealthDescriptionProperties()
        {

        }
    }
    /// Definition of awsElasticLoadBalancingv2TargetHealthDescription
    public partial interface IAwsElasticLoadBalancingv2TargetHealthDescriptionProperties :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary><p>The port to use to connect with the target.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The port to use to connect with the target.</p>",
        SerializedName = @"healthCheckPort",
        PossibleTypes = new [] { typeof(string) })]
        string HealthCheckPort { get; set; }
        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property value",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.MitigationInEffectEnum) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.MitigationInEffectEnum? MitigationInEffectValue { get; set; }
        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property value",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.TargetHealthReasonEnum) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.TargetHealthReasonEnum? ReasonValue { get; set; }
        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property value",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.AnomalyResultEnum) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.AnomalyResultEnum? ResultValue { get; set; }
        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property value",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.TargetHealthStateEnum) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.TargetHealthStateEnum? StateValue { get; set; }
        /// <summary>
        /// <p>An Availability Zone or <code>all</code>. This determines whether the target receives traffic from the load balancer
        /// nodes in the specified Availability Zone or from all enabled Availability Zones for the load balancer.</p> <p>For Application
        /// Load Balancer target groups, the specified Availability Zone value is only applicable when cross-zone load balancing is
        /// off. Otherwise the parameter is ignored and treated as <code>all</code>.</p> <p>This parameter is not supported if the
        /// target type of the target group is <code>instance</code> or <code>alb</code>.</p> <p>If the target type is <code>ip</code>
        /// and the IP address is in a subnet of the VPC for the target group, the Availability Zone is automatically detected and
        /// this parameter is optional. If the IP address is outside the VPC, this parameter is required.</p> <p>For Application Load
        /// Balancer target groups with cross-zone load balancing off, if the target type is <code>ip</code> and the IP address is
        /// outside of the VPC for the target group, this should be an Availability Zone inside the VPC for the target group.</p>
        /// <p>If the target type is <code>lambda</code>, this parameter is optional and the only supported value is <code>all</code>.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>An Availability Zone or <code>all</code>. This determines whether the target receives traffic from the load balancer nodes in the specified Availability Zone or from all enabled Availability Zones for the load balancer.</p> <p>For Application Load Balancer target groups, the specified Availability Zone value is only applicable when cross-zone load balancing is off. Otherwise the parameter is ignored and treated as <code>all</code>.</p> <p>This parameter is not supported if the target type of the target group is <code>instance</code> or <code>alb</code>.</p> <p>If the target type is <code>ip</code> and the IP address is in a subnet of the VPC for the target group, the Availability Zone is automatically detected and this parameter is optional. If the IP address is outside the VPC, this parameter is required.</p> <p>For Application Load Balancer target groups with cross-zone load balancing off, if the target type is <code>ip</code> and the IP address is outside of the VPC for the target group, this should be an Availability Zone inside the VPC for the target group.</p> <p>If the target type is <code>lambda</code>, this parameter is optional and the only supported value is <code>all</code>.</p>",
        SerializedName = @"availabilityZone",
        PossibleTypes = new [] { typeof(string) })]
        string TargetAvailabilityZone { get; set; }
        /// <summary>
        /// <p>A description of the target health that provides additional details. If the state is <code>healthy</code>, a description
        /// is not provided.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>A description of the target health that provides additional details. If the state is <code>healthy</code>, a description is not provided.</p>",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        string TargetHealthDescription { get; set; }
        /// <summary>
        /// <p>The ID of the target. If the target type of the target group is <code>instance</code>, specify an instance ID. If the
        /// target type is <code>ip</code>, specify an IP address. If the target type is <code>lambda</code>, specify the ARN of the
        /// Lambda function. If the target type is <code>alb</code>, specify the ARN of the Application Load Balancer target. </p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The ID of the target. If the target type of the target group is <code>instance</code>, specify an instance ID. If the target type is <code>ip</code>, specify an IP address. If the target type is <code>lambda</code>, specify the ARN of the Lambda function. If the target type is <code>alb</code>, specify the ARN of the Application Load Balancer target. </p>",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string TargetId { get; set; }
        /// <summary>
        /// <p>The port on which the target is listening. If the target group protocol is GENEVE, the supported port is 6081. If the
        /// target type is <code>alb</code>, the targeted Application Load Balancer must have at least one listener whose port matches
        /// the target group port. This parameter is not used if the target is a Lambda function.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The port on which the target is listening. If the target group protocol is GENEVE, the supported port is 6081. If the target type is <code>alb</code>, the targeted Application Load Balancer must have at least one listener whose port matches the target group port. This parameter is not used if the target is a Lambda function.</p>",
        SerializedName = @"port",
        PossibleTypes = new [] { typeof(int) })]
        int? TargetPort { get; set; }

    }
    /// Definition of awsElasticLoadBalancingv2TargetHealthDescription
    internal partial interface IAwsElasticLoadBalancingv2TargetHealthDescriptionPropertiesInternal

    {
        /// <summary>
        /// <p>The anomaly detection result for the target.</p> <p>If no anomalies were detected, the result is <code>normal</code>.</p>
        /// <p>If anomalies were detected, the result is <code>anomalous</code>.</p>
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAnomalyDetection AnomalyDetection { get; set; }
        /// <summary><p>Indicates whether anomaly mitigation is in progress.</p></summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMitigationInEffectEnumValue AnomalyDetectionMitigationInEffect { get; set; }
        /// <summary><p>The latest anomaly detection result.</p></summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAnomalyResultEnumValue AnomalyDetectionResult { get; set; }
        /// <summary><p>The port to use to connect with the target.</p></summary>
        string HealthCheckPort { get; set; }
        /// <summary>Property value</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.MitigationInEffectEnum? MitigationInEffectValue { get; set; }
        /// <summary>Property value</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.TargetHealthReasonEnum? ReasonValue { get; set; }
        /// <summary>Property value</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.AnomalyResultEnum? ResultValue { get; set; }
        /// <summary>Property value</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.TargetHealthStateEnum? StateValue { get; set; }
        /// <summary><p>The description of the target.</p></summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetDescriptionAutoGenerated Target { get; set; }
        /// <summary>
        /// <p>An Availability Zone or <code>all</code>. This determines whether the target receives traffic from the load balancer
        /// nodes in the specified Availability Zone or from all enabled Availability Zones for the load balancer.</p> <p>For Application
        /// Load Balancer target groups, the specified Availability Zone value is only applicable when cross-zone load balancing is
        /// off. Otherwise the parameter is ignored and treated as <code>all</code>.</p> <p>This parameter is not supported if the
        /// target type of the target group is <code>instance</code> or <code>alb</code>.</p> <p>If the target type is <code>ip</code>
        /// and the IP address is in a subnet of the VPC for the target group, the Availability Zone is automatically detected and
        /// this parameter is optional. If the IP address is outside the VPC, this parameter is required.</p> <p>For Application Load
        /// Balancer target groups with cross-zone load balancing off, if the target type is <code>ip</code> and the IP address is
        /// outside of the VPC for the target group, this should be an Availability Zone inside the VPC for the target group.</p>
        /// <p>If the target type is <code>lambda</code>, this parameter is optional and the only supported value is <code>all</code>.</p>
        /// </summary>
        string TargetAvailabilityZone { get; set; }
        /// <summary><p>The health information for the target.</p></summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetHealth TargetHealth { get; set; }
        /// <summary>
        /// <p>A description of the target health that provides additional details. If the state is <code>healthy</code>, a description
        /// is not provided.</p>
        /// </summary>
        string TargetHealthDescription { get; set; }
        /// <summary>
        /// <p>The reason code.</p> <p>If the target state is <code>healthy</code>, a reason code is not provided.</p> <p>If the target
        /// state is <code>initial</code>, the reason code can be one of the following values:</p> <ul> <li> <p> <code>Elb.RegistrationInProgress</code>
        /// - The target is in the process of being registered with the load balancer.</p> </li> <li> <p> <code>Elb.InitialHealthChecking</code>
        /// - The load balancer is still sending the target the minimum number of health checks required to determine its health status.</p>
        /// </li> </ul> <p>If the target state is <code>unhealthy</code>, the reason code can be one of the following values:</p>
        /// <ul> <li> <p> <code>Target.ResponseCodeMismatch</code> - The health checks did not return an expected HTTP code. Applies
        /// only to Application Load Balancers and Gateway Load Balancers.</p> </li> <li> <p> <code>Target.Timeout</code> - The health
        /// check requests timed out. Applies only to Application Load Balancers and Gateway Load Balancers.</p> </li> <li> <p> <code>Target.FailedHealthChecks</code>
        /// - The load balancer received an error while establishing a connection to the target or the target response was malformed.</p>
        /// </li> <li> <p> <code>Elb.InternalError</code> - The health checks failed due to an internal error. Applies only to Application
        /// Load Balancers.</p> </li> </ul> <p>If the target state is <code>unused</code>, the reason code can be one of the following
        /// values:</p> <ul> <li> <p> <code>Target.NotRegistered</code> - The target is not registered with the target group.</p>
        /// </li> <li> <p> <code>Target.NotInUse</code> - The target group is not used by any load balancer or the target is in an
        /// Availability Zone that is not enabled for its load balancer.</p> </li> <li> <p> <code>Target.InvalidState</code> - The
        /// target is in the stopped or terminated state.</p> </li> <li> <p> <code>Target.IpUnusable</code> - The target IP address
        /// is reserved for use by a load balancer.</p> </li> </ul> <p>If the target state is <code>draining</code>, the reason code
        /// can be the following value:</p> <ul> <li> <p> <code>Target.DeregistrationInProgress</code> - The target is in the process
        /// of being deregistered and the deregistration delay period has not expired.</p> </li> </ul> <p>If the target state is <code>unavailable</code>,
        /// the reason code can be the following value:</p> <ul> <li> <p> <code>Target.HealthCheckDisabled</code> - Health checks
        /// are disabled for the target group. Applies only to Application Load Balancers.</p> </li> <li> <p> <code>Elb.InternalError</code>
        /// - Target health is unavailable due to an internal error. Applies only to Network Load Balancers.</p> </li> </ul>
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetHealthReasonEnumValue TargetHealthReason { get; set; }
        /// <summary><p>The state of the target.</p></summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetHealthStateEnumValue TargetHealthState { get; set; }
        /// <summary>
        /// <p>The ID of the target. If the target type of the target group is <code>instance</code>, specify an instance ID. If the
        /// target type is <code>ip</code>, specify an IP address. If the target type is <code>lambda</code>, specify the ARN of the
        /// Lambda function. If the target type is <code>alb</code>, specify the ARN of the Application Load Balancer target. </p>
        /// </summary>
        string TargetId { get; set; }
        /// <summary>
        /// <p>The port on which the target is listening. If the target group protocol is GENEVE, the supported port is 6081. If the
        /// target type is <code>alb</code>, the targeted Application Load Balancer must have at least one listener whose port matches
        /// the target group port. This parameter is not used if the target is a Lambda function.</p>
        /// </summary>
        int? TargetPort { get; set; }

    }
}