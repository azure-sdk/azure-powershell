// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of Volume</summary>
    public partial class Volume :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolume,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal
    {

        /// <summary>
        /// The Amazon EFS access point ID to use. If an access point is specified, the root directory value specified in the ``EFSVolumeConfiguration``
        /// must either be omitted or set to ``/`` which will enforce the path set on the EFS access point. If an access point is
        /// used, transit encryption must be on in the ``EFSVolumeConfiguration``. For more information, see [Working with Amazon
        /// EFS access points](https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html) in the *Amazon Elastic File System
        /// User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AuthorizationConfigAccessPointId { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEfsVolumeConfigurationInternal)EfsVolumeConfiguration).AuthorizationConfigAccessPointId; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEfsVolumeConfigurationInternal)EfsVolumeConfiguration).AuthorizationConfigAccessPointId = value ?? null; }

        /// <summary>Property credentialsParameter</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AuthorizationConfigCredentialsParameter { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IFSxWindowsFileServerVolumeConfigurationInternal)FSxWindowsFileServerVolumeConfiguration).AuthorizationConfigCredentialsParameter; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IFSxWindowsFileServerVolumeConfigurationInternal)FSxWindowsFileServerVolumeConfiguration).AuthorizationConfigCredentialsParameter = value ?? null; }

        /// <summary>Property domain</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AuthorizationConfigDomain { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IFSxWindowsFileServerVolumeConfigurationInternal)FSxWindowsFileServerVolumeConfiguration).AuthorizationConfigDomain; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IFSxWindowsFileServerVolumeConfigurationInternal)FSxWindowsFileServerVolumeConfiguration).AuthorizationConfigDomain = value ?? null; }

        /// <summary>
        /// Determines whether to use the Amazon ECS task role defined in a task definition when mounting the Amazon EFS file system.
        /// If it is turned on, transit encryption must be turned on in the ``EFSVolumeConfiguration``. If this parameter is omitted,
        /// the default value of ``DISABLED`` is used. For more information, see [Using Amazon EFS access points](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html#efs-volume-accesspoints)
        /// in the *Amazon Elastic Container Service Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.AuthorizationConfigIam? AuthorizationConfigIam { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEfsVolumeConfigurationInternal)EfsVolumeConfiguration).AuthorizationConfigIam; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEfsVolumeConfigurationInternal)EfsVolumeConfiguration).AuthorizationConfigIam = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.AuthorizationConfigIam)""); }

        /// <summary>Backing field for <see cref="ConfiguredAtLaunch" /> property.</summary>
        private bool? _configuredAtLaunch;

        /// <summary>
        /// Indicates whether the volume should be configured at launch time. This is used to create Amazon EBS volumes for standalone
        /// tasks or tasks created as part of a service. Each task definition revision may only have one volume configured at launch
        /// in the volume configuration. To configure a volume at launch time, use this task definition revision and specify a ``volumeConfigurations``
        /// object when calling the ``CreateService``, ``UpdateService``, ``RunTask`` or ``StartTask`` APIs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public bool? ConfiguredAtLaunch { get => this._configuredAtLaunch; set => this._configuredAtLaunch = value; }

        /// <summary>Backing field for <see cref="DockerVolumeConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDockerVolumeConfiguration _dockerVolumeConfiguration;

        /// <summary>
        /// This parameter is specified when you use Docker volumes. Windows containers only support the use of the ``local`` driver.
        /// To use bind mounts, specify the ``host`` parameter instead. Docker volumes aren't supported by tasks run on FARGATElong.
        /// The ``DockerVolumeConfiguration`` property specifies a Docker volume configuration and is used when you use Docker volumes.
        /// Docker volumes are only supported when you are using the EC2 launch type. Windows containers only support the use of the
        /// ``local`` driver. To use bind mounts, specify a ``host`` instead.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDockerVolumeConfiguration DockerVolumeConfiguration { get => (this._dockerVolumeConfiguration = this._dockerVolumeConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.DockerVolumeConfiguration()); set => this._dockerVolumeConfiguration = value; }

        /// <summary>
        /// If this value is ``true``, the Docker volume is created if it doesn't already exist. This field is only used if the ``scope``
        /// is ``shared``.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? DockerVolumeConfigurationAutoprovision { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDockerVolumeConfigurationInternal)DockerVolumeConfiguration).Autoprovision; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDockerVolumeConfigurationInternal)DockerVolumeConfiguration).Autoprovision = value ?? default(bool); }

        /// <summary>
        /// The Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for
        /// task placement. If the driver was installed using the Docker plugin CLI, use ``docker plugin ls`` to retrieve the driver
        /// name from your container instance. If the driver was installed using another method, use Docker plugin discovery to retrieve
        /// the driver name. For more information, see [Docker plugin discovery](https://docs.aws.amazon.com/https://docs.docker.com/engine/extend/plugin_api/#plugin-discovery).
        /// This parameter maps to ``Driver`` in the [Create a volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate)
        /// section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``xxdriver``
        /// option to [docker volume create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string DockerVolumeConfigurationDriver { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDockerVolumeConfigurationInternal)DockerVolumeConfiguration).Driver; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDockerVolumeConfigurationInternal)DockerVolumeConfiguration).Driver = value ?? null; }

        /// <summary>
        /// A map of Docker driver-specific options passed through. This parameter maps to ``DriverOpts`` in the [Create a volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate)
        /// section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``xxopt``
        /// option to [docker volume create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.IAny DockerVolumeConfigurationDriverOpt { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDockerVolumeConfigurationInternal)DockerVolumeConfiguration).DriverOpt; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDockerVolumeConfigurationInternal)DockerVolumeConfiguration).DriverOpt = value ?? null /* model class */; }

        /// <summary>
        /// Custom metadata to add to your Docker volume. This parameter maps to ``Labels`` in the [Create a volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate)
        /// section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``xxlabel``
        /// option to [docker volume create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.IAny DockerVolumeConfigurationLabel { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDockerVolumeConfigurationInternal)DockerVolumeConfiguration).Label; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDockerVolumeConfigurationInternal)DockerVolumeConfiguration).Label = value ?? null /* model class */; }

        /// <summary>
        /// The scope for the Docker volume that determines its lifecycle. Docker volumes that are scoped to a ``task`` are automatically
        /// provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as ``shared`` persist
        /// after the task stops.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string DockerVolumeConfigurationScope { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDockerVolumeConfigurationInternal)DockerVolumeConfiguration).Scope; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDockerVolumeConfigurationInternal)DockerVolumeConfiguration).Scope = value ?? null; }

        /// <summary>The Amazon EFS file system ID to use.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string EfVolumeConfigurationFilesystemId { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEfsVolumeConfigurationInternal)EfsVolumeConfiguration).FilesystemId; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEfsVolumeConfigurationInternal)EfsVolumeConfiguration).FilesystemId = value ?? null; }

        /// <summary>
        /// The directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted,
        /// the root of the Amazon EFS volume will be used. Specifying ``/`` will have the same effect as omitting this parameter.
        /// If an EFS access point is specified in the ``authorizationConfig``, the root directory parameter must either be omitted
        /// or set to ``/`` which will enforce the path set on the EFS access point.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string EfVolumeConfigurationRootDirectory { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEfsVolumeConfigurationInternal)EfsVolumeConfiguration).RootDirectory; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEfsVolumeConfigurationInternal)EfsVolumeConfiguration).RootDirectory = value ?? null; }

        /// <summary>
        /// Determines whether to use encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server.
        /// Transit encryption must be turned on if Amazon EFS IAM authorization is used. If this parameter is omitted, the default
        /// value of ``DISABLED`` is used. For more information, see [Encrypting data in transit](https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html)
        /// in the *Amazon Elastic File System User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.EfsVolumeConfigurationTransitEncryption? EfVolumeConfigurationTransitEncryption { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEfsVolumeConfigurationInternal)EfsVolumeConfiguration).TransitEncryption; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEfsVolumeConfigurationInternal)EfsVolumeConfiguration).TransitEncryption = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.EfsVolumeConfigurationTransitEncryption)""); }

        /// <summary>
        /// The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server. If you do not specify
        /// a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses. For more information,
        /// see [EFS mount helper](https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html) in the *Amazon Elastic File System
        /// User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public int? EfVolumeConfigurationTransitEncryptionPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEfsVolumeConfigurationInternal)EfsVolumeConfiguration).TransitEncryptionPort; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEfsVolumeConfigurationInternal)EfsVolumeConfiguration).TransitEncryptionPort = value ?? default(int); }

        /// <summary>Backing field for <see cref="EfsVolumeConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEfsVolumeConfiguration _efsVolumeConfiguration;

        /// <summary>
        /// This parameter is specified when you use an Amazon Elastic File System file system for task storage. This parameter is
        /// specified when you're using an Amazon Elastic File System file system for task storage. For more information, see [Amazon
        /// EFS volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html) in the *Amazon Elastic Container
        /// Service Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEfsVolumeConfiguration EfsVolumeConfiguration { get => (this._efsVolumeConfiguration = this._efsVolumeConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.EfsVolumeConfiguration()); set => this._efsVolumeConfiguration = value; }

        /// <summary>The Amazon FSx for Windows File Server file system ID to use.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string FSxWindowFileServerVolumeConfigurationFileSystemId { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IFSxWindowsFileServerVolumeConfigurationInternal)FSxWindowsFileServerVolumeConfiguration).FileSystemId; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IFSxWindowsFileServerVolumeConfigurationInternal)FSxWindowsFileServerVolumeConfiguration).FileSystemId = value ?? null; }

        /// <summary>
        /// The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the host.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string FSxWindowFileServerVolumeConfigurationRootDirectory { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IFSxWindowsFileServerVolumeConfigurationInternal)FSxWindowsFileServerVolumeConfiguration).RootDirectory; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IFSxWindowsFileServerVolumeConfigurationInternal)FSxWindowsFileServerVolumeConfiguration).RootDirectory = value ?? null; }

        /// <summary>
        /// Backing field for <see cref="FSxWindowsFileServerVolumeConfiguration" /> property.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IFSxWindowsFileServerVolumeConfiguration _fSxWindowsFileServerVolumeConfiguration;

        /// <summary>
        /// This parameter is specified when you use Amazon FSx for Windows File Server file system for task storage. This parameter
        /// is specified when you're using [Amazon FSx for Windows File Server](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/what-is.html)
        /// file system for task storage. For more information and the input format, see [Amazon FSx for Windows File Server volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/wfsx-volumes.html)
        /// in the *Amazon Elastic Container Service Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IFSxWindowsFileServerVolumeConfiguration FSxWindowsFileServerVolumeConfiguration { get => (this._fSxWindowsFileServerVolumeConfiguration = this._fSxWindowsFileServerVolumeConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.FSxWindowsFileServerVolumeConfiguration()); set => this._fSxWindowsFileServerVolumeConfiguration = value; }

        /// <summary>Backing field for <see cref="Host" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IHostVolumeProperties _host;

        /// <summary>
        /// This parameter is specified when you use bind mount host volumes. The contents of the ``host`` parameter determine whether
        /// your bind mount host volume persists on the host container instance and where it's stored. If the ``host`` parameter is
        /// empty, then the Docker daemon assigns a host path for your data volume. However, the data isn't guaranteed to persist
        /// after the containers that are associated with it stop running. Windows containers can mount whole directories on the same
        /// drive as ``$env:ProgramData``. Windows containers can't mount directories on a different drive, and mount point can't
        /// be across drives. For example, you can mount ``C:\my\path:C:\my\path`` and ``D:\:D:\``, but not ``D:\my\path:C:\my\path``
        /// or ``D:\:C:\my\path``. The ``HostVolumeProperties`` property specifies details on a container instance bind mount host
        /// volume.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IHostVolumeProperties Host { get => (this._host = this._host ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.HostVolumeProperties()); set => this._host = value; }

        /// <summary>
        /// When the ``host`` parameter is used, specify a ``sourcePath`` to declare the path on the host container instance that's
        /// presented to the container. If this parameter is empty, then the Docker daemon has assigned a host path for you. If the
        /// ``host`` parameter contains a ``sourcePath`` file location, then the data volume persists at the specified location on
        /// the host container instance until you delete it manually. If the ``sourcePath`` value doesn't exist on the host container
        /// instance, the Docker daemon creates it. If the location does exist, the contents of the source path folder are exported.
        /// If you're using the Fargate launch type, the ``sourcePath`` parameter is not supported.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string HostSourcePath { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IHostVolumePropertiesInternal)Host).SourcePath; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IHostVolumePropertiesInternal)Host).SourcePath = value ?? null; }

        /// <summary>Internal Acessors for DockerVolumeConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDockerVolumeConfiguration Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal.DockerVolumeConfiguration { get => (this._dockerVolumeConfiguration = this._dockerVolumeConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.DockerVolumeConfiguration()); set { {_dockerVolumeConfiguration = value;} } }

        /// <summary>Internal Acessors for EfVolumeConfigurationAuthorizationConfig</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAuthorizationConfig Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal.EfVolumeConfigurationAuthorizationConfig { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEfsVolumeConfigurationInternal)EfsVolumeConfiguration).AuthorizationConfig; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEfsVolumeConfigurationInternal)EfsVolumeConfiguration).AuthorizationConfig = value; }

        /// <summary>Internal Acessors for EfsVolumeConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEfsVolumeConfiguration Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal.EfsVolumeConfiguration { get => (this._efsVolumeConfiguration = this._efsVolumeConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.EfsVolumeConfiguration()); set { {_efsVolumeConfiguration = value;} } }

        /// <summary>Internal Acessors for FSxWindowFileServerVolumeConfigurationAuthorizationConfig</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IFSxAuthorizationConfig Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal.FSxWindowFileServerVolumeConfigurationAuthorizationConfig { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IFSxWindowsFileServerVolumeConfigurationInternal)FSxWindowsFileServerVolumeConfiguration).AuthorizationConfig; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IFSxWindowsFileServerVolumeConfigurationInternal)FSxWindowsFileServerVolumeConfiguration).AuthorizationConfig = value; }

        /// <summary>Internal Acessors for FSxWindowsFileServerVolumeConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IFSxWindowsFileServerVolumeConfiguration Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal.FSxWindowsFileServerVolumeConfiguration { get => (this._fSxWindowsFileServerVolumeConfiguration = this._fSxWindowsFileServerVolumeConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.FSxWindowsFileServerVolumeConfiguration()); set { {_fSxWindowsFileServerVolumeConfiguration = value;} } }

        /// <summary>Internal Acessors for Host</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IHostVolumeProperties Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal.Host { get => (this._host = this._host ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.HostVolumeProperties()); set { {_host = value;} } }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>
        /// The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. When
        /// using a volume configured at launch, the ``name`` is required and must also be specified as the volume name in the ``ServiceVolumeConfiguration``
        /// or ``TaskVolumeConfiguration`` parameter when creating your service or standalone task. For all other types of volumes,
        /// this name is referenced in the ``sourceVolume`` parameter of the ``mountPoints`` object in the container definition. When
        /// a volume is using the ``efsVolumeConfiguration``, the name is required.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Creates an new <see cref="Volume" /> instance.</summary>
        public Volume()
        {

        }
    }
    /// Definition of Volume
    public partial interface IVolume :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The Amazon EFS access point ID to use. If an access point is specified, the root directory value specified in the ``EFSVolumeConfiguration``
        /// must either be omitted or set to ``/`` which will enforce the path set on the EFS access point. If an access point is
        /// used, transit encryption must be on in the ``EFSVolumeConfiguration``. For more information, see [Working with Amazon
        /// EFS access points](https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html) in the *Amazon Elastic File System
        /// User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Amazon EFS access point ID to use. If an access point is specified, the root directory value specified in the ``EFSVolumeConfiguration`` must either be omitted or set to ``/`` which will enforce the path set on the EFS access point. If an access point is used, transit encryption must be on in the ``EFSVolumeConfiguration``. For more information, see [Working with Amazon EFS access points](https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html) in the *Amazon Elastic File System User Guide*.",
        SerializedName = @"accessPointId",
        PossibleTypes = new [] { typeof(string) })]
        string AuthorizationConfigAccessPointId { get; set; }
        /// <summary>Property credentialsParameter</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property credentialsParameter",
        SerializedName = @"credentialsParameter",
        PossibleTypes = new [] { typeof(string) })]
        string AuthorizationConfigCredentialsParameter { get; set; }
        /// <summary>Property domain</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property domain",
        SerializedName = @"domain",
        PossibleTypes = new [] { typeof(string) })]
        string AuthorizationConfigDomain { get; set; }
        /// <summary>
        /// Determines whether to use the Amazon ECS task role defined in a task definition when mounting the Amazon EFS file system.
        /// If it is turned on, transit encryption must be turned on in the ``EFSVolumeConfiguration``. If this parameter is omitted,
        /// the default value of ``DISABLED`` is used. For more information, see [Using Amazon EFS access points](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html#efs-volume-accesspoints)
        /// in the *Amazon Elastic Container Service Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Determines whether to use the Amazon ECS task role defined in a task definition when mounting the Amazon EFS file system. If it is turned on, transit encryption must be turned on in the ``EFSVolumeConfiguration``. If this parameter is omitted, the default value of ``DISABLED`` is used. For more information, see [Using Amazon EFS access points](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html#efs-volume-accesspoints) in the *Amazon Elastic Container Service Developer Guide*.",
        SerializedName = @"iam",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.AuthorizationConfigIam) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.AuthorizationConfigIam? AuthorizationConfigIam { get; set; }
        /// <summary>
        /// Indicates whether the volume should be configured at launch time. This is used to create Amazon EBS volumes for standalone
        /// tasks or tasks created as part of a service. Each task definition revision may only have one volume configured at launch
        /// in the volume configuration. To configure a volume at launch time, use this task definition revision and specify a ``volumeConfigurations``
        /// object when calling the ``CreateService``, ``UpdateService``, ``RunTask`` or ``StartTask`` APIs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether the volume should be configured at launch time. This is used to create Amazon EBS volumes for standalone tasks or tasks created as part of a service. Each task definition revision may only have one volume configured at launch in the volume configuration. To configure a volume at launch time, use this task definition revision and specify a ``volumeConfigurations`` object when calling the ``CreateService``, ``UpdateService``, ``RunTask`` or ``StartTask`` APIs.",
        SerializedName = @"configuredAtLaunch",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ConfiguredAtLaunch { get; set; }
        /// <summary>
        /// If this value is ``true``, the Docker volume is created if it doesn't already exist. This field is only used if the ``scope``
        /// is ``shared``.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If this value is ``true``, the Docker volume is created if it doesn't already exist.  This field is only used if the ``scope`` is ``shared``.",
        SerializedName = @"autoprovision",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DockerVolumeConfigurationAutoprovision { get; set; }
        /// <summary>
        /// The Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for
        /// task placement. If the driver was installed using the Docker plugin CLI, use ``docker plugin ls`` to retrieve the driver
        /// name from your container instance. If the driver was installed using another method, use Docker plugin discovery to retrieve
        /// the driver name. For more information, see [Docker plugin discovery](https://docs.aws.amazon.com/https://docs.docker.com/engine/extend/plugin_api/#plugin-discovery).
        /// This parameter maps to ``Driver`` in the [Create a volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate)
        /// section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``xxdriver``
        /// option to [docker volume create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement. If the driver was installed using the Docker plugin CLI, use ``docker plugin ls`` to retrieve the driver name from your container instance. If the driver was installed using another method, use Docker plugin discovery to retrieve the driver name. For more information, see [Docker plugin discovery](https://docs.aws.amazon.com/https://docs.docker.com/engine/extend/plugin_api/#plugin-discovery). This parameter maps to ``Driver`` in the [Create a volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``xxdriver`` option to [docker volume create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).",
        SerializedName = @"driver",
        PossibleTypes = new [] { typeof(string) })]
        string DockerVolumeConfigurationDriver { get; set; }
        /// <summary>
        /// A map of Docker driver-specific options passed through. This parameter maps to ``DriverOpts`` in the [Create a volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate)
        /// section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``xxopt``
        /// option to [docker volume create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A map of Docker driver-specific options passed through. This parameter maps to ``DriverOpts`` in the [Create a volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``xxopt`` option to [docker volume create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).",
        SerializedName = @"driverOpts",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.IAny) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.IAny DockerVolumeConfigurationDriverOpt { get; set; }
        /// <summary>
        /// Custom metadata to add to your Docker volume. This parameter maps to ``Labels`` in the [Create a volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate)
        /// section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``xxlabel``
        /// option to [docker volume create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Custom metadata to add to your Docker volume. This parameter maps to ``Labels`` in the [Create a volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``xxlabel`` option to [docker volume create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).",
        SerializedName = @"labels",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.IAny) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.IAny DockerVolumeConfigurationLabel { get; set; }
        /// <summary>
        /// The scope for the Docker volume that determines its lifecycle. Docker volumes that are scoped to a ``task`` are automatically
        /// provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as ``shared`` persist
        /// after the task stops.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The scope for the Docker volume that determines its lifecycle. Docker volumes that are scoped to a ``task`` are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as ``shared`` persist after the task stops.",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        string DockerVolumeConfigurationScope { get; set; }
        /// <summary>The Amazon EFS file system ID to use.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Amazon EFS file system ID to use.",
        SerializedName = @"filesystemId",
        PossibleTypes = new [] { typeof(string) })]
        string EfVolumeConfigurationFilesystemId { get; set; }
        /// <summary>
        /// The directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted,
        /// the root of the Amazon EFS volume will be used. Specifying ``/`` will have the same effect as omitting this parameter.
        /// If an EFS access point is specified in the ``authorizationConfig``, the root directory parameter must either be omitted
        /// or set to ``/`` which will enforce the path set on the EFS access point.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume will be used. Specifying ``/`` will have the same effect as omitting this parameter.  If an EFS access point is specified in the ``authorizationConfig``, the root directory parameter must either be omitted or set to ``/`` which will enforce the path set on the EFS access point.",
        SerializedName = @"rootDirectory",
        PossibleTypes = new [] { typeof(string) })]
        string EfVolumeConfigurationRootDirectory { get; set; }
        /// <summary>
        /// Determines whether to use encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server.
        /// Transit encryption must be turned on if Amazon EFS IAM authorization is used. If this parameter is omitted, the default
        /// value of ``DISABLED`` is used. For more information, see [Encrypting data in transit](https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html)
        /// in the *Amazon Elastic File System User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Determines whether to use encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be turned on if Amazon EFS IAM authorization is used. If this parameter is omitted, the default value of ``DISABLED`` is used. For more information, see [Encrypting data in transit](https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html) in the *Amazon Elastic File System User Guide*.",
        SerializedName = @"transitEncryption",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.EfsVolumeConfigurationTransitEncryption) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.EfsVolumeConfigurationTransitEncryption? EfVolumeConfigurationTransitEncryption { get; set; }
        /// <summary>
        /// The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server. If you do not specify
        /// a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses. For more information,
        /// see [EFS mount helper](https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html) in the *Amazon Elastic File System
        /// User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses. For more information, see [EFS mount helper](https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html) in the *Amazon Elastic File System User Guide*.",
        SerializedName = @"transitEncryptionPort",
        PossibleTypes = new [] { typeof(int) })]
        int? EfVolumeConfigurationTransitEncryptionPort { get; set; }
        /// <summary>The Amazon FSx for Windows File Server file system ID to use.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Amazon FSx for Windows File Server file system ID to use.",
        SerializedName = @"fileSystemId",
        PossibleTypes = new [] { typeof(string) })]
        string FSxWindowFileServerVolumeConfigurationFileSystemId { get; set; }
        /// <summary>
        /// The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the host.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the host.",
        SerializedName = @"rootDirectory",
        PossibleTypes = new [] { typeof(string) })]
        string FSxWindowFileServerVolumeConfigurationRootDirectory { get; set; }
        /// <summary>
        /// When the ``host`` parameter is used, specify a ``sourcePath`` to declare the path on the host container instance that's
        /// presented to the container. If this parameter is empty, then the Docker daemon has assigned a host path for you. If the
        /// ``host`` parameter contains a ``sourcePath`` file location, then the data volume persists at the specified location on
        /// the host container instance until you delete it manually. If the ``sourcePath`` value doesn't exist on the host container
        /// instance, the Docker daemon creates it. If the location does exist, the contents of the source path folder are exported.
        /// If you're using the Fargate launch type, the ``sourcePath`` parameter is not supported.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"When the ``host`` parameter is used, specify a ``sourcePath`` to declare the path on the host container instance that's presented to the container. If this parameter is empty, then the Docker daemon has assigned a host path for you. If the ``host`` parameter contains a ``sourcePath`` file location, then the data volume persists at the specified location on the host container instance until you delete it manually. If the ``sourcePath`` value doesn't exist on the host container instance, the Docker daemon creates it. If the location does exist, the contents of the source path folder are exported. If you're using the Fargate launch type, the ``sourcePath`` parameter is not supported.",
        SerializedName = @"sourcePath",
        PossibleTypes = new [] { typeof(string) })]
        string HostSourcePath { get; set; }
        /// <summary>
        /// The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. When
        /// using a volume configured at launch, the ``name`` is required and must also be specified as the volume name in the ``ServiceVolumeConfiguration``
        /// or ``TaskVolumeConfiguration`` parameter when creating your service or standalone task. For all other types of volumes,
        /// this name is referenced in the ``sourceVolume`` parameter of the ``mountPoints`` object in the container definition. When
        /// a volume is using the ``efsVolumeConfiguration``, the name is required.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. When using a volume configured at launch, the ``name`` is required and must also be specified as the volume name in the ``ServiceVolumeConfiguration`` or ``TaskVolumeConfiguration`` parameter when creating your service or standalone task. For all other types of volumes, this name is referenced in the ``sourceVolume`` parameter of the ``mountPoints`` object in the container definition. When a volume is using the ``efsVolumeConfiguration``, the name is required.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }

    }
    /// Definition of Volume
    internal partial interface IVolumeInternal

    {
        /// <summary>
        /// The Amazon EFS access point ID to use. If an access point is specified, the root directory value specified in the ``EFSVolumeConfiguration``
        /// must either be omitted or set to ``/`` which will enforce the path set on the EFS access point. If an access point is
        /// used, transit encryption must be on in the ``EFSVolumeConfiguration``. For more information, see [Working with Amazon
        /// EFS access points](https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html) in the *Amazon Elastic File System
        /// User Guide*.
        /// </summary>
        string AuthorizationConfigAccessPointId { get; set; }
        /// <summary>Property credentialsParameter</summary>
        string AuthorizationConfigCredentialsParameter { get; set; }
        /// <summary>Property domain</summary>
        string AuthorizationConfigDomain { get; set; }
        /// <summary>
        /// Determines whether to use the Amazon ECS task role defined in a task definition when mounting the Amazon EFS file system.
        /// If it is turned on, transit encryption must be turned on in the ``EFSVolumeConfiguration``. If this parameter is omitted,
        /// the default value of ``DISABLED`` is used. For more information, see [Using Amazon EFS access points](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html#efs-volume-accesspoints)
        /// in the *Amazon Elastic Container Service Developer Guide*.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.AuthorizationConfigIam? AuthorizationConfigIam { get; set; }
        /// <summary>
        /// Indicates whether the volume should be configured at launch time. This is used to create Amazon EBS volumes for standalone
        /// tasks or tasks created as part of a service. Each task definition revision may only have one volume configured at launch
        /// in the volume configuration. To configure a volume at launch time, use this task definition revision and specify a ``volumeConfigurations``
        /// object when calling the ``CreateService``, ``UpdateService``, ``RunTask`` or ``StartTask`` APIs.
        /// </summary>
        bool? ConfiguredAtLaunch { get; set; }
        /// <summary>
        /// This parameter is specified when you use Docker volumes. Windows containers only support the use of the ``local`` driver.
        /// To use bind mounts, specify the ``host`` parameter instead. Docker volumes aren't supported by tasks run on FARGATElong.
        /// The ``DockerVolumeConfiguration`` property specifies a Docker volume configuration and is used when you use Docker volumes.
        /// Docker volumes are only supported when you are using the EC2 launch type. Windows containers only support the use of the
        /// ``local`` driver. To use bind mounts, specify a ``host`` instead.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDockerVolumeConfiguration DockerVolumeConfiguration { get; set; }
        /// <summary>
        /// If this value is ``true``, the Docker volume is created if it doesn't already exist. This field is only used if the ``scope``
        /// is ``shared``.
        /// </summary>
        bool? DockerVolumeConfigurationAutoprovision { get; set; }
        /// <summary>
        /// The Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for
        /// task placement. If the driver was installed using the Docker plugin CLI, use ``docker plugin ls`` to retrieve the driver
        /// name from your container instance. If the driver was installed using another method, use Docker plugin discovery to retrieve
        /// the driver name. For more information, see [Docker plugin discovery](https://docs.aws.amazon.com/https://docs.docker.com/engine/extend/plugin_api/#plugin-discovery).
        /// This parameter maps to ``Driver`` in the [Create a volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate)
        /// section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``xxdriver``
        /// option to [docker volume create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
        /// </summary>
        string DockerVolumeConfigurationDriver { get; set; }
        /// <summary>
        /// A map of Docker driver-specific options passed through. This parameter maps to ``DriverOpts`` in the [Create a volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate)
        /// section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``xxopt``
        /// option to [docker volume create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.IAny DockerVolumeConfigurationDriverOpt { get; set; }
        /// <summary>
        /// Custom metadata to add to your Docker volume. This parameter maps to ``Labels`` in the [Create a volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate)
        /// section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``xxlabel``
        /// option to [docker volume create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.IAny DockerVolumeConfigurationLabel { get; set; }
        /// <summary>
        /// The scope for the Docker volume that determines its lifecycle. Docker volumes that are scoped to a ``task`` are automatically
        /// provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as ``shared`` persist
        /// after the task stops.
        /// </summary>
        string DockerVolumeConfigurationScope { get; set; }
        /// <summary>
        /// The authorization configuration details for the Amazon EFS file system. The authorization configuration details for the
        /// Amazon EFS file system.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAuthorizationConfig EfVolumeConfigurationAuthorizationConfig { get; set; }
        /// <summary>The Amazon EFS file system ID to use.</summary>
        string EfVolumeConfigurationFilesystemId { get; set; }
        /// <summary>
        /// The directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted,
        /// the root of the Amazon EFS volume will be used. Specifying ``/`` will have the same effect as omitting this parameter.
        /// If an EFS access point is specified in the ``authorizationConfig``, the root directory parameter must either be omitted
        /// or set to ``/`` which will enforce the path set on the EFS access point.
        /// </summary>
        string EfVolumeConfigurationRootDirectory { get; set; }
        /// <summary>
        /// Determines whether to use encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server.
        /// Transit encryption must be turned on if Amazon EFS IAM authorization is used. If this parameter is omitted, the default
        /// value of ``DISABLED`` is used. For more information, see [Encrypting data in transit](https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html)
        /// in the *Amazon Elastic File System User Guide*.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.EfsVolumeConfigurationTransitEncryption? EfVolumeConfigurationTransitEncryption { get; set; }
        /// <summary>
        /// The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server. If you do not specify
        /// a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses. For more information,
        /// see [EFS mount helper](https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html) in the *Amazon Elastic File System
        /// User Guide*.
        /// </summary>
        int? EfVolumeConfigurationTransitEncryptionPort { get; set; }
        /// <summary>
        /// This parameter is specified when you use an Amazon Elastic File System file system for task storage. This parameter is
        /// specified when you're using an Amazon Elastic File System file system for task storage. For more information, see [Amazon
        /// EFS volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html) in the *Amazon Elastic Container
        /// Service Developer Guide*.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEfsVolumeConfiguration EfsVolumeConfiguration { get; set; }
        /// <summary>
        /// The authorization configuration details for the Amazon FSx for Windows File Server file system.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IFSxAuthorizationConfig FSxWindowFileServerVolumeConfigurationAuthorizationConfig { get; set; }
        /// <summary>The Amazon FSx for Windows File Server file system ID to use.</summary>
        string FSxWindowFileServerVolumeConfigurationFileSystemId { get; set; }
        /// <summary>
        /// The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the host.
        /// </summary>
        string FSxWindowFileServerVolumeConfigurationRootDirectory { get; set; }
        /// <summary>
        /// This parameter is specified when you use Amazon FSx for Windows File Server file system for task storage. This parameter
        /// is specified when you're using [Amazon FSx for Windows File Server](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/what-is.html)
        /// file system for task storage. For more information and the input format, see [Amazon FSx for Windows File Server volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/wfsx-volumes.html)
        /// in the *Amazon Elastic Container Service Developer Guide*.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IFSxWindowsFileServerVolumeConfiguration FSxWindowsFileServerVolumeConfiguration { get; set; }
        /// <summary>
        /// This parameter is specified when you use bind mount host volumes. The contents of the ``host`` parameter determine whether
        /// your bind mount host volume persists on the host container instance and where it's stored. If the ``host`` parameter is
        /// empty, then the Docker daemon assigns a host path for your data volume. However, the data isn't guaranteed to persist
        /// after the containers that are associated with it stop running. Windows containers can mount whole directories on the same
        /// drive as ``$env:ProgramData``. Windows containers can't mount directories on a different drive, and mount point can't
        /// be across drives. For example, you can mount ``C:\my\path:C:\my\path`` and ``D:\:D:\``, but not ``D:\my\path:C:\my\path``
        /// or ``D:\:C:\my\path``. The ``HostVolumeProperties`` property specifies details on a container instance bind mount host
        /// volume.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IHostVolumeProperties Host { get; set; }
        /// <summary>
        /// When the ``host`` parameter is used, specify a ``sourcePath`` to declare the path on the host container instance that's
        /// presented to the container. If this parameter is empty, then the Docker daemon has assigned a host path for you. If the
        /// ``host`` parameter contains a ``sourcePath`` file location, then the data volume persists at the specified location on
        /// the host container instance until you delete it manually. If the ``sourcePath`` value doesn't exist on the host container
        /// instance, the Docker daemon creates it. If the location does exist, the contents of the source path folder are exported.
        /// If you're using the Fargate launch type, the ``sourcePath`` parameter is not supported.
        /// </summary>
        string HostSourcePath { get; set; }
        /// <summary>
        /// The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. When
        /// using a volume configured at launch, the ``name`` is required and must also be specified as the volume name in the ``ServiceVolumeConfiguration``
        /// or ``TaskVolumeConfiguration`` parameter when creating your service or standalone task. For all other types of volumes,
        /// this name is referenced in the ``sourceVolume`` parameter of the ``mountPoints`` object in the container definition. When
        /// a volume is using the ``efsVolumeConfiguration``, the name is required.
        /// </summary>
        string Name { get; set; }

    }
}