// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of awsEc2Subnet</summary>
    public partial class AwsEc2SubnetProperties :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetProperties,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal
    {

        /// <summary>Backing field for <see cref="AssignIpv6AddressOnCreation" /> property.</summary>
        private bool? _assignIpv6AddressOnCreation;

        /// <summary>
        /// Indicates whether a network interface created in this subnet receives an IPv6 address. The default value is ``false``.
        /// If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public bool? AssignIpv6AddressOnCreation { get => this._assignIpv6AddressOnCreation; set => this._assignIpv6AddressOnCreation = value; }

        /// <summary>Backing field for <see cref="AvailabilityZone" /> property.</summary>
        private string _availabilityZone;

        /// <summary>
        /// The Availability Zone of the subnet. If you update this property, you must also update the ``CidrBlock`` property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string AvailabilityZone { get => this._availabilityZone; set => this._availabilityZone = value; }

        /// <summary>Backing field for <see cref="AvailabilityZoneId" /> property.</summary>
        private string _availabilityZoneId;

        /// <summary>The AZ ID of the subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string AvailabilityZoneId { get => this._availabilityZoneId; set => this._availabilityZoneId = value; }

        /// <summary>Backing field for <see cref="CidrBlock" /> property.</summary>
        private string _cidrBlock;

        /// <summary>
        /// The IPv4 CIDR block assigned to the subnet. If you update this property, we create a new subnet, and then delete the existing
        /// one.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string CidrBlock { get => this._cidrBlock; set => this._cidrBlock = value; }

        /// <summary>Backing field for <see cref="EnableDns64" /> property.</summary>
        private bool? _enableDns64;

        /// <summary>
        /// Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses
        /// for IPv4-only destinations. For more information, see [DNS64 and NAT64](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-nat64-dns64)
        /// in the *User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public bool? EnableDns64 { get => this._enableDns64; set => this._enableDns64 = value; }

        /// <summary>Backing field for <see cref="EnableLniAtDeviceIndex" /> property.</summary>
        private int? _enableLniAtDeviceIndex;

        /// <summary>
        /// Indicates the device position for local network interfaces in this subnet. For example, ``1`` indicates local network
        /// interfaces in this subnet are the secondary network interface (eth1).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? EnableLniAtDeviceIndex { get => this._enableLniAtDeviceIndex; set => this._enableLniAtDeviceIndex = value; }

        /// <summary>Backing field for <see cref="Ipv4IpamPoolId" /> property.</summary>
        private string _ipv4IpamPoolId;

        /// <summary>An IPv4 IPAM pool ID for the subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string Ipv4IpamPoolId { get => this._ipv4IpamPoolId; set => this._ipv4IpamPoolId = value; }

        /// <summary>Backing field for <see cref="Ipv4NetmaskLength" /> property.</summary>
        private int? _ipv4NetmaskLength;

        /// <summary>An IPv4 netmask length for the subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? Ipv4NetmaskLength { get => this._ipv4NetmaskLength; set => this._ipv4NetmaskLength = value; }

        /// <summary>Backing field for <see cref="Ipv6CidrBlock" /> property.</summary>
        private string _ipv6CidrBlock;

        /// <summary>
        /// The IPv6 CIDR block. If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string Ipv6CidrBlock { get => this._ipv6CidrBlock; set => this._ipv6CidrBlock = value; }

        /// <summary>Backing field for <see cref="Ipv6CidrBlocks" /> property.</summary>
        private string[] _ipv6CidrBlocks;

        /// <summary>The IPv6 network ranges for the subnet, in CIDR notation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string[] Ipv6CidrBlocks { get => this._ipv6CidrBlocks; set => this._ipv6CidrBlocks = value; }

        /// <summary>Backing field for <see cref="Ipv6IpamPoolId" /> property.</summary>
        private string _ipv6IpamPoolId;

        /// <summary>An IPv6 IPAM pool ID for the subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string Ipv6IpamPoolId { get => this._ipv6IpamPoolId; set => this._ipv6IpamPoolId = value; }

        /// <summary>Backing field for <see cref="Ipv6Native" /> property.</summary>
        private bool? _ipv6Native;

        /// <summary>
        /// Indicates whether this is an IPv6 only subnet. For more information, see [Subnet basics](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html#subnet-basics)
        /// in the *User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public bool? Ipv6Native { get => this._ipv6Native; set => this._ipv6Native = value; }

        /// <summary>Backing field for <see cref="Ipv6NetmaskLength" /> property.</summary>
        private int? _ipv6NetmaskLength;

        /// <summary>An IPv6 netmask length for the subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? Ipv6NetmaskLength { get => this._ipv6NetmaskLength; set => this._ipv6NetmaskLength = value; }

        /// <summary>Backing field for <see cref="MapPublicIPOnLaunch" /> property.</summary>
        private bool? _mapPublicIPOnLaunch;

        /// <summary>
        /// Indicates whether instances launched in this subnet receive a public IPv4 address. The default value is ``false``. AWS
        /// charges for all public IPv4 addresses, including public IPv4 addresses associated with running instances and Elastic IP
        /// addresses. For more information, see the *Public IPv4 Address* tab on the [VPC pricing page](https://docs.aws.amazon.com/vpc/pricing/).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public bool? MapPublicIPOnLaunch { get => this._mapPublicIPOnLaunch; set => this._mapPublicIPOnLaunch = value; }

        /// <summary>Internal Acessors for PrivateDnsNameOptionsOnLaunch</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPrivateDnsNameOptionsOnLaunchModelProperties Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetPropertiesInternal.PrivateDnsNameOptionsOnLaunch { get => (this._privateDnsNameOptionsOnLaunch = this._privateDnsNameOptionsOnLaunch ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.PrivateDnsNameOptionsOnLaunchModelProperties()); set { {_privateDnsNameOptionsOnLaunch = value;} } }

        /// <summary>Backing field for <see cref="NetworkAclAssociationId" /> property.</summary>
        private string _networkAclAssociationId;

        /// <summary>Property networkAclAssociationId</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string NetworkAclAssociationId { get => this._networkAclAssociationId; set => this._networkAclAssociationId = value; }

        /// <summary>Backing field for <see cref="OutpostArn" /> property.</summary>
        private string _outpostArn;

        /// <summary>The Amazon Resource Name (ARN) of the Outpost.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string OutpostArn { get => this._outpostArn; set => this._outpostArn = value; }

        /// <summary>Property enableResourceNameDnsARecord</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? PrivateDnsNameOptionOnLaunchEnableResourceNameDnsARecord { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPrivateDnsNameOptionsOnLaunchModelPropertiesInternal)PrivateDnsNameOptionsOnLaunch).EnableResourceNameDnsARecord; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPrivateDnsNameOptionsOnLaunchModelPropertiesInternal)PrivateDnsNameOptionsOnLaunch).EnableResourceNameDnsARecord = value ?? default(bool); }

        /// <summary>Property enableResourceNameDnsAAAARecord</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? PrivateDnsNameOptionOnLaunchEnableResourceNameDnsAaaaRecord { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPrivateDnsNameOptionsOnLaunchModelPropertiesInternal)PrivateDnsNameOptionsOnLaunch).EnableResourceNameDnsAaaaRecord; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPrivateDnsNameOptionsOnLaunchModelPropertiesInternal)PrivateDnsNameOptionsOnLaunch).EnableResourceNameDnsAaaaRecord = value ?? default(bool); }

        /// <summary>Property hostnameType</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string PrivateDnsNameOptionOnLaunchHostnameType { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPrivateDnsNameOptionsOnLaunchModelPropertiesInternal)PrivateDnsNameOptionsOnLaunch).HostnameType; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPrivateDnsNameOptionsOnLaunchModelPropertiesInternal)PrivateDnsNameOptionsOnLaunch).HostnameType = value ?? null; }

        /// <summary>Backing field for <see cref="PrivateDnsNameOptionsOnLaunch" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPrivateDnsNameOptionsOnLaunchModelProperties _privateDnsNameOptionsOnLaunch;

        /// <summary>
        /// The hostname type for EC2 instances launched into this subnet and how DNS A and AAAA record queries to the instances should
        /// be handled. For more information, see [Amazon EC2 instance hostname types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html)
        /// in the *User Guide*. Available options: + EnableResourceNameDnsAAAARecord (true | false) + EnableResourceNameDnsARecord
        /// (true | false) + HostnameType (ip-name | resource-name)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPrivateDnsNameOptionsOnLaunchModelProperties PrivateDnsNameOptionsOnLaunch { get => (this._privateDnsNameOptionsOnLaunch = this._privateDnsNameOptionsOnLaunch ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.PrivateDnsNameOptionsOnLaunchModelProperties()); set => this._privateDnsNameOptionsOnLaunch = value; }

        /// <summary>Backing field for <see cref="SubnetId" /> property.</summary>
        private string _subnetId;

        /// <summary>Property subnetId</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string SubnetId { get => this._subnetId; set => this._subnetId = value; }

        /// <summary>Backing field for <see cref="Tag" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated21[] _tag;

        /// <summary>Any tags assigned to the subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated21[] Tag { get => this._tag; set => this._tag = value; }

        /// <summary>Backing field for <see cref="VpcId" /> property.</summary>
        private string _vpcId;

        /// <summary>
        /// The ID of the VPC the subnet is in. If you update this property, you must also update the ``CidrBlock`` property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string VpcId { get => this._vpcId; set => this._vpcId = value; }

        /// <summary>Creates an new <see cref="AwsEc2SubnetProperties" /> instance.</summary>
        public AwsEc2SubnetProperties()
        {

        }
    }
    /// Definition of awsEc2Subnet
    public partial interface IAwsEc2SubnetProperties :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Indicates whether a network interface created in this subnet receives an IPv6 address. The default value is ``false``.
        /// If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether a network interface created in this subnet receives an IPv6 address. The default value is ``false``. If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.",
        SerializedName = @"assignIpv6AddressOnCreation",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AssignIpv6AddressOnCreation { get; set; }
        /// <summary>
        /// The Availability Zone of the subnet. If you update this property, you must also update the ``CidrBlock`` property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Availability Zone of the subnet. If you update this property, you must also update the ``CidrBlock`` property.",
        SerializedName = @"availabilityZone",
        PossibleTypes = new [] { typeof(string) })]
        string AvailabilityZone { get; set; }
        /// <summary>The AZ ID of the subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The AZ ID of the subnet.",
        SerializedName = @"availabilityZoneId",
        PossibleTypes = new [] { typeof(string) })]
        string AvailabilityZoneId { get; set; }
        /// <summary>
        /// The IPv4 CIDR block assigned to the subnet. If you update this property, we create a new subnet, and then delete the existing
        /// one.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The IPv4 CIDR block assigned to the subnet. If you update this property, we create a new subnet, and then delete the existing one.",
        SerializedName = @"cidrBlock",
        PossibleTypes = new [] { typeof(string) })]
        string CidrBlock { get; set; }
        /// <summary>
        /// Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses
        /// for IPv4-only destinations. For more information, see [DNS64 and NAT64](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-nat64-dns64)
        /// in the *User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. For more information, see [DNS64 and NAT64](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-nat64-dns64) in the *User Guide*.",
        SerializedName = @"enableDns64",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnableDns64 { get; set; }
        /// <summary>
        /// Indicates the device position for local network interfaces in this subnet. For example, ``1`` indicates local network
        /// interfaces in this subnet are the secondary network interface (eth1).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates the device position for local network interfaces in this subnet. For example, ``1`` indicates local network interfaces in this subnet are the secondary network interface (eth1).",
        SerializedName = @"enableLniAtDeviceIndex",
        PossibleTypes = new [] { typeof(int) })]
        int? EnableLniAtDeviceIndex { get; set; }
        /// <summary>An IPv4 IPAM pool ID for the subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An IPv4 IPAM pool ID for the subnet.",
        SerializedName = @"ipv4IpamPoolId",
        PossibleTypes = new [] { typeof(string) })]
        string Ipv4IpamPoolId { get; set; }
        /// <summary>An IPv4 netmask length for the subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An IPv4 netmask length for the subnet.",
        SerializedName = @"ipv4NetmaskLength",
        PossibleTypes = new [] { typeof(int) })]
        int? Ipv4NetmaskLength { get; set; }
        /// <summary>
        /// The IPv6 CIDR block. If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The IPv6 CIDR block. If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.",
        SerializedName = @"ipv6CidrBlock",
        PossibleTypes = new [] { typeof(string) })]
        string Ipv6CidrBlock { get; set; }
        /// <summary>The IPv6 network ranges for the subnet, in CIDR notation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The IPv6 network ranges for the subnet, in CIDR notation.",
        SerializedName = @"ipv6CidrBlocks",
        PossibleTypes = new [] { typeof(string) })]
        string[] Ipv6CidrBlocks { get; set; }
        /// <summary>An IPv6 IPAM pool ID for the subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An IPv6 IPAM pool ID for the subnet.",
        SerializedName = @"ipv6IpamPoolId",
        PossibleTypes = new [] { typeof(string) })]
        string Ipv6IpamPoolId { get; set; }
        /// <summary>
        /// Indicates whether this is an IPv6 only subnet. For more information, see [Subnet basics](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html#subnet-basics)
        /// in the *User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether this is an IPv6 only subnet. For more information, see [Subnet basics](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html#subnet-basics) in the *User Guide*.",
        SerializedName = @"ipv6Native",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Ipv6Native { get; set; }
        /// <summary>An IPv6 netmask length for the subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An IPv6 netmask length for the subnet.",
        SerializedName = @"ipv6NetmaskLength",
        PossibleTypes = new [] { typeof(int) })]
        int? Ipv6NetmaskLength { get; set; }
        /// <summary>
        /// Indicates whether instances launched in this subnet receive a public IPv4 address. The default value is ``false``. AWS
        /// charges for all public IPv4 addresses, including public IPv4 addresses associated with running instances and Elastic IP
        /// addresses. For more information, see the *Public IPv4 Address* tab on the [VPC pricing page](https://docs.aws.amazon.com/vpc/pricing/).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether instances launched in this subnet receive a public IPv4 address. The default value is ``false``.  AWS charges for all public IPv4 addresses, including public IPv4 addresses associated with running instances and Elastic IP addresses. For more information, see the *Public IPv4 Address* tab on the [VPC pricing page](https://docs.aws.amazon.com/vpc/pricing/).",
        SerializedName = @"mapPublicIpOnLaunch",
        PossibleTypes = new [] { typeof(bool) })]
        bool? MapPublicIPOnLaunch { get; set; }
        /// <summary>Property networkAclAssociationId</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property networkAclAssociationId",
        SerializedName = @"networkAclAssociationId",
        PossibleTypes = new [] { typeof(string) })]
        string NetworkAclAssociationId { get; set; }
        /// <summary>The Amazon Resource Name (ARN) of the Outpost.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Amazon Resource Name (ARN) of the Outpost.",
        SerializedName = @"outpostArn",
        PossibleTypes = new [] { typeof(string) })]
        string OutpostArn { get; set; }
        /// <summary>Property enableResourceNameDnsARecord</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property enableResourceNameDnsARecord",
        SerializedName = @"enableResourceNameDnsARecord",
        PossibleTypes = new [] { typeof(bool) })]
        bool? PrivateDnsNameOptionOnLaunchEnableResourceNameDnsARecord { get; set; }
        /// <summary>Property enableResourceNameDnsAAAARecord</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property enableResourceNameDnsAAAARecord",
        SerializedName = @"enableResourceNameDnsAAAARecord",
        PossibleTypes = new [] { typeof(bool) })]
        bool? PrivateDnsNameOptionOnLaunchEnableResourceNameDnsAaaaRecord { get; set; }
        /// <summary>Property hostnameType</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property hostnameType",
        SerializedName = @"hostnameType",
        PossibleTypes = new [] { typeof(string) })]
        string PrivateDnsNameOptionOnLaunchHostnameType { get; set; }
        /// <summary>Property subnetId</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property subnetId",
        SerializedName = @"subnetId",
        PossibleTypes = new [] { typeof(string) })]
        string SubnetId { get; set; }
        /// <summary>Any tags assigned to the subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Any tags assigned to the subnet.",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated21) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated21[] Tag { get; set; }
        /// <summary>
        /// The ID of the VPC the subnet is in. If you update this property, you must also update the ``CidrBlock`` property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ID of the VPC the subnet is in. If you update this property, you must also update the ``CidrBlock`` property.",
        SerializedName = @"vpcId",
        PossibleTypes = new [] { typeof(string) })]
        string VpcId { get; set; }

    }
    /// Definition of awsEc2Subnet
    internal partial interface IAwsEc2SubnetPropertiesInternal

    {
        /// <summary>
        /// Indicates whether a network interface created in this subnet receives an IPv6 address. The default value is ``false``.
        /// If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
        /// </summary>
        bool? AssignIpv6AddressOnCreation { get; set; }
        /// <summary>
        /// The Availability Zone of the subnet. If you update this property, you must also update the ``CidrBlock`` property.
        /// </summary>
        string AvailabilityZone { get; set; }
        /// <summary>The AZ ID of the subnet.</summary>
        string AvailabilityZoneId { get; set; }
        /// <summary>
        /// The IPv4 CIDR block assigned to the subnet. If you update this property, we create a new subnet, and then delete the existing
        /// one.
        /// </summary>
        string CidrBlock { get; set; }
        /// <summary>
        /// Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses
        /// for IPv4-only destinations. For more information, see [DNS64 and NAT64](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-nat64-dns64)
        /// in the *User Guide*.
        /// </summary>
        bool? EnableDns64 { get; set; }
        /// <summary>
        /// Indicates the device position for local network interfaces in this subnet. For example, ``1`` indicates local network
        /// interfaces in this subnet are the secondary network interface (eth1).
        /// </summary>
        int? EnableLniAtDeviceIndex { get; set; }
        /// <summary>An IPv4 IPAM pool ID for the subnet.</summary>
        string Ipv4IpamPoolId { get; set; }
        /// <summary>An IPv4 netmask length for the subnet.</summary>
        int? Ipv4NetmaskLength { get; set; }
        /// <summary>
        /// The IPv6 CIDR block. If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
        /// </summary>
        string Ipv6CidrBlock { get; set; }
        /// <summary>The IPv6 network ranges for the subnet, in CIDR notation.</summary>
        string[] Ipv6CidrBlocks { get; set; }
        /// <summary>An IPv6 IPAM pool ID for the subnet.</summary>
        string Ipv6IpamPoolId { get; set; }
        /// <summary>
        /// Indicates whether this is an IPv6 only subnet. For more information, see [Subnet basics](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html#subnet-basics)
        /// in the *User Guide*.
        /// </summary>
        bool? Ipv6Native { get; set; }
        /// <summary>An IPv6 netmask length for the subnet.</summary>
        int? Ipv6NetmaskLength { get; set; }
        /// <summary>
        /// Indicates whether instances launched in this subnet receive a public IPv4 address. The default value is ``false``. AWS
        /// charges for all public IPv4 addresses, including public IPv4 addresses associated with running instances and Elastic IP
        /// addresses. For more information, see the *Public IPv4 Address* tab on the [VPC pricing page](https://docs.aws.amazon.com/vpc/pricing/).
        /// </summary>
        bool? MapPublicIPOnLaunch { get; set; }
        /// <summary>Property networkAclAssociationId</summary>
        string NetworkAclAssociationId { get; set; }
        /// <summary>The Amazon Resource Name (ARN) of the Outpost.</summary>
        string OutpostArn { get; set; }
        /// <summary>Property enableResourceNameDnsARecord</summary>
        bool? PrivateDnsNameOptionOnLaunchEnableResourceNameDnsARecord { get; set; }
        /// <summary>Property enableResourceNameDnsAAAARecord</summary>
        bool? PrivateDnsNameOptionOnLaunchEnableResourceNameDnsAaaaRecord { get; set; }
        /// <summary>Property hostnameType</summary>
        string PrivateDnsNameOptionOnLaunchHostnameType { get; set; }
        /// <summary>
        /// The hostname type for EC2 instances launched into this subnet and how DNS A and AAAA record queries to the instances should
        /// be handled. For more information, see [Amazon EC2 instance hostname types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html)
        /// in the *User Guide*. Available options: + EnableResourceNameDnsAAAARecord (true | false) + EnableResourceNameDnsARecord
        /// (true | false) + HostnameType (ip-name | resource-name)
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPrivateDnsNameOptionsOnLaunchModelProperties PrivateDnsNameOptionsOnLaunch { get; set; }
        /// <summary>Property subnetId</summary>
        string SubnetId { get; set; }
        /// <summary>Any tags assigned to the subnet.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated21[] Tag { get; set; }
        /// <summary>
        /// The ID of the VPC the subnet is in. If you update this property, you must also update the ``CidrBlock`` property.
        /// </summary>
        string VpcId { get; set; }

    }
}