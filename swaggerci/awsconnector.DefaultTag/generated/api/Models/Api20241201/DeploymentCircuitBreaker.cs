// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of DeploymentCircuitBreaker</summary>
    public partial class DeploymentCircuitBreaker :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentCircuitBreaker,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDeploymentCircuitBreakerInternal
    {

        /// <summary>Backing field for <see cref="Enable" /> property.</summary>
        private bool? _enable;

        /// <summary>Determines whether to use the deployment circuit breaker logic for the service.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public bool? Enable { get => this._enable; set => this._enable = value; }

        /// <summary>Backing field for <see cref="Rollback" /> property.</summary>
        private bool? _rollback;

        /// <summary>
        /// Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is on,
        /// when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public bool? Rollback { get => this._rollback; set => this._rollback = value; }

        /// <summary>Creates an new <see cref="DeploymentCircuitBreaker" /> instance.</summary>
        public DeploymentCircuitBreaker()
        {

        }
    }
    /// Definition of DeploymentCircuitBreaker
    public partial interface IDeploymentCircuitBreaker :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary>Determines whether to use the deployment circuit breaker logic for the service.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Determines whether to use the deployment circuit breaker logic for the service.",
        SerializedName = @"enable",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Enable { get; set; }
        /// <summary>
        /// Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is on,
        /// when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is on, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.",
        SerializedName = @"rollback",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Rollback { get; set; }

    }
    /// Definition of DeploymentCircuitBreaker
    internal partial interface IDeploymentCircuitBreakerInternal

    {
        /// <summary>Determines whether to use the deployment circuit breaker logic for the service.</summary>
        bool? Enable { get; set; }
        /// <summary>
        /// Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is on,
        /// when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
        /// </summary>
        bool? Rollback { get; set; }

    }
}