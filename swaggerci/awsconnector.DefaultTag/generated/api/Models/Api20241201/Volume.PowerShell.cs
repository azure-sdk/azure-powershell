// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.PowerShell;

    /// <summary>Definition of Volume</summary>
    [System.ComponentModel.TypeConverter(typeof(VolumeTypeConverter))]
    public partial class Volume
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.Volume"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolume" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolume DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new Volume(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.Volume"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolume" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolume DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new Volume(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="Volume" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="Volume" /> model class.</returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolume FromJsonString(string jsonText) => FromJson(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.SerializationMode.IncludeAll)?.ToString();

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.Volume"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal Volume(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("DockerVolumeConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).DockerVolumeConfiguration = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDockerVolumeConfiguration) content.GetValueForProperty("DockerVolumeConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).DockerVolumeConfiguration, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.DockerVolumeConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("EfsVolumeConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).EfsVolumeConfiguration = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEfsVolumeConfiguration) content.GetValueForProperty("EfsVolumeConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).EfsVolumeConfiguration, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.EfsVolumeConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("FSxWindowsFileServerVolumeConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).FSxWindowsFileServerVolumeConfiguration = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IFSxWindowsFileServerVolumeConfiguration) content.GetValueForProperty("FSxWindowsFileServerVolumeConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).FSxWindowsFileServerVolumeConfiguration, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.FSxWindowsFileServerVolumeConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("Host"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).Host = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IHostVolumeProperties) content.GetValueForProperty("Host",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).Host, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.HostVolumePropertiesTypeConverter.ConvertFrom);
            }
            if (content.Contains("ConfiguredAtLaunch"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).ConfiguredAtLaunch = (bool?) content.GetValueForProperty("ConfiguredAtLaunch",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).ConfiguredAtLaunch, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("Name"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).Name = (string) content.GetValueForProperty("Name",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).Name, global::System.Convert.ToString);
            }
            if (content.Contains("DockerVolumeConfigurationDriver"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).DockerVolumeConfigurationDriver = (string) content.GetValueForProperty("DockerVolumeConfigurationDriver",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).DockerVolumeConfigurationDriver, global::System.Convert.ToString);
            }
            if (content.Contains("DockerVolumeConfigurationScope"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).DockerVolumeConfigurationScope = (string) content.GetValueForProperty("DockerVolumeConfigurationScope",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).DockerVolumeConfigurationScope, global::System.Convert.ToString);
            }
            if (content.Contains("EfVolumeConfigurationAuthorizationConfig"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).EfVolumeConfigurationAuthorizationConfig = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAuthorizationConfig) content.GetValueForProperty("EfVolumeConfigurationAuthorizationConfig",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).EfVolumeConfigurationAuthorizationConfig, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AuthorizationConfigTypeConverter.ConvertFrom);
            }
            if (content.Contains("EfVolumeConfigurationFilesystemId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).EfVolumeConfigurationFilesystemId = (string) content.GetValueForProperty("EfVolumeConfigurationFilesystemId",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).EfVolumeConfigurationFilesystemId, global::System.Convert.ToString);
            }
            if (content.Contains("EfVolumeConfigurationRootDirectory"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).EfVolumeConfigurationRootDirectory = (string) content.GetValueForProperty("EfVolumeConfigurationRootDirectory",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).EfVolumeConfigurationRootDirectory, global::System.Convert.ToString);
            }
            if (content.Contains("EfVolumeConfigurationTransitEncryption"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).EfVolumeConfigurationTransitEncryption = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.EfsVolumeConfigurationTransitEncryption?) content.GetValueForProperty("EfVolumeConfigurationTransitEncryption",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).EfVolumeConfigurationTransitEncryption, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.EfsVolumeConfigurationTransitEncryption.CreateFrom);
            }
            if (content.Contains("FSxWindowFileServerVolumeConfigurationRootDirectory"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).FSxWindowFileServerVolumeConfigurationRootDirectory = (string) content.GetValueForProperty("FSxWindowFileServerVolumeConfigurationRootDirectory",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).FSxWindowFileServerVolumeConfigurationRootDirectory, global::System.Convert.ToString);
            }
            if (content.Contains("DockerVolumeConfigurationAutoprovision"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).DockerVolumeConfigurationAutoprovision = (bool?) content.GetValueForProperty("DockerVolumeConfigurationAutoprovision",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).DockerVolumeConfigurationAutoprovision, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("DockerVolumeConfigurationDriverOpt"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).DockerVolumeConfigurationDriverOpt = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.IAny) content.GetValueForProperty("DockerVolumeConfigurationDriverOpt",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).DockerVolumeConfigurationDriverOpt, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.AnyTypeConverter.ConvertFrom);
            }
            if (content.Contains("DockerVolumeConfigurationLabel"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).DockerVolumeConfigurationLabel = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.IAny) content.GetValueForProperty("DockerVolumeConfigurationLabel",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).DockerVolumeConfigurationLabel, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.AnyTypeConverter.ConvertFrom);
            }
            if (content.Contains("EfVolumeConfigurationTransitEncryptionPort"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).EfVolumeConfigurationTransitEncryptionPort = (int?) content.GetValueForProperty("EfVolumeConfigurationTransitEncryptionPort",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).EfVolumeConfigurationTransitEncryptionPort, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("AuthorizationConfigIam"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).AuthorizationConfigIam = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.AuthorizationConfigIam?) content.GetValueForProperty("AuthorizationConfigIam",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).AuthorizationConfigIam, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.AuthorizationConfigIam.CreateFrom);
            }
            if (content.Contains("FSxWindowFileServerVolumeConfigurationAuthorizationConfig"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).FSxWindowFileServerVolumeConfigurationAuthorizationConfig = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IFSxAuthorizationConfig) content.GetValueForProperty("FSxWindowFileServerVolumeConfigurationAuthorizationConfig",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).FSxWindowFileServerVolumeConfigurationAuthorizationConfig, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.FSxAuthorizationConfigTypeConverter.ConvertFrom);
            }
            if (content.Contains("FSxWindowFileServerVolumeConfigurationFileSystemId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).FSxWindowFileServerVolumeConfigurationFileSystemId = (string) content.GetValueForProperty("FSxWindowFileServerVolumeConfigurationFileSystemId",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).FSxWindowFileServerVolumeConfigurationFileSystemId, global::System.Convert.ToString);
            }
            if (content.Contains("HostSourcePath"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).HostSourcePath = (string) content.GetValueForProperty("HostSourcePath",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).HostSourcePath, global::System.Convert.ToString);
            }
            if (content.Contains("AuthorizationConfigAccessPointId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).AuthorizationConfigAccessPointId = (string) content.GetValueForProperty("AuthorizationConfigAccessPointId",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).AuthorizationConfigAccessPointId, global::System.Convert.ToString);
            }
            if (content.Contains("AuthorizationConfigCredentialsParameter"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).AuthorizationConfigCredentialsParameter = (string) content.GetValueForProperty("AuthorizationConfigCredentialsParameter",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).AuthorizationConfigCredentialsParameter, global::System.Convert.ToString);
            }
            if (content.Contains("AuthorizationConfigDomain"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).AuthorizationConfigDomain = (string) content.GetValueForProperty("AuthorizationConfigDomain",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).AuthorizationConfigDomain, global::System.Convert.ToString);
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.Volume"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal Volume(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("DockerVolumeConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).DockerVolumeConfiguration = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDockerVolumeConfiguration) content.GetValueForProperty("DockerVolumeConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).DockerVolumeConfiguration, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.DockerVolumeConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("EfsVolumeConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).EfsVolumeConfiguration = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEfsVolumeConfiguration) content.GetValueForProperty("EfsVolumeConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).EfsVolumeConfiguration, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.EfsVolumeConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("FSxWindowsFileServerVolumeConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).FSxWindowsFileServerVolumeConfiguration = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IFSxWindowsFileServerVolumeConfiguration) content.GetValueForProperty("FSxWindowsFileServerVolumeConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).FSxWindowsFileServerVolumeConfiguration, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.FSxWindowsFileServerVolumeConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("Host"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).Host = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IHostVolumeProperties) content.GetValueForProperty("Host",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).Host, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.HostVolumePropertiesTypeConverter.ConvertFrom);
            }
            if (content.Contains("ConfiguredAtLaunch"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).ConfiguredAtLaunch = (bool?) content.GetValueForProperty("ConfiguredAtLaunch",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).ConfiguredAtLaunch, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("Name"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).Name = (string) content.GetValueForProperty("Name",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).Name, global::System.Convert.ToString);
            }
            if (content.Contains("DockerVolumeConfigurationDriver"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).DockerVolumeConfigurationDriver = (string) content.GetValueForProperty("DockerVolumeConfigurationDriver",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).DockerVolumeConfigurationDriver, global::System.Convert.ToString);
            }
            if (content.Contains("DockerVolumeConfigurationScope"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).DockerVolumeConfigurationScope = (string) content.GetValueForProperty("DockerVolumeConfigurationScope",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).DockerVolumeConfigurationScope, global::System.Convert.ToString);
            }
            if (content.Contains("EfVolumeConfigurationAuthorizationConfig"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).EfVolumeConfigurationAuthorizationConfig = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAuthorizationConfig) content.GetValueForProperty("EfVolumeConfigurationAuthorizationConfig",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).EfVolumeConfigurationAuthorizationConfig, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AuthorizationConfigTypeConverter.ConvertFrom);
            }
            if (content.Contains("EfVolumeConfigurationFilesystemId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).EfVolumeConfigurationFilesystemId = (string) content.GetValueForProperty("EfVolumeConfigurationFilesystemId",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).EfVolumeConfigurationFilesystemId, global::System.Convert.ToString);
            }
            if (content.Contains("EfVolumeConfigurationRootDirectory"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).EfVolumeConfigurationRootDirectory = (string) content.GetValueForProperty("EfVolumeConfigurationRootDirectory",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).EfVolumeConfigurationRootDirectory, global::System.Convert.ToString);
            }
            if (content.Contains("EfVolumeConfigurationTransitEncryption"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).EfVolumeConfigurationTransitEncryption = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.EfsVolumeConfigurationTransitEncryption?) content.GetValueForProperty("EfVolumeConfigurationTransitEncryption",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).EfVolumeConfigurationTransitEncryption, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.EfsVolumeConfigurationTransitEncryption.CreateFrom);
            }
            if (content.Contains("FSxWindowFileServerVolumeConfigurationRootDirectory"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).FSxWindowFileServerVolumeConfigurationRootDirectory = (string) content.GetValueForProperty("FSxWindowFileServerVolumeConfigurationRootDirectory",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).FSxWindowFileServerVolumeConfigurationRootDirectory, global::System.Convert.ToString);
            }
            if (content.Contains("DockerVolumeConfigurationAutoprovision"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).DockerVolumeConfigurationAutoprovision = (bool?) content.GetValueForProperty("DockerVolumeConfigurationAutoprovision",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).DockerVolumeConfigurationAutoprovision, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("DockerVolumeConfigurationDriverOpt"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).DockerVolumeConfigurationDriverOpt = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.IAny) content.GetValueForProperty("DockerVolumeConfigurationDriverOpt",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).DockerVolumeConfigurationDriverOpt, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.AnyTypeConverter.ConvertFrom);
            }
            if (content.Contains("DockerVolumeConfigurationLabel"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).DockerVolumeConfigurationLabel = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.IAny) content.GetValueForProperty("DockerVolumeConfigurationLabel",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).DockerVolumeConfigurationLabel, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.AnyTypeConverter.ConvertFrom);
            }
            if (content.Contains("EfVolumeConfigurationTransitEncryptionPort"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).EfVolumeConfigurationTransitEncryptionPort = (int?) content.GetValueForProperty("EfVolumeConfigurationTransitEncryptionPort",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).EfVolumeConfigurationTransitEncryptionPort, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("AuthorizationConfigIam"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).AuthorizationConfigIam = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.AuthorizationConfigIam?) content.GetValueForProperty("AuthorizationConfigIam",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).AuthorizationConfigIam, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.AuthorizationConfigIam.CreateFrom);
            }
            if (content.Contains("FSxWindowFileServerVolumeConfigurationAuthorizationConfig"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).FSxWindowFileServerVolumeConfigurationAuthorizationConfig = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IFSxAuthorizationConfig) content.GetValueForProperty("FSxWindowFileServerVolumeConfigurationAuthorizationConfig",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).FSxWindowFileServerVolumeConfigurationAuthorizationConfig, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.FSxAuthorizationConfigTypeConverter.ConvertFrom);
            }
            if (content.Contains("FSxWindowFileServerVolumeConfigurationFileSystemId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).FSxWindowFileServerVolumeConfigurationFileSystemId = (string) content.GetValueForProperty("FSxWindowFileServerVolumeConfigurationFileSystemId",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).FSxWindowFileServerVolumeConfigurationFileSystemId, global::System.Convert.ToString);
            }
            if (content.Contains("HostSourcePath"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).HostSourcePath = (string) content.GetValueForProperty("HostSourcePath",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).HostSourcePath, global::System.Convert.ToString);
            }
            if (content.Contains("AuthorizationConfigAccessPointId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).AuthorizationConfigAccessPointId = (string) content.GetValueForProperty("AuthorizationConfigAccessPointId",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).AuthorizationConfigAccessPointId, global::System.Convert.ToString);
            }
            if (content.Contains("AuthorizationConfigCredentialsParameter"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).AuthorizationConfigCredentialsParameter = (string) content.GetValueForProperty("AuthorizationConfigCredentialsParameter",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).AuthorizationConfigCredentialsParameter, global::System.Convert.ToString);
            }
            if (content.Contains("AuthorizationConfigDomain"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).AuthorizationConfigDomain = (string) content.GetValueForProperty("AuthorizationConfigDomain",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolumeInternal)this).AuthorizationConfigDomain, global::System.Convert.ToString);
            }
            AfterDeserializePSObject(content);
        }
    }
    /// Definition of Volume
    [System.ComponentModel.TypeConverter(typeof(VolumeTypeConverter))]
    public partial interface IVolume

    {

    }
}