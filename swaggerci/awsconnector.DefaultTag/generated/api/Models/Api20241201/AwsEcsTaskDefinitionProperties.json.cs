// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of awsEcsTaskDefinition</summary>
    public partial class AwsEcsTaskDefinitionProperties
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json serialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name= "returnNow" />
        /// output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject into a new instance of <see cref="AwsEcsTaskDefinitionProperties" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal AwsEcsTaskDefinitionProperties(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_ephemeralStorage = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject>("ephemeralStorage"), out var __jsonEphemeralStorage) ? Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.EphemeralStorage.FromJson(__jsonEphemeralStorage) : EphemeralStorage;}
            {_proxyConfiguration = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject>("proxyConfiguration"), out var __jsonProxyConfiguration) ? Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ProxyConfiguration.FromJson(__jsonProxyConfiguration) : ProxyConfiguration;}
            {_runtimePlatform = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject>("runtimePlatform"), out var __jsonRuntimePlatform) ? Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.RuntimePlatform.FromJson(__jsonRuntimePlatform) : RuntimePlatform;}
            {_containerDefinition = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray>("containerDefinitions"), out var __jsonContainerDefinitions) ? If( __jsonContainerDefinitions as Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray, out var __v) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IContainerDefinition[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__v, (__u)=>(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IContainerDefinition) (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ContainerDefinition.FromJson(__u) )) ))() : null : ContainerDefinition;}
            {_cpu = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("cpu"), out var __jsonCpu) ? (string)__jsonCpu : (string)Cpu;}
            {_executionRoleArn = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("executionRoleArn"), out var __jsonExecutionRoleArn) ? (string)__jsonExecutionRoleArn : (string)ExecutionRoleArn;}
            {_family = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("family"), out var __jsonFamily) ? (string)__jsonFamily : (string)Family;}
            {_inferenceAccelerator = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray>("inferenceAccelerators"), out var __jsonInferenceAccelerators) ? If( __jsonInferenceAccelerators as Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray, out var __q) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IInferenceAccelerator[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__q, (__p)=>(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IInferenceAccelerator) (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.InferenceAccelerator.FromJson(__p) )) ))() : null : InferenceAccelerator;}
            {_ipcMode = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("ipcMode"), out var __jsonIpcMode) ? (string)__jsonIpcMode : (string)IpcMode;}
            {_memory = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("memory"), out var __jsonMemory) ? (string)__jsonMemory : (string)Memory;}
            {_networkMode = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("networkMode"), out var __jsonNetworkMode) ? (string)__jsonNetworkMode : (string)NetworkMode;}
            {_pidMode = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("pidMode"), out var __jsonPidMode) ? (string)__jsonPidMode : (string)PidMode;}
            {_placementConstraint = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray>("placementConstraints"), out var __jsonPlacementConstraints) ? If( __jsonPlacementConstraints as Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray, out var __l) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITaskDefinitionPlacementConstraint[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__l, (__k)=>(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITaskDefinitionPlacementConstraint) (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.TaskDefinitionPlacementConstraint.FromJson(__k) )) ))() : null : PlacementConstraint;}
            {_requiresCompatibility = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray>("requiresCompatibilities"), out var __jsonRequiresCompatibilities) ? If( __jsonRequiresCompatibilities as Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray, out var __g) ? new global::System.Func<string[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__g, (__f)=>(string) (__f is Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString __e ? (string)(__e.ToString()) : null)) ))() : null : RequiresCompatibility;}
            {_tag = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray>("tags"), out var __jsonTags) ? If( __jsonTags as Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray, out var __b) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated28[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__b, (__a)=>(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated28) (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.TagAutoGenerated28.FromJson(__a) )) ))() : null : Tag;}
            {_taskDefinitionArn = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("taskDefinitionArn"), out var __jsonTaskDefinitionArn) ? (string)__jsonTaskDefinitionArn : (string)TaskDefinitionArn;}
            {_taskRoleArn = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("taskRoleArn"), out var __jsonTaskRoleArn) ? (string)__jsonTaskRoleArn : (string)TaskRoleArn;}
            {_volume = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray>("volumes"), out var __jsonVolumes) ? If( __jsonVolumes as Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray, out var ___w) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolume[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(___w, (___v)=>(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IVolume) (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.Volume.FromJson(___v) )) ))() : null : Volume;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsTaskDefinitionProperties.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsTaskDefinitionProperties.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsTaskDefinitionProperties FromJson(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode node)
        {
            return node is Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject json ? new AwsEcsTaskDefinitionProperties(json) : null;
        }

        /// <summary>
        /// Serializes this instance of <see cref="AwsEcsTaskDefinitionProperties" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="AwsEcsTaskDefinitionProperties" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode" />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            AddIf( null != this._ephemeralStorage ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) this._ephemeralStorage.ToJson(null,serializationMode) : null, "ephemeralStorage" ,container.Add );
            AddIf( null != this._proxyConfiguration ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) this._proxyConfiguration.ToJson(null,serializationMode) : null, "proxyConfiguration" ,container.Add );
            AddIf( null != this._runtimePlatform ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) this._runtimePlatform.ToJson(null,serializationMode) : null, "runtimePlatform" ,container.Add );
            if (null != this._containerDefinition)
            {
                var __w = new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.XNodeArray();
                foreach( var __x in this._containerDefinition )
                {
                    AddIf(__x?.ToJson(null, serializationMode) ,__w.Add);
                }
                container.Add("containerDefinitions",__w);
            }
            AddIf( null != (((object)this._cpu)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._cpu.ToString()) : null, "cpu" ,container.Add );
            AddIf( null != (((object)this._executionRoleArn)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._executionRoleArn.ToString()) : null, "executionRoleArn" ,container.Add );
            AddIf( null != (((object)this._family)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._family.ToString()) : null, "family" ,container.Add );
            if (null != this._inferenceAccelerator)
            {
                var __r = new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.XNodeArray();
                foreach( var __s in this._inferenceAccelerator )
                {
                    AddIf(__s?.ToJson(null, serializationMode) ,__r.Add);
                }
                container.Add("inferenceAccelerators",__r);
            }
            AddIf( null != (((object)this._ipcMode)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._ipcMode.ToString()) : null, "ipcMode" ,container.Add );
            AddIf( null != (((object)this._memory)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._memory.ToString()) : null, "memory" ,container.Add );
            AddIf( null != (((object)this._networkMode)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._networkMode.ToString()) : null, "networkMode" ,container.Add );
            AddIf( null != (((object)this._pidMode)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._pidMode.ToString()) : null, "pidMode" ,container.Add );
            if (null != this._placementConstraint)
            {
                var __m = new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.XNodeArray();
                foreach( var __n in this._placementConstraint )
                {
                    AddIf(__n?.ToJson(null, serializationMode) ,__m.Add);
                }
                container.Add("placementConstraints",__m);
            }
            if (null != this._requiresCompatibility)
            {
                var __h = new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.XNodeArray();
                foreach( var __i in this._requiresCompatibility )
                {
                    AddIf(null != (((object)__i)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(__i.ToString()) : null ,__h.Add);
                }
                container.Add("requiresCompatibilities",__h);
            }
            if (null != this._tag)
            {
                var __c = new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.XNodeArray();
                foreach( var __d in this._tag )
                {
                    AddIf(__d?.ToJson(null, serializationMode) ,__c.Add);
                }
                container.Add("tags",__c);
            }
            AddIf( null != (((object)this._taskDefinitionArn)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._taskDefinitionArn.ToString()) : null, "taskDefinitionArn" ,container.Add );
            AddIf( null != (((object)this._taskRoleArn)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._taskRoleArn.ToString()) : null, "taskRoleArn" ,container.Add );
            if (null != this._volume)
            {
                var ___x = new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.XNodeArray();
                foreach( var ___y in this._volume )
                {
                    AddIf(___y?.ToJson(null, serializationMode) ,___x.Add);
                }
                container.Add("volumes",___x);
            }
            AfterToJson(ref container);
            return container;
        }
    }
}