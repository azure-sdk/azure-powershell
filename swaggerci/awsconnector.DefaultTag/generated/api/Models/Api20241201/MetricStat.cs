// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of MetricStat</summary>
    public partial class MetricStat :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetricStat,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetricStatInternal
    {

        /// <summary>Backing field for <see cref="Metric" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetric _metric;

        /// <summary>
        /// The metric to return, including the metric name, namespace, and dimensions. The ``Metric`` property type represents a
        /// specific metric. ``Metric`` is a property of the [MetricStat](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricstat.html)
        /// property type.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetric Metric { get => (this._metric = this._metric ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.Metric()); set => this._metric = value; }

        /// <summary>
        /// The metric dimensions that you want to be used for the metric that the alarm will watch.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDimension[] MetricDimension { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetricInternal)Metric).Dimension; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetricInternal)Metric).Dimension = value ?? null /* arrayOf */; }

        /// <summary>
        /// The name of the metric that you want the alarm to watch. This is a required field.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string MetricName { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetricInternal)Metric).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetricInternal)Metric).Name = value ?? null; }

        /// <summary>The namespace of the metric that the alarm will watch.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string MetricNamespace { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetricInternal)Metric).Namespace; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetricInternal)Metric).Namespace = value ?? null; }

        /// <summary>Internal Acessors for Metric</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetric Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetricStatInternal.Metric { get => (this._metric = this._metric ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.Metric()); set { {_metric = value;} } }

        /// <summary>Backing field for <see cref="Period" /> property.</summary>
        private int? _period;

        /// <summary>
        /// The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short
        /// as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of
        /// less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics
        /// stored by a ``PutMetricData`` call that includes a ``StorageResolution`` of 1 second. If the ``StartTime`` parameter specifies
        /// a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range
        /// is returned: + Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute). + Start time between
        /// 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes). + Start time greater than 63 days ago - Use a multiple
        /// of 3600 seconds (1 hour).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? Period { get => this._period; set => this._period = value; }

        /// <summary>Backing field for <see cref="Stat" /> property.</summary>
        private string _stat;

        /// <summary>
        /// The statistic to return. It can include any CW statistic or extended statistic. For a list of valid values, see the table
        /// in [Statistics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Statistic) in
        /// the *User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string Stat { get => this._stat; set => this._stat = value; }

        /// <summary>Backing field for <see cref="Unit" /> property.</summary>
        private string _unit;

        /// <summary>
        /// The unit to use for the returned data points. Valid values are: Seconds, Microseconds, Milliseconds, Bytes, Kilobytes,
        /// Megabytes, Gigabytes, Terabytes, Bits, Kilobits, Megabits, Gigabits, Terabits, Percent, Count, Bytes/Second, Kilobytes/Second,
        /// Megabytes/Second, Gigabytes/Second, Terabytes/Second, Bits/Second, Kilobits/Second, Megabits/Second, Gigabits/Second,
        /// Terabits/Second, Count/Second, or None.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string Unit { get => this._unit; set => this._unit = value; }

        /// <summary>Creates an new <see cref="MetricStat" /> instance.</summary>
        public MetricStat()
        {

        }
    }
    /// Definition of MetricStat
    public partial interface IMetricStat :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The metric dimensions that you want to be used for the metric that the alarm will watch.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The metric dimensions that you want to be used for the metric that the alarm will watch.",
        SerializedName = @"dimensions",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDimension) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDimension[] MetricDimension { get; set; }
        /// <summary>
        /// The name of the metric that you want the alarm to watch. This is a required field.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the metric that you want the alarm to watch. This is a required field.",
        SerializedName = @"metricName",
        PossibleTypes = new [] { typeof(string) })]
        string MetricName { get; set; }
        /// <summary>The namespace of the metric that the alarm will watch.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The namespace of the metric that the alarm will watch.",
        SerializedName = @"namespace",
        PossibleTypes = new [] { typeof(string) })]
        string MetricNamespace { get; set; }
        /// <summary>
        /// The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short
        /// as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of
        /// less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics
        /// stored by a ``PutMetricData`` call that includes a ``StorageResolution`` of 1 second. If the ``StartTime`` parameter specifies
        /// a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range
        /// is returned: + Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute). + Start time between
        /// 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes). + Start time greater than 63 days ago - Use a multiple
        /// of 3600 seconds (1 hour).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a ``PutMetricData`` call that includes a ``StorageResolution`` of 1 second. If the ``StartTime`` parameter specifies a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range is returned:  +  Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).  +  Start time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).  +  Start time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).",
        SerializedName = @"period",
        PossibleTypes = new [] { typeof(int) })]
        int? Period { get; set; }
        /// <summary>
        /// The statistic to return. It can include any CW statistic or extended statistic. For a list of valid values, see the table
        /// in [Statistics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Statistic) in
        /// the *User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The statistic to return. It can include any CW statistic or extended statistic. For a list of valid values, see the table in [Statistics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Statistic) in the *User Guide*.",
        SerializedName = @"stat",
        PossibleTypes = new [] { typeof(string) })]
        string Stat { get; set; }
        /// <summary>
        /// The unit to use for the returned data points. Valid values are: Seconds, Microseconds, Milliseconds, Bytes, Kilobytes,
        /// Megabytes, Gigabytes, Terabytes, Bits, Kilobits, Megabits, Gigabits, Terabits, Percent, Count, Bytes/Second, Kilobytes/Second,
        /// Megabytes/Second, Gigabytes/Second, Terabytes/Second, Bits/Second, Kilobits/Second, Megabits/Second, Gigabits/Second,
        /// Terabits/Second, Count/Second, or None.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The unit to use for the returned data points.  Valid values are: Seconds, Microseconds, Milliseconds, Bytes, Kilobytes, Megabytes, Gigabytes, Terabytes, Bits, Kilobits, Megabits, Gigabits, Terabits, Percent, Count, Bytes/Second, Kilobytes/Second, Megabytes/Second, Gigabytes/Second, Terabytes/Second, Bits/Second, Kilobits/Second, Megabits/Second, Gigabits/Second, Terabits/Second, Count/Second, or None.",
        SerializedName = @"unit",
        PossibleTypes = new [] { typeof(string) })]
        string Unit { get; set; }

    }
    /// Definition of MetricStat
    internal partial interface IMetricStatInternal

    {
        /// <summary>
        /// The metric to return, including the metric name, namespace, and dimensions. The ``Metric`` property type represents a
        /// specific metric. ``Metric`` is a property of the [MetricStat](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricstat.html)
        /// property type.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetric Metric { get; set; }
        /// <summary>
        /// The metric dimensions that you want to be used for the metric that the alarm will watch.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDimension[] MetricDimension { get; set; }
        /// <summary>
        /// The name of the metric that you want the alarm to watch. This is a required field.
        /// </summary>
        string MetricName { get; set; }
        /// <summary>The namespace of the metric that the alarm will watch.</summary>
        string MetricNamespace { get; set; }
        /// <summary>
        /// The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short
        /// as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of
        /// less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics
        /// stored by a ``PutMetricData`` call that includes a ``StorageResolution`` of 1 second. If the ``StartTime`` parameter specifies
        /// a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range
        /// is returned: + Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute). + Start time between
        /// 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes). + Start time greater than 63 days ago - Use a multiple
        /// of 3600 seconds (1 hour).
        /// </summary>
        int? Period { get; set; }
        /// <summary>
        /// The statistic to return. It can include any CW statistic or extended statistic. For a list of valid values, see the table
        /// in [Statistics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Statistic) in
        /// the *User Guide*.
        /// </summary>
        string Stat { get; set; }
        /// <summary>
        /// The unit to use for the returned data points. Valid values are: Seconds, Microseconds, Milliseconds, Bytes, Kilobytes,
        /// Megabytes, Gigabytes, Terabytes, Bits, Kilobits, Megabits, Gigabits, Terabits, Percent, Count, Bytes/Second, Kilobytes/Second,
        /// Megabytes/Second, Gigabytes/Second, Terabytes/Second, Bits/Second, Kilobits/Second, Megabits/Second, Gigabits/Second,
        /// Terabits/Second, Count/Second, or None.
        /// </summary>
        string Unit { get; set; }

    }
}