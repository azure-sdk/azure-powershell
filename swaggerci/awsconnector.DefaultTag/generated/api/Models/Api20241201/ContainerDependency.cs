// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of ContainerDependency</summary>
    public partial class ContainerDependency :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IContainerDependency,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IContainerDependencyInternal
    {

        /// <summary>Backing field for <see cref="Condition" /> property.</summary>
        private string _condition;

        /// <summary>
        /// The dependency condition of the container. The following are the available conditions and their behavior: + ``START``
        /// - This condition emulates the behavior of links and volumes today. It validates that a dependent container is started
        /// before permitting other containers to start. + ``COMPLETE`` - This condition validates that a dependent container runs
        /// to completion (exits) before permitting other containers to start. This can be useful for nonessential containers that
        /// run a script and then exit. This condition can't be set on an essential container. + ``SUCCESS`` - This condition is the
        /// same as ``COMPLETE``, but it also requires that the container exits with a ``zero`` status. This condition can't be set
        /// on an essential container. + ``HEALTHY`` - This condition validates that the dependent container passes its Docker health
        /// check before permitting other containers to start. This requires that the dependent container has health checks configured.
        /// This condition is confirmed only at task startup.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string Condition { get => this._condition; set => this._condition = value; }

        /// <summary>Backing field for <see cref="ContainerName" /> property.</summary>
        private string _containerName;

        /// <summary>The name of a container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string ContainerName { get => this._containerName; set => this._containerName = value; }

        /// <summary>Creates an new <see cref="ContainerDependency" /> instance.</summary>
        public ContainerDependency()
        {

        }
    }
    /// Definition of ContainerDependency
    public partial interface IContainerDependency :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The dependency condition of the container. The following are the available conditions and their behavior: + ``START``
        /// - This condition emulates the behavior of links and volumes today. It validates that a dependent container is started
        /// before permitting other containers to start. + ``COMPLETE`` - This condition validates that a dependent container runs
        /// to completion (exits) before permitting other containers to start. This can be useful for nonessential containers that
        /// run a script and then exit. This condition can't be set on an essential container. + ``SUCCESS`` - This condition is the
        /// same as ``COMPLETE``, but it also requires that the container exits with a ``zero`` status. This condition can't be set
        /// on an essential container. + ``HEALTHY`` - This condition validates that the dependent container passes its Docker health
        /// check before permitting other containers to start. This requires that the dependent container has health checks configured.
        /// This condition is confirmed only at task startup.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The dependency condition of the container. The following are the available conditions and their behavior:  +   ``START`` - This condition emulates the behavior of links and volumes today. It validates that a dependent container is started before permitting other containers to start.  +   ``COMPLETE`` - This condition validates that a dependent container runs to completion (exits) before permitting other containers to start. This can be useful for nonessential containers that run a script and then exit. This condition can't be set on an essential container.  +   ``SUCCESS`` - This condition is the same as ``COMPLETE``, but it also requires that the container exits with a ``zero`` status. This condition can't be set on an essential container.  +   ``HEALTHY`` - This condition validates that the dependent container passes its Docker health check before permitting other containers to start. This requires that the dependent container has health checks configured. This condition is confirmed only at task startup.",
        SerializedName = @"condition",
        PossibleTypes = new [] { typeof(string) })]
        string Condition { get; set; }
        /// <summary>The name of a container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of a container.",
        SerializedName = @"containerName",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerName { get; set; }

    }
    /// Definition of ContainerDependency
    internal partial interface IContainerDependencyInternal

    {
        /// <summary>
        /// The dependency condition of the container. The following are the available conditions and their behavior: + ``START``
        /// - This condition emulates the behavior of links and volumes today. It validates that a dependent container is started
        /// before permitting other containers to start. + ``COMPLETE`` - This condition validates that a dependent container runs
        /// to completion (exits) before permitting other containers to start. This can be useful for nonessential containers that
        /// run a script and then exit. This condition can't be set on an essential container. + ``SUCCESS`` - This condition is the
        /// same as ``COMPLETE``, but it also requires that the container exits with a ``zero`` status. This condition can't be set
        /// on an essential container. + ``HEALTHY`` - This condition validates that the dependent container passes its Docker health
        /// check before permitting other containers to start. This requires that the dependent container has health checks configured.
        /// This condition is confirmed only at task startup.
        /// </summary>
        string Condition { get; set; }
        /// <summary>The name of a container.</summary>
        string ContainerName { get; set; }

    }
}