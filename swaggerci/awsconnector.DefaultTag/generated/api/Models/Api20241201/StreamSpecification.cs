// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of StreamSpecification</summary>
    public partial class StreamSpecification :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IStreamSpecification,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IStreamSpecificationInternal
    {

        /// <summary>Internal Acessors for ResourcePolicy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IResourcePolicy Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IStreamSpecificationInternal.ResourcePolicy { get => (this._resourcePolicy = this._resourcePolicy ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ResourcePolicy()); set { {_resourcePolicy = value;} } }

        /// <summary>Backing field for <see cref="ResourcePolicy" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IResourcePolicy _resourcePolicy;

        /// <summary>
        /// Creates or updates a resource-based policy document that contains the permissions for DDB resources, such as a table's
        /// streams. Resource-based policies let you define access permissions by specifying who has access to each resource, and
        /// the actions they are allowed to perform on each resource. In a CFNshort template, you can provide the policy in JSON or
        /// YAML format because CFNshort converts YAML to JSON before submitting it to DDB. For more information about resource-based
        /// policies, see [Using resource-based policies for](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/access-control-resource-based.html)
        /// and [Resource-based policy examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-examples.html).
        /// Creates or updates a resource-based policy document that contains the permissions for DDB resources, such as a table,
        /// its indexes, and stream. Resource-based policies let you define access permissions by specifying who has access to each
        /// resource, and the actions they are allowed to perform on each resource. In a CFNshort template, you can provide the policy
        /// in JSON or YAML format because CFNshort converts YAML to JSON before submitting it to DDB. For more information about
        /// resource-based policies, see [Using resource-based policies for](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/access-control-resource-based.html)
        /// and [Resource-based policy examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-examples.html).
        /// While defining resource-based policies in your CFNshort templates, the following considerations apply: + The maximum size
        /// supported for a resource-based policy document in JSON format is 20 KB. DDB counts whitespaces when calculating the size
        /// of a policy against this limit. + Resource-based policies don't support [drift detection](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html#).
        /// If you update a policy outside of the CFNshort stack template, you'll need to update the CFNshort stack with the changes.
        /// + Resource-based policies don't support out-of-band changes. If you add, update, or delete a policy outside of the CFNshort
        /// template, the change won't be overwritten if there are no changes to the policy within the template. For example, say
        /// that your template contains a resource-based policy, which you later update outside of the template. If you don't make
        /// any changes to the policy in the template, the updated policy in DDB won’t be synced with the policy in the template.
        /// Conversely, say that your template doesn’t contain a resource-based policy, but you add a policy outside of the template.
        /// This policy won’t be removed from DDB as long as you don’t add it to the template. When you add a policy to the template
        /// and update the stack, the existing policy in DDB will be updated to match the one defined in the template. For a full
        /// list of all considerations, see [Resource-based policy considerations](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-considerations.html).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IResourcePolicy ResourcePolicy { get => (this._resourcePolicy = this._resourcePolicy ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ResourcePolicy()); set => this._resourcePolicy = value; }

        /// <summary>
        /// A resource-based policy document that contains permissions to add to the specified DDB table, index, or both. In a CFNshort
        /// template, you can provide the policy in JSON or YAML format because CFNshort converts YAML to JSON before submitting it
        /// to DDB. For more information about resource-based policies, see [Using resource-based policies for](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/access-control-resource-based.html)
        /// and [Resource-based policy examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-examples.html).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.IAny ResourcePolicyDocument { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IResourcePolicyInternal)ResourcePolicy).PolicyDocument; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IResourcePolicyInternal)ResourcePolicy).PolicyDocument = value ?? null /* model class */; }

        /// <summary>Backing field for <see cref="StreamViewType" /> property.</summary>
        private string _streamViewType;

        /// <summary>
        /// When an item in the table is modified, ``StreamViewType`` determines what information is written to the stream for this
        /// table. Valid values for ``StreamViewType`` are: + ``KEYS_ONLY`` - Only the key attributes of the modified item are written
        /// to the stream. + ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the stream. + ``OLD_IMAGE``
        /// - The entire item, as it appeared before it was modified, is written to the stream. + ``NEW_AND_OLD_IMAGES`` - Both the
        /// new and the old item images of the item are written to the stream.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string StreamViewType { get => this._streamViewType; set => this._streamViewType = value; }

        /// <summary>Creates an new <see cref="StreamSpecification" /> instance.</summary>
        public StreamSpecification()
        {

        }
    }
    /// Definition of StreamSpecification
    public partial interface IStreamSpecification :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary>
        /// A resource-based policy document that contains permissions to add to the specified DDB table, index, or both. In a CFNshort
        /// template, you can provide the policy in JSON or YAML format because CFNshort converts YAML to JSON before submitting it
        /// to DDB. For more information about resource-based policies, see [Using resource-based policies for](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/access-control-resource-based.html)
        /// and [Resource-based policy examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-examples.html).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A resource-based policy document that contains permissions to add to the specified DDB table, index, or both. In a CFNshort template, you can provide the policy in JSON or YAML format because CFNshort converts YAML to JSON before submitting it to DDB. For more information about resource-based policies, see [Using resource-based policies for](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/access-control-resource-based.html) and [Resource-based policy examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-examples.html).",
        SerializedName = @"policyDocument",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.IAny) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.IAny ResourcePolicyDocument { get; set; }
        /// <summary>
        /// When an item in the table is modified, ``StreamViewType`` determines what information is written to the stream for this
        /// table. Valid values for ``StreamViewType`` are: + ``KEYS_ONLY`` - Only the key attributes of the modified item are written
        /// to the stream. + ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the stream. + ``OLD_IMAGE``
        /// - The entire item, as it appeared before it was modified, is written to the stream. + ``NEW_AND_OLD_IMAGES`` - Both the
        /// new and the old item images of the item are written to the stream.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"When an item in the table is modified, ``StreamViewType`` determines what information is written to the stream for this table. Valid values for ``StreamViewType`` are:  +   ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.  +   ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the stream.  +   ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to the stream.  +   ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to the stream.",
        SerializedName = @"streamViewType",
        PossibleTypes = new [] { typeof(string) })]
        string StreamViewType { get; set; }

    }
    /// Definition of StreamSpecification
    internal partial interface IStreamSpecificationInternal

    {
        /// <summary>
        /// Creates or updates a resource-based policy document that contains the permissions for DDB resources, such as a table's
        /// streams. Resource-based policies let you define access permissions by specifying who has access to each resource, and
        /// the actions they are allowed to perform on each resource. In a CFNshort template, you can provide the policy in JSON or
        /// YAML format because CFNshort converts YAML to JSON before submitting it to DDB. For more information about resource-based
        /// policies, see [Using resource-based policies for](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/access-control-resource-based.html)
        /// and [Resource-based policy examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-examples.html).
        /// Creates or updates a resource-based policy document that contains the permissions for DDB resources, such as a table,
        /// its indexes, and stream. Resource-based policies let you define access permissions by specifying who has access to each
        /// resource, and the actions they are allowed to perform on each resource. In a CFNshort template, you can provide the policy
        /// in JSON or YAML format because CFNshort converts YAML to JSON before submitting it to DDB. For more information about
        /// resource-based policies, see [Using resource-based policies for](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/access-control-resource-based.html)
        /// and [Resource-based policy examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-examples.html).
        /// While defining resource-based policies in your CFNshort templates, the following considerations apply: + The maximum size
        /// supported for a resource-based policy document in JSON format is 20 KB. DDB counts whitespaces when calculating the size
        /// of a policy against this limit. + Resource-based policies don't support [drift detection](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html#).
        /// If you update a policy outside of the CFNshort stack template, you'll need to update the CFNshort stack with the changes.
        /// + Resource-based policies don't support out-of-band changes. If you add, update, or delete a policy outside of the CFNshort
        /// template, the change won't be overwritten if there are no changes to the policy within the template. For example, say
        /// that your template contains a resource-based policy, which you later update outside of the template. If you don't make
        /// any changes to the policy in the template, the updated policy in DDB won’t be synced with the policy in the template.
        /// Conversely, say that your template doesn’t contain a resource-based policy, but you add a policy outside of the template.
        /// This policy won’t be removed from DDB as long as you don’t add it to the template. When you add a policy to the template
        /// and update the stack, the existing policy in DDB will be updated to match the one defined in the template. For a full
        /// list of all considerations, see [Resource-based policy considerations](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-considerations.html).
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IResourcePolicy ResourcePolicy { get; set; }
        /// <summary>
        /// A resource-based policy document that contains permissions to add to the specified DDB table, index, or both. In a CFNshort
        /// template, you can provide the policy in JSON or YAML format because CFNshort converts YAML to JSON before submitting it
        /// to DDB. For more information about resource-based policies, see [Using resource-based policies for](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/access-control-resource-based.html)
        /// and [Resource-based policy examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-examples.html).
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.IAny ResourcePolicyDocument { get; set; }
        /// <summary>
        /// When an item in the table is modified, ``StreamViewType`` determines what information is written to the stream for this
        /// table. Valid values for ``StreamViewType`` are: + ``KEYS_ONLY`` - Only the key attributes of the modified item are written
        /// to the stream. + ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the stream. + ``OLD_IMAGE``
        /// - The entire item, as it appeared before it was modified, is written to the stream. + ``NEW_AND_OLD_IMAGES`` - Both the
        /// new and the old item images of the item are written to the stream.
        /// </summary>
        string StreamViewType { get; set; }

    }
}