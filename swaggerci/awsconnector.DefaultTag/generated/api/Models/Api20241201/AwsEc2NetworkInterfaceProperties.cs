// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of awsEc2NetworkInterface</summary>
    public partial class AwsEc2NetworkInterfaceProperties :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2NetworkInterfaceProperties,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2NetworkInterfacePropertiesInternal
    {

        /// <summary>Backing field for <see cref="ConnectionTrackingSpecification" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConnectionTrackingSpecification _connectionTrackingSpecification;

        /// <summary>Property connectionTrackingSpecification</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConnectionTrackingSpecification ConnectionTrackingSpecification { get => (this._connectionTrackingSpecification = this._connectionTrackingSpecification ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ConnectionTrackingSpecification()); set => this._connectionTrackingSpecification = value; }

        /// <summary>Property tcpEstablishedTimeout</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public int? ConnectionTrackingSpecificationTcpEstablishedTimeout { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConnectionTrackingSpecificationInternal)ConnectionTrackingSpecification).TcpEstablishedTimeout; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConnectionTrackingSpecificationInternal)ConnectionTrackingSpecification).TcpEstablishedTimeout = value ?? default(int); }

        /// <summary>Property udpStreamTimeout</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public int? ConnectionTrackingSpecificationUdpStreamTimeout { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConnectionTrackingSpecificationInternal)ConnectionTrackingSpecification).UdpStreamTimeout; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConnectionTrackingSpecificationInternal)ConnectionTrackingSpecification).UdpStreamTimeout = value ?? default(int); }

        /// <summary>Property udpTimeout</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public int? ConnectionTrackingSpecificationUdpTimeout { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConnectionTrackingSpecificationInternal)ConnectionTrackingSpecification).UdpTimeout; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConnectionTrackingSpecificationInternal)ConnectionTrackingSpecification).UdpTimeout = value ?? default(int); }

        /// <summary>Backing field for <see cref="Description" /> property.</summary>
        private string _description;

        /// <summary>A description for the network interface.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string Description { get => this._description; set => this._description = value; }

        /// <summary>Backing field for <see cref="EnablePrimaryIpv6" /> property.</summary>
        private bool? _enablePrimaryIpv6;

        /// <summary>
        /// If you have instances or ENIs that rely on the IPv6 address not changing, to avoid disrupting traffic to instances or
        /// ENIs, you can enable a primary IPv6 address. Enable this option to automatically assign an IPv6 associated with the ENI
        /// attached to your instance to be the primary IPv6 address. When you enable an IPv6 address to be a primary IPv6, you cannot
        /// disable it. Traffic will be routed to the primary IPv6 address until the instance is terminated or the ENI is detached.
        /// If you have multiple IPv6 addresses associated with an ENI and you enable a primary IPv6 address, the first IPv6 address
        /// associated with the ENI becomes the primary IPv6 address.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public bool? EnablePrimaryIpv6 { get => this._enablePrimaryIpv6; set => this._enablePrimaryIpv6 = value; }

        /// <summary>Backing field for <see cref="GroupSet" /> property.</summary>
        private string[] _groupSet;

        /// <summary>A list of security group IDs associated with this network interface.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string[] GroupSet { get => this._groupSet; set => this._groupSet = value; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private string _id;

        /// <summary>Network interface id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string Id { get => this._id; set => this._id = value; }

        /// <summary>Backing field for <see cref="InterfaceType" /> property.</summary>
        private string _interfaceType;

        /// <summary>Indicates the type of network interface.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string InterfaceType { get => this._interfaceType; set => this._interfaceType = value; }

        /// <summary>Backing field for <see cref="Ipv4Prefix" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IIpv4PrefixSpecification[] _ipv4Prefix;

        /// <summary>
        /// Assigns a list of IPv4 prefixes to the network interface. If you want EC2 to automatically assign IPv4 prefixes, use the
        /// Ipv4PrefixCount property and do not specify this property. Presently, only /28 prefixes are supported. You can't specify
        /// IPv4 prefixes if you've specified one of the following: a count of IPv4 prefixes, specific private IPv4 addresses, or
        /// a count of private IPv4 addresses.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IIpv4PrefixSpecification[] Ipv4Prefix { get => this._ipv4Prefix; set => this._ipv4Prefix = value; }

        /// <summary>Backing field for <see cref="Ipv4PrefixCount" /> property.</summary>
        private int? _ipv4PrefixCount;

        /// <summary>
        /// The number of IPv4 prefixes to assign to a network interface. When you specify a number of IPv4 prefixes, Amazon EC2 selects
        /// these prefixes from your existing subnet CIDR reservations, if available, or from free spaces in the subnet. By default,
        /// these will be /28 prefixes. You can't specify a count of IPv4 prefixes if you've specified one of the following: specific
        /// IPv4 prefixes, specific private IPv4 addresses, or a count of private IPv4 addresses.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? Ipv4PrefixCount { get => this._ipv4PrefixCount; set => this._ipv4PrefixCount = value; }

        /// <summary>Backing field for <see cref="Ipv6Address" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IInstanceIpv6AddressAutoGenerated[] _ipv6Address;

        /// <summary>
        /// One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet to associate with the network interface.
        /// If you're specifying a number of IPv6 addresses, use the Ipv6AddressCount property and don't specify this property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IInstanceIpv6AddressAutoGenerated[] Ipv6Address { get => this._ipv6Address; set => this._ipv6Address = value; }

        /// <summary>Backing field for <see cref="Ipv6AddressCount" /> property.</summary>
        private int? _ipv6AddressCount;

        /// <summary>
        /// The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from
        /// the subnet range. To specify specific IPv6 addresses, use the Ipv6Addresses property and don't specify this property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? Ipv6AddressCount { get => this._ipv6AddressCount; set => this._ipv6AddressCount = value; }

        /// <summary>Backing field for <see cref="Ipv6Prefix" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IIpv6PrefixSpecification[] _ipv6Prefix;

        /// <summary>
        /// Assigns a list of IPv6 prefixes to the network interface. If you want EC2 to automatically assign IPv6 prefixes, use the
        /// Ipv6PrefixCount property and do not specify this property. Presently, only /80 prefixes are supported. You can't specify
        /// IPv6 prefixes if you've specified one of the following: a count of IPv6 prefixes, specific IPv6 addresses, or a count
        /// of IPv6 addresses.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IIpv6PrefixSpecification[] Ipv6Prefix { get => this._ipv6Prefix; set => this._ipv6Prefix = value; }

        /// <summary>Backing field for <see cref="Ipv6PrefixCount" /> property.</summary>
        private int? _ipv6PrefixCount;

        /// <summary>
        /// The number of IPv6 prefixes to assign to a network interface. When you specify a number of IPv6 prefixes, Amazon EC2 selects
        /// these prefixes from your existing subnet CIDR reservations, if available, or from free spaces in the subnet. By default,
        /// these will be /80 prefixes. You can't specify a count of IPv6 prefixes if you've specified one of the following: specific
        /// IPv6 prefixes, specific IPv6 addresses, or a count of IPv6 addresses.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? Ipv6PrefixCount { get => this._ipv6PrefixCount; set => this._ipv6PrefixCount = value; }

        /// <summary>Internal Acessors for ConnectionTrackingSpecification</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConnectionTrackingSpecification Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2NetworkInterfacePropertiesInternal.ConnectionTrackingSpecification { get => (this._connectionTrackingSpecification = this._connectionTrackingSpecification ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ConnectionTrackingSpecification()); set { {_connectionTrackingSpecification = value;} } }

        /// <summary>Backing field for <see cref="PrimaryIpv6Address" /> property.</summary>
        private string _primaryIpv6Address;

        /// <summary>The primary IPv6 address</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string PrimaryIpv6Address { get => this._primaryIpv6Address; set => this._primaryIpv6Address = value; }

        /// <summary>Backing field for <see cref="PrimaryPrivateIPAddress" /> property.</summary>
        private string _primaryPrivateIPAddress;

        /// <summary>Returns the primary private IP address of the network interface.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string PrimaryPrivateIPAddress { get => this._primaryPrivateIPAddress; set => this._primaryPrivateIPAddress = value; }

        /// <summary>Backing field for <see cref="PrivateIPAddress" /> property.</summary>
        private string _privateIPAddress;

        /// <summary>
        /// Assigns a single private IP address to the network interface, which is used as the primary private IP address. If you
        /// want to specify multiple private IP address, use the PrivateIpAddresses property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string PrivateIPAddress { get => this._privateIPAddress; set => this._privateIPAddress = value; }

        /// <summary>Backing field for <see cref="PrivateIPAddresses" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPrivateIPAddressSpecification[] _privateIPAddresses;

        /// <summary>
        /// Assigns a list of private IP addresses to the network interface. You can specify a primary private IP address by setting
        /// the value of the Primary property to true in the PrivateIpAddressSpecification property. If you want EC2 to automatically
        /// assign private IP addresses, use the SecondaryPrivateIpAddressCount property and do not specify this property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPrivateIPAddressSpecification[] PrivateIPAddresses { get => this._privateIPAddresses; set => this._privateIPAddresses = value; }

        /// <summary>Backing field for <see cref="SecondaryPrivateIPAddress" /> property.</summary>
        private string[] _secondaryPrivateIPAddress;

        /// <summary>Returns the secondary private IP addresses of the network interface.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string[] SecondaryPrivateIPAddress { get => this._secondaryPrivateIPAddress; set => this._secondaryPrivateIPAddress = value; }

        /// <summary>Backing field for <see cref="SecondaryPrivateIPAddressCount" /> property.</summary>
        private int? _secondaryPrivateIPAddressCount;

        /// <summary>
        /// The number of secondary private IPv4 addresses to assign to a network interface. When you specify a number of secondary
        /// IPv4 addresses, Amazon EC2 selects these IP addresses within the subnet's IPv4 CIDR range. You can't specify this option
        /// and specify more than one private IP address using privateIpAddresses
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? SecondaryPrivateIPAddressCount { get => this._secondaryPrivateIPAddressCount; set => this._secondaryPrivateIPAddressCount = value; }

        /// <summary>Backing field for <see cref="SourceDestCheck" /> property.</summary>
        private bool? _sourceDestCheck;

        /// <summary>Indicates whether traffic to or from the instance is validated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public bool? SourceDestCheck { get => this._sourceDestCheck; set => this._sourceDestCheck = value; }

        /// <summary>Backing field for <see cref="SubnetId" /> property.</summary>
        private string _subnetId;

        /// <summary>The ID of the subnet to associate with the network interface.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string SubnetId { get => this._subnetId; set => this._subnetId = value; }

        /// <summary>Backing field for <see cref="Tag" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated17[] _tag;

        /// <summary>An arbitrary set of tags (key-value pairs) for this network interface.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated17[] Tag { get => this._tag; set => this._tag = value; }

        /// <summary>Backing field for <see cref="VpcId" /> property.</summary>
        private string _vpcId;

        /// <summary>The ID of the VPC</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string VpcId { get => this._vpcId; set => this._vpcId = value; }

        /// <summary>Creates an new <see cref="AwsEc2NetworkInterfaceProperties" /> instance.</summary>
        public AwsEc2NetworkInterfaceProperties()
        {

        }
    }
    /// Definition of awsEc2NetworkInterface
    public partial interface IAwsEc2NetworkInterfaceProperties :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary>Property tcpEstablishedTimeout</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property tcpEstablishedTimeout",
        SerializedName = @"tcpEstablishedTimeout",
        PossibleTypes = new [] { typeof(int) })]
        int? ConnectionTrackingSpecificationTcpEstablishedTimeout { get; set; }
        /// <summary>Property udpStreamTimeout</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property udpStreamTimeout",
        SerializedName = @"udpStreamTimeout",
        PossibleTypes = new [] { typeof(int) })]
        int? ConnectionTrackingSpecificationUdpStreamTimeout { get; set; }
        /// <summary>Property udpTimeout</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property udpTimeout",
        SerializedName = @"udpTimeout",
        PossibleTypes = new [] { typeof(int) })]
        int? ConnectionTrackingSpecificationUdpTimeout { get; set; }
        /// <summary>A description for the network interface.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A description for the network interface.",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        string Description { get; set; }
        /// <summary>
        /// If you have instances or ENIs that rely on the IPv6 address not changing, to avoid disrupting traffic to instances or
        /// ENIs, you can enable a primary IPv6 address. Enable this option to automatically assign an IPv6 associated with the ENI
        /// attached to your instance to be the primary IPv6 address. When you enable an IPv6 address to be a primary IPv6, you cannot
        /// disable it. Traffic will be routed to the primary IPv6 address until the instance is terminated or the ENI is detached.
        /// If you have multiple IPv6 addresses associated with an ENI and you enable a primary IPv6 address, the first IPv6 address
        /// associated with the ENI becomes the primary IPv6 address.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If you have instances or ENIs that rely on the IPv6 address not changing, to avoid disrupting traffic to instances or ENIs, you can enable a primary IPv6 address. Enable this option to automatically assign an IPv6 associated with the ENI attached to your instance to be the primary IPv6 address. When you enable an IPv6 address to be a primary IPv6, you cannot disable it. Traffic will be routed to the primary IPv6 address until the instance is terminated or the ENI is detached. If you have multiple IPv6 addresses associated with an ENI and you enable a primary IPv6 address, the first IPv6 address associated with the ENI becomes the primary IPv6 address.",
        SerializedName = @"enablePrimaryIpv6",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnablePrimaryIpv6 { get; set; }
        /// <summary>A list of security group IDs associated with this network interface.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A list of security group IDs associated with this network interface.",
        SerializedName = @"groupSet",
        PossibleTypes = new [] { typeof(string) })]
        string[] GroupSet { get; set; }
        /// <summary>Network interface id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Network interface id.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string Id { get; set; }
        /// <summary>Indicates the type of network interface.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates the type of network interface.",
        SerializedName = @"interfaceType",
        PossibleTypes = new [] { typeof(string) })]
        string InterfaceType { get; set; }
        /// <summary>
        /// Assigns a list of IPv4 prefixes to the network interface. If you want EC2 to automatically assign IPv4 prefixes, use the
        /// Ipv4PrefixCount property and do not specify this property. Presently, only /28 prefixes are supported. You can't specify
        /// IPv4 prefixes if you've specified one of the following: a count of IPv4 prefixes, specific private IPv4 addresses, or
        /// a count of private IPv4 addresses.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Assigns a list of IPv4 prefixes to the network interface. If you want EC2 to automatically assign IPv4 prefixes, use the Ipv4PrefixCount property and do not specify this property. Presently, only /28 prefixes are supported. You can't specify IPv4 prefixes if you've specified one of the following: a count of IPv4 prefixes, specific private IPv4 addresses, or a count of private IPv4 addresses.",
        SerializedName = @"ipv4Prefixes",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IIpv4PrefixSpecification) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IIpv4PrefixSpecification[] Ipv4Prefix { get; set; }
        /// <summary>
        /// The number of IPv4 prefixes to assign to a network interface. When you specify a number of IPv4 prefixes, Amazon EC2 selects
        /// these prefixes from your existing subnet CIDR reservations, if available, or from free spaces in the subnet. By default,
        /// these will be /28 prefixes. You can't specify a count of IPv4 prefixes if you've specified one of the following: specific
        /// IPv4 prefixes, specific private IPv4 addresses, or a count of private IPv4 addresses.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of IPv4 prefixes to assign to a network interface. When you specify a number of IPv4 prefixes, Amazon EC2 selects these prefixes from your existing subnet CIDR reservations, if available, or from free spaces in the subnet. By default, these will be /28 prefixes. You can't specify a count of IPv4 prefixes if you've specified one of the following: specific IPv4 prefixes, specific private IPv4 addresses, or a count of private IPv4 addresses.",
        SerializedName = @"ipv4PrefixCount",
        PossibleTypes = new [] { typeof(int) })]
        int? Ipv4PrefixCount { get; set; }
        /// <summary>
        /// One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet to associate with the network interface.
        /// If you're specifying a number of IPv6 addresses, use the Ipv6AddressCount property and don't specify this property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet to associate with the network interface. If you're specifying a number of IPv6 addresses, use the Ipv6AddressCount property and don't specify this property.",
        SerializedName = @"ipv6Addresses",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IInstanceIpv6AddressAutoGenerated) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IInstanceIpv6AddressAutoGenerated[] Ipv6Address { get; set; }
        /// <summary>
        /// The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from
        /// the subnet range. To specify specific IPv6 addresses, use the Ipv6Addresses property and don't specify this property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. To specify specific IPv6 addresses, use the Ipv6Addresses property and don't specify this property.",
        SerializedName = @"ipv6AddressCount",
        PossibleTypes = new [] { typeof(int) })]
        int? Ipv6AddressCount { get; set; }
        /// <summary>
        /// Assigns a list of IPv6 prefixes to the network interface. If you want EC2 to automatically assign IPv6 prefixes, use the
        /// Ipv6PrefixCount property and do not specify this property. Presently, only /80 prefixes are supported. You can't specify
        /// IPv6 prefixes if you've specified one of the following: a count of IPv6 prefixes, specific IPv6 addresses, or a count
        /// of IPv6 addresses.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Assigns a list of IPv6 prefixes to the network interface. If you want EC2 to automatically assign IPv6 prefixes, use the Ipv6PrefixCount property and do not specify this property. Presently, only /80 prefixes are supported. You can't specify IPv6 prefixes if you've specified one of the following: a count of IPv6 prefixes, specific IPv6 addresses, or a count of IPv6 addresses.",
        SerializedName = @"ipv6Prefixes",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IIpv6PrefixSpecification) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IIpv6PrefixSpecification[] Ipv6Prefix { get; set; }
        /// <summary>
        /// The number of IPv6 prefixes to assign to a network interface. When you specify a number of IPv6 prefixes, Amazon EC2 selects
        /// these prefixes from your existing subnet CIDR reservations, if available, or from free spaces in the subnet. By default,
        /// these will be /80 prefixes. You can't specify a count of IPv6 prefixes if you've specified one of the following: specific
        /// IPv6 prefixes, specific IPv6 addresses, or a count of IPv6 addresses.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of IPv6 prefixes to assign to a network interface. When you specify a number of IPv6 prefixes, Amazon EC2 selects these prefixes from your existing subnet CIDR reservations, if available, or from free spaces in the subnet. By default, these will be /80 prefixes. You can't specify a count of IPv6 prefixes if you've specified one of the following: specific IPv6 prefixes, specific IPv6 addresses, or a count of IPv6 addresses.",
        SerializedName = @"ipv6PrefixCount",
        PossibleTypes = new [] { typeof(int) })]
        int? Ipv6PrefixCount { get; set; }
        /// <summary>The primary IPv6 address</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The primary IPv6 address",
        SerializedName = @"primaryIpv6Address",
        PossibleTypes = new [] { typeof(string) })]
        string PrimaryIpv6Address { get; set; }
        /// <summary>Returns the primary private IP address of the network interface.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Returns the primary private IP address of the network interface.",
        SerializedName = @"primaryPrivateIpAddress",
        PossibleTypes = new [] { typeof(string) })]
        string PrimaryPrivateIPAddress { get; set; }
        /// <summary>
        /// Assigns a single private IP address to the network interface, which is used as the primary private IP address. If you
        /// want to specify multiple private IP address, use the PrivateIpAddresses property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Assigns a single private IP address to the network interface, which is used as the primary private IP address. If you want to specify multiple private IP address, use the PrivateIpAddresses property.",
        SerializedName = @"privateIpAddress",
        PossibleTypes = new [] { typeof(string) })]
        string PrivateIPAddress { get; set; }
        /// <summary>
        /// Assigns a list of private IP addresses to the network interface. You can specify a primary private IP address by setting
        /// the value of the Primary property to true in the PrivateIpAddressSpecification property. If you want EC2 to automatically
        /// assign private IP addresses, use the SecondaryPrivateIpAddressCount property and do not specify this property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Assigns a list of private IP addresses to the network interface. You can specify a primary private IP address by setting the value of the Primary property to true in the PrivateIpAddressSpecification property. If you want EC2 to automatically assign private IP addresses, use the SecondaryPrivateIpAddressCount property and do not specify this property.",
        SerializedName = @"privateIpAddresses",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPrivateIPAddressSpecification) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPrivateIPAddressSpecification[] PrivateIPAddresses { get; set; }
        /// <summary>Returns the secondary private IP addresses of the network interface.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Returns the secondary private IP addresses of the network interface.",
        SerializedName = @"secondaryPrivateIpAddresses",
        PossibleTypes = new [] { typeof(string) })]
        string[] SecondaryPrivateIPAddress { get; set; }
        /// <summary>
        /// The number of secondary private IPv4 addresses to assign to a network interface. When you specify a number of secondary
        /// IPv4 addresses, Amazon EC2 selects these IP addresses within the subnet's IPv4 CIDR range. You can't specify this option
        /// and specify more than one private IP address using privateIpAddresses
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of secondary private IPv4 addresses to assign to a network interface. When you specify a number of secondary IPv4 addresses, Amazon EC2 selects these IP addresses within the subnet's IPv4 CIDR range. You can't specify this option and specify more than one private IP address using privateIpAddresses",
        SerializedName = @"secondaryPrivateIpAddressCount",
        PossibleTypes = new [] { typeof(int) })]
        int? SecondaryPrivateIPAddressCount { get; set; }
        /// <summary>Indicates whether traffic to or from the instance is validated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether traffic to or from the instance is validated.",
        SerializedName = @"sourceDestCheck",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SourceDestCheck { get; set; }
        /// <summary>The ID of the subnet to associate with the network interface.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ID of the subnet to associate with the network interface.",
        SerializedName = @"subnetId",
        PossibleTypes = new [] { typeof(string) })]
        string SubnetId { get; set; }
        /// <summary>An arbitrary set of tags (key-value pairs) for this network interface.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An arbitrary set of tags (key-value pairs) for this network interface.",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated17) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated17[] Tag { get; set; }
        /// <summary>The ID of the VPC</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ID of the VPC",
        SerializedName = @"vpcId",
        PossibleTypes = new [] { typeof(string) })]
        string VpcId { get; set; }

    }
    /// Definition of awsEc2NetworkInterface
    internal partial interface IAwsEc2NetworkInterfacePropertiesInternal

    {
        /// <summary>Property connectionTrackingSpecification</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConnectionTrackingSpecification ConnectionTrackingSpecification { get; set; }
        /// <summary>Property tcpEstablishedTimeout</summary>
        int? ConnectionTrackingSpecificationTcpEstablishedTimeout { get; set; }
        /// <summary>Property udpStreamTimeout</summary>
        int? ConnectionTrackingSpecificationUdpStreamTimeout { get; set; }
        /// <summary>Property udpTimeout</summary>
        int? ConnectionTrackingSpecificationUdpTimeout { get; set; }
        /// <summary>A description for the network interface.</summary>
        string Description { get; set; }
        /// <summary>
        /// If you have instances or ENIs that rely on the IPv6 address not changing, to avoid disrupting traffic to instances or
        /// ENIs, you can enable a primary IPv6 address. Enable this option to automatically assign an IPv6 associated with the ENI
        /// attached to your instance to be the primary IPv6 address. When you enable an IPv6 address to be a primary IPv6, you cannot
        /// disable it. Traffic will be routed to the primary IPv6 address until the instance is terminated or the ENI is detached.
        /// If you have multiple IPv6 addresses associated with an ENI and you enable a primary IPv6 address, the first IPv6 address
        /// associated with the ENI becomes the primary IPv6 address.
        /// </summary>
        bool? EnablePrimaryIpv6 { get; set; }
        /// <summary>A list of security group IDs associated with this network interface.</summary>
        string[] GroupSet { get; set; }
        /// <summary>Network interface id.</summary>
        string Id { get; set; }
        /// <summary>Indicates the type of network interface.</summary>
        string InterfaceType { get; set; }
        /// <summary>
        /// Assigns a list of IPv4 prefixes to the network interface. If you want EC2 to automatically assign IPv4 prefixes, use the
        /// Ipv4PrefixCount property and do not specify this property. Presently, only /28 prefixes are supported. You can't specify
        /// IPv4 prefixes if you've specified one of the following: a count of IPv4 prefixes, specific private IPv4 addresses, or
        /// a count of private IPv4 addresses.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IIpv4PrefixSpecification[] Ipv4Prefix { get; set; }
        /// <summary>
        /// The number of IPv4 prefixes to assign to a network interface. When you specify a number of IPv4 prefixes, Amazon EC2 selects
        /// these prefixes from your existing subnet CIDR reservations, if available, or from free spaces in the subnet. By default,
        /// these will be /28 prefixes. You can't specify a count of IPv4 prefixes if you've specified one of the following: specific
        /// IPv4 prefixes, specific private IPv4 addresses, or a count of private IPv4 addresses.
        /// </summary>
        int? Ipv4PrefixCount { get; set; }
        /// <summary>
        /// One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet to associate with the network interface.
        /// If you're specifying a number of IPv6 addresses, use the Ipv6AddressCount property and don't specify this property.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IInstanceIpv6AddressAutoGenerated[] Ipv6Address { get; set; }
        /// <summary>
        /// The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from
        /// the subnet range. To specify specific IPv6 addresses, use the Ipv6Addresses property and don't specify this property.
        /// </summary>
        int? Ipv6AddressCount { get; set; }
        /// <summary>
        /// Assigns a list of IPv6 prefixes to the network interface. If you want EC2 to automatically assign IPv6 prefixes, use the
        /// Ipv6PrefixCount property and do not specify this property. Presently, only /80 prefixes are supported. You can't specify
        /// IPv6 prefixes if you've specified one of the following: a count of IPv6 prefixes, specific IPv6 addresses, or a count
        /// of IPv6 addresses.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IIpv6PrefixSpecification[] Ipv6Prefix { get; set; }
        /// <summary>
        /// The number of IPv6 prefixes to assign to a network interface. When you specify a number of IPv6 prefixes, Amazon EC2 selects
        /// these prefixes from your existing subnet CIDR reservations, if available, or from free spaces in the subnet. By default,
        /// these will be /80 prefixes. You can't specify a count of IPv6 prefixes if you've specified one of the following: specific
        /// IPv6 prefixes, specific IPv6 addresses, or a count of IPv6 addresses.
        /// </summary>
        int? Ipv6PrefixCount { get; set; }
        /// <summary>The primary IPv6 address</summary>
        string PrimaryIpv6Address { get; set; }
        /// <summary>Returns the primary private IP address of the network interface.</summary>
        string PrimaryPrivateIPAddress { get; set; }
        /// <summary>
        /// Assigns a single private IP address to the network interface, which is used as the primary private IP address. If you
        /// want to specify multiple private IP address, use the PrivateIpAddresses property.
        /// </summary>
        string PrivateIPAddress { get; set; }
        /// <summary>
        /// Assigns a list of private IP addresses to the network interface. You can specify a primary private IP address by setting
        /// the value of the Primary property to true in the PrivateIpAddressSpecification property. If you want EC2 to automatically
        /// assign private IP addresses, use the SecondaryPrivateIpAddressCount property and do not specify this property.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPrivateIPAddressSpecification[] PrivateIPAddresses { get; set; }
        /// <summary>Returns the secondary private IP addresses of the network interface.</summary>
        string[] SecondaryPrivateIPAddress { get; set; }
        /// <summary>
        /// The number of secondary private IPv4 addresses to assign to a network interface. When you specify a number of secondary
        /// IPv4 addresses, Amazon EC2 selects these IP addresses within the subnet's IPv4 CIDR range. You can't specify this option
        /// and specify more than one private IP address using privateIpAddresses
        /// </summary>
        int? SecondaryPrivateIPAddressCount { get; set; }
        /// <summary>Indicates whether traffic to or from the instance is validated.</summary>
        bool? SourceDestCheck { get; set; }
        /// <summary>The ID of the subnet to associate with the network interface.</summary>
        string SubnetId { get; set; }
        /// <summary>An arbitrary set of tags (key-value pairs) for this network interface.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated17[] Tag { get; set; }
        /// <summary>The ID of the VPC</summary>
        string VpcId { get; set; }

    }
}