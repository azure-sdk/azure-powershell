// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of PlacementStrategy</summary>
    public partial class PlacementStrategy :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPlacementStrategy,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPlacementStrategyInternal
    {

        /// <summary>Backing field for <see cref="Field" /> property.</summary>
        private string _field;

        /// <summary>
        /// The field to apply the placement strategy against. For the ``spread`` placement strategy, valid values are ``instanceId``
        /// (or ``host``, which has the same effect), or any platform or custom attribute that is applied to a container instance,
        /// such as ``attribute:ecs.availability-zone``. For the ``binpack`` placement strategy, valid values are ``CPU`` and ``MEMORY``.
        /// For the ``random`` placement strategy, this field is not used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string Field { get => this._field; set => this._field = value; }

        /// <summary>Backing field for <see cref="Type" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.PlacementStrategyType? _type;

        /// <summary>
        /// The type of placement strategy. The ``random`` placement strategy randomly places tasks on available candidates. The ``spread``
        /// placement strategy spreads placement across available candidates evenly based on the ``field`` parameter. The ``binpack``
        /// strategy places tasks on available candidates that have the least available amount of the resource that's specified with
        /// the ``field`` parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount
        /// of remaining memory but still enough to run the task.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.PlacementStrategyType? Type { get => this._type; set => this._type = value; }

        /// <summary>Creates an new <see cref="PlacementStrategy" /> instance.</summary>
        public PlacementStrategy()
        {

        }
    }
    /// Definition of PlacementStrategy
    public partial interface IPlacementStrategy :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The field to apply the placement strategy against. For the ``spread`` placement strategy, valid values are ``instanceId``
        /// (or ``host``, which has the same effect), or any platform or custom attribute that is applied to a container instance,
        /// such as ``attribute:ecs.availability-zone``. For the ``binpack`` placement strategy, valid values are ``CPU`` and ``MEMORY``.
        /// For the ``random`` placement strategy, this field is not used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The field to apply the placement strategy against. For the ``spread`` placement strategy, valid values are ``instanceId`` (or ``host``, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as ``attribute:ecs.availability-zone``. For the ``binpack`` placement strategy, valid values are ``CPU`` and ``MEMORY``. For the ``random`` placement strategy, this field is not used.",
        SerializedName = @"field",
        PossibleTypes = new [] { typeof(string) })]
        string Field { get; set; }
        /// <summary>
        /// The type of placement strategy. The ``random`` placement strategy randomly places tasks on available candidates. The ``spread``
        /// placement strategy spreads placement across available candidates evenly based on the ``field`` parameter. The ``binpack``
        /// strategy places tasks on available candidates that have the least available amount of the resource that's specified with
        /// the ``field`` parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount
        /// of remaining memory but still enough to run the task.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of placement strategy. The ``random`` placement strategy randomly places tasks on available candidates. The ``spread`` placement strategy spreads placement across available candidates evenly based on the ``field`` parameter. The ``binpack`` strategy places tasks on available candidates that have the least available amount of the resource that's specified with the ``field`` parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory but still enough to run the task.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.PlacementStrategyType) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.PlacementStrategyType? Type { get; set; }

    }
    /// Definition of PlacementStrategy
    internal partial interface IPlacementStrategyInternal

    {
        /// <summary>
        /// The field to apply the placement strategy against. For the ``spread`` placement strategy, valid values are ``instanceId``
        /// (or ``host``, which has the same effect), or any platform or custom attribute that is applied to a container instance,
        /// such as ``attribute:ecs.availability-zone``. For the ``binpack`` placement strategy, valid values are ``CPU`` and ``MEMORY``.
        /// For the ``random`` placement strategy, this field is not used.
        /// </summary>
        string Field { get; set; }
        /// <summary>
        /// The type of placement strategy. The ``random`` placement strategy randomly places tasks on available candidates. The ``spread``
        /// placement strategy spreads placement across available candidates evenly based on the ``field`` parameter. The ``binpack``
        /// strategy places tasks on available candidates that have the least available amount of the resource that's specified with
        /// the ``field`` parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount
        /// of remaining memory but still enough to run the task.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.PlacementStrategyType? Type { get; set; }

    }
}