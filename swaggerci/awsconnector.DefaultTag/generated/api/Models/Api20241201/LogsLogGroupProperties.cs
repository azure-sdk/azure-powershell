// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of LogsLogGroup</summary>
    public partial class LogsLogGroupProperties :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILogsLogGroupProperties,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILogsLogGroupPropertiesInternal
    {

        /// <summary>Backing field for <see cref="Arn" /> property.</summary>
        private string _arn;

        /// <summary>Amazon Resource Name (ARN)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string Arn { get => this._arn; set => this._arn = value; }

        /// <summary>Property arn</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwPropertyArn { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsLogsLogGroupPropertiesInternal)AwsProperty).Arn; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsLogsLogGroupPropertiesInternal)AwsProperty).Arn = value ?? null; }

        /// <summary>
        /// Creates a data protection policy and assigns it to the log group. A data protection policy can help safeguard sensitive
        /// data that's ingested by the log group by auditing and masking the sensitive log data. When a user who does not have permission
        /// to view masked data views a log event that includes masked data, the sensitive data is replaced by asterisks. For more
        /// information, including a list of types of data that can be audited and masked, see [Protect sensitive log data with masking](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/mask-sensitive-log-data.html).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.IAny AwPropertyDataProtectionPolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsLogsLogGroupPropertiesInternal)AwsProperty).DataProtectionPolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsLogsLogGroupPropertiesInternal)AwsProperty).DataProtectionPolicy = value ?? null /* model class */; }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the KMS key to use when encrypting log data. To associate an KMS key with the log group,
        /// specify the ARN of that KMS key here. If you do so, ingested data is encrypted using this key. This association is stored
        /// as long as the data encrypted with the KMS key is still within CWL. This enables CWL to decrypt this data whenever it
        /// is requested. If you attempt to associate a KMS key with the log group but the KMS key doesn't exist or is deactivated,
        /// you will receive an ``InvalidParameterException`` error. Log group data is always encrypted in CWL. If you omit this key,
        /// the encryption does not use KMS. For more information, see [Encrypt log data in using](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/encrypt-log-data-kms.html)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwPropertyKmsKeyId { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsLogsLogGroupPropertiesInternal)AwsProperty).KmsKeyId; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsLogsLogGroupPropertiesInternal)AwsProperty).KmsKeyId = value ?? null; }

        /// <summary>
        /// Specifies the log group class for this log group. There are two classes: + The ``Standard`` log class supports all CWL
        /// features. + The ``Infrequent Access`` log class supports a subset of CWL features and incurs lower costs. For details
        /// about the features supported by each class, see [Log classes](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch_Logs_Log_Classes.html)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.LogGroupClass? AwPropertyLogGroupClass { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsLogsLogGroupPropertiesInternal)AwsProperty).LogGroupClass; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsLogsLogGroupPropertiesInternal)AwsProperty).LogGroupClass = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.LogGroupClass)""); }

        /// <summary>
        /// The name of the log group. If you don't specify a name, CFNlong generates a unique ID for the log group.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwPropertyLogGroupName { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsLogsLogGroupPropertiesInternal)AwsProperty).LogGroupName; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsLogsLogGroupPropertiesInternal)AwsProperty).LogGroupName = value ?? null; }

        /// <summary>
        /// The number of days to retain the log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90,
        /// 120, 150, 180, 365, 400, 545, 731, 1096, 1827, 2192, 2557, 2922, 3288, and 3653. To set a log group so that its log events
        /// do not expire, use [DeleteRetentionPolicy](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DeleteRetentionPolicy.html).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public int? AwPropertyRetentionInDay { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsLogsLogGroupPropertiesInternal)AwsProperty).RetentionInDay; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsLogsLogGroupPropertiesInternal)AwsProperty).RetentionInDay = value ?? default(int); }

        /// <summary>
        /// An array of key-value pairs to apply to the log group. For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated40[] AwPropertyTag { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsLogsLogGroupPropertiesInternal)AwsProperty).Tag; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsLogsLogGroupPropertiesInternal)AwsProperty).Tag = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="AwsAccountId" /> property.</summary>
        private string _awsAccountId;

        /// <summary>AWS Account ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string AwsAccountId { get => this._awsAccountId; set => this._awsAccountId = value; }

        /// <summary>Backing field for <see cref="AwsProperty" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsLogsLogGroupProperties _awsProperty;

        /// <summary>AWS Properties</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsLogsLogGroupProperties AwsProperty { get => (this._awsProperty = this._awsProperty ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AwsLogsLogGroupProperties()); set => this._awsProperty = value; }

        /// <summary>Backing field for <see cref="AwsRegion" /> property.</summary>
        private string _awsRegion;

        /// <summary>AWS Region</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string AwsRegion { get => this._awsRegion; set => this._awsRegion = value; }

        /// <summary>Backing field for <see cref="AwsSourceSchema" /> property.</summary>
        private string _awsSourceSchema;

        /// <summary>AWS Source Schema</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string AwsSourceSchema { get => this._awsSourceSchema; set => this._awsSourceSchema = value; }

        /// <summary>Backing field for <see cref="AwsTag" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILogsLogGroupPropertiesAwsTags _awsTag;

        /// <summary>AWS Tags</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILogsLogGroupPropertiesAwsTags AwsTag { get => (this._awsTag = this._awsTag ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.LogsLogGroupPropertiesAwsTags()); set => this._awsTag = value; }

        /// <summary>Internal Acessors for AwsProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsLogsLogGroupProperties Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILogsLogGroupPropertiesInternal.AwsProperty { get => (this._awsProperty = this._awsProperty ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AwsLogsLogGroupProperties()); set { {_awsProperty = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILogsLogGroupPropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? _provisioningState;

        /// <summary>The status of the last operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="PublicCloudConnectorsResourceId" /> property.</summary>
        private string _publicCloudConnectorsResourceId;

        /// <summary>Public Cloud Connectors Resource ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string PublicCloudConnectorsResourceId { get => this._publicCloudConnectorsResourceId; set => this._publicCloudConnectorsResourceId = value; }

        /// <summary>Backing field for <see cref="PublicCloudResourceName" /> property.</summary>
        private string _publicCloudResourceName;

        /// <summary>Public Cloud Resource Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string PublicCloudResourceName { get => this._publicCloudResourceName; set => this._publicCloudResourceName = value; }

        /// <summary>Creates an new <see cref="LogsLogGroupProperties" /> instance.</summary>
        public LogsLogGroupProperties()
        {

        }
    }
    /// Definition of LogsLogGroup
    public partial interface ILogsLogGroupProperties :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary>Amazon Resource Name (ARN)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Amazon Resource Name (ARN)",
        SerializedName = @"arn",
        PossibleTypes = new [] { typeof(string) })]
        string Arn { get; set; }
        /// <summary>Property arn</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property arn",
        SerializedName = @"arn",
        PossibleTypes = new [] { typeof(string) })]
        string AwPropertyArn { get; set; }
        /// <summary>
        /// Creates a data protection policy and assigns it to the log group. A data protection policy can help safeguard sensitive
        /// data that's ingested by the log group by auditing and masking the sensitive log data. When a user who does not have permission
        /// to view masked data views a log event that includes masked data, the sensitive data is replaced by asterisks. For more
        /// information, including a list of types of data that can be audited and masked, see [Protect sensitive log data with masking](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/mask-sensitive-log-data.html).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Creates a data protection policy and assigns it to the log group. A data protection policy can help safeguard sensitive data that's ingested by the log group by auditing and masking the sensitive log data. When a user who does not have permission to view masked data views a log event that includes masked data, the sensitive data is replaced by asterisks. For more information, including a list of types of data that can be audited and masked, see [Protect sensitive log data with masking](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/mask-sensitive-log-data.html).",
        SerializedName = @"dataProtectionPolicy",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.IAny) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.IAny AwPropertyDataProtectionPolicy { get; set; }
        /// <summary>
        /// The Amazon Resource Name (ARN) of the KMS key to use when encrypting log data. To associate an KMS key with the log group,
        /// specify the ARN of that KMS key here. If you do so, ingested data is encrypted using this key. This association is stored
        /// as long as the data encrypted with the KMS key is still within CWL. This enables CWL to decrypt this data whenever it
        /// is requested. If you attempt to associate a KMS key with the log group but the KMS key doesn't exist or is deactivated,
        /// you will receive an ``InvalidParameterException`` error. Log group data is always encrypted in CWL. If you omit this key,
        /// the encryption does not use KMS. For more information, see [Encrypt log data in using](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/encrypt-log-data-kms.html)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Amazon Resource Name (ARN) of the KMS key to use when encrypting log data. To associate an KMS key with the log group, specify the ARN of that KMS key here. If you do so, ingested data is encrypted using this key. This association is stored as long as the data encrypted with the KMS key is still within CWL. This enables CWL to decrypt this data whenever it is requested. If you attempt to associate a KMS key with the log group but the KMS key doesn't exist or is deactivated, you will receive an ``InvalidParameterException`` error. Log group data is always encrypted in CWL. If you omit this key, the encryption does not use KMS. For more information, see [Encrypt log data in using](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/encrypt-log-data-kms.html)",
        SerializedName = @"kmsKeyId",
        PossibleTypes = new [] { typeof(string) })]
        string AwPropertyKmsKeyId { get; set; }
        /// <summary>
        /// Specifies the log group class for this log group. There are two classes: + The ``Standard`` log class supports all CWL
        /// features. + The ``Infrequent Access`` log class supports a subset of CWL features and incurs lower costs. For details
        /// about the features supported by each class, see [Log classes](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch_Logs_Log_Classes.html)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the log group class for this log group. There are two classes:  +  The ``Standard`` log class supports all CWL features.  +  The ``Infrequent Access`` log class supports a subset of CWL features and incurs lower costs.   For details about the features supported by each class, see [Log classes](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch_Logs_Log_Classes.html)",
        SerializedName = @"logGroupClass",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.LogGroupClass) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.LogGroupClass? AwPropertyLogGroupClass { get; set; }
        /// <summary>
        /// The name of the log group. If you don't specify a name, CFNlong generates a unique ID for the log group.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the log group. If you don't specify a name, CFNlong generates a unique ID for the log group.",
        SerializedName = @"logGroupName",
        PossibleTypes = new [] { typeof(string) })]
        string AwPropertyLogGroupName { get; set; }
        /// <summary>
        /// The number of days to retain the log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90,
        /// 120, 150, 180, 365, 400, 545, 731, 1096, 1827, 2192, 2557, 2922, 3288, and 3653. To set a log group so that its log events
        /// do not expire, use [DeleteRetentionPolicy](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DeleteRetentionPolicy.html).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of days to retain the log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1096, 1827, 2192, 2557, 2922, 3288, and 3653. To set a log group so that its log events do not expire, use [DeleteRetentionPolicy](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DeleteRetentionPolicy.html).",
        SerializedName = @"retentionInDays",
        PossibleTypes = new [] { typeof(int) })]
        int? AwPropertyRetentionInDay { get; set; }
        /// <summary>
        /// An array of key-value pairs to apply to the log group. For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An array of key-value pairs to apply to the log group. For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated40) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated40[] AwPropertyTag { get; set; }
        /// <summary>AWS Account ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Account ID",
        SerializedName = @"awsAccountId",
        PossibleTypes = new [] { typeof(string) })]
        string AwsAccountId { get; set; }
        /// <summary>AWS Region</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Region",
        SerializedName = @"awsRegion",
        PossibleTypes = new [] { typeof(string) })]
        string AwsRegion { get; set; }
        /// <summary>AWS Source Schema</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Source Schema",
        SerializedName = @"awsSourceSchema",
        PossibleTypes = new [] { typeof(string) })]
        string AwsSourceSchema { get; set; }
        /// <summary>AWS Tags</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Tags",
        SerializedName = @"awsTags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILogsLogGroupPropertiesAwsTags) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILogsLogGroupPropertiesAwsTags AwsTag { get; set; }
        /// <summary>The status of the last operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The status of the last operation.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? ProvisioningState { get;  }
        /// <summary>Public Cloud Connectors Resource ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Public Cloud Connectors Resource ID",
        SerializedName = @"publicCloudConnectorsResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string PublicCloudConnectorsResourceId { get; set; }
        /// <summary>Public Cloud Resource Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Public Cloud Resource Name",
        SerializedName = @"publicCloudResourceName",
        PossibleTypes = new [] { typeof(string) })]
        string PublicCloudResourceName { get; set; }

    }
    /// Definition of LogsLogGroup
    internal partial interface ILogsLogGroupPropertiesInternal

    {
        /// <summary>Amazon Resource Name (ARN)</summary>
        string Arn { get; set; }
        /// <summary>Property arn</summary>
        string AwPropertyArn { get; set; }
        /// <summary>
        /// Creates a data protection policy and assigns it to the log group. A data protection policy can help safeguard sensitive
        /// data that's ingested by the log group by auditing and masking the sensitive log data. When a user who does not have permission
        /// to view masked data views a log event that includes masked data, the sensitive data is replaced by asterisks. For more
        /// information, including a list of types of data that can be audited and masked, see [Protect sensitive log data with masking](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/mask-sensitive-log-data.html).
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.IAny AwPropertyDataProtectionPolicy { get; set; }
        /// <summary>
        /// The Amazon Resource Name (ARN) of the KMS key to use when encrypting log data. To associate an KMS key with the log group,
        /// specify the ARN of that KMS key here. If you do so, ingested data is encrypted using this key. This association is stored
        /// as long as the data encrypted with the KMS key is still within CWL. This enables CWL to decrypt this data whenever it
        /// is requested. If you attempt to associate a KMS key with the log group but the KMS key doesn't exist or is deactivated,
        /// you will receive an ``InvalidParameterException`` error. Log group data is always encrypted in CWL. If you omit this key,
        /// the encryption does not use KMS. For more information, see [Encrypt log data in using](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/encrypt-log-data-kms.html)
        /// </summary>
        string AwPropertyKmsKeyId { get; set; }
        /// <summary>
        /// Specifies the log group class for this log group. There are two classes: + The ``Standard`` log class supports all CWL
        /// features. + The ``Infrequent Access`` log class supports a subset of CWL features and incurs lower costs. For details
        /// about the features supported by each class, see [Log classes](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch_Logs_Log_Classes.html)
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.LogGroupClass? AwPropertyLogGroupClass { get; set; }
        /// <summary>
        /// The name of the log group. If you don't specify a name, CFNlong generates a unique ID for the log group.
        /// </summary>
        string AwPropertyLogGroupName { get; set; }
        /// <summary>
        /// The number of days to retain the log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90,
        /// 120, 150, 180, 365, 400, 545, 731, 1096, 1827, 2192, 2557, 2922, 3288, and 3653. To set a log group so that its log events
        /// do not expire, use [DeleteRetentionPolicy](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DeleteRetentionPolicy.html).
        /// </summary>
        int? AwPropertyRetentionInDay { get; set; }
        /// <summary>
        /// An array of key-value pairs to apply to the log group. For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated40[] AwPropertyTag { get; set; }
        /// <summary>AWS Account ID</summary>
        string AwsAccountId { get; set; }
        /// <summary>AWS Properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsLogsLogGroupProperties AwsProperty { get; set; }
        /// <summary>AWS Region</summary>
        string AwsRegion { get; set; }
        /// <summary>AWS Source Schema</summary>
        string AwsSourceSchema { get; set; }
        /// <summary>AWS Tags</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILogsLogGroupPropertiesAwsTags AwsTag { get; set; }
        /// <summary>The status of the last operation.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? ProvisioningState { get; set; }
        /// <summary>Public Cloud Connectors Resource ID</summary>
        string PublicCloudConnectorsResourceId { get; set; }
        /// <summary>Public Cloud Resource Name</summary>
        string PublicCloudResourceName { get; set; }

    }
}