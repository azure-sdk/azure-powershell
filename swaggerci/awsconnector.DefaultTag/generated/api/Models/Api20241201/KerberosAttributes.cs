// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of KerberosAttributes</summary>
    public partial class KerberosAttributes :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IKerberosAttributes,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IKerberosAttributesInternal
    {

        /// <summary>Backing field for <see cref="AdDomainJoinPassword" /> property.</summary>
        private string _adDomainJoinPassword;

        /// <summary><p>The Active Directory password for <code>ADDomainJoinUser</code>.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string AdDomainJoinPassword { get => this._adDomainJoinPassword; set => this._adDomainJoinPassword = value; }

        /// <summary>Backing field for <see cref="AdDomainJoinUser" /> property.</summary>
        private string _adDomainJoinUser;

        /// <summary>
        /// <p>Required only when establishing a cross-realm trust with an Active Directory domain. A user with sufficient privileges
        /// to join resources to the domain.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string AdDomainJoinUser { get => this._adDomainJoinUser; set => this._adDomainJoinUser = value; }

        /// <summary>Backing field for <see cref="CrossRealmTrustPrincipalPassword" /> property.</summary>
        private string _crossRealmTrustPrincipalPassword;

        /// <summary>
        /// <p>Required only when establishing a cross-realm trust with a KDC in a different realm. The cross-realm principal password,
        /// which must be identical across realms.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string CrossRealmTrustPrincipalPassword { get => this._crossRealmTrustPrincipalPassword; set => this._crossRealmTrustPrincipalPassword = value; }

        /// <summary>Backing field for <see cref="KdcAdminPassword" /> property.</summary>
        private string _kdcAdminPassword;

        /// <summary>
        /// <p>The password used within the cluster for the kadmin service on the cluster-dedicated KDC, which maintains Kerberos
        /// principals, password policies, and keytabs for the cluster.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string KdcAdminPassword { get => this._kdcAdminPassword; set => this._kdcAdminPassword = value; }

        /// <summary>Backing field for <see cref="Realm" /> property.</summary>
        private string _realm;

        /// <summary>
        /// <p>The name of the Kerberos realm to which all nodes in a cluster belong. For example, <code>EC2.INTERNAL</code>. </p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string Realm { get => this._realm; set => this._realm = value; }

        /// <summary>Creates an new <see cref="KerberosAttributes" /> instance.</summary>
        public KerberosAttributes()
        {

        }
    }
    /// Definition of KerberosAttributes
    public partial interface IKerberosAttributes :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary><p>The Active Directory password for <code>ADDomainJoinUser</code>.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The Active Directory password for <code>ADDomainJoinUser</code>.</p>",
        SerializedName = @"adDomainJoinPassword",
        PossibleTypes = new [] { typeof(string) })]
        string AdDomainJoinPassword { get; set; }
        /// <summary>
        /// <p>Required only when establishing a cross-realm trust with an Active Directory domain. A user with sufficient privileges
        /// to join resources to the domain.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>Required only when establishing a cross-realm trust with an Active Directory domain. A user with sufficient privileges to join resources to the domain.</p>",
        SerializedName = @"adDomainJoinUser",
        PossibleTypes = new [] { typeof(string) })]
        string AdDomainJoinUser { get; set; }
        /// <summary>
        /// <p>Required only when establishing a cross-realm trust with a KDC in a different realm. The cross-realm principal password,
        /// which must be identical across realms.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>Required only when establishing a cross-realm trust with a KDC in a different realm. The cross-realm principal password, which must be identical across realms.</p>",
        SerializedName = @"crossRealmTrustPrincipalPassword",
        PossibleTypes = new [] { typeof(string) })]
        string CrossRealmTrustPrincipalPassword { get; set; }
        /// <summary>
        /// <p>The password used within the cluster for the kadmin service on the cluster-dedicated KDC, which maintains Kerberos
        /// principals, password policies, and keytabs for the cluster.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The password used within the cluster for the kadmin service on the cluster-dedicated KDC, which maintains Kerberos principals, password policies, and keytabs for the cluster.</p>",
        SerializedName = @"kdcAdminPassword",
        PossibleTypes = new [] { typeof(string) })]
        string KdcAdminPassword { get; set; }
        /// <summary>
        /// <p>The name of the Kerberos realm to which all nodes in a cluster belong. For example, <code>EC2.INTERNAL</code>. </p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The name of the Kerberos realm to which all nodes in a cluster belong. For example, <code>EC2.INTERNAL</code>. </p>",
        SerializedName = @"realm",
        PossibleTypes = new [] { typeof(string) })]
        string Realm { get; set; }

    }
    /// Definition of KerberosAttributes
    internal partial interface IKerberosAttributesInternal

    {
        /// <summary><p>The Active Directory password for <code>ADDomainJoinUser</code>.</p></summary>
        string AdDomainJoinPassword { get; set; }
        /// <summary>
        /// <p>Required only when establishing a cross-realm trust with an Active Directory domain. A user with sufficient privileges
        /// to join resources to the domain.</p>
        /// </summary>
        string AdDomainJoinUser { get; set; }
        /// <summary>
        /// <p>Required only when establishing a cross-realm trust with a KDC in a different realm. The cross-realm principal password,
        /// which must be identical across realms.</p>
        /// </summary>
        string CrossRealmTrustPrincipalPassword { get; set; }
        /// <summary>
        /// <p>The password used within the cluster for the kadmin service on the cluster-dedicated KDC, which maintains Kerberos
        /// principals, password policies, and keytabs for the cluster.</p>
        /// </summary>
        string KdcAdminPassword { get; set; }
        /// <summary>
        /// <p>The name of the Kerberos realm to which all nodes in a cluster belong. For example, <code>EC2.INTERNAL</code>. </p>
        /// </summary>
        string Realm { get; set; }

    }
}