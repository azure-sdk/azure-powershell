// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of ProjectCache</summary>
    public partial class ProjectCache :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IProjectCache,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IProjectCacheInternal
    {

        /// <summary>Backing field for <see cref="Location" /> property.</summary>
        private string _location;

        /// <summary>
        /// <p>Information about the cache location: </p> <ul> <li> <p> <code>NO_CACHE</code> or <code>LOCAL</code>: This value is
        /// ignored.</p> </li> <li> <p> <code>S3</code>: This is the S3 bucket name/prefix.</p> </li> </ul>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string Location { get => this._location; set => this._location = value; }

        /// <summary>Internal Acessors for Type</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICacheTypeEnumValue Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IProjectCacheInternal.Type { get => (this._type = this._type ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.CacheTypeEnumValue()); set { {_type = value;} } }

        /// <summary>Backing field for <see cref="Mode" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CacheMode[] _mode;

        /// <summary>
        /// <p>An array of strings that specify the local cache modes. You can use one or more local cache modes at the same time.
        /// This is only used for <code>LOCAL</code> cache types.</p> <p>Possible values are:</p> <dl> <dt>LOCAL_SOURCE_CACHE</dt>
        /// <dd> <p>Caches Git metadata for primary and secondary sources. After the cache is created, subsequent builds pull only
        /// the change between commits. This mode is a good choice for projects with a clean working directory and a source that is
        /// a large Git repository. If you choose this option and your project does not use a Git repository (GitHub, GitHub Enterprise,
        /// or Bitbucket), the option is ignored. </p> </dd> <dt>LOCAL_DOCKER_LAYER_CACHE</dt> <dd> <p>Caches existing Docker layers.
        /// This mode is a good choice for projects that build or pull large Docker images. It can prevent the performance issues
        /// caused by pulling large Docker images down from the network. </p> <note> <ul> <li> <p>You can use a Docker layer cache
        /// in the Linux environment only. </p> </li> <li> <p>The <code>privileged</code> flag must be set so that your project has
        /// the required Docker permissions. </p> </li> <li> <p>You should consider the security implications before you use a Docker
        /// layer cache. </p> </li> </ul> </note> </dd> <dt>LOCAL_CUSTOM_CACHE</dt> <dd> <p>Caches directories you specify in the
        /// buildspec file. This mode is a good choice if your build scenario is not suited to one of the other three local cache
        /// modes. If you use a custom cache: </p> <ul> <li> <p>Only directories can be specified for caching. You cannot specify
        /// individual files. </p> </li> <li> <p>Symlinks are used to reference cached directories. </p> </li> <li> <p>Cached directories
        /// are linked to your build before it downloads its project sources. Cached items are overridden if a source item has the
        /// same name. Directories are specified using cache paths in the buildspec file. </p> </li> </ul> </dd> </dl>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CacheMode[] Mode { get => this._mode; set => this._mode = value; }

        /// <summary>Backing field for <see cref="Type" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICacheTypeEnumValue _type;

        /// <summary>
        /// <p>The type of cache used by the build project. Valid values include:</p> <ul> <li> <p> <code>NO_CACHE</code>: The build
        /// project does not use any cache.</p> </li> <li> <p> <code>S3</code>: The build project reads and writes from and to S3.</p>
        /// </li> <li> <p> <code>LOCAL</code>: The build project stores a cache locally on a build host that is only available to
        /// that build host.</p> </li> </ul>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICacheTypeEnumValue Type { get => (this._type = this._type ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.CacheTypeEnumValue()); set => this._type = value; }

        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CacheType? TypeValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICacheTypeEnumValueInternal)Type).Value; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICacheTypeEnumValueInternal)Type).Value = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CacheType)""); }

        /// <summary>Creates an new <see cref="ProjectCache" /> instance.</summary>
        public ProjectCache()
        {

        }
    }
    /// Definition of ProjectCache
    public partial interface IProjectCache :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary>
        /// <p>Information about the cache location: </p> <ul> <li> <p> <code>NO_CACHE</code> or <code>LOCAL</code>: This value is
        /// ignored.</p> </li> <li> <p> <code>S3</code>: This is the S3 bucket name/prefix.</p> </li> </ul>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>Information about the cache location: </p> <ul> <li> <p> <code>NO_CACHE</code> or <code>LOCAL</code>: This value is ignored.</p> </li> <li> <p> <code>S3</code>: This is the S3 bucket name/prefix.</p> </li> </ul>",
        SerializedName = @"location",
        PossibleTypes = new [] { typeof(string) })]
        string Location { get; set; }
        /// <summary>
        /// <p>An array of strings that specify the local cache modes. You can use one or more local cache modes at the same time.
        /// This is only used for <code>LOCAL</code> cache types.</p> <p>Possible values are:</p> <dl> <dt>LOCAL_SOURCE_CACHE</dt>
        /// <dd> <p>Caches Git metadata for primary and secondary sources. After the cache is created, subsequent builds pull only
        /// the change between commits. This mode is a good choice for projects with a clean working directory and a source that is
        /// a large Git repository. If you choose this option and your project does not use a Git repository (GitHub, GitHub Enterprise,
        /// or Bitbucket), the option is ignored. </p> </dd> <dt>LOCAL_DOCKER_LAYER_CACHE</dt> <dd> <p>Caches existing Docker layers.
        /// This mode is a good choice for projects that build or pull large Docker images. It can prevent the performance issues
        /// caused by pulling large Docker images down from the network. </p> <note> <ul> <li> <p>You can use a Docker layer cache
        /// in the Linux environment only. </p> </li> <li> <p>The <code>privileged</code> flag must be set so that your project has
        /// the required Docker permissions. </p> </li> <li> <p>You should consider the security implications before you use a Docker
        /// layer cache. </p> </li> </ul> </note> </dd> <dt>LOCAL_CUSTOM_CACHE</dt> <dd> <p>Caches directories you specify in the
        /// buildspec file. This mode is a good choice if your build scenario is not suited to one of the other three local cache
        /// modes. If you use a custom cache: </p> <ul> <li> <p>Only directories can be specified for caching. You cannot specify
        /// individual files. </p> </li> <li> <p>Symlinks are used to reference cached directories. </p> </li> <li> <p>Cached directories
        /// are linked to your build before it downloads its project sources. Cached items are overridden if a source item has the
        /// same name. Directories are specified using cache paths in the buildspec file. </p> </li> </ul> </dd> </dl>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>An array of strings that specify the local cache modes. You can use one or more local cache modes at the same time. This is only used for <code>LOCAL</code> cache types.</p> <p>Possible values are:</p> <dl> <dt>LOCAL_SOURCE_CACHE</dt> <dd> <p>Caches Git metadata for primary and secondary sources. After the cache is created, subsequent builds pull only the change between commits. This mode is a good choice for projects with a clean working directory and a source that is a large Git repository. If you choose this option and your project does not use a Git repository (GitHub, GitHub Enterprise, or Bitbucket), the option is ignored. </p> </dd> <dt>LOCAL_DOCKER_LAYER_CACHE</dt> <dd> <p>Caches existing Docker layers. This mode is a good choice for projects that build or pull large Docker images. It can prevent the performance issues caused by pulling large Docker images down from the network. </p> <note> <ul> <li> <p>You can use a Docker layer cache in the Linux environment only. </p> </li> <li> <p>The <code>privileged</code> flag must be set so that your project has the required Docker permissions. </p> </li> <li> <p>You should consider the security implications before you use a Docker layer cache. </p> </li> </ul> </note> </dd> <dt>LOCAL_CUSTOM_CACHE</dt> <dd> <p>Caches directories you specify in the buildspec file. This mode is a good choice if your build scenario is not suited to one of the other three local cache modes. If you use a custom cache: </p> <ul> <li> <p>Only directories can be specified for caching. You cannot specify individual files. </p> </li> <li> <p>Symlinks are used to reference cached directories. </p> </li> <li> <p>Cached directories are linked to your build before it downloads its project sources. Cached items are overridden if a source item has the same name. Directories are specified using cache paths in the buildspec file. </p> </li> </ul> </dd> </dl>",
        SerializedName = @"modes",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CacheMode) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CacheMode[] Mode { get; set; }
        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property value",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CacheType) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CacheType? TypeValue { get; set; }

    }
    /// Definition of ProjectCache
    internal partial interface IProjectCacheInternal

    {
        /// <summary>
        /// <p>Information about the cache location: </p> <ul> <li> <p> <code>NO_CACHE</code> or <code>LOCAL</code>: This value is
        /// ignored.</p> </li> <li> <p> <code>S3</code>: This is the S3 bucket name/prefix.</p> </li> </ul>
        /// </summary>
        string Location { get; set; }
        /// <summary>
        /// <p>An array of strings that specify the local cache modes. You can use one or more local cache modes at the same time.
        /// This is only used for <code>LOCAL</code> cache types.</p> <p>Possible values are:</p> <dl> <dt>LOCAL_SOURCE_CACHE</dt>
        /// <dd> <p>Caches Git metadata for primary and secondary sources. After the cache is created, subsequent builds pull only
        /// the change between commits. This mode is a good choice for projects with a clean working directory and a source that is
        /// a large Git repository. If you choose this option and your project does not use a Git repository (GitHub, GitHub Enterprise,
        /// or Bitbucket), the option is ignored. </p> </dd> <dt>LOCAL_DOCKER_LAYER_CACHE</dt> <dd> <p>Caches existing Docker layers.
        /// This mode is a good choice for projects that build or pull large Docker images. It can prevent the performance issues
        /// caused by pulling large Docker images down from the network. </p> <note> <ul> <li> <p>You can use a Docker layer cache
        /// in the Linux environment only. </p> </li> <li> <p>The <code>privileged</code> flag must be set so that your project has
        /// the required Docker permissions. </p> </li> <li> <p>You should consider the security implications before you use a Docker
        /// layer cache. </p> </li> </ul> </note> </dd> <dt>LOCAL_CUSTOM_CACHE</dt> <dd> <p>Caches directories you specify in the
        /// buildspec file. This mode is a good choice if your build scenario is not suited to one of the other three local cache
        /// modes. If you use a custom cache: </p> <ul> <li> <p>Only directories can be specified for caching. You cannot specify
        /// individual files. </p> </li> <li> <p>Symlinks are used to reference cached directories. </p> </li> <li> <p>Cached directories
        /// are linked to your build before it downloads its project sources. Cached items are overridden if a source item has the
        /// same name. Directories are specified using cache paths in the buildspec file. </p> </li> </ul> </dd> </dl>
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CacheMode[] Mode { get; set; }
        /// <summary>
        /// <p>The type of cache used by the build project. Valid values include:</p> <ul> <li> <p> <code>NO_CACHE</code>: The build
        /// project does not use any cache.</p> </li> <li> <p> <code>S3</code>: The build project reads and writes from and to S3.</p>
        /// </li> <li> <p> <code>LOCAL</code>: The build project stores a cache locally on a build host that is only available to
        /// that build host.</p> </li> </ul>
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICacheTypeEnumValue Type { get; set; }
        /// <summary>Property value</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CacheType? TypeValue { get; set; }

    }
}