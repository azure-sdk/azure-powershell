// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of MetricDataQuery</summary>
    public partial class MetricDataQuery :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetricDataQuery,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetricDataQueryInternal
    {

        /// <summary>Backing field for <see cref="AccountId" /> property.</summary>
        private string _accountId;

        /// <summary>
        /// The ID of the account where the metrics are located, if this is a cross-account alarm.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string AccountId { get => this._accountId; set => this._accountId = value; }

        /// <summary>Backing field for <see cref="Expression" /> property.</summary>
        private string _expression;

        /// <summary>
        /// The math expression to be performed on the returned data, if this object is performing a math expression. This expression
        /// can use the ``Id`` of the other metrics to refer to those metrics, and can also use the ``Id`` of other expressions to
        /// use the result of those expressions. For more information about metric math expressions, see [Metric Math Syntax and Functions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax)
        /// in the *User Guide*. Within each MetricDataQuery object, you must specify either ``Expression`` or ``MetricStat`` but
        /// not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string Expression { get => this._expression; set => this._expression = value; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private string _id;

        /// <summary>
        /// A short name used to tie this object to the results in the response. This name must be unique within a single call to
        /// ``GetMetricData``. If you are performing math expressions on this set of data, this name represents that data and can
        /// serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first
        /// character must be a lowercase letter.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string Id { get => this._id; set => this._id = value; }

        /// <summary>Backing field for <see cref="Label" /> property.</summary>
        private string _label;

        /// <summary>
        /// A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you
        /// know what the value represents. If the metric or expression is shown in a CW dashboard widget, the label is shown. If
        /// ``Label`` is omitted, CW generates a default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string Label { get => this._label; set => this._label = value; }

        /// <summary>
        /// The metric dimensions that you want to be used for the metric that the alarm will watch.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDimension[] MetricDimension { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetricStatInternal)MetricStat).MetricDimension; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetricStatInternal)MetricStat).MetricDimension = value ?? null /* arrayOf */; }

        /// <summary>
        /// The name of the metric that you want the alarm to watch. This is a required field.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string MetricName { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetricStatInternal)MetricStat).MetricName; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetricStatInternal)MetricStat).MetricName = value ?? null; }

        /// <summary>The namespace of the metric that the alarm will watch.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string MetricNamespace { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetricStatInternal)MetricStat).MetricNamespace; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetricStatInternal)MetricStat).MetricNamespace = value ?? null; }

        /// <summary>Backing field for <see cref="MetricStat" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetricStat _metricStat;

        /// <summary>
        /// The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving
        /// a metric and not performing a math expression on returned data. Within one MetricDataQuery object, you must specify either
        /// ``Expression`` or ``MetricStat`` but not both. This structure defines the metric to be returned, along with the statistics,
        /// period, and units. ``MetricStat`` is a property of the [MetricDataQuery](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricdataquery.html)
        /// property type.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetricStat MetricStat { get => (this._metricStat = this._metricStat ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.MetricStat()); set => this._metricStat = value; }

        /// <summary>
        /// The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short
        /// as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of
        /// less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics
        /// stored by a ``PutMetricData`` call that includes a ``StorageResolution`` of 1 second. If the ``StartTime`` parameter specifies
        /// a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range
        /// is returned: + Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute). + Start time between
        /// 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes). + Start time greater than 63 days ago - Use a multiple
        /// of 3600 seconds (1 hour).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public int? MetricStatPeriod { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetricStatInternal)MetricStat).Period; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetricStatInternal)MetricStat).Period = value ?? default(int); }

        /// <summary>
        /// The statistic to return. It can include any CW statistic or extended statistic. For a list of valid values, see the table
        /// in [Statistics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Statistic) in
        /// the *User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string MetricStatStat { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetricStatInternal)MetricStat).Stat; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetricStatInternal)MetricStat).Stat = value ?? null; }

        /// <summary>
        /// The unit to use for the returned data points. Valid values are: Seconds, Microseconds, Milliseconds, Bytes, Kilobytes,
        /// Megabytes, Gigabytes, Terabytes, Bits, Kilobits, Megabits, Gigabits, Terabits, Percent, Count, Bytes/Second, Kilobytes/Second,
        /// Megabytes/Second, Gigabytes/Second, Terabytes/Second, Bits/Second, Kilobits/Second, Megabits/Second, Gigabits/Second,
        /// Terabits/Second, Count/Second, or None.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string MetricStatUnit { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetricStatInternal)MetricStat).Unit; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetricStatInternal)MetricStat).Unit = value ?? null; }

        /// <summary>Internal Acessors for MetricStat</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetricStat Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetricDataQueryInternal.MetricStat { get => (this._metricStat = this._metricStat ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.MetricStat()); set { {_metricStat = value;} } }

        /// <summary>Internal Acessors for MetricStatMetric</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetric Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetricDataQueryInternal.MetricStatMetric { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetricStatInternal)MetricStat).Metric; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetricStatInternal)MetricStat).Metric = value; }

        /// <summary>Backing field for <see cref="Period" /> property.</summary>
        private int? _period;

        /// <summary>
        /// The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short
        /// as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of
        /// less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics
        /// stored by a ``PutMetricData`` operation that includes a ``StorageResolution of 1 second``.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? Period { get => this._period; set => this._period = value; }

        /// <summary>Backing field for <see cref="ReturnData" /> property.</summary>
        private bool? _returnData;

        /// <summary>
        /// This option indicates whether to return the timestamps and raw data values of this metric. When you create an alarm based
        /// on a metric math expression, specify ``True`` for this value for only the one math expression that the alarm is based
        /// on. You must specify ``False`` for ``ReturnData`` for all the other metrics and expressions used in the alarm. This field
        /// is required.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public bool? ReturnData { get => this._returnData; set => this._returnData = value; }

        /// <summary>Creates an new <see cref="MetricDataQuery" /> instance.</summary>
        public MetricDataQuery()
        {

        }
    }
    /// Definition of MetricDataQuery
    public partial interface IMetricDataQuery :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The ID of the account where the metrics are located, if this is a cross-account alarm.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ID of the account where the metrics are located, if this is a cross-account alarm.",
        SerializedName = @"accountId",
        PossibleTypes = new [] { typeof(string) })]
        string AccountId { get; set; }
        /// <summary>
        /// The math expression to be performed on the returned data, if this object is performing a math expression. This expression
        /// can use the ``Id`` of the other metrics to refer to those metrics, and can also use the ``Id`` of other expressions to
        /// use the result of those expressions. For more information about metric math expressions, see [Metric Math Syntax and Functions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax)
        /// in the *User Guide*. Within each MetricDataQuery object, you must specify either ``Expression`` or ``MetricStat`` but
        /// not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the ``Id`` of the other metrics to refer to those metrics, and can also use the ``Id`` of other expressions to use the result of those expressions. For more information about metric math expressions, see [Metric Math Syntax and Functions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax) in the *User Guide*. Within each MetricDataQuery object, you must specify either ``Expression`` or ``MetricStat`` but not both.",
        SerializedName = @"expression",
        PossibleTypes = new [] { typeof(string) })]
        string Expression { get; set; }
        /// <summary>
        /// A short name used to tie this object to the results in the response. This name must be unique within a single call to
        /// ``GetMetricData``. If you are performing math expressions on this set of data, this name represents that data and can
        /// serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first
        /// character must be a lowercase letter.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A short name used to tie this object to the results in the response. This name must be unique within a single call to ``GetMetricData``. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string Id { get; set; }
        /// <summary>
        /// A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you
        /// know what the value represents. If the metric or expression is shown in a CW dashboard widget, the label is shown. If
        /// ``Label`` is omitted, CW generates a default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents. If the metric or expression is shown in a CW dashboard widget, the label is shown. If ``Label`` is omitted, CW generates a default.",
        SerializedName = @"label",
        PossibleTypes = new [] { typeof(string) })]
        string Label { get; set; }
        /// <summary>
        /// The metric dimensions that you want to be used for the metric that the alarm will watch.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The metric dimensions that you want to be used for the metric that the alarm will watch.",
        SerializedName = @"dimensions",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDimension) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDimension[] MetricDimension { get; set; }
        /// <summary>
        /// The name of the metric that you want the alarm to watch. This is a required field.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the metric that you want the alarm to watch. This is a required field.",
        SerializedName = @"metricName",
        PossibleTypes = new [] { typeof(string) })]
        string MetricName { get; set; }
        /// <summary>The namespace of the metric that the alarm will watch.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The namespace of the metric that the alarm will watch.",
        SerializedName = @"namespace",
        PossibleTypes = new [] { typeof(string) })]
        string MetricNamespace { get; set; }
        /// <summary>
        /// The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short
        /// as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of
        /// less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics
        /// stored by a ``PutMetricData`` call that includes a ``StorageResolution`` of 1 second. If the ``StartTime`` parameter specifies
        /// a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range
        /// is returned: + Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute). + Start time between
        /// 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes). + Start time greater than 63 days ago - Use a multiple
        /// of 3600 seconds (1 hour).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a ``PutMetricData`` call that includes a ``StorageResolution`` of 1 second. If the ``StartTime`` parameter specifies a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range is returned:  +  Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).  +  Start time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).  +  Start time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).",
        SerializedName = @"period",
        PossibleTypes = new [] { typeof(int) })]
        int? MetricStatPeriod { get; set; }
        /// <summary>
        /// The statistic to return. It can include any CW statistic or extended statistic. For a list of valid values, see the table
        /// in [Statistics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Statistic) in
        /// the *User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The statistic to return. It can include any CW statistic or extended statistic. For a list of valid values, see the table in [Statistics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Statistic) in the *User Guide*.",
        SerializedName = @"stat",
        PossibleTypes = new [] { typeof(string) })]
        string MetricStatStat { get; set; }
        /// <summary>
        /// The unit to use for the returned data points. Valid values are: Seconds, Microseconds, Milliseconds, Bytes, Kilobytes,
        /// Megabytes, Gigabytes, Terabytes, Bits, Kilobits, Megabits, Gigabits, Terabits, Percent, Count, Bytes/Second, Kilobytes/Second,
        /// Megabytes/Second, Gigabytes/Second, Terabytes/Second, Bits/Second, Kilobits/Second, Megabits/Second, Gigabits/Second,
        /// Terabits/Second, Count/Second, or None.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The unit to use for the returned data points.  Valid values are: Seconds, Microseconds, Milliseconds, Bytes, Kilobytes, Megabytes, Gigabytes, Terabytes, Bits, Kilobits, Megabits, Gigabits, Terabits, Percent, Count, Bytes/Second, Kilobytes/Second, Megabytes/Second, Gigabytes/Second, Terabytes/Second, Bits/Second, Kilobits/Second, Megabits/Second, Gigabits/Second, Terabits/Second, Count/Second, or None.",
        SerializedName = @"unit",
        PossibleTypes = new [] { typeof(string) })]
        string MetricStatUnit { get; set; }
        /// <summary>
        /// The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short
        /// as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of
        /// less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics
        /// stored by a ``PutMetricData`` operation that includes a ``StorageResolution of 1 second``.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a ``PutMetricData`` operation that includes a ``StorageResolution of 1 second``.",
        SerializedName = @"period",
        PossibleTypes = new [] { typeof(int) })]
        int? Period { get; set; }
        /// <summary>
        /// This option indicates whether to return the timestamps and raw data values of this metric. When you create an alarm based
        /// on a metric math expression, specify ``True`` for this value for only the one math expression that the alarm is based
        /// on. You must specify ``False`` for ``ReturnData`` for all the other metrics and expressions used in the alarm. This field
        /// is required.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This option indicates whether to return the timestamps and raw data values of this metric. When you create an alarm based on a metric math expression, specify ``True`` for this value for only the one math expression that the alarm is based on. You must specify ``False`` for ``ReturnData`` for all the other metrics and expressions used in the alarm. This field is required.",
        SerializedName = @"returnData",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ReturnData { get; set; }

    }
    /// Definition of MetricDataQuery
    internal partial interface IMetricDataQueryInternal

    {
        /// <summary>
        /// The ID of the account where the metrics are located, if this is a cross-account alarm.
        /// </summary>
        string AccountId { get; set; }
        /// <summary>
        /// The math expression to be performed on the returned data, if this object is performing a math expression. This expression
        /// can use the ``Id`` of the other metrics to refer to those metrics, and can also use the ``Id`` of other expressions to
        /// use the result of those expressions. For more information about metric math expressions, see [Metric Math Syntax and Functions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax)
        /// in the *User Guide*. Within each MetricDataQuery object, you must specify either ``Expression`` or ``MetricStat`` but
        /// not both.
        /// </summary>
        string Expression { get; set; }
        /// <summary>
        /// A short name used to tie this object to the results in the response. This name must be unique within a single call to
        /// ``GetMetricData``. If you are performing math expressions on this set of data, this name represents that data and can
        /// serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first
        /// character must be a lowercase letter.
        /// </summary>
        string Id { get; set; }
        /// <summary>
        /// A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you
        /// know what the value represents. If the metric or expression is shown in a CW dashboard widget, the label is shown. If
        /// ``Label`` is omitted, CW generates a default.
        /// </summary>
        string Label { get; set; }
        /// <summary>
        /// The metric dimensions that you want to be used for the metric that the alarm will watch.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDimension[] MetricDimension { get; set; }
        /// <summary>
        /// The name of the metric that you want the alarm to watch. This is a required field.
        /// </summary>
        string MetricName { get; set; }
        /// <summary>The namespace of the metric that the alarm will watch.</summary>
        string MetricNamespace { get; set; }
        /// <summary>
        /// The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving
        /// a metric and not performing a math expression on returned data. Within one MetricDataQuery object, you must specify either
        /// ``Expression`` or ``MetricStat`` but not both. This structure defines the metric to be returned, along with the statistics,
        /// period, and units. ``MetricStat`` is a property of the [MetricDataQuery](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricdataquery.html)
        /// property type.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetricStat MetricStat { get; set; }
        /// <summary>
        /// The metric to return, including the metric name, namespace, and dimensions. The ``Metric`` property type represents a
        /// specific metric. ``Metric`` is a property of the [MetricStat](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricstat.html)
        /// property type.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMetric MetricStatMetric { get; set; }
        /// <summary>
        /// The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short
        /// as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of
        /// less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics
        /// stored by a ``PutMetricData`` call that includes a ``StorageResolution`` of 1 second. If the ``StartTime`` parameter specifies
        /// a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range
        /// is returned: + Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute). + Start time between
        /// 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes). + Start time greater than 63 days ago - Use a multiple
        /// of 3600 seconds (1 hour).
        /// </summary>
        int? MetricStatPeriod { get; set; }
        /// <summary>
        /// The statistic to return. It can include any CW statistic or extended statistic. For a list of valid values, see the table
        /// in [Statistics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Statistic) in
        /// the *User Guide*.
        /// </summary>
        string MetricStatStat { get; set; }
        /// <summary>
        /// The unit to use for the returned data points. Valid values are: Seconds, Microseconds, Milliseconds, Bytes, Kilobytes,
        /// Megabytes, Gigabytes, Terabytes, Bits, Kilobits, Megabits, Gigabits, Terabits, Percent, Count, Bytes/Second, Kilobytes/Second,
        /// Megabytes/Second, Gigabytes/Second, Terabytes/Second, Bits/Second, Kilobits/Second, Megabits/Second, Gigabits/Second,
        /// Terabits/Second, Count/Second, or None.
        /// </summary>
        string MetricStatUnit { get; set; }
        /// <summary>
        /// The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short
        /// as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of
        /// less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics
        /// stored by a ``PutMetricData`` operation that includes a ``StorageResolution of 1 second``.
        /// </summary>
        int? Period { get; set; }
        /// <summary>
        /// This option indicates whether to return the timestamps and raw data values of this metric. When you create an alarm based
        /// on a metric math expression, specify ``True`` for this value for only the one math expression that the alarm is based
        /// on. You must specify ``False`` for ``ReturnData`` for all the other metrics and expressions used in the alarm. This field
        /// is required.
        /// </summary>
        bool? ReturnData { get; set; }

    }
}