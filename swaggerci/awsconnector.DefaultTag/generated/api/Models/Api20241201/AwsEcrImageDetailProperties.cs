// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of awsEcrImageDetail</summary>
    public partial class AwsEcrImageDetailProperties :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailProperties,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal
    {

        /// <summary>Backing field for <see cref="ArtifactMediaType" /> property.</summary>
        private string _artifactMediaType;

        /// <summary><p>The artifact media type of the image.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string ArtifactMediaType { get => this._artifactMediaType; set => this._artifactMediaType = value; }

        /// <summary>Backing field for <see cref="ImageDigest" /> property.</summary>
        private string _imageDigest;

        /// <summary><p>The <code>sha256</code> digest of the image manifest.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string ImageDigest { get => this._imageDigest; set => this._imageDigest = value; }

        /// <summary>Backing field for <see cref="ImageManifestMediaType" /> property.</summary>
        private string _imageManifestMediaType;

        /// <summary><p>The media type of the image manifest.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string ImageManifestMediaType { get => this._imageManifestMediaType; set => this._imageManifestMediaType = value; }

        /// <summary>Backing field for <see cref="ImagePushedAt" /> property.</summary>
        private global::System.DateTime? _imagePushedAt;

        /// <summary>
        /// <p>The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository.
        /// </p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public global::System.DateTime? ImagePushedAt { get => this._imagePushedAt; set => this._imagePushedAt = value; }

        /// <summary><p>The image vulnerability counts, sorted by severity.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanFindingsSummaryFindingSeverityCounts ImageScanFindingSummaryFindingSeverityCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanFindingsSummaryInternal)ImageScanFindingsSummary).FindingSeverityCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanFindingsSummaryInternal)ImageScanFindingsSummary).FindingSeverityCount = value ?? null /* model class */; }

        /// <summary><p>The time of the last completed image scan.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public global::System.DateTime? ImageScanFindingSummaryImageScanCompletedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanFindingsSummaryInternal)ImageScanFindingsSummary).ImageScanCompletedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanFindingsSummaryInternal)ImageScanFindingsSummary).ImageScanCompletedAt = value ?? default(global::System.DateTime); }

        /// <summary><p>The time when the vulnerability data was last scanned.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public global::System.DateTime? ImageScanFindingSummaryVulnerabilitySourceUpdatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanFindingsSummaryInternal)ImageScanFindingsSummary).VulnerabilitySourceUpdatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanFindingsSummaryInternal)ImageScanFindingsSummary).VulnerabilitySourceUpdatedAt = value ?? default(global::System.DateTime); }

        /// <summary>Backing field for <see cref="ImageScanFindingsSummary" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanFindingsSummary _imageScanFindingsSummary;

        /// <summary><p>A summary of the last completed image scan.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanFindingsSummary ImageScanFindingsSummary { get => (this._imageScanFindingsSummary = this._imageScanFindingsSummary ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ImageScanFindingsSummary()); set => this._imageScanFindingsSummary = value; }

        /// <summary>Backing field for <see cref="ImageScanStatus" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanStatus _imageScanStatus;

        /// <summary><p>The current state of the scan.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanStatus ImageScanStatus { get => (this._imageScanStatus = this._imageScanStatus ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ImageScanStatus()); set => this._imageScanStatus = value; }

        /// <summary><p>The description of the image scan status.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string ImageScanStatusDescription { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanStatusInternal)ImageScanStatus).Description; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanStatusInternal)ImageScanStatus).Description = value ?? null; }

        /// <summary>Backing field for <see cref="ImageSizeInByte" /> property.</summary>
        private long? _imageSizeInByte;

        /// <summary>
        /// <p>The size, in bytes, of the image in the repository.</p> <p>If the image is a manifest list, this will be the max size
        /// of all manifests in the list.</p> <note> <p>Beginning with Docker version 1.9, the Docker client compresses image layers
        /// before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed
        /// image size, so it may return a larger image size than the image sizes returned by <a>DescribeImages</a>.</p> </note>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public long? ImageSizeInByte { get => this._imageSizeInByte; set => this._imageSizeInByte = value; }

        /// <summary>Backing field for <see cref="ImageTag" /> property.</summary>
        private string[] _imageTag;

        /// <summary><p>The list of tags associated with this image.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string[] ImageTag { get => this._imageTag; set => this._imageTag = value; }

        /// <summary>Backing field for <see cref="LastRecordedPullTime" /> property.</summary>
        private global::System.DateTime? _lastRecordedPullTime;

        /// <summary>
        /// <p>The date and time, expressed in standard JavaScript date format, when Amazon ECR recorded the last image pull.</p>
        /// <note> <p>Amazon ECR refreshes the last image pull timestamp at least once every 24 hours. For example, if you pull an
        /// image once a day then the <code>lastRecordedPullTime</code> timestamp will indicate the exact time that the image was
        /// last pulled. However, if you pull an image once an hour, because Amazon ECR refreshes the <code>lastRecordedPullTime</code>
        /// timestamp at least once every 24 hours, the result may not be the exact time that the image was last pulled.</p> </note>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public global::System.DateTime? LastRecordedPullTime { get => this._lastRecordedPullTime; set => this._lastRecordedPullTime = value; }

        /// <summary>Internal Acessors for ImageScanFindingsSummary</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanFindingsSummary Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal.ImageScanFindingsSummary { get => (this._imageScanFindingsSummary = this._imageScanFindingsSummary ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ImageScanFindingsSummary()); set { {_imageScanFindingsSummary = value;} } }

        /// <summary>Internal Acessors for ImageScanStatus</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanStatus Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal.ImageScanStatus { get => (this._imageScanStatus = this._imageScanStatus ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ImageScanStatus()); set { {_imageScanStatus = value;} } }

        /// <summary>Internal Acessors for ImageScanStatusStatus</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IScanStatusEnumValue Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrImageDetailPropertiesInternal.ImageScanStatusStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanStatusInternal)ImageScanStatus).Status; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanStatusInternal)ImageScanStatus).Status = value; }

        /// <summary>Backing field for <see cref="RegistryId" /> property.</summary>
        private string _registryId;

        /// <summary>
        /// <p>The Amazon Web Services account ID associated with the registry to which this image belongs.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string RegistryId { get => this._registryId; set => this._registryId = value; }

        /// <summary>Backing field for <see cref="RepositoryName" /> property.</summary>
        private string _repositoryName;

        /// <summary><p>The name of the repository to which this image belongs.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string RepositoryName { get => this._repositoryName; set => this._repositoryName = value; }

        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ScanStatus? StatusValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanStatusInternal)ImageScanStatus).StatusValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanStatusInternal)ImageScanStatus).StatusValue = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ScanStatus)""); }

        /// <summary>Creates an new <see cref="AwsEcrImageDetailProperties" /> instance.</summary>
        public AwsEcrImageDetailProperties()
        {

        }
    }
    /// Definition of awsEcrImageDetail
    public partial interface IAwsEcrImageDetailProperties :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary><p>The artifact media type of the image.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The artifact media type of the image.</p>",
        SerializedName = @"artifactMediaType",
        PossibleTypes = new [] { typeof(string) })]
        string ArtifactMediaType { get; set; }
        /// <summary><p>The <code>sha256</code> digest of the image manifest.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The <code>sha256</code> digest of the image manifest.</p>",
        SerializedName = @"imageDigest",
        PossibleTypes = new [] { typeof(string) })]
        string ImageDigest { get; set; }
        /// <summary><p>The media type of the image manifest.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The media type of the image manifest.</p>",
        SerializedName = @"imageManifestMediaType",
        PossibleTypes = new [] { typeof(string) })]
        string ImageManifestMediaType { get; set; }
        /// <summary>
        /// <p>The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository.
        /// </p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository. </p>",
        SerializedName = @"imagePushedAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ImagePushedAt { get; set; }
        /// <summary><p>The image vulnerability counts, sorted by severity.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The image vulnerability counts, sorted by severity.</p>",
        SerializedName = @"findingSeverityCounts",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanFindingsSummaryFindingSeverityCounts) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanFindingsSummaryFindingSeverityCounts ImageScanFindingSummaryFindingSeverityCount { get; set; }
        /// <summary><p>The time of the last completed image scan.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The time of the last completed image scan.</p>",
        SerializedName = @"imageScanCompletedAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ImageScanFindingSummaryImageScanCompletedAt { get; set; }
        /// <summary><p>The time when the vulnerability data was last scanned.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The time when the vulnerability data was last scanned.</p>",
        SerializedName = @"vulnerabilitySourceUpdatedAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ImageScanFindingSummaryVulnerabilitySourceUpdatedAt { get; set; }
        /// <summary><p>The description of the image scan status.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The description of the image scan status.</p>",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        string ImageScanStatusDescription { get; set; }
        /// <summary>
        /// <p>The size, in bytes, of the image in the repository.</p> <p>If the image is a manifest list, this will be the max size
        /// of all manifests in the list.</p> <note> <p>Beginning with Docker version 1.9, the Docker client compresses image layers
        /// before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed
        /// image size, so it may return a larger image size than the image sizes returned by <a>DescribeImages</a>.</p> </note>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The size, in bytes, of the image in the repository.</p> <p>If the image is a manifest list, this will be the max size of all manifests in the list.</p> <note> <p>Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed image size, so it may return a larger image size than the image sizes returned by <a>DescribeImages</a>.</p> </note>",
        SerializedName = @"imageSizeInBytes",
        PossibleTypes = new [] { typeof(long) })]
        long? ImageSizeInByte { get; set; }
        /// <summary><p>The list of tags associated with this image.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The list of tags associated with this image.</p>",
        SerializedName = @"imageTags",
        PossibleTypes = new [] { typeof(string) })]
        string[] ImageTag { get; set; }
        /// <summary>
        /// <p>The date and time, expressed in standard JavaScript date format, when Amazon ECR recorded the last image pull.</p>
        /// <note> <p>Amazon ECR refreshes the last image pull timestamp at least once every 24 hours. For example, if you pull an
        /// image once a day then the <code>lastRecordedPullTime</code> timestamp will indicate the exact time that the image was
        /// last pulled. However, if you pull an image once an hour, because Amazon ECR refreshes the <code>lastRecordedPullTime</code>
        /// timestamp at least once every 24 hours, the result may not be the exact time that the image was last pulled.</p> </note>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The date and time, expressed in standard JavaScript date format, when Amazon ECR recorded the last image pull.</p> <note> <p>Amazon ECR refreshes the last image pull timestamp at least once every 24 hours. For example, if you pull an image once a day then the <code>lastRecordedPullTime</code> timestamp will indicate the exact time that the image was last pulled. However, if you pull an image once an hour, because Amazon ECR refreshes the <code>lastRecordedPullTime</code> timestamp at least once every 24 hours, the result may not be the exact time that the image was last pulled.</p> </note>",
        SerializedName = @"lastRecordedPullTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastRecordedPullTime { get; set; }
        /// <summary>
        /// <p>The Amazon Web Services account ID associated with the registry to which this image belongs.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The Amazon Web Services account ID associated with the registry to which this image belongs.</p>",
        SerializedName = @"registryId",
        PossibleTypes = new [] { typeof(string) })]
        string RegistryId { get; set; }
        /// <summary><p>The name of the repository to which this image belongs.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The name of the repository to which this image belongs.</p>",
        SerializedName = @"repositoryName",
        PossibleTypes = new [] { typeof(string) })]
        string RepositoryName { get; set; }
        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property value",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ScanStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ScanStatus? StatusValue { get; set; }

    }
    /// Definition of awsEcrImageDetail
    internal partial interface IAwsEcrImageDetailPropertiesInternal

    {
        /// <summary><p>The artifact media type of the image.</p></summary>
        string ArtifactMediaType { get; set; }
        /// <summary><p>The <code>sha256</code> digest of the image manifest.</p></summary>
        string ImageDigest { get; set; }
        /// <summary><p>The media type of the image manifest.</p></summary>
        string ImageManifestMediaType { get; set; }
        /// <summary>
        /// <p>The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository.
        /// </p>
        /// </summary>
        global::System.DateTime? ImagePushedAt { get; set; }
        /// <summary><p>The image vulnerability counts, sorted by severity.</p></summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanFindingsSummaryFindingSeverityCounts ImageScanFindingSummaryFindingSeverityCount { get; set; }
        /// <summary><p>The time of the last completed image scan.</p></summary>
        global::System.DateTime? ImageScanFindingSummaryImageScanCompletedAt { get; set; }
        /// <summary><p>The time when the vulnerability data was last scanned.</p></summary>
        global::System.DateTime? ImageScanFindingSummaryVulnerabilitySourceUpdatedAt { get; set; }
        /// <summary><p>A summary of the last completed image scan.</p></summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanFindingsSummary ImageScanFindingsSummary { get; set; }
        /// <summary><p>The current state of the scan.</p></summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanStatus ImageScanStatus { get; set; }
        /// <summary><p>The description of the image scan status.</p></summary>
        string ImageScanStatusDescription { get; set; }
        /// <summary><p>The current state of an image scan.</p></summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IScanStatusEnumValue ImageScanStatusStatus { get; set; }
        /// <summary>
        /// <p>The size, in bytes, of the image in the repository.</p> <p>If the image is a manifest list, this will be the max size
        /// of all manifests in the list.</p> <note> <p>Beginning with Docker version 1.9, the Docker client compresses image layers
        /// before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed
        /// image size, so it may return a larger image size than the image sizes returned by <a>DescribeImages</a>.</p> </note>
        /// </summary>
        long? ImageSizeInByte { get; set; }
        /// <summary><p>The list of tags associated with this image.</p></summary>
        string[] ImageTag { get; set; }
        /// <summary>
        /// <p>The date and time, expressed in standard JavaScript date format, when Amazon ECR recorded the last image pull.</p>
        /// <note> <p>Amazon ECR refreshes the last image pull timestamp at least once every 24 hours. For example, if you pull an
        /// image once a day then the <code>lastRecordedPullTime</code> timestamp will indicate the exact time that the image was
        /// last pulled. However, if you pull an image once an hour, because Amazon ECR refreshes the <code>lastRecordedPullTime</code>
        /// timestamp at least once every 24 hours, the result may not be the exact time that the image was last pulled.</p> </note>
        /// </summary>
        global::System.DateTime? LastRecordedPullTime { get; set; }
        /// <summary>
        /// <p>The Amazon Web Services account ID associated with the registry to which this image belongs.</p>
        /// </summary>
        string RegistryId { get; set; }
        /// <summary><p>The name of the repository to which this image belongs.</p></summary>
        string RepositoryName { get; set; }
        /// <summary>Property value</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ScanStatus? StatusValue { get; set; }

    }
}