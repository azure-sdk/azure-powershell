// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of EcrRepository</summary>
    public partial class EcrRepositoryProperties :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcrRepositoryProperties,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcrRepositoryPropertiesInternal
    {

        /// <summary>Backing field for <see cref="Arn" /> property.</summary>
        private string _arn;

        /// <summary>Amazon Resource Name (ARN)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string Arn { get => this._arn; set => this._arn = value; }

        /// <summary>Property arn</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwPropertyArn { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesInternal)AwsProperty).Arn; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesInternal)AwsProperty).Arn = value ?? null; }

        /// <summary>
        /// If true, deleting the repository force deletes the contents of the repository. If false, the repository must be empty
        /// before attempting to delete it. If true, deleting the repository force deletes the contents of the repository. Without
        /// a force delete, you can only delete empty repositories.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? AwPropertyEmptyOnDelete { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesInternal)AwsProperty).EmptyOnDelete; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesInternal)AwsProperty).EmptyOnDelete = value ?? default(bool); }

        /// <summary>
        /// The tag mutability setting for the repository. If this parameter is omitted, the default setting of ``MUTABLE`` will be
        /// used which will allow image tags to be overwritten. If ``IMMUTABLE`` is specified, all image tags within the repository
        /// will be immutable which will prevent them from being overwritten.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ImageTagMutability? AwPropertyImageTagMutability { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesInternal)AwsProperty).ImageTagMutability; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesInternal)AwsProperty).ImageTagMutability = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ImageTagMutability)""); }

        /// <summary>
        /// The name to use for the repository. The repository name may be specified on its own (such as ``nginx-web-app``) or it
        /// can be prepended with a namespace to group the repository into a category (such as ``project-a/nginx-web-app``). If you
        /// don't specify a name, CFNlong generates a unique physical ID and uses that ID for the repository name. For more information,
        /// see [Name type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html). The repository
        /// name must start with a letter and can only contain lowercase letters, numbers, hyphens, underscores, and forward slashes.
        /// If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that
        /// require no or some interruption. If you must replace the resource, specify a new name.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwPropertyRepositoryName { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesInternal)AwsProperty).RepositoryName; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesInternal)AwsProperty).RepositoryName = value ?? null; }

        /// <summary>
        /// The JSON repository policy text to apply to the repository. For more information, see [Amazon ECR repository policies](https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policy-examples.html)
        /// in the *Amazon Elastic Container Registry User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesRepositoryPolicyText AwPropertyRepositoryPolicyText { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesInternal)AwsProperty).RepositoryPolicyText; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesInternal)AwsProperty).RepositoryPolicyText = value ?? null /* model class */; }

        /// <summary>Property repositoryUri</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwPropertyRepositoryUri { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesInternal)AwsProperty).RepositoryUri; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesInternal)AwsProperty).RepositoryUri = value ?? null; }

        /// <summary>An array of key-value pairs to apply to this resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated25[] AwPropertyTag { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesInternal)AwsProperty).Tag; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesInternal)AwsProperty).Tag = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="AwsAccountId" /> property.</summary>
        private string _awsAccountId;

        /// <summary>AWS Account ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string AwsAccountId { get => this._awsAccountId; set => this._awsAccountId = value; }

        /// <summary>Backing field for <see cref="AwsProperty" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryProperties _awsProperty;

        /// <summary>AWS Properties</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryProperties AwsProperty { get => (this._awsProperty = this._awsProperty ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AwsEcrRepositoryProperties()); set => this._awsProperty = value; }

        /// <summary>Backing field for <see cref="AwsRegion" /> property.</summary>
        private string _awsRegion;

        /// <summary>AWS Region</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string AwsRegion { get => this._awsRegion; set => this._awsRegion = value; }

        /// <summary>Backing field for <see cref="AwsSourceSchema" /> property.</summary>
        private string _awsSourceSchema;

        /// <summary>AWS Source Schema</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string AwsSourceSchema { get => this._awsSourceSchema; set => this._awsSourceSchema = value; }

        /// <summary>Backing field for <see cref="AwsTag" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcrRepositoryPropertiesAwsTags _awsTag;

        /// <summary>AWS Tags</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcrRepositoryPropertiesAwsTags AwsTag { get => (this._awsTag = this._awsTag ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.EcrRepositoryPropertiesAwsTags()); set => this._awsTag = value; }

        /// <summary>
        /// The encryption type to use. If you use the ``KMS`` encryption type, the contents of the repository will be encrypted using
        /// server-side encryption with KMSlong key stored in KMS. When you use KMS to encrypt your data, you can either use the default
        /// AWS managed KMS key for Amazon ECR, or specify your own KMS key, which you already created. For more information, see
        /// [Protecting data using server-side encryption with an key stored in (SSE-KMS)](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html)
        /// in the *Amazon Simple Storage Service Console Developer Guide*. If you use the ``AES256`` encryption type, Amazon ECR
        /// uses server-side encryption with Amazon S3-managed encryption keys which encrypts the images in the repository using an
        /// AES-256 encryption algorithm. For more information, see [Protecting data using server-side encryption with Amazon S3-managed
        /// encryption keys (SSE-S3)](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html) in the *Ama
        /// The encryption type to use.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.EncryptionConfigurationEncryptionType? EncryptionConfigurationEncryptionType { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesInternal)AwsProperty).EncryptionConfigurationEncryptionType; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesInternal)AwsProperty).EncryptionConfigurationEncryptionType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.EncryptionConfigurationEncryptionType)""); }

        /// <summary>
        /// If you use the ``KMS`` encryption type, specify the KMS key to use for encryption. The alias, key ID, or full ARN of the
        /// KMS key can be specified. The key must exist in the same Region as the repository. If no key is specified, the default
        /// AWS managed KMS key for Amazon ECR will be used. If you use the KMS encryption type, specify the CMK to use for encryption.
        /// The alias, key ID, or full ARN of the CMK can be specified. The key must exist in the same Region as the repository. If
        /// no key is specified, the default AWS managed CMK for Amazon ECR will be used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string EncryptionConfigurationKmsKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesInternal)AwsProperty).EncryptionConfigurationKmsKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesInternal)AwsProperty).EncryptionConfigurationKmsKey = value ?? null; }

        /// <summary>
        /// The setting that determines whether images are scanned after being pushed to a repository. If set to ``true``, images
        /// will be scanned after being pushed. If this parameter is not specified, it will default to ``false`` and images will not
        /// be scanned unless a scan is manually started. The setting that determines whether images are scanned after being pushed
        /// to a repository.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? ImageScanningConfigurationScanOnPush { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesInternal)AwsProperty).ImageScanningConfigurationScanOnPush; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesInternal)AwsProperty).ImageScanningConfigurationScanOnPush = value ?? default(bool); }

        /// <summary>
        /// The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default
        /// registry is assumed. The AWS account ID associated with the registry that contains the repository. If you do not specify
        /// a registry, the default registry is assumed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string LifecyclePolicyRegistryId { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesInternal)AwsProperty).LifecyclePolicyRegistryId; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesInternal)AwsProperty).LifecyclePolicyRegistryId = value ?? null; }

        /// <summary>
        /// The JSON repository policy text to apply to the repository. The JSON repository policy text to apply to the repository.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string LifecyclePolicyText { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesInternal)AwsProperty).LifecyclePolicyText; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesInternal)AwsProperty).LifecyclePolicyText = value ?? null; }

        /// <summary>Internal Acessors for AwPropertyEncryptionConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEncryptionConfiguration Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcrRepositoryPropertiesInternal.AwPropertyEncryptionConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesInternal)AwsProperty).EncryptionConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesInternal)AwsProperty).EncryptionConfiguration = value; }

        /// <summary>Internal Acessors for AwPropertyImageScanningConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanningConfiguration Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcrRepositoryPropertiesInternal.AwPropertyImageScanningConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesInternal)AwsProperty).ImageScanningConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesInternal)AwsProperty).ImageScanningConfiguration = value; }

        /// <summary>Internal Acessors for AwPropertyLifecyclePolicy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILifecyclePolicy Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcrRepositoryPropertiesInternal.AwPropertyLifecyclePolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesInternal)AwsProperty).LifecyclePolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesInternal)AwsProperty).LifecyclePolicy = value; }

        /// <summary>Internal Acessors for AwsProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryProperties Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcrRepositoryPropertiesInternal.AwsProperty { get => (this._awsProperty = this._awsProperty ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AwsEcrRepositoryProperties()); set { {_awsProperty = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcrRepositoryPropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? _provisioningState;

        /// <summary>The status of the last operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="PublicCloudConnectorsResourceId" /> property.</summary>
        private string _publicCloudConnectorsResourceId;

        /// <summary>Public Cloud Connectors Resource ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string PublicCloudConnectorsResourceId { get => this._publicCloudConnectorsResourceId; set => this._publicCloudConnectorsResourceId = value; }

        /// <summary>Backing field for <see cref="PublicCloudResourceName" /> property.</summary>
        private string _publicCloudResourceName;

        /// <summary>Public Cloud Resource Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string PublicCloudResourceName { get => this._publicCloudResourceName; set => this._publicCloudResourceName = value; }

        /// <summary>Creates an new <see cref="EcrRepositoryProperties" /> instance.</summary>
        public EcrRepositoryProperties()
        {

        }
    }
    /// Definition of EcrRepository
    public partial interface IEcrRepositoryProperties :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary>Amazon Resource Name (ARN)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Amazon Resource Name (ARN)",
        SerializedName = @"arn",
        PossibleTypes = new [] { typeof(string) })]
        string Arn { get; set; }
        /// <summary>Property arn</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property arn",
        SerializedName = @"arn",
        PossibleTypes = new [] { typeof(string) })]
        string AwPropertyArn { get; set; }
        /// <summary>
        /// If true, deleting the repository force deletes the contents of the repository. If false, the repository must be empty
        /// before attempting to delete it. If true, deleting the repository force deletes the contents of the repository. Without
        /// a force delete, you can only delete empty repositories.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If true, deleting the repository force deletes the contents of the repository. If false, the repository must be empty before attempting to delete it. If true, deleting the repository force deletes the contents of the repository. Without a force delete, you can only delete empty repositories.",
        SerializedName = @"emptyOnDelete",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AwPropertyEmptyOnDelete { get; set; }
        /// <summary>
        /// The tag mutability setting for the repository. If this parameter is omitted, the default setting of ``MUTABLE`` will be
        /// used which will allow image tags to be overwritten. If ``IMMUTABLE`` is specified, all image tags within the repository
        /// will be immutable which will prevent them from being overwritten.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The tag mutability setting for the repository. If this parameter is omitted, the default setting of ``MUTABLE`` will be used which will allow image tags to be overwritten. If ``IMMUTABLE`` is specified, all image tags within the repository will be immutable which will prevent them from being overwritten.",
        SerializedName = @"imageTagMutability",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ImageTagMutability) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ImageTagMutability? AwPropertyImageTagMutability { get; set; }
        /// <summary>
        /// The name to use for the repository. The repository name may be specified on its own (such as ``nginx-web-app``) or it
        /// can be prepended with a namespace to group the repository into a category (such as ``project-a/nginx-web-app``). If you
        /// don't specify a name, CFNlong generates a unique physical ID and uses that ID for the repository name. For more information,
        /// see [Name type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html). The repository
        /// name must start with a letter and can only contain lowercase letters, numbers, hyphens, underscores, and forward slashes.
        /// If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that
        /// require no or some interruption. If you must replace the resource, specify a new name.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name to use for the repository. The repository name may be specified on its own (such as ``nginx-web-app``) or it can be prepended with a namespace to group the repository into a category (such as ``project-a/nginx-web-app``). If you don't specify a name, CFNlong generates a unique physical ID and uses that ID for the repository name. For more information, see [Name type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html). The repository name must start with a letter and can only contain lowercase letters, numbers, hyphens, underscores, and forward slashes.  If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.",
        SerializedName = @"repositoryName",
        PossibleTypes = new [] { typeof(string) })]
        string AwPropertyRepositoryName { get; set; }
        /// <summary>
        /// The JSON repository policy text to apply to the repository. For more information, see [Amazon ECR repository policies](https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policy-examples.html)
        /// in the *Amazon Elastic Container Registry User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The JSON repository policy text to apply to the repository. For more information, see [Amazon ECR repository policies](https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policy-examples.html) in the *Amazon Elastic Container Registry User Guide*.",
        SerializedName = @"repositoryPolicyText",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesRepositoryPolicyText) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesRepositoryPolicyText AwPropertyRepositoryPolicyText { get; set; }
        /// <summary>Property repositoryUri</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property repositoryUri",
        SerializedName = @"repositoryUri",
        PossibleTypes = new [] { typeof(string) })]
        string AwPropertyRepositoryUri { get; set; }
        /// <summary>An array of key-value pairs to apply to this resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An array of key-value pairs to apply to this resource.",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated25) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated25[] AwPropertyTag { get; set; }
        /// <summary>AWS Account ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Account ID",
        SerializedName = @"awsAccountId",
        PossibleTypes = new [] { typeof(string) })]
        string AwsAccountId { get; set; }
        /// <summary>AWS Region</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Region",
        SerializedName = @"awsRegion",
        PossibleTypes = new [] { typeof(string) })]
        string AwsRegion { get; set; }
        /// <summary>AWS Source Schema</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Source Schema",
        SerializedName = @"awsSourceSchema",
        PossibleTypes = new [] { typeof(string) })]
        string AwsSourceSchema { get; set; }
        /// <summary>AWS Tags</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Tags",
        SerializedName = @"awsTags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcrRepositoryPropertiesAwsTags) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcrRepositoryPropertiesAwsTags AwsTag { get; set; }
        /// <summary>
        /// The encryption type to use. If you use the ``KMS`` encryption type, the contents of the repository will be encrypted using
        /// server-side encryption with KMSlong key stored in KMS. When you use KMS to encrypt your data, you can either use the default
        /// AWS managed KMS key for Amazon ECR, or specify your own KMS key, which you already created. For more information, see
        /// [Protecting data using server-side encryption with an key stored in (SSE-KMS)](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html)
        /// in the *Amazon Simple Storage Service Console Developer Guide*. If you use the ``AES256`` encryption type, Amazon ECR
        /// uses server-side encryption with Amazon S3-managed encryption keys which encrypts the images in the repository using an
        /// AES-256 encryption algorithm. For more information, see [Protecting data using server-side encryption with Amazon S3-managed
        /// encryption keys (SSE-S3)](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html) in the *Ama
        /// The encryption type to use.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The encryption type to use. If you use the ``KMS`` encryption type, the contents of the repository will be encrypted using server-side encryption with KMSlong key stored in KMS. When you use KMS to encrypt your data, you can either use the default AWS managed KMS key for Amazon ECR, or specify your own KMS key, which you already created. For more information, see [Protecting data using server-side encryption with an key stored in (SSE-KMS)](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html) in the *Amazon Simple Storage Service Console Developer Guide*. If you use the ``AES256`` encryption type, Amazon ECR uses server-side encryption with Amazon S3-managed encryption keys which encrypts the images in the repository using an AES-256 encryption algorithm. For more information, see [Protecting data using server-side encryption with Amazon S3-managed encryption keys (SSE-S3)](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html) in the *Ama The encryption type to use.",
        SerializedName = @"encryptionType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.EncryptionConfigurationEncryptionType) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.EncryptionConfigurationEncryptionType? EncryptionConfigurationEncryptionType { get; set; }
        /// <summary>
        /// If you use the ``KMS`` encryption type, specify the KMS key to use for encryption. The alias, key ID, or full ARN of the
        /// KMS key can be specified. The key must exist in the same Region as the repository. If no key is specified, the default
        /// AWS managed KMS key for Amazon ECR will be used. If you use the KMS encryption type, specify the CMK to use for encryption.
        /// The alias, key ID, or full ARN of the CMK can be specified. The key must exist in the same Region as the repository. If
        /// no key is specified, the default AWS managed CMK for Amazon ECR will be used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If you use the ``KMS`` encryption type, specify the KMS key to use for encryption. The alias, key ID, or full ARN of the KMS key can be specified. The key must exist in the same Region as the repository. If no key is specified, the default AWS managed KMS key for Amazon ECR will be used. If you use the KMS encryption type, specify the CMK to use for encryption. The alias, key ID, or full ARN of the CMK can be specified. The key must exist in the same Region as the repository. If no key is specified, the default AWS managed CMK for Amazon ECR will be used.",
        SerializedName = @"kmsKey",
        PossibleTypes = new [] { typeof(string) })]
        string EncryptionConfigurationKmsKey { get; set; }
        /// <summary>
        /// The setting that determines whether images are scanned after being pushed to a repository. If set to ``true``, images
        /// will be scanned after being pushed. If this parameter is not specified, it will default to ``false`` and images will not
        /// be scanned unless a scan is manually started. The setting that determines whether images are scanned after being pushed
        /// to a repository.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The setting that determines whether images are scanned after being pushed to a repository. If set to ``true``, images will be scanned after being pushed. If this parameter is not specified, it will default to ``false`` and images will not be scanned unless a scan is manually started. The setting that determines whether images are scanned after being pushed to a repository.",
        SerializedName = @"scanOnPush",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ImageScanningConfigurationScanOnPush { get; set; }
        /// <summary>
        /// The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default
        /// registry is assumed. The AWS account ID associated with the registry that contains the repository. If you do not specify
        /// a registry, the default registry is assumed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed. The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.",
        SerializedName = @"registryId",
        PossibleTypes = new [] { typeof(string) })]
        string LifecyclePolicyRegistryId { get; set; }
        /// <summary>
        /// The JSON repository policy text to apply to the repository. The JSON repository policy text to apply to the repository.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The JSON repository policy text to apply to the repository. The JSON repository policy text to apply to the repository.",
        SerializedName = @"lifecyclePolicyText",
        PossibleTypes = new [] { typeof(string) })]
        string LifecyclePolicyText { get; set; }
        /// <summary>The status of the last operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The status of the last operation.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? ProvisioningState { get;  }
        /// <summary>Public Cloud Connectors Resource ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Public Cloud Connectors Resource ID",
        SerializedName = @"publicCloudConnectorsResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string PublicCloudConnectorsResourceId { get; set; }
        /// <summary>Public Cloud Resource Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Public Cloud Resource Name",
        SerializedName = @"publicCloudResourceName",
        PossibleTypes = new [] { typeof(string) })]
        string PublicCloudResourceName { get; set; }

    }
    /// Definition of EcrRepository
    internal partial interface IEcrRepositoryPropertiesInternal

    {
        /// <summary>Amazon Resource Name (ARN)</summary>
        string Arn { get; set; }
        /// <summary>Property arn</summary>
        string AwPropertyArn { get; set; }
        /// <summary>
        /// If true, deleting the repository force deletes the contents of the repository. If false, the repository must be empty
        /// before attempting to delete it. If true, deleting the repository force deletes the contents of the repository. Without
        /// a force delete, you can only delete empty repositories.
        /// </summary>
        bool? AwPropertyEmptyOnDelete { get; set; }
        /// <summary>
        /// The encryption configuration for the repository. This determines how the contents of your repository are encrypted at
        /// rest. The encryption configuration for the repository. This determines how the contents of your repository are encrypted
        /// at rest. By default, when no encryption configuration is set or the ``AES256`` encryption type is used, Amazon ECR uses
        /// server-side encryption with Amazon S3-managed encryption keys which encrypts your data at rest using an AES-256 encryption
        /// algorithm. This does not require any action on your part. For more control over the encryption of the contents of your
        /// repository, you can use server-side encryption with KMSlong key stored in KMSlong (KMS) to encrypt your images. For more
        /// information, see [Amazon ECR encryption at rest](https://docs.aws.amazon.com/AmazonECR/latest/userguide/encryption-at-rest.html)
        /// in the *Amazon Elastic Container Registry User Guide*.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEncryptionConfiguration AwPropertyEncryptionConfiguration { get; set; }
        /// <summary>
        /// The image scanning configuration for the repository. This determines whether images are scanned for known vulnerabilities
        /// after being pushed to the repository. The image scanning configuration for a repository.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IImageScanningConfiguration AwPropertyImageScanningConfiguration { get; set; }
        /// <summary>
        /// The tag mutability setting for the repository. If this parameter is omitted, the default setting of ``MUTABLE`` will be
        /// used which will allow image tags to be overwritten. If ``IMMUTABLE`` is specified, all image tags within the repository
        /// will be immutable which will prevent them from being overwritten.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ImageTagMutability? AwPropertyImageTagMutability { get; set; }
        /// <summary>
        /// Creates or updates a lifecycle policy. For information about lifecycle policy syntax, see [Lifecycle policy template](https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html).
        /// The ``LifecyclePolicy`` property type specifies a lifecycle policy. For information about lifecycle policy syntax, see
        /// [Lifecycle policy template](https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html) in the *Amazon
        /// ECR User Guide*.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILifecyclePolicy AwPropertyLifecyclePolicy { get; set; }
        /// <summary>
        /// The name to use for the repository. The repository name may be specified on its own (such as ``nginx-web-app``) or it
        /// can be prepended with a namespace to group the repository into a category (such as ``project-a/nginx-web-app``). If you
        /// don't specify a name, CFNlong generates a unique physical ID and uses that ID for the repository name. For more information,
        /// see [Name type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html). The repository
        /// name must start with a letter and can only contain lowercase letters, numbers, hyphens, underscores, and forward slashes.
        /// If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that
        /// require no or some interruption. If you must replace the resource, specify a new name.
        /// </summary>
        string AwPropertyRepositoryName { get; set; }
        /// <summary>
        /// The JSON repository policy text to apply to the repository. For more information, see [Amazon ECR repository policies](https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policy-examples.html)
        /// in the *Amazon Elastic Container Registry User Guide*.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryPropertiesRepositoryPolicyText AwPropertyRepositoryPolicyText { get; set; }
        /// <summary>Property repositoryUri</summary>
        string AwPropertyRepositoryUri { get; set; }
        /// <summary>An array of key-value pairs to apply to this resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated25[] AwPropertyTag { get; set; }
        /// <summary>AWS Account ID</summary>
        string AwsAccountId { get; set; }
        /// <summary>AWS Properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcrRepositoryProperties AwsProperty { get; set; }
        /// <summary>AWS Region</summary>
        string AwsRegion { get; set; }
        /// <summary>AWS Source Schema</summary>
        string AwsSourceSchema { get; set; }
        /// <summary>AWS Tags</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEcrRepositoryPropertiesAwsTags AwsTag { get; set; }
        /// <summary>
        /// The encryption type to use. If you use the ``KMS`` encryption type, the contents of the repository will be encrypted using
        /// server-side encryption with KMSlong key stored in KMS. When you use KMS to encrypt your data, you can either use the default
        /// AWS managed KMS key for Amazon ECR, or specify your own KMS key, which you already created. For more information, see
        /// [Protecting data using server-side encryption with an key stored in (SSE-KMS)](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html)
        /// in the *Amazon Simple Storage Service Console Developer Guide*. If you use the ``AES256`` encryption type, Amazon ECR
        /// uses server-side encryption with Amazon S3-managed encryption keys which encrypts the images in the repository using an
        /// AES-256 encryption algorithm. For more information, see [Protecting data using server-side encryption with Amazon S3-managed
        /// encryption keys (SSE-S3)](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html) in the *Ama
        /// The encryption type to use.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.EncryptionConfigurationEncryptionType? EncryptionConfigurationEncryptionType { get; set; }
        /// <summary>
        /// If you use the ``KMS`` encryption type, specify the KMS key to use for encryption. The alias, key ID, or full ARN of the
        /// KMS key can be specified. The key must exist in the same Region as the repository. If no key is specified, the default
        /// AWS managed KMS key for Amazon ECR will be used. If you use the KMS encryption type, specify the CMK to use for encryption.
        /// The alias, key ID, or full ARN of the CMK can be specified. The key must exist in the same Region as the repository. If
        /// no key is specified, the default AWS managed CMK for Amazon ECR will be used.
        /// </summary>
        string EncryptionConfigurationKmsKey { get; set; }
        /// <summary>
        /// The setting that determines whether images are scanned after being pushed to a repository. If set to ``true``, images
        /// will be scanned after being pushed. If this parameter is not specified, it will default to ``false`` and images will not
        /// be scanned unless a scan is manually started. The setting that determines whether images are scanned after being pushed
        /// to a repository.
        /// </summary>
        bool? ImageScanningConfigurationScanOnPush { get; set; }
        /// <summary>
        /// The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default
        /// registry is assumed. The AWS account ID associated with the registry that contains the repository. If you do not specify
        /// a registry, the default registry is assumed.
        /// </summary>
        string LifecyclePolicyRegistryId { get; set; }
        /// <summary>
        /// The JSON repository policy text to apply to the repository. The JSON repository policy text to apply to the repository.
        /// </summary>
        string LifecyclePolicyText { get; set; }
        /// <summary>The status of the last operation.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? ProvisioningState { get; set; }
        /// <summary>Public Cloud Connectors Resource ID</summary>
        string PublicCloudConnectorsResourceId { get; set; }
        /// <summary>Public Cloud Resource Name</summary>
        string PublicCloudResourceName { get; set; }

    }
}