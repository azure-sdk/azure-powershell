// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of ClusterConfiguration</summary>
    public partial class ClusterConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfiguration,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigurationInternal
    {

        /// <summary>Backing field for <see cref="ExecuteCommandConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IExecuteCommandConfiguration _executeCommandConfiguration;

        /// <summary>
        /// The details of the execute command configuration. The details of the execute command configuration.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IExecuteCommandConfiguration ExecuteCommandConfiguration { get => (this._executeCommandConfiguration = this._executeCommandConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ExecuteCommandConfiguration()); set => this._executeCommandConfiguration = value; }

        /// <summary>
        /// Specify an KMSlong key ID to encrypt the data between the local client and the container.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string ExecuteCommandConfigurationKmsKeyId { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IExecuteCommandConfigurationInternal)ExecuteCommandConfiguration).KmsKeyId; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IExecuteCommandConfigurationInternal)ExecuteCommandConfiguration).KmsKeyId = value ?? null; }

        /// <summary>
        /// The log setting to use for redirecting logs for your execute command results. The following log settings are available.
        /// + ``NONE``: The execute command session is not logged. + ``DEFAULT``: The ``awslogs`` configuration in the task definition
        /// is used. If no logging parameter is specified, it defaults to this value. If no ``awslogs`` log driver is configured in
        /// the task definition, the output won't be logged. + ``OVERRIDE``: Specify the logging details as a part of ``logConfiguration``.
        /// If the ``OVERRIDE`` logging option is specified, the ``logConfiguration`` is required.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string ExecuteCommandConfigurationLogging { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IExecuteCommandConfigurationInternal)ExecuteCommandConfiguration).Logging; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IExecuteCommandConfigurationInternal)ExecuteCommandConfiguration).Logging = value ?? null; }

        /// <summary>
        /// Determines whether to use encryption on the CloudWatch logs. If not specified, encryption will be off.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? LogConfigurationCloudWatchEncryptionEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IExecuteCommandConfigurationInternal)ExecuteCommandConfiguration).LogConfigurationCloudWatchEncryptionEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IExecuteCommandConfigurationInternal)ExecuteCommandConfiguration).LogConfigurationCloudWatchEncryptionEnabled = value ?? default(bool); }

        /// <summary>
        /// The name of the CloudWatch log group to send logs to. The CloudWatch log group must already be created.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string LogConfigurationCloudWatchLogGroupName { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IExecuteCommandConfigurationInternal)ExecuteCommandConfiguration).LogConfigurationCloudWatchLogGroupName; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IExecuteCommandConfigurationInternal)ExecuteCommandConfiguration).LogConfigurationCloudWatchLogGroupName = value ?? null; }

        /// <summary>
        /// The name of the S3 bucket to send logs to. The S3 bucket must already be created.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string LogConfigurationS3BucketName { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IExecuteCommandConfigurationInternal)ExecuteCommandConfiguration).LogConfigurationS3BucketName; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IExecuteCommandConfigurationInternal)ExecuteCommandConfiguration).LogConfigurationS3BucketName = value ?? null; }

        /// <summary>
        /// Determines whether to use encryption on the S3 logs. If not specified, encryption is not used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? LogConfigurationS3EncryptionEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IExecuteCommandConfigurationInternal)ExecuteCommandConfiguration).LogConfigurationS3EncryptionEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IExecuteCommandConfigurationInternal)ExecuteCommandConfiguration).LogConfigurationS3EncryptionEnabled = value ?? default(bool); }

        /// <summary>An optional folder in the S3 bucket to place logs in.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string LogConfigurationS3KeyPrefix { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IExecuteCommandConfigurationInternal)ExecuteCommandConfiguration).LogConfigurationS3KeyPrefix; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IExecuteCommandConfigurationInternal)ExecuteCommandConfiguration).LogConfigurationS3KeyPrefix = value ?? null; }

        /// <summary>Internal Acessors for ExecuteCommandConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IExecuteCommandConfiguration Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigurationInternal.ExecuteCommandConfiguration { get => (this._executeCommandConfiguration = this._executeCommandConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ExecuteCommandConfiguration()); set { {_executeCommandConfiguration = value;} } }

        /// <summary>Internal Acessors for ExecuteCommandConfigurationLogConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IExecuteCommandLogConfiguration Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigurationInternal.ExecuteCommandConfigurationLogConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IExecuteCommandConfigurationInternal)ExecuteCommandConfiguration).LogConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IExecuteCommandConfigurationInternal)ExecuteCommandConfiguration).LogConfiguration = value; }

        /// <summary>Creates an new <see cref="ClusterConfiguration" /> instance.</summary>
        public ClusterConfiguration()
        {

        }
    }
    /// Definition of ClusterConfiguration
    public partial interface IClusterConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Specify an KMSlong key ID to encrypt the data between the local client and the container.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specify an KMSlong key ID to encrypt the data between the local client and the container.",
        SerializedName = @"kmsKeyId",
        PossibleTypes = new [] { typeof(string) })]
        string ExecuteCommandConfigurationKmsKeyId { get; set; }
        /// <summary>
        /// The log setting to use for redirecting logs for your execute command results. The following log settings are available.
        /// + ``NONE``: The execute command session is not logged. + ``DEFAULT``: The ``awslogs`` configuration in the task definition
        /// is used. If no logging parameter is specified, it defaults to this value. If no ``awslogs`` log driver is configured in
        /// the task definition, the output won't be logged. + ``OVERRIDE``: Specify the logging details as a part of ``logConfiguration``.
        /// If the ``OVERRIDE`` logging option is specified, the ``logConfiguration`` is required.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The log setting to use for redirecting logs for your execute command results. The following log settings are available.  +   ``NONE``: The execute command session is not logged.  +   ``DEFAULT``: The ``awslogs`` configuration in the task definition is used. If no logging parameter is specified, it defaults to this value. If no ``awslogs`` log driver is configured in the task definition, the output won't be logged.  +   ``OVERRIDE``: Specify the logging details as a part of ``logConfiguration``. If the ``OVERRIDE`` logging option is specified, the ``logConfiguration`` is required.",
        SerializedName = @"logging",
        PossibleTypes = new [] { typeof(string) })]
        string ExecuteCommandConfigurationLogging { get; set; }
        /// <summary>
        /// Determines whether to use encryption on the CloudWatch logs. If not specified, encryption will be off.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Determines whether to use encryption on the CloudWatch logs. If not specified, encryption will be off.",
        SerializedName = @"cloudWatchEncryptionEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? LogConfigurationCloudWatchEncryptionEnabled { get; set; }
        /// <summary>
        /// The name of the CloudWatch log group to send logs to. The CloudWatch log group must already be created.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the CloudWatch log group to send logs to.  The CloudWatch log group must already be created.",
        SerializedName = @"cloudWatchLogGroupName",
        PossibleTypes = new [] { typeof(string) })]
        string LogConfigurationCloudWatchLogGroupName { get; set; }
        /// <summary>
        /// The name of the S3 bucket to send logs to. The S3 bucket must already be created.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the S3 bucket to send logs to.  The S3 bucket must already be created.",
        SerializedName = @"s3BucketName",
        PossibleTypes = new [] { typeof(string) })]
        string LogConfigurationS3BucketName { get; set; }
        /// <summary>
        /// Determines whether to use encryption on the S3 logs. If not specified, encryption is not used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Determines whether to use encryption on the S3 logs. If not specified, encryption is not used.",
        SerializedName = @"s3EncryptionEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? LogConfigurationS3EncryptionEnabled { get; set; }
        /// <summary>An optional folder in the S3 bucket to place logs in.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An optional folder in the S3 bucket to place logs in.",
        SerializedName = @"s3KeyPrefix",
        PossibleTypes = new [] { typeof(string) })]
        string LogConfigurationS3KeyPrefix { get; set; }

    }
    /// Definition of ClusterConfiguration
    internal partial interface IClusterConfigurationInternal

    {
        /// <summary>
        /// The details of the execute command configuration. The details of the execute command configuration.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IExecuteCommandConfiguration ExecuteCommandConfiguration { get; set; }
        /// <summary>
        /// Specify an KMSlong key ID to encrypt the data between the local client and the container.
        /// </summary>
        string ExecuteCommandConfigurationKmsKeyId { get; set; }
        /// <summary>
        /// The log configuration for the results of the execute command actions. The logs can be sent to CloudWatch Logs or an Amazon
        /// S3 bucket. When ``logging=OVERRIDE`` is specified, a ``logConfiguration`` must be provided. The log configuration for
        /// the results of the execute command actions. The logs can be sent to CloudWatch Logs or an Amazon S3 bucket.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IExecuteCommandLogConfiguration ExecuteCommandConfigurationLogConfiguration { get; set; }
        /// <summary>
        /// The log setting to use for redirecting logs for your execute command results. The following log settings are available.
        /// + ``NONE``: The execute command session is not logged. + ``DEFAULT``: The ``awslogs`` configuration in the task definition
        /// is used. If no logging parameter is specified, it defaults to this value. If no ``awslogs`` log driver is configured in
        /// the task definition, the output won't be logged. + ``OVERRIDE``: Specify the logging details as a part of ``logConfiguration``.
        /// If the ``OVERRIDE`` logging option is specified, the ``logConfiguration`` is required.
        /// </summary>
        string ExecuteCommandConfigurationLogging { get; set; }
        /// <summary>
        /// Determines whether to use encryption on the CloudWatch logs. If not specified, encryption will be off.
        /// </summary>
        bool? LogConfigurationCloudWatchEncryptionEnabled { get; set; }
        /// <summary>
        /// The name of the CloudWatch log group to send logs to. The CloudWatch log group must already be created.
        /// </summary>
        string LogConfigurationCloudWatchLogGroupName { get; set; }
        /// <summary>
        /// The name of the S3 bucket to send logs to. The S3 bucket must already be created.
        /// </summary>
        string LogConfigurationS3BucketName { get; set; }
        /// <summary>
        /// Determines whether to use encryption on the S3 logs. If not specified, encryption is not used.
        /// </summary>
        bool? LogConfigurationS3EncryptionEnabled { get; set; }
        /// <summary>An optional folder in the S3 bucket to place logs in.</summary>
        string LogConfigurationS3KeyPrefix { get; set; }

    }
}