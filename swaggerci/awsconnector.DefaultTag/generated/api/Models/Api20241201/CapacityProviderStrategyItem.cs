// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of CapacityProviderStrategyItem</summary>
    public partial class CapacityProviderStrategyItem :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICapacityProviderStrategyItem,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICapacityProviderStrategyItemInternal
    {

        /// <summary>Backing field for <see cref="Base" /> property.</summary>
        private int? _base;

        /// <summary>
        /// The *base* value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity
        /// provider in a capacity provider strategy can have a *base* defined. If no value is specified, the default value of ``0``
        /// is used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? Base { get => this._base; set => this._base = value; }

        /// <summary>Backing field for <see cref="CapacityProvider" /> property.</summary>
        private string _capacityProvider;

        /// <summary>The short name of the capacity provider.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string CapacityProvider { get => this._capacityProvider; set => this._capacityProvider = value; }

        /// <summary>Backing field for <see cref="Weight" /> property.</summary>
        private int? _weight;

        /// <summary>
        /// The *weight* value designates the relative percentage of the total number of tasks launched that should use the specified
        /// capacity provider. The ``weight`` value is taken into consideration after the ``base`` value, if defined, is satisfied.
        /// If no ``weight`` value is specified, the default value of ``0`` is used. When multiple capacity providers are specified
        /// within a capacity provider strategy, at least one of the capacity providers must have a weight value greater than zero
        /// and any capacity providers with a weight of ``0`` can't be used to place tasks. If you specify multiple capacity providers
        /// in a strategy that all have a weight of ``0``, any ``RunTask`` or ``CreateService`` actions using the capacity provider
        /// strategy will fail. An example scenario for using weights is defining a strategy that contains two capacity providers
        /// and both have a weight of ``1``, then when the ``base`` is satisfied, the tasks will be split evenly across the two capacity
        /// providers. Using that same logic, if you specify a weight of ``1`` for *capacityProviderA* and a weight of ``4`` for *capacityProviderB*,
        /// then for every one task that's run using *capacityProviderA*, four tasks would use *capacityProviderB*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? Weight { get => this._weight; set => this._weight = value; }

        /// <summary>Creates an new <see cref="CapacityProviderStrategyItem" /> instance.</summary>
        public CapacityProviderStrategyItem()
        {

        }
    }
    /// Definition of CapacityProviderStrategyItem
    public partial interface ICapacityProviderStrategyItem :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The *base* value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity
        /// provider in a capacity provider strategy can have a *base* defined. If no value is specified, the default value of ``0``
        /// is used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The *base* value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a *base* defined. If no value is specified, the default value of ``0`` is used.",
        SerializedName = @"base",
        PossibleTypes = new [] { typeof(int) })]
        int? Base { get; set; }
        /// <summary>The short name of the capacity provider.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The short name of the capacity provider.",
        SerializedName = @"capacityProvider",
        PossibleTypes = new [] { typeof(string) })]
        string CapacityProvider { get; set; }
        /// <summary>
        /// The *weight* value designates the relative percentage of the total number of tasks launched that should use the specified
        /// capacity provider. The ``weight`` value is taken into consideration after the ``base`` value, if defined, is satisfied.
        /// If no ``weight`` value is specified, the default value of ``0`` is used. When multiple capacity providers are specified
        /// within a capacity provider strategy, at least one of the capacity providers must have a weight value greater than zero
        /// and any capacity providers with a weight of ``0`` can't be used to place tasks. If you specify multiple capacity providers
        /// in a strategy that all have a weight of ``0``, any ``RunTask`` or ``CreateService`` actions using the capacity provider
        /// strategy will fail. An example scenario for using weights is defining a strategy that contains two capacity providers
        /// and both have a weight of ``1``, then when the ``base`` is satisfied, the tasks will be split evenly across the two capacity
        /// providers. Using that same logic, if you specify a weight of ``1`` for *capacityProviderA* and a weight of ``4`` for *capacityProviderB*,
        /// then for every one task that's run using *capacityProviderA*, four tasks would use *capacityProviderB*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The *weight* value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The ``weight`` value is taken into consideration after the ``base`` value, if defined, is satisfied. If no ``weight`` value is specified, the default value of ``0`` is used. When multiple capacity providers are specified within a capacity provider strategy, at least one of the capacity providers must have a weight value greater than zero and any capacity providers with a weight of ``0`` can't be used to place tasks. If you specify multiple capacity providers in a strategy that all have a weight of ``0``, any ``RunTask`` or ``CreateService`` actions using the capacity provider strategy will fail. An example scenario for using weights is defining a strategy that contains two capacity providers and both have a weight of ``1``, then when the ``base`` is satisfied, the tasks will be split evenly across the two capacity providers. Using that same logic, if you specify a weight of ``1`` for *capacityProviderA* and a weight of ``4`` for *capacityProviderB*, then for every one task that's run using *capacityProviderA*, four tasks would use *capacityProviderB*.",
        SerializedName = @"weight",
        PossibleTypes = new [] { typeof(int) })]
        int? Weight { get; set; }

    }
    /// Definition of CapacityProviderStrategyItem
    internal partial interface ICapacityProviderStrategyItemInternal

    {
        /// <summary>
        /// The *base* value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity
        /// provider in a capacity provider strategy can have a *base* defined. If no value is specified, the default value of ``0``
        /// is used.
        /// </summary>
        int? Base { get; set; }
        /// <summary>The short name of the capacity provider.</summary>
        string CapacityProvider { get; set; }
        /// <summary>
        /// The *weight* value designates the relative percentage of the total number of tasks launched that should use the specified
        /// capacity provider. The ``weight`` value is taken into consideration after the ``base`` value, if defined, is satisfied.
        /// If no ``weight`` value is specified, the default value of ``0`` is used. When multiple capacity providers are specified
        /// within a capacity provider strategy, at least one of the capacity providers must have a weight value greater than zero
        /// and any capacity providers with a weight of ``0`` can't be used to place tasks. If you specify multiple capacity providers
        /// in a strategy that all have a weight of ``0``, any ``RunTask`` or ``CreateService`` actions using the capacity provider
        /// strategy will fail. An example scenario for using weights is defining a strategy that contains two capacity providers
        /// and both have a weight of ``1``, then when the ``base`` is satisfied, the tasks will be split evenly across the two capacity
        /// providers. Using that same logic, if you specify a weight of ``1`` for *capacityProviderA* and a weight of ``4`` for *capacityProviderB*,
        /// then for every one task that's run using *capacityProviderA*, four tasks would use *capacityProviderB*.
        /// </summary>
        int? Weight { get; set; }

    }
}