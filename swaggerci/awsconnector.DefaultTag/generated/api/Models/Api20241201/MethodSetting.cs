// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of MethodSetting</summary>
    public partial class MethodSetting :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMethodSetting,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMethodSettingInternal
    {

        /// <summary>Backing field for <see cref="CacheDataEncrypted" /> property.</summary>
        private bool? _cacheDataEncrypted;

        /// <summary>Specifies whether the cached responses are encrypted.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public bool? CacheDataEncrypted { get => this._cacheDataEncrypted; set => this._cacheDataEncrypted = value; }

        /// <summary>Backing field for <see cref="CacheTtlInSecond" /> property.</summary>
        private int? _cacheTtlInSecond;

        /// <summary>
        /// Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be
        /// cached.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? CacheTtlInSecond { get => this._cacheTtlInSecond; set => this._cacheTtlInSecond = value; }

        /// <summary>Backing field for <see cref="CachingEnabled" /> property.</summary>
        private bool? _cachingEnabled;

        /// <summary>
        /// Specifies whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for
        /// responses to be cached.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public bool? CachingEnabled { get => this._cachingEnabled; set => this._cachingEnabled = value; }

        /// <summary>Backing field for <see cref="DataTraceEnabled" /> property.</summary>
        private bool? _dataTraceEnabled;

        /// <summary>
        /// Specifies whether data trace logging is enabled for this method, which affects the log entries pushed to Amazon CloudWatch
        /// Logs. This can be useful to troubleshoot APIs, but can result in logging sensitive data. We recommend that you don't enable
        /// this option for production APIs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public bool? DataTraceEnabled { get => this._dataTraceEnabled; set => this._dataTraceEnabled = value; }

        /// <summary>Backing field for <see cref="HttpMethod" /> property.</summary>
        private string _httpMethod;

        /// <summary>
        /// The HTTP method. To apply settings to multiple resources and methods, specify an asterisk (``*``) for the ``HttpMethod``
        /// and ``/*`` for the ``ResourcePath``. This parameter is required when you specify a ``MethodSetting``.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string HttpMethod { get => this._httpMethod; set => this._httpMethod = value; }

        /// <summary>Backing field for <see cref="LoggingLevel" /> property.</summary>
        private string _loggingLevel;

        /// <summary>
        /// Specifies the logging level for this method, which affects the log entries pushed to Amazon CloudWatch Logs. Valid values
        /// are ``OFF``, ``ERROR``, and ``INFO``. Choose ``ERROR`` to write only error-level entries to CloudWatch Logs, or choose
        /// ``INFO`` to include all ``ERROR`` events as well as extra informational events.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string LoggingLevel { get => this._loggingLevel; set => this._loggingLevel = value; }

        /// <summary>Backing field for <see cref="MetricsEnabled" /> property.</summary>
        private bool? _metricsEnabled;

        /// <summary>Specifies whether Amazon CloudWatch metrics are enabled for this method.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public bool? MetricsEnabled { get => this._metricsEnabled; set => this._metricsEnabled = value; }

        /// <summary>Backing field for <see cref="ResourcePath" /> property.</summary>
        private string _resourcePath;

        /// <summary>
        /// The resource path for this method. Forward slashes (``/``) are encoded as ``~1`` and the initial slash must include a
        /// forward slash. For example, the path value ``/resource/subresource`` must be encoded as ``/~1resource~1subresource``.
        /// To specify the root path, use only a slash (``/``). To apply settings to multiple resources and methods, specify an asterisk
        /// (``*``) for the ``HttpMethod`` and ``/*`` for the ``ResourcePath``. This parameter is required when you specify a ``MethodSetting``.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string ResourcePath { get => this._resourcePath; set => this._resourcePath = value; }

        /// <summary>Backing field for <see cref="ThrottlingBurstLimit" /> property.</summary>
        private int? _throttlingBurstLimit;

        /// <summary>Specifies the throttling burst limit.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? ThrottlingBurstLimit { get => this._throttlingBurstLimit; set => this._throttlingBurstLimit = value; }

        /// <summary>Backing field for <see cref="ThrottlingRateLimit" /> property.</summary>
        private int? _throttlingRateLimit;

        /// <summary>Specifies the throttling rate limit.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? ThrottlingRateLimit { get => this._throttlingRateLimit; set => this._throttlingRateLimit = value; }

        /// <summary>Creates an new <see cref="MethodSetting" /> instance.</summary>
        public MethodSetting()
        {

        }
    }
    /// Definition of MethodSetting
    public partial interface IMethodSetting :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary>Specifies whether the cached responses are encrypted.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether the cached responses are encrypted.",
        SerializedName = @"cacheDataEncrypted",
        PossibleTypes = new [] { typeof(bool) })]
        bool? CacheDataEncrypted { get; set; }
        /// <summary>
        /// Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be
        /// cached.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.",
        SerializedName = @"cacheTtlInSeconds",
        PossibleTypes = new [] { typeof(int) })]
        int? CacheTtlInSecond { get; set; }
        /// <summary>
        /// Specifies whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for
        /// responses to be cached.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached.",
        SerializedName = @"cachingEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? CachingEnabled { get; set; }
        /// <summary>
        /// Specifies whether data trace logging is enabled for this method, which affects the log entries pushed to Amazon CloudWatch
        /// Logs. This can be useful to troubleshoot APIs, but can result in logging sensitive data. We recommend that you don't enable
        /// this option for production APIs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether data trace logging is enabled for this method, which affects the log entries pushed to Amazon CloudWatch Logs. This can be useful to troubleshoot APIs, but can result in logging sensitive data. We recommend that you don't enable this option for production APIs.",
        SerializedName = @"dataTraceEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DataTraceEnabled { get; set; }
        /// <summary>
        /// The HTTP method. To apply settings to multiple resources and methods, specify an asterisk (``*``) for the ``HttpMethod``
        /// and ``/*`` for the ``ResourcePath``. This parameter is required when you specify a ``MethodSetting``.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The HTTP method. To apply settings to multiple resources and methods, specify an asterisk (``*``) for the ``HttpMethod`` and ``/*`` for the ``ResourcePath``. This parameter is required when you specify a ``MethodSetting``.",
        SerializedName = @"httpMethod",
        PossibleTypes = new [] { typeof(string) })]
        string HttpMethod { get; set; }
        /// <summary>
        /// Specifies the logging level for this method, which affects the log entries pushed to Amazon CloudWatch Logs. Valid values
        /// are ``OFF``, ``ERROR``, and ``INFO``. Choose ``ERROR`` to write only error-level entries to CloudWatch Logs, or choose
        /// ``INFO`` to include all ``ERROR`` events as well as extra informational events.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the logging level for this method, which affects the log entries pushed to Amazon CloudWatch Logs. Valid values are ``OFF``, ``ERROR``, and ``INFO``. Choose ``ERROR`` to write only error-level entries to CloudWatch Logs, or choose ``INFO`` to include all ``ERROR`` events as well as extra informational events.",
        SerializedName = @"loggingLevel",
        PossibleTypes = new [] { typeof(string) })]
        string LoggingLevel { get; set; }
        /// <summary>Specifies whether Amazon CloudWatch metrics are enabled for this method.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether Amazon CloudWatch metrics are enabled for this method.",
        SerializedName = @"metricsEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? MetricsEnabled { get; set; }
        /// <summary>
        /// The resource path for this method. Forward slashes (``/``) are encoded as ``~1`` and the initial slash must include a
        /// forward slash. For example, the path value ``/resource/subresource`` must be encoded as ``/~1resource~1subresource``.
        /// To specify the root path, use only a slash (``/``). To apply settings to multiple resources and methods, specify an asterisk
        /// (``*``) for the ``HttpMethod`` and ``/*`` for the ``ResourcePath``. This parameter is required when you specify a ``MethodSetting``.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource path for this method. Forward slashes (``/``) are encoded as ``~1`` and the initial slash must include a forward slash. For example, the path value ``/resource/subresource`` must be encoded as ``/~1resource~1subresource``. To specify the root path, use only a slash (``/``). To apply settings to multiple resources and methods, specify an asterisk (``*``) for the ``HttpMethod`` and ``/*`` for the ``ResourcePath``. This parameter is required when you specify a ``MethodSetting``.",
        SerializedName = @"resourcePath",
        PossibleTypes = new [] { typeof(string) })]
        string ResourcePath { get; set; }
        /// <summary>Specifies the throttling burst limit.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the throttling burst limit.",
        SerializedName = @"throttlingBurstLimit",
        PossibleTypes = new [] { typeof(int) })]
        int? ThrottlingBurstLimit { get; set; }
        /// <summary>Specifies the throttling rate limit.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the throttling rate limit.",
        SerializedName = @"throttlingRateLimit",
        PossibleTypes = new [] { typeof(int) })]
        int? ThrottlingRateLimit { get; set; }

    }
    /// Definition of MethodSetting
    internal partial interface IMethodSettingInternal

    {
        /// <summary>Specifies whether the cached responses are encrypted.</summary>
        bool? CacheDataEncrypted { get; set; }
        /// <summary>
        /// Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be
        /// cached.
        /// </summary>
        int? CacheTtlInSecond { get; set; }
        /// <summary>
        /// Specifies whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for
        /// responses to be cached.
        /// </summary>
        bool? CachingEnabled { get; set; }
        /// <summary>
        /// Specifies whether data trace logging is enabled for this method, which affects the log entries pushed to Amazon CloudWatch
        /// Logs. This can be useful to troubleshoot APIs, but can result in logging sensitive data. We recommend that you don't enable
        /// this option for production APIs.
        /// </summary>
        bool? DataTraceEnabled { get; set; }
        /// <summary>
        /// The HTTP method. To apply settings to multiple resources and methods, specify an asterisk (``*``) for the ``HttpMethod``
        /// and ``/*`` for the ``ResourcePath``. This parameter is required when you specify a ``MethodSetting``.
        /// </summary>
        string HttpMethod { get; set; }
        /// <summary>
        /// Specifies the logging level for this method, which affects the log entries pushed to Amazon CloudWatch Logs. Valid values
        /// are ``OFF``, ``ERROR``, and ``INFO``. Choose ``ERROR`` to write only error-level entries to CloudWatch Logs, or choose
        /// ``INFO`` to include all ``ERROR`` events as well as extra informational events.
        /// </summary>
        string LoggingLevel { get; set; }
        /// <summary>Specifies whether Amazon CloudWatch metrics are enabled for this method.</summary>
        bool? MetricsEnabled { get; set; }
        /// <summary>
        /// The resource path for this method. Forward slashes (``/``) are encoded as ``~1`` and the initial slash must include a
        /// forward slash. For example, the path value ``/resource/subresource`` must be encoded as ``/~1resource~1subresource``.
        /// To specify the root path, use only a slash (``/``). To apply settings to multiple resources and methods, specify an asterisk
        /// (``*``) for the ``HttpMethod`` and ``/*`` for the ``ResourcePath``. This parameter is required when you specify a ``MethodSetting``.
        /// </summary>
        string ResourcePath { get; set; }
        /// <summary>Specifies the throttling burst limit.</summary>
        int? ThrottlingBurstLimit { get; set; }
        /// <summary>Specifies the throttling rate limit.</summary>
        int? ThrottlingRateLimit { get; set; }

    }
}