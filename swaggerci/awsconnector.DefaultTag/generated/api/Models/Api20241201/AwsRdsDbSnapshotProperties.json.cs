// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of awsRdsDBSnapshot</summary>
    public partial class AwsRdsDbSnapshotProperties
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json serialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name= "returnNow" />
        /// output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject into a new instance of <see cref="AwsRdsDbSnapshotProperties" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal AwsRdsDbSnapshotProperties(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_allocatedStorage = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber>("allocatedStorage"), out var __jsonAllocatedStorage) ? (int?)__jsonAllocatedStorage : AllocatedStorage;}
            {_availabilityZone = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("availabilityZone"), out var __jsonAvailabilityZone) ? (string)__jsonAvailabilityZone : (string)AvailabilityZone;}
            {_dbInstanceIdentifier = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("dbInstanceIdentifier"), out var __jsonDbInstanceIdentifier) ? (string)__jsonDbInstanceIdentifier : (string)DbInstanceIdentifier;}
            {_dbSnapshotArn = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("dbSnapshotArn"), out var __jsonDbSnapshotArn) ? (string)__jsonDbSnapshotArn : (string)DbSnapshotArn;}
            {_dbSnapshotIdentifier = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("dbSnapshotIdentifier"), out var __jsonDbSnapshotIdentifier) ? (string)__jsonDbSnapshotIdentifier : (string)DbSnapshotIdentifier;}
            {_dbSystemId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("dbSystemId"), out var __jsonDbSystemId) ? (string)__jsonDbSystemId : (string)DbSystemId;}
            {_dbiResourceId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("dbiResourceId"), out var __jsonDbiResourceId) ? (string)__jsonDbiResourceId : (string)DbiResourceId;}
            {_dedicatedLogVolume = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean>("dedicatedLogVolume"), out var __jsonDedicatedLogVolume) ? (bool?)__jsonDedicatedLogVolume : DedicatedLogVolume;}
            {_encrypted = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean>("encrypted"), out var __jsonEncrypted) ? (bool?)__jsonEncrypted : Encrypted;}
            {_engine = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("engine"), out var __jsonEngine) ? (string)__jsonEngine : (string)Engine;}
            {_engineVersion = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("engineVersion"), out var __jsonEngineVersion) ? (string)__jsonEngineVersion : (string)EngineVersion;}
            {_iamDatabaseAuthenticationEnabled = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean>("iamDatabaseAuthenticationEnabled"), out var __jsonIamDatabaseAuthenticationEnabled) ? (bool?)__jsonIamDatabaseAuthenticationEnabled : IamDatabaseAuthenticationEnabled;}
            {_instanceCreateTime = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("instanceCreateTime"), out var __jsonInstanceCreateTime) ? global::System.DateTime.TryParse((string)__jsonInstanceCreateTime, global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.AdjustToUniversal, out var __jsonInstanceCreateTimeValue) ? __jsonInstanceCreateTimeValue : InstanceCreateTime : InstanceCreateTime;}
            {_iop = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber>("iops"), out var __jsonIops) ? (int?)__jsonIops : Iop;}
            {_kmsKeyId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("kmsKeyId"), out var __jsonKmsKeyId) ? (string)__jsonKmsKeyId : (string)KmsKeyId;}
            {_licenseModel = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("licenseModel"), out var __jsonLicenseModel) ? (string)__jsonLicenseModel : (string)LicenseModel;}
            {_masterUsername = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("masterUsername"), out var __jsonMasterUsername) ? (string)__jsonMasterUsername : (string)MasterUsername;}
            {_multiTenant = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean>("multiTenant"), out var __jsonMultiTenant) ? (bool?)__jsonMultiTenant : MultiTenant;}
            {_optionGroupName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("optionGroupName"), out var __jsonOptionGroupName) ? (string)__jsonOptionGroupName : (string)OptionGroupName;}
            {_originalSnapshotCreateTime = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("originalSnapshotCreateTime"), out var __jsonOriginalSnapshotCreateTime) ? global::System.DateTime.TryParse((string)__jsonOriginalSnapshotCreateTime, global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.AdjustToUniversal, out var __jsonOriginalSnapshotCreateTimeValue) ? __jsonOriginalSnapshotCreateTimeValue : OriginalSnapshotCreateTime : OriginalSnapshotCreateTime;}
            {_percentProgress = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber>("percentProgress"), out var __jsonPercentProgress) ? (int?)__jsonPercentProgress : PercentProgress;}
            {_port = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber>("port"), out var __jsonPort) ? (int?)__jsonPort : Port;}
            {_processorFeature = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray>("processorFeatures"), out var __jsonProcessorFeatures) ? If( __jsonProcessorFeatures as Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray, out var __v) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IProcessorFeatureAutoGenerated[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__v, (__u)=>(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IProcessorFeatureAutoGenerated) (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ProcessorFeatureAutoGenerated.FromJson(__u) )) ))() : null : ProcessorFeature;}
            {_snapshotCreateTime = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("snapshotCreateTime"), out var __jsonSnapshotCreateTime) ? global::System.DateTime.TryParse((string)__jsonSnapshotCreateTime, global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.AdjustToUniversal, out var __jsonSnapshotCreateTimeValue) ? __jsonSnapshotCreateTimeValue : SnapshotCreateTime : SnapshotCreateTime;}
            {_snapshotDatabaseTime = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("snapshotDatabaseTime"), out var __jsonSnapshotDatabaseTime) ? global::System.DateTime.TryParse((string)__jsonSnapshotDatabaseTime, global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.AdjustToUniversal, out var __jsonSnapshotDatabaseTimeValue) ? __jsonSnapshotDatabaseTimeValue : SnapshotDatabaseTime : SnapshotDatabaseTime;}
            {_snapshotTarget = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("snapshotTarget"), out var __jsonSnapshotTarget) ? (string)__jsonSnapshotTarget : (string)SnapshotTarget;}
            {_snapshotType = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("snapshotType"), out var __jsonSnapshotType) ? (string)__jsonSnapshotType : (string)SnapshotType;}
            {_sourceDbSnapshotIdentifier = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("sourceDBSnapshotIdentifier"), out var __jsonSourceDbSnapshotIdentifier) ? (string)__jsonSourceDbSnapshotIdentifier : (string)SourceDbSnapshotIdentifier;}
            {_sourceRegion = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("sourceRegion"), out var __jsonSourceRegion) ? (string)__jsonSourceRegion : (string)SourceRegion;}
            {_status = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("status"), out var __jsonStatus) ? (string)__jsonStatus : (string)Status;}
            {_storageThroughput = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber>("storageThroughput"), out var __jsonStorageThroughput) ? (int?)__jsonStorageThroughput : StorageThroughput;}
            {_storageType = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("storageType"), out var __jsonStorageType) ? (string)__jsonStorageType : (string)StorageType;}
            {_tagList = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray>("tagList"), out var __jsonTagList) ? If( __jsonTagList as Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonArray, out var __q) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated48[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__q, (__p)=>(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated48) (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.TagAutoGenerated48.FromJson(__p) )) ))() : null : TagList;}
            {_tdeCredentialArn = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("tdeCredentialArn"), out var __jsonTdeCredentialArn) ? (string)__jsonTdeCredentialArn : (string)TdeCredentialArn;}
            {_timezone = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("timezone"), out var __jsonTimezone) ? (string)__jsonTimezone : (string)Timezone;}
            {_vpcId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString>("vpcId"), out var __jsonVpcId) ? (string)__jsonVpcId : (string)VpcId;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsRdsDbSnapshotProperties.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsRdsDbSnapshotProperties.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsRdsDbSnapshotProperties FromJson(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode node)
        {
            return node is Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject json ? new AwsRdsDbSnapshotProperties(json) : null;
        }

        /// <summary>
        /// Serializes this instance of <see cref="AwsRdsDbSnapshotProperties" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="AwsRdsDbSnapshotProperties" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode" />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            AddIf( null != this._allocatedStorage ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber((int)this._allocatedStorage) : null, "allocatedStorage" ,container.Add );
            AddIf( null != (((object)this._availabilityZone)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._availabilityZone.ToString()) : null, "availabilityZone" ,container.Add );
            AddIf( null != (((object)this._dbInstanceIdentifier)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._dbInstanceIdentifier.ToString()) : null, "dbInstanceIdentifier" ,container.Add );
            AddIf( null != (((object)this._dbSnapshotArn)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._dbSnapshotArn.ToString()) : null, "dbSnapshotArn" ,container.Add );
            AddIf( null != (((object)this._dbSnapshotIdentifier)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._dbSnapshotIdentifier.ToString()) : null, "dbSnapshotIdentifier" ,container.Add );
            AddIf( null != (((object)this._dbSystemId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._dbSystemId.ToString()) : null, "dbSystemId" ,container.Add );
            AddIf( null != (((object)this._dbiResourceId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._dbiResourceId.ToString()) : null, "dbiResourceId" ,container.Add );
            AddIf( null != this._dedicatedLogVolume ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean((bool)this._dedicatedLogVolume) : null, "dedicatedLogVolume" ,container.Add );
            AddIf( null != this._encrypted ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean((bool)this._encrypted) : null, "encrypted" ,container.Add );
            AddIf( null != (((object)this._engine)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._engine.ToString()) : null, "engine" ,container.Add );
            AddIf( null != (((object)this._engineVersion)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._engineVersion.ToString()) : null, "engineVersion" ,container.Add );
            AddIf( null != this._iamDatabaseAuthenticationEnabled ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean((bool)this._iamDatabaseAuthenticationEnabled) : null, "iamDatabaseAuthenticationEnabled" ,container.Add );
            AddIf( null != this._instanceCreateTime ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._instanceCreateTime?.ToString(@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK",global::System.Globalization.CultureInfo.InvariantCulture)) : null, "instanceCreateTime" ,container.Add );
            AddIf( null != this._iop ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber((int)this._iop) : null, "iops" ,container.Add );
            AddIf( null != (((object)this._kmsKeyId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._kmsKeyId.ToString()) : null, "kmsKeyId" ,container.Add );
            AddIf( null != (((object)this._licenseModel)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._licenseModel.ToString()) : null, "licenseModel" ,container.Add );
            AddIf( null != (((object)this._masterUsername)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._masterUsername.ToString()) : null, "masterUsername" ,container.Add );
            AddIf( null != this._multiTenant ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonBoolean((bool)this._multiTenant) : null, "multiTenant" ,container.Add );
            AddIf( null != (((object)this._optionGroupName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._optionGroupName.ToString()) : null, "optionGroupName" ,container.Add );
            AddIf( null != this._originalSnapshotCreateTime ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._originalSnapshotCreateTime?.ToString(@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK",global::System.Globalization.CultureInfo.InvariantCulture)) : null, "originalSnapshotCreateTime" ,container.Add );
            AddIf( null != this._percentProgress ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber((int)this._percentProgress) : null, "percentProgress" ,container.Add );
            AddIf( null != this._port ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber((int)this._port) : null, "port" ,container.Add );
            if (null != this._processorFeature)
            {
                var __w = new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.XNodeArray();
                foreach( var __x in this._processorFeature )
                {
                    AddIf(__x?.ToJson(null, serializationMode) ,__w.Add);
                }
                container.Add("processorFeatures",__w);
            }
            AddIf( null != this._snapshotCreateTime ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._snapshotCreateTime?.ToString(@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK",global::System.Globalization.CultureInfo.InvariantCulture)) : null, "snapshotCreateTime" ,container.Add );
            AddIf( null != this._snapshotDatabaseTime ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._snapshotDatabaseTime?.ToString(@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK",global::System.Globalization.CultureInfo.InvariantCulture)) : null, "snapshotDatabaseTime" ,container.Add );
            AddIf( null != (((object)this._snapshotTarget)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._snapshotTarget.ToString()) : null, "snapshotTarget" ,container.Add );
            AddIf( null != (((object)this._snapshotType)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._snapshotType.ToString()) : null, "snapshotType" ,container.Add );
            AddIf( null != (((object)this._sourceDbSnapshotIdentifier)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._sourceDbSnapshotIdentifier.ToString()) : null, "sourceDBSnapshotIdentifier" ,container.Add );
            AddIf( null != (((object)this._sourceRegion)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._sourceRegion.ToString()) : null, "sourceRegion" ,container.Add );
            AddIf( null != (((object)this._status)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._status.ToString()) : null, "status" ,container.Add );
            AddIf( null != this._storageThroughput ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNumber((int)this._storageThroughput) : null, "storageThroughput" ,container.Add );
            AddIf( null != (((object)this._storageType)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._storageType.ToString()) : null, "storageType" ,container.Add );
            if (null != this._tagList)
            {
                var __r = new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.XNodeArray();
                foreach( var __s in this._tagList )
                {
                    AddIf(__s?.ToJson(null, serializationMode) ,__r.Add);
                }
                container.Add("tagList",__r);
            }
            AddIf( null != (((object)this._tdeCredentialArn)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._tdeCredentialArn.ToString()) : null, "tdeCredentialArn" ,container.Add );
            AddIf( null != (((object)this._timezone)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._timezone.ToString()) : null, "timezone" ,container.Add );
            AddIf( null != (((object)this._vpcId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonString(this._vpcId.ToString()) : null, "vpcId" ,container.Add );
            AfterToJson(ref container);
            return container;
        }
    }
}