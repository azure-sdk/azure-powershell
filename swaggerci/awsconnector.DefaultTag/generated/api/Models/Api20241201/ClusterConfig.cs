// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of ClusterConfig</summary>
    public partial class ClusterConfig :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfig,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal
    {

        /// <summary>Backing field for <see cref="ColdStorageOption" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IColdStorageOptions _coldStorageOption;

        /// <summary><p>Container for cold storage configuration options.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IColdStorageOptions ColdStorageOption { get => (this._coldStorageOption = this._coldStorageOption ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ColdStorageOptions()); set => this._coldStorageOption = value; }

        /// <summary>
        /// <p>Whether to enable or disable cold storage on the domain. You must enable UltraWarm storage to enable cold storage.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? ColdStorageOptionEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IColdStorageOptionsInternal)ColdStorageOption).Enabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IColdStorageOptionsInternal)ColdStorageOption).Enabled = value ?? default(bool); }

        /// <summary>Backing field for <see cref="DedicatedMasterCount" /> property.</summary>
        private int? _dedicatedMasterCount;

        /// <summary>
        /// <p>Number of dedicated master nodes in the cluster. This number must be greater than 2 and not 4, otherwise you receive
        /// a validation exception.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? DedicatedMasterCount { get => this._dedicatedMasterCount; set => this._dedicatedMasterCount = value; }

        /// <summary>Backing field for <see cref="DedicatedMasterEnabled" /> property.</summary>
        private bool? _dedicatedMasterEnabled;

        /// <summary>
        /// <p>Indicates whether dedicated master nodes are enabled for the cluster.<code>True</code> if the cluster will use a dedicated
        /// master node.<code>False</code> if the cluster will not.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public bool? DedicatedMasterEnabled { get => this._dedicatedMasterEnabled; set => this._dedicatedMasterEnabled = value; }

        /// <summary>Backing field for <see cref="DedicatedMasterType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IOpenSearchPartitionInstanceTypeEnumValue _dedicatedMasterType;

        /// <summary>
        /// <p>OpenSearch Service instance type of the dedicated master nodes in the cluster.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IOpenSearchPartitionInstanceTypeEnumValue DedicatedMasterType { get => (this._dedicatedMasterType = this._dedicatedMasterType ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.OpenSearchPartitionInstanceTypeEnumValue()); set => this._dedicatedMasterType = value; }

        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.OpenSearchPartitionInstanceType? DedicatedMasterTypeValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IOpenSearchPartitionInstanceTypeEnumValueInternal)DedicatedMasterType).Value; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IOpenSearchPartitionInstanceTypeEnumValueInternal)DedicatedMasterType).Value = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.OpenSearchPartitionInstanceType)""); }

        /// <summary>Backing field for <see cref="InstanceCount" /> property.</summary>
        private int? _instanceCount;

        /// <summary>
        /// <p>Number of data nodes in the cluster. This number must be greater than 1, otherwise you receive a validation exception.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? InstanceCount { get => this._instanceCount; set => this._instanceCount = value; }

        /// <summary>Backing field for <see cref="InstanceType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IOpenSearchPartitionInstanceTypeEnumValue _instanceType;

        /// <summary><p>Instance type of data nodes in the cluster.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IOpenSearchPartitionInstanceTypeEnumValue InstanceType { get => (this._instanceType = this._instanceType ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.OpenSearchPartitionInstanceTypeEnumValue()); set => this._instanceType = value; }

        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.OpenSearchPartitionInstanceType? InstanceTypeValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IOpenSearchPartitionInstanceTypeEnumValueInternal)InstanceType).Value; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IOpenSearchPartitionInstanceTypeEnumValueInternal)InstanceType).Value = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.OpenSearchPartitionInstanceType)""); }

        /// <summary>Internal Acessors for ColdStorageOption</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IColdStorageOptions Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal.ColdStorageOption { get => (this._coldStorageOption = this._coldStorageOption ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ColdStorageOptions()); set { {_coldStorageOption = value;} } }

        /// <summary>Internal Acessors for DedicatedMasterType</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IOpenSearchPartitionInstanceTypeEnumValue Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal.DedicatedMasterType { get => (this._dedicatedMasterType = this._dedicatedMasterType ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.OpenSearchPartitionInstanceTypeEnumValue()); set { {_dedicatedMasterType = value;} } }

        /// <summary>Internal Acessors for InstanceType</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IOpenSearchPartitionInstanceTypeEnumValue Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal.InstanceType { get => (this._instanceType = this._instanceType ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.OpenSearchPartitionInstanceTypeEnumValue()); set { {_instanceType = value;} } }

        /// <summary>Internal Acessors for WarmType</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IOpenSearchWarmPartitionInstanceTypeEnumValue Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal.WarmType { get => (this._warmType = this._warmType ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.OpenSearchWarmPartitionInstanceTypeEnumValue()); set { {_warmType = value;} } }

        /// <summary>Internal Acessors for ZoneAwarenessConfig</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IZoneAwarenessConfig Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfigInternal.ZoneAwarenessConfig { get => (this._zoneAwarenessConfig = this._zoneAwarenessConfig ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ZoneAwarenessConfig()); set { {_zoneAwarenessConfig = value;} } }

        /// <summary>Backing field for <see cref="MultiAzWithStandbyEnabled" /> property.</summary>
        private bool? _multiAzWithStandbyEnabled;

        /// <summary>
        /// <p>A boolean that indicates whether a multi-AZ domain is turned on with a standby AZ. For more information, see <a href='https://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains-multiaz.html'>Configuring
        /// a multi-AZ domain in Amazon OpenSearch Service</a>. </p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public bool? MultiAzWithStandbyEnabled { get => this._multiAzWithStandbyEnabled; set => this._multiAzWithStandbyEnabled = value; }

        /// <summary>Backing field for <see cref="WarmCount" /> property.</summary>
        private int? _warmCount;

        /// <summary><p>The number of warm nodes in the cluster.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? WarmCount { get => this._warmCount; set => this._warmCount = value; }

        /// <summary>Backing field for <see cref="WarmEnabled" /> property.</summary>
        private bool? _warmEnabled;

        /// <summary><p>Whether to enable warm storage for the cluster.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public bool? WarmEnabled { get => this._warmEnabled; set => this._warmEnabled = value; }

        /// <summary>Backing field for <see cref="WarmType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IOpenSearchWarmPartitionInstanceTypeEnumValue _warmType;

        /// <summary><p>The instance type for the cluster's warm nodes.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IOpenSearchWarmPartitionInstanceTypeEnumValue WarmType { get => (this._warmType = this._warmType ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.OpenSearchWarmPartitionInstanceTypeEnumValue()); set => this._warmType = value; }

        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.OpenSearchWarmPartitionInstanceType? WarmTypeValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IOpenSearchWarmPartitionInstanceTypeEnumValueInternal)WarmType).Value; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IOpenSearchWarmPartitionInstanceTypeEnumValueInternal)WarmType).Value = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.OpenSearchWarmPartitionInstanceType)""); }

        /// <summary>Backing field for <see cref="ZoneAwarenessConfig" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IZoneAwarenessConfig _zoneAwarenessConfig;

        /// <summary>
        /// <p>Container for zone awareness configuration options. Only required if <code>ZoneAwarenessEnabled</code> is <code>true</code>.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IZoneAwarenessConfig ZoneAwarenessConfig { get => (this._zoneAwarenessConfig = this._zoneAwarenessConfig ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ZoneAwarenessConfig()); set => this._zoneAwarenessConfig = value; }

        /// <summary>
        /// <p>If you enabled multiple Availability Zones, this value is the number of zones that you want the domain to use. Valid
        /// values are <code>2</code> and <code>3</code>. If your domain is provisioned within a VPC, this value be equal to number
        /// of subnets.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public int? ZoneAwarenessConfigAvailabilityZoneCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IZoneAwarenessConfigInternal)ZoneAwarenessConfig).AvailabilityZoneCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IZoneAwarenessConfigInternal)ZoneAwarenessConfig).AvailabilityZoneCount = value ?? default(int); }

        /// <summary>Backing field for <see cref="ZoneAwarenessEnabled" /> property.</summary>
        private bool? _zoneAwarenessEnabled;

        /// <summary>
        /// <p>Indicates whether multiple Availability Zones are enabled. For more information, see <a href='https://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains-multiaz.html'>Configuring
        /// a multi-AZ domain in Amazon OpenSearch Service</a>.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public bool? ZoneAwarenessEnabled { get => this._zoneAwarenessEnabled; set => this._zoneAwarenessEnabled = value; }

        /// <summary>Creates an new <see cref="ClusterConfig" /> instance.</summary>
        public ClusterConfig()
        {

        }
    }
    /// Definition of ClusterConfig
    public partial interface IClusterConfig :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary>
        /// <p>Whether to enable or disable cold storage on the domain. You must enable UltraWarm storage to enable cold storage.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>Whether to enable or disable cold storage on the domain. You must enable UltraWarm storage to enable cold storage.</p>",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ColdStorageOptionEnabled { get; set; }
        /// <summary>
        /// <p>Number of dedicated master nodes in the cluster. This number must be greater than 2 and not 4, otherwise you receive
        /// a validation exception.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>Number of dedicated master nodes in the cluster. This number must be greater than 2 and not 4, otherwise you receive a validation exception.</p>",
        SerializedName = @"dedicatedMasterCount",
        PossibleTypes = new [] { typeof(int) })]
        int? DedicatedMasterCount { get; set; }
        /// <summary>
        /// <p>Indicates whether dedicated master nodes are enabled for the cluster.<code>True</code> if the cluster will use a dedicated
        /// master node.<code>False</code> if the cluster will not.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>Indicates whether dedicated master nodes are enabled for the cluster.<code>True</code> if the cluster will use a dedicated master node.<code>False</code> if the cluster will not.</p>",
        SerializedName = @"dedicatedMasterEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DedicatedMasterEnabled { get; set; }
        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property value",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.OpenSearchPartitionInstanceType) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.OpenSearchPartitionInstanceType? DedicatedMasterTypeValue { get; set; }
        /// <summary>
        /// <p>Number of data nodes in the cluster. This number must be greater than 1, otherwise you receive a validation exception.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>Number of data nodes in the cluster. This number must be greater than 1, otherwise you receive a validation exception.</p>",
        SerializedName = @"instanceCount",
        PossibleTypes = new [] { typeof(int) })]
        int? InstanceCount { get; set; }
        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property value",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.OpenSearchPartitionInstanceType) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.OpenSearchPartitionInstanceType? InstanceTypeValue { get; set; }
        /// <summary>
        /// <p>A boolean that indicates whether a multi-AZ domain is turned on with a standby AZ. For more information, see <a href='https://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains-multiaz.html'>Configuring
        /// a multi-AZ domain in Amazon OpenSearch Service</a>. </p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>A boolean that indicates whether a multi-AZ domain is turned on with a standby AZ. For more information, see <a href='https://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains-multiaz.html'>Configuring a multi-AZ domain in Amazon OpenSearch Service</a>. </p>",
        SerializedName = @"multiAZWithStandbyEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? MultiAzWithStandbyEnabled { get; set; }
        /// <summary><p>The number of warm nodes in the cluster.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The number of warm nodes in the cluster.</p>",
        SerializedName = @"warmCount",
        PossibleTypes = new [] { typeof(int) })]
        int? WarmCount { get; set; }
        /// <summary><p>Whether to enable warm storage for the cluster.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>Whether to enable warm storage for the cluster.</p>",
        SerializedName = @"warmEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? WarmEnabled { get; set; }
        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property value",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.OpenSearchWarmPartitionInstanceType) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.OpenSearchWarmPartitionInstanceType? WarmTypeValue { get; set; }
        /// <summary>
        /// <p>If you enabled multiple Availability Zones, this value is the number of zones that you want the domain to use. Valid
        /// values are <code>2</code> and <code>3</code>. If your domain is provisioned within a VPC, this value be equal to number
        /// of subnets.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>If you enabled multiple Availability Zones, this value is the number of zones that you want the domain to use. Valid values are <code>2</code> and <code>3</code>. If your domain is provisioned within a VPC, this value be equal to number of subnets.</p>",
        SerializedName = @"availabilityZoneCount",
        PossibleTypes = new [] { typeof(int) })]
        int? ZoneAwarenessConfigAvailabilityZoneCount { get; set; }
        /// <summary>
        /// <p>Indicates whether multiple Availability Zones are enabled. For more information, see <a href='https://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains-multiaz.html'>Configuring
        /// a multi-AZ domain in Amazon OpenSearch Service</a>.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>Indicates whether multiple Availability Zones are enabled. For more information, see <a href='https://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains-multiaz.html'>Configuring a multi-AZ domain in Amazon OpenSearch Service</a>.</p>",
        SerializedName = @"zoneAwarenessEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ZoneAwarenessEnabled { get; set; }

    }
    /// Definition of ClusterConfig
    internal partial interface IClusterConfigInternal

    {
        /// <summary><p>Container for cold storage configuration options.</p></summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IColdStorageOptions ColdStorageOption { get; set; }
        /// <summary>
        /// <p>Whether to enable or disable cold storage on the domain. You must enable UltraWarm storage to enable cold storage.</p>
        /// </summary>
        bool? ColdStorageOptionEnabled { get; set; }
        /// <summary>
        /// <p>Number of dedicated master nodes in the cluster. This number must be greater than 2 and not 4, otherwise you receive
        /// a validation exception.</p>
        /// </summary>
        int? DedicatedMasterCount { get; set; }
        /// <summary>
        /// <p>Indicates whether dedicated master nodes are enabled for the cluster.<code>True</code> if the cluster will use a dedicated
        /// master node.<code>False</code> if the cluster will not.</p>
        /// </summary>
        bool? DedicatedMasterEnabled { get; set; }
        /// <summary>
        /// <p>OpenSearch Service instance type of the dedicated master nodes in the cluster.</p>
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IOpenSearchPartitionInstanceTypeEnumValue DedicatedMasterType { get; set; }
        /// <summary>Property value</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.OpenSearchPartitionInstanceType? DedicatedMasterTypeValue { get; set; }
        /// <summary>
        /// <p>Number of data nodes in the cluster. This number must be greater than 1, otherwise you receive a validation exception.</p>
        /// </summary>
        int? InstanceCount { get; set; }
        /// <summary><p>Instance type of data nodes in the cluster.</p></summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IOpenSearchPartitionInstanceTypeEnumValue InstanceType { get; set; }
        /// <summary>Property value</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.OpenSearchPartitionInstanceType? InstanceTypeValue { get; set; }
        /// <summary>
        /// <p>A boolean that indicates whether a multi-AZ domain is turned on with a standby AZ. For more information, see <a href='https://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains-multiaz.html'>Configuring
        /// a multi-AZ domain in Amazon OpenSearch Service</a>. </p>
        /// </summary>
        bool? MultiAzWithStandbyEnabled { get; set; }
        /// <summary><p>The number of warm nodes in the cluster.</p></summary>
        int? WarmCount { get; set; }
        /// <summary><p>Whether to enable warm storage for the cluster.</p></summary>
        bool? WarmEnabled { get; set; }
        /// <summary><p>The instance type for the cluster's warm nodes.</p></summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IOpenSearchWarmPartitionInstanceTypeEnumValue WarmType { get; set; }
        /// <summary>Property value</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.OpenSearchWarmPartitionInstanceType? WarmTypeValue { get; set; }
        /// <summary>
        /// <p>Container for zone awareness configuration options. Only required if <code>ZoneAwarenessEnabled</code> is <code>true</code>.</p>
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IZoneAwarenessConfig ZoneAwarenessConfig { get; set; }
        /// <summary>
        /// <p>If you enabled multiple Availability Zones, this value is the number of zones that you want the domain to use. Valid
        /// values are <code>2</code> and <code>3</code>. If your domain is provisioned within a VPC, this value be equal to number
        /// of subnets.</p>
        /// </summary>
        int? ZoneAwarenessConfigAvailabilityZoneCount { get; set; }
        /// <summary>
        /// <p>Indicates whether multiple Availability Zones are enabled. For more information, see <a href='https://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains-multiaz.html'>Configuring
        /// a multi-AZ domain in Amazon OpenSearch Service</a>.</p>
        /// </summary>
        bool? ZoneAwarenessEnabled { get; set; }

    }
}