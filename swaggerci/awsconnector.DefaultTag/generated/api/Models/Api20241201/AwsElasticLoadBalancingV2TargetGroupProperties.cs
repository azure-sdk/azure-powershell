// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of awsElasticLoadBalancingV2TargetGroup</summary>
    public partial class AwsElasticLoadBalancingV2TargetGroupProperties :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsElasticLoadBalancingV2TargetGroupProperties,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsElasticLoadBalancingV2TargetGroupPropertiesInternal
    {

        /// <summary>Backing field for <see cref="HealthCheckEnabled" /> property.</summary>
        private bool? _healthCheckEnabled;

        /// <summary>
        /// Indicates whether health checks are enabled. If the target type is lambda, health checks are disabled by default but can
        /// be enabled. If the target type is instance, ip, or alb, health checks are always enabled and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public bool? HealthCheckEnabled { get => this._healthCheckEnabled; set => this._healthCheckEnabled = value; }

        /// <summary>Backing field for <see cref="HealthCheckIntervalSecond" /> property.</summary>
        private int? _healthCheckIntervalSecond;

        /// <summary>
        /// The approximate amount of time, in seconds, between health checks of an individual target.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? HealthCheckIntervalSecond { get => this._healthCheckIntervalSecond; set => this._healthCheckIntervalSecond = value; }

        /// <summary>Backing field for <see cref="HealthCheckPath" /> property.</summary>
        private string _healthCheckPath;

        /// <summary>
        /// [HTTP/HTTPS health checks] The destination for health checks on the targets. [HTTP1 or HTTP2 protocol version] The ping
        /// path. The default is /. [GRPC protocol version] The path of a custom health check method with the format /package.service/method.
        /// The default is /AWS.ALB/healthcheck.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string HealthCheckPath { get => this._healthCheckPath; set => this._healthCheckPath = value; }

        /// <summary>Backing field for <see cref="HealthCheckPort" /> property.</summary>
        private string _healthCheckPort;

        /// <summary>The port the load balancer uses when performing health checks on targets.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string HealthCheckPort { get => this._healthCheckPort; set => this._healthCheckPort = value; }

        /// <summary>Backing field for <see cref="HealthCheckProtocol" /> property.</summary>
        private string _healthCheckProtocol;

        /// <summary>The protocol the load balancer uses when performing health checks on targets.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string HealthCheckProtocol { get => this._healthCheckProtocol; set => this._healthCheckProtocol = value; }

        /// <summary>Backing field for <see cref="HealthCheckTimeoutSecond" /> property.</summary>
        private int? _healthCheckTimeoutSecond;

        /// <summary>
        /// The amount of time, in seconds, during which no response from a target means a failed health check.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? HealthCheckTimeoutSecond { get => this._healthCheckTimeoutSecond; set => this._healthCheckTimeoutSecond = value; }

        /// <summary>Backing field for <see cref="HealthyThresholdCount" /> property.</summary>
        private int? _healthyThresholdCount;

        /// <summary>
        /// The number of consecutive health checks successes required before considering an unhealthy target healthy.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? HealthyThresholdCount { get => this._healthyThresholdCount; set => this._healthyThresholdCount = value; }

        /// <summary>Backing field for <see cref="IPAddressType" /> property.</summary>
        private string _iPAddressType;

        /// <summary>
        /// The type of IP address used for this target group. The possible values are ipv4 and ipv6.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string IPAddressType { get => this._iPAddressType; set => this._iPAddressType = value; }

        /// <summary>Backing field for <see cref="LoadBalancerArn" /> property.</summary>
        private string[] _loadBalancerArn;

        /// <summary>
        /// The Amazon Resource Names (ARNs) of the load balancers that route traffic to this target group.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string[] LoadBalancerArn { get => this._loadBalancerArn; set => this._loadBalancerArn = value; }

        /// <summary>Backing field for <see cref="Matcher" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMatcher _matcher;

        /// <summary>
        /// [HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMatcher Matcher { get => (this._matcher = this._matcher ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.Matcher()); set => this._matcher = value; }

        /// <summary>
        /// You can specify values between 0 and 99. You can specify multiple values, or a range of values. The default value is 12.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string MatcherGrpcCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMatcherInternal)Matcher).GrpcCode; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMatcherInternal)Matcher).GrpcCode = value ?? null; }

        /// <summary>
        /// For Application Load Balancers, you can specify values between 200 and 499, and the default value is 200. You can specify
        /// multiple values or a range of values.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string MatcherHttpCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMatcherInternal)Matcher).HttpCode; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMatcherInternal)Matcher).HttpCode = value ?? null; }

        /// <summary>Internal Acessors for Matcher</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMatcher Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsElasticLoadBalancingV2TargetGroupPropertiesInternal.Matcher { get => (this._matcher = this._matcher ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.Matcher()); set { {_matcher = value;} } }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>The name of the target group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="Port" /> property.</summary>
        private int? _port;

        /// <summary>
        /// The port on which the targets receive traffic. This port is used unless you specify a port override when registering the
        /// target. If the target is a Lambda function, this parameter does not apply. If the protocol is GENEVE, the supported port
        /// is 6081.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? Port { get => this._port; set => this._port = value; }

        /// <summary>Backing field for <see cref="Protocol" /> property.</summary>
        private string _protocol;

        /// <summary>The protocol to use for routing traffic to the targets.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string Protocol { get => this._protocol; set => this._protocol = value; }

        /// <summary>Backing field for <see cref="ProtocolVersion" /> property.</summary>
        private string _protocolVersion;

        /// <summary>
        /// [HTTP/HTTPS protocol] The protocol version. The possible values are GRPC, HTTP1, and HTTP2.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string ProtocolVersion { get => this._protocolVersion; set => this._protocolVersion = value; }

        /// <summary>Backing field for <see cref="Tag" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated31[] _tag;

        /// <summary>The tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated31[] Tag { get => this._tag; set => this._tag = value; }

        /// <summary>Backing field for <see cref="Target" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetDescription[] _target;

        /// <summary>The targets.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetDescription[] Target { get => this._target; set => this._target = value; }

        /// <summary>Backing field for <see cref="TargetGroupArn" /> property.</summary>
        private string _targetGroupArn;

        /// <summary>The ARN of the Target Group</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string TargetGroupArn { get => this._targetGroupArn; set => this._targetGroupArn = value; }

        /// <summary>Backing field for <see cref="TargetGroupAttribute" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetGroupAttribute[] _targetGroupAttribute;

        /// <summary>The attributes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetGroupAttribute[] TargetGroupAttribute { get => this._targetGroupAttribute; set => this._targetGroupAttribute = value; }

        /// <summary>Backing field for <see cref="TargetGroupFullName" /> property.</summary>
        private string _targetGroupFullName;

        /// <summary>The full name of the target group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string TargetGroupFullName { get => this._targetGroupFullName; set => this._targetGroupFullName = value; }

        /// <summary>Backing field for <see cref="TargetGroupName" /> property.</summary>
        private string _targetGroupName;

        /// <summary>The name of the target group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string TargetGroupName { get => this._targetGroupName; set => this._targetGroupName = value; }

        /// <summary>Backing field for <see cref="TargetType" /> property.</summary>
        private string _targetType;

        /// <summary>
        /// The type of target that you must specify when registering targets with this target group. You can't specify targets for
        /// a target group using more than one target type.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string TargetType { get => this._targetType; set => this._targetType = value; }

        /// <summary>Backing field for <see cref="UnhealthyThresholdCount" /> property.</summary>
        private int? _unhealthyThresholdCount;

        /// <summary>
        /// The number of consecutive health check failures required before considering a target unhealthy.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? UnhealthyThresholdCount { get => this._unhealthyThresholdCount; set => this._unhealthyThresholdCount = value; }

        /// <summary>Backing field for <see cref="VpcId" /> property.</summary>
        private string _vpcId;

        /// <summary>
        /// The identifier of the virtual private cloud (VPC). If the target is a Lambda function, this parameter does not apply.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string VpcId { get => this._vpcId; set => this._vpcId = value; }

        /// <summary>
        /// Creates an new <see cref="AwsElasticLoadBalancingV2TargetGroupProperties" /> instance.
        /// </summary>
        public AwsElasticLoadBalancingV2TargetGroupProperties()
        {

        }
    }
    /// Definition of awsElasticLoadBalancingV2TargetGroup
    public partial interface IAwsElasticLoadBalancingV2TargetGroupProperties :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Indicates whether health checks are enabled. If the target type is lambda, health checks are disabled by default but can
        /// be enabled. If the target type is instance, ip, or alb, health checks are always enabled and cannot be disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether health checks are enabled. If the target type is lambda, health checks are disabled by default but can be enabled. If the target type is instance, ip, or alb, health checks are always enabled and cannot be disabled.",
        SerializedName = @"healthCheckEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? HealthCheckEnabled { get; set; }
        /// <summary>
        /// The approximate amount of time, in seconds, between health checks of an individual target.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The approximate amount of time, in seconds, between health checks of an individual target.",
        SerializedName = @"healthCheckIntervalSeconds",
        PossibleTypes = new [] { typeof(int) })]
        int? HealthCheckIntervalSecond { get; set; }
        /// <summary>
        /// [HTTP/HTTPS health checks] The destination for health checks on the targets. [HTTP1 or HTTP2 protocol version] The ping
        /// path. The default is /. [GRPC protocol version] The path of a custom health check method with the format /package.service/method.
        /// The default is /AWS.ALB/healthcheck.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"[HTTP/HTTPS health checks] The destination for health checks on the targets. [HTTP1 or HTTP2 protocol version] The ping path. The default is /. [GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /AWS.ALB/healthcheck.",
        SerializedName = @"healthCheckPath",
        PossibleTypes = new [] { typeof(string) })]
        string HealthCheckPath { get; set; }
        /// <summary>The port the load balancer uses when performing health checks on targets.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The port the load balancer uses when performing health checks on targets.",
        SerializedName = @"healthCheckPort",
        PossibleTypes = new [] { typeof(string) })]
        string HealthCheckPort { get; set; }
        /// <summary>The protocol the load balancer uses when performing health checks on targets.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The protocol the load balancer uses when performing health checks on targets.",
        SerializedName = @"healthCheckProtocol",
        PossibleTypes = new [] { typeof(string) })]
        string HealthCheckProtocol { get; set; }
        /// <summary>
        /// The amount of time, in seconds, during which no response from a target means a failed health check.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The amount of time, in seconds, during which no response from a target means a failed health check.",
        SerializedName = @"healthCheckTimeoutSeconds",
        PossibleTypes = new [] { typeof(int) })]
        int? HealthCheckTimeoutSecond { get; set; }
        /// <summary>
        /// The number of consecutive health checks successes required before considering an unhealthy target healthy.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of consecutive health checks successes required before considering an unhealthy target healthy.",
        SerializedName = @"healthyThresholdCount",
        PossibleTypes = new [] { typeof(int) })]
        int? HealthyThresholdCount { get; set; }
        /// <summary>
        /// The type of IP address used for this target group. The possible values are ipv4 and ipv6.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of IP address used for this target group. The possible values are ipv4 and ipv6.",
        SerializedName = @"ipAddressType",
        PossibleTypes = new [] { typeof(string) })]
        string IPAddressType { get; set; }
        /// <summary>
        /// The Amazon Resource Names (ARNs) of the load balancers that route traffic to this target group.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Amazon Resource Names (ARNs) of the load balancers that route traffic to this target group.",
        SerializedName = @"loadBalancerArns",
        PossibleTypes = new [] { typeof(string) })]
        string[] LoadBalancerArn { get; set; }
        /// <summary>
        /// You can specify values between 0 and 99. You can specify multiple values, or a range of values. The default value is 12.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"You can specify values between 0 and 99. You can specify multiple values, or a range of values. The default value is 12.",
        SerializedName = @"grpcCode",
        PossibleTypes = new [] { typeof(string) })]
        string MatcherGrpcCode { get; set; }
        /// <summary>
        /// For Application Load Balancers, you can specify values between 200 and 499, and the default value is 200. You can specify
        /// multiple values or a range of values.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"For Application Load Balancers, you can specify values between 200 and 499, and the default value is 200. You can specify multiple values or a range of values.",
        SerializedName = @"httpCode",
        PossibleTypes = new [] { typeof(string) })]
        string MatcherHttpCode { get; set; }
        /// <summary>The name of the target group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the target group.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>
        /// The port on which the targets receive traffic. This port is used unless you specify a port override when registering the
        /// target. If the target is a Lambda function, this parameter does not apply. If the protocol is GENEVE, the supported port
        /// is 6081.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target. If the target is a Lambda function, this parameter does not apply. If the protocol is GENEVE, the supported port is 6081.",
        SerializedName = @"port",
        PossibleTypes = new [] { typeof(int) })]
        int? Port { get; set; }
        /// <summary>The protocol to use for routing traffic to the targets.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The protocol to use for routing traffic to the targets.",
        SerializedName = @"protocol",
        PossibleTypes = new [] { typeof(string) })]
        string Protocol { get; set; }
        /// <summary>
        /// [HTTP/HTTPS protocol] The protocol version. The possible values are GRPC, HTTP1, and HTTP2.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"[HTTP/HTTPS protocol] The protocol version. The possible values are GRPC, HTTP1, and HTTP2.",
        SerializedName = @"protocolVersion",
        PossibleTypes = new [] { typeof(string) })]
        string ProtocolVersion { get; set; }
        /// <summary>The tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The tags.",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated31) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated31[] Tag { get; set; }
        /// <summary>The targets.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The targets.",
        SerializedName = @"targets",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetDescription) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetDescription[] Target { get; set; }
        /// <summary>The ARN of the Target Group</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ARN of the Target Group",
        SerializedName = @"targetGroupArn",
        PossibleTypes = new [] { typeof(string) })]
        string TargetGroupArn { get; set; }
        /// <summary>The attributes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The attributes.",
        SerializedName = @"targetGroupAttributes",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetGroupAttribute) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetGroupAttribute[] TargetGroupAttribute { get; set; }
        /// <summary>The full name of the target group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The full name of the target group.",
        SerializedName = @"targetGroupFullName",
        PossibleTypes = new [] { typeof(string) })]
        string TargetGroupFullName { get; set; }
        /// <summary>The name of the target group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the target group.",
        SerializedName = @"targetGroupName",
        PossibleTypes = new [] { typeof(string) })]
        string TargetGroupName { get; set; }
        /// <summary>
        /// The type of target that you must specify when registering targets with this target group. You can't specify targets for
        /// a target group using more than one target type.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of target that you must specify when registering targets with this target group. You can't specify targets for a target group using more than one target type.",
        SerializedName = @"targetType",
        PossibleTypes = new [] { typeof(string) })]
        string TargetType { get; set; }
        /// <summary>
        /// The number of consecutive health check failures required before considering a target unhealthy.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of consecutive health check failures required before considering a target unhealthy.",
        SerializedName = @"unhealthyThresholdCount",
        PossibleTypes = new [] { typeof(int) })]
        int? UnhealthyThresholdCount { get; set; }
        /// <summary>
        /// The identifier of the virtual private cloud (VPC). If the target is a Lambda function, this parameter does not apply.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The identifier of the virtual private cloud (VPC). If the target is a Lambda function, this parameter does not apply.",
        SerializedName = @"vpcId",
        PossibleTypes = new [] { typeof(string) })]
        string VpcId { get; set; }

    }
    /// Definition of awsElasticLoadBalancingV2TargetGroup
    internal partial interface IAwsElasticLoadBalancingV2TargetGroupPropertiesInternal

    {
        /// <summary>
        /// Indicates whether health checks are enabled. If the target type is lambda, health checks are disabled by default but can
        /// be enabled. If the target type is instance, ip, or alb, health checks are always enabled and cannot be disabled.
        /// </summary>
        bool? HealthCheckEnabled { get; set; }
        /// <summary>
        /// The approximate amount of time, in seconds, between health checks of an individual target.
        /// </summary>
        int? HealthCheckIntervalSecond { get; set; }
        /// <summary>
        /// [HTTP/HTTPS health checks] The destination for health checks on the targets. [HTTP1 or HTTP2 protocol version] The ping
        /// path. The default is /. [GRPC protocol version] The path of a custom health check method with the format /package.service/method.
        /// The default is /AWS.ALB/healthcheck.
        /// </summary>
        string HealthCheckPath { get; set; }
        /// <summary>The port the load balancer uses when performing health checks on targets.</summary>
        string HealthCheckPort { get; set; }
        /// <summary>The protocol the load balancer uses when performing health checks on targets.</summary>
        string HealthCheckProtocol { get; set; }
        /// <summary>
        /// The amount of time, in seconds, during which no response from a target means a failed health check.
        /// </summary>
        int? HealthCheckTimeoutSecond { get; set; }
        /// <summary>
        /// The number of consecutive health checks successes required before considering an unhealthy target healthy.
        /// </summary>
        int? HealthyThresholdCount { get; set; }
        /// <summary>
        /// The type of IP address used for this target group. The possible values are ipv4 and ipv6.
        /// </summary>
        string IPAddressType { get; set; }
        /// <summary>
        /// The Amazon Resource Names (ARNs) of the load balancers that route traffic to this target group.
        /// </summary>
        string[] LoadBalancerArn { get; set; }
        /// <summary>
        /// [HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IMatcher Matcher { get; set; }
        /// <summary>
        /// You can specify values between 0 and 99. You can specify multiple values, or a range of values. The default value is 12.
        /// </summary>
        string MatcherGrpcCode { get; set; }
        /// <summary>
        /// For Application Load Balancers, you can specify values between 200 and 499, and the default value is 200. You can specify
        /// multiple values or a range of values.
        /// </summary>
        string MatcherHttpCode { get; set; }
        /// <summary>The name of the target group.</summary>
        string Name { get; set; }
        /// <summary>
        /// The port on which the targets receive traffic. This port is used unless you specify a port override when registering the
        /// target. If the target is a Lambda function, this parameter does not apply. If the protocol is GENEVE, the supported port
        /// is 6081.
        /// </summary>
        int? Port { get; set; }
        /// <summary>The protocol to use for routing traffic to the targets.</summary>
        string Protocol { get; set; }
        /// <summary>
        /// [HTTP/HTTPS protocol] The protocol version. The possible values are GRPC, HTTP1, and HTTP2.
        /// </summary>
        string ProtocolVersion { get; set; }
        /// <summary>The tags.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated31[] Tag { get; set; }
        /// <summary>The targets.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetDescription[] Target { get; set; }
        /// <summary>The ARN of the Target Group</summary>
        string TargetGroupArn { get; set; }
        /// <summary>The attributes.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITargetGroupAttribute[] TargetGroupAttribute { get; set; }
        /// <summary>The full name of the target group.</summary>
        string TargetGroupFullName { get; set; }
        /// <summary>The name of the target group.</summary>
        string TargetGroupName { get; set; }
        /// <summary>
        /// The type of target that you must specify when registering targets with this target group. You can't specify targets for
        /// a target group using more than one target type.
        /// </summary>
        string TargetType { get; set; }
        /// <summary>
        /// The number of consecutive health check failures required before considering a target unhealthy.
        /// </summary>
        int? UnhealthyThresholdCount { get; set; }
        /// <summary>
        /// The identifier of the virtual private cloud (VPC). If the target is a Lambda function, this parameter does not apply.
        /// </summary>
        string VpcId { get; set; }

    }
}