// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of DefaultCacheBehavior</summary>
    public partial class DefaultCacheBehavior :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDefaultCacheBehavior,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDefaultCacheBehaviorInternal
    {

        /// <summary>Backing field for <see cref="AllowedMethod" /> property.</summary>
        private string[] _allowedMethod;

        /// <summary>
        /// A complex type that controls which HTTP methods CloudFront processes and forwards to your Amazon S3 bucket or your custom
        /// origin. There are three choices: + CloudFront forwards only ``GET`` and ``HEAD`` requests. + CloudFront forwards only
        /// ``GET``, ``HEAD``, and ``OPTIONS`` requests. + CloudFront forwards ``GET, HEAD, OPTIONS, PUT, PATCH, POST``, and ``DELETE``
        /// requests. If you pick the third choice, you may need to restrict access to your Amazon S3 bucket or to your custom origin
        /// so users can't perform operations that you don't want them to. For example, you might not want users to have permissions
        /// to delete objects from your origin.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string[] AllowedMethod { get => this._allowedMethod; set => this._allowedMethod = value; }

        /// <summary>Backing field for <see cref="CachePolicyId" /> property.</summary>
        private string _cachePolicyId;

        /// <summary>
        /// The unique identifier of the cache policy that is attached to the default cache behavior. For more information, see [Creating
        /// cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
        /// in the *Amazon CloudFront Developer Guide*. A ``DefaultCacheBehavior`` must include either a ``CachePolicyId`` or ``ForwardedValues``.
        /// We recommend that you use a ``CachePolicyId``.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string CachePolicyId { get => this._cachePolicyId; set => this._cachePolicyId = value; }

        /// <summary>Backing field for <see cref="CachedMethod" /> property.</summary>
        private string[] _cachedMethod;

        /// <summary>
        /// A complex type that controls whether CloudFront caches the response to requests using the specified HTTP methods. There
        /// are two choices: + CloudFront caches responses to ``GET`` and ``HEAD`` requests. + CloudFront caches responses to ``GET``,
        /// ``HEAD``, and ``OPTIONS`` requests. If you pick the second choice for your Amazon S3 Origin, you may need to forward Access-Control-Request-Method,
        /// Access-Control-Request-Headers, and Origin headers for the responses to be cached correctly.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string[] CachedMethod { get => this._cachedMethod; set => this._cachedMethod = value; }

        /// <summary>Backing field for <see cref="Compress" /> property.</summary>
        private bool? _compress;

        /// <summary>
        /// Whether you want CloudFront to automatically compress certain files for this cache behavior. If so, specify ``true``;
        /// if not, specify ``false``. For more information, see [Serving Compressed Files](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html)
        /// in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public bool? Compress { get => this._compress; set => this._compress = value; }

        /// <summary>
        /// This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
        /// If you want to include cookies in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// in the *Amazon CloudFront Developer Guide*. If you want to send cookies to the origin but not include them in the cache
        /// key, use origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
        /// in the *Amazon CloudFront Developer Guide*. Specifies which cookies to forward to the origin for this cache behavior:
        /// all, none, or the list of cookies specified in the ``WhitelistedNames`` complex type. Amazon S3 doesn't process cookies.
        /// When the cache behavior is forwarding requests to an Amazon S3 origin, specify none for the ``Forward`` element.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string CookyForward { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IForwardedValuesInternal)ForwardedValue).CookyForward; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IForwardedValuesInternal)ForwardedValue).CookyForward = value ?? null; }

        /// <summary>
        /// This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
        /// If you want to include cookies in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// in the *Amazon CloudFront Developer Guide*. If you want to send cookies to the origin but not include them in the cache
        /// key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
        /// in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string[] CookyWhitelistedName { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IForwardedValuesInternal)ForwardedValue).CookyWhitelistedName; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IForwardedValuesInternal)ForwardedValue).CookyWhitelistedName = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="DefaultTtl" /> property.</summary>
        private int? _defaultTtl;

        /// <summary>
        /// This field is deprecated. We recommend that you use the ``DefaultTTL`` field in a cache policy instead of this field.
        /// For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
        /// in the *Amazon CloudFront Developer Guide*. The default amount of time that you want objects to stay in CloudFront caches
        /// before CloudFront forwards another request to your origin to determine whether the object has been updated. The value
        /// that you specify applies only when your origin does not add HTTP headers such as ``Cache-Control max-age``, ``Cache-Control
        /// s-maxage``, and ``Expires`` to objects. For more information, see [Managing How Long Content Stays in an Edge Cache (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html)
        /// in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? DefaultTtl { get => this._defaultTtl; set => this._defaultTtl = value; }

        /// <summary>Backing field for <see cref="FieldLevelEncryptionId" /> property.</summary>
        private string _fieldLevelEncryptionId;

        /// <summary>
        /// The value of ``ID`` for the field-level encryption configuration that you want CloudFront to use for encrypting specific
        /// fields of data for the default cache behavior.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string FieldLevelEncryptionId { get => this._fieldLevelEncryptionId; set => this._fieldLevelEncryptionId = value; }

        /// <summary>Backing field for <see cref="ForwardedValue" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IForwardedValues _forwardedValue;

        /// <summary>
        /// This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
        /// For more information, see [Working with policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/working-with-policies.html)
        /// in the *Amazon CloudFront Developer Guide*. If you want to include values in the cache key, use a cache policy. For more
        /// information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
        /// in the *Amazon CloudFront Developer Guide*. If you want to send values to the origin but not include them in the cache
        /// key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
        /// or [Using the managed origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html)
        /// in the *Amazon CloudFront Developer Guide*. A ``DefaultCacheBehavior`` must include either a ``CachePolicyId`` or ``ForwardedValues``.
        /// We recommend that you use a ``CachePolicyId``. A complex type that specifies how CloudFront handles query strings, cookies,
        /// and HTTP headers. This field is deprecated. We recommend that you use a cache policy or an origin request policy instead
        /// of this field. If you want to include values in the cache key, use a cache policy. For more information, see [Creating
        /// cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// in the *Amazon CloudFront Developer Guide*. If you want to send values to the origin but not include them in the cache
        /// key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
        /// in the *Amazon CloudFront Developer Guide*. A complex type that specifies how CloudFront handles query strings, cookies,
        /// and HTTP headers.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IForwardedValues ForwardedValue { get => (this._forwardedValue = this._forwardedValue ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ForwardedValues()); set => this._forwardedValue = value; }

        /// <summary>
        /// This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
        /// If you want to include headers in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// in the *Amazon CloudFront Developer Guide*. If you want to send headers to the origin but not include them in the cache
        /// key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
        /// in the *Amazon CloudFront Developer Guide*. A complex type that specifies the ``Headers``, if any, that you want CloudFront
        /// to forward to the origin for this cache behavior (whitelisted headers). For the headers that you specify, CloudFront also
        /// caches separate versions of a specified object that is based on the header values in viewer requests. For more information,
        /// see [Caching Content Based on Request Headers](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/header-caching.html)
        /// in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string[] ForwardedValueHeader { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IForwardedValuesInternal)ForwardedValue).Header; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IForwardedValuesInternal)ForwardedValue).Header = value ?? null /* arrayOf */; }

        /// <summary>
        /// This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
        /// If you want to include query strings in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// in the *Amazon CloudFront Developer Guide*. If you want to send query strings to the origin but not include them in the
        /// cache key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
        /// in the *Amazon CloudFront Developer Guide*. Indicates whether you want CloudFront to forward query strings to the origin
        /// that is associated with this cache behavior and cache based on the query string parameters. CloudFront behavior depends
        /// on the value of ``QueryString`` and on the values that you specify for ``QueryStringCacheKeys``, if any: If you specify
        /// true for ``QueryString`` and you don't specify any values for ``QueryStringCacheKeys``, CloudFront forwards all query
        /// string parameters to the origin and caches based on all query string parameters. Depending on how many query string parameters
        /// and values you have, this can adversely affect performance because CloudFront must forward more requests to the origin.
        /// If you specify true for ``QueryString`` and you specify one or more values for ``QueryStringCacheKeys``, CloudFront forwards
        /// all query string parameters to the origin, but it only caches based on the query string parameters that you specify. If
        /// you specify false for ``QueryString``, CloudFront doesn't forward any query string parameters to the origin, and doesn't
        /// cache based on query string parameters. For more information, see [Configuring CloudFront to Cache Based on Query String
        /// Parameters](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/QueryStringParameters.html) in the *Amazon
        /// CloudFront Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? ForwardedValueQueryString { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IForwardedValuesInternal)ForwardedValue).QueryString; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IForwardedValuesInternal)ForwardedValue).QueryString = value ?? default(bool); }

        /// <summary>
        /// This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
        /// If you want to include query strings in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// in the *Amazon CloudFront Developer Guide*. If you want to send query strings to the origin but not include them in the
        /// cache key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
        /// in the *Amazon CloudFront Developer Guide*. A complex type that contains information about the query string parameters
        /// that you want CloudFront to use for caching for this cache behavior.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string[] ForwardedValueQueryStringCacheKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IForwardedValuesInternal)ForwardedValue).QueryStringCacheKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IForwardedValuesInternal)ForwardedValue).QueryStringCacheKey = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="FunctionAssociation" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IFunctionAssociation[] _functionAssociation;

        /// <summary>
        /// A list of CloudFront functions that are associated with this cache behavior. CloudFront functions must be published to
        /// the ``LIVE`` stage to associate them with a cache behavior.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IFunctionAssociation[] FunctionAssociation { get => this._functionAssociation; set => this._functionAssociation = value; }

        /// <summary>Backing field for <see cref="LambdaFunctionAssociation" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILambdaFunctionAssociation[] _lambdaFunctionAssociation;

        /// <summary>
        /// A complex type that contains zero or more Lambda@Edge function associations for a cache behavior.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILambdaFunctionAssociation[] LambdaFunctionAssociation { get => this._lambdaFunctionAssociation; set => this._lambdaFunctionAssociation = value; }

        /// <summary>Backing field for <see cref="MaxTtl" /> property.</summary>
        private int? _maxTtl;

        /// <summary>
        /// This field is deprecated. We recommend that you use the ``MaxTTL`` field in a cache policy instead of this field. For
        /// more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
        /// in the *Amazon CloudFront Developer Guide*. The maximum amount of time that you want objects to stay in CloudFront caches
        /// before CloudFront forwards another request to your origin to determine whether the object has been updated. The value
        /// that you specify applies only when your origin adds HTTP headers such as ``Cache-Control max-age``, ``Cache-Control s-maxage``,
        /// and ``Expires`` to objects. For more information, see [Managing How Long Content Stays in an Edge Cache (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html)
        /// in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? MaxTtl { get => this._maxTtl; set => this._maxTtl = value; }

        /// <summary>Internal Acessors for ForwardedValue</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IForwardedValues Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDefaultCacheBehaviorInternal.ForwardedValue { get => (this._forwardedValue = this._forwardedValue ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ForwardedValues()); set { {_forwardedValue = value;} } }

        /// <summary>Internal Acessors for ForwardedValueCooky</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICookies Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IDefaultCacheBehaviorInternal.ForwardedValueCooky { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IForwardedValuesInternal)ForwardedValue).Cooky; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IForwardedValuesInternal)ForwardedValue).Cooky = value; }

        /// <summary>Backing field for <see cref="MinTtl" /> property.</summary>
        private int? _minTtl;

        /// <summary>
        /// This field is deprecated. We recommend that you use the ``MinTTL`` field in a cache policy instead of this field. For
        /// more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
        /// in the *Amazon CloudFront Developer Guide*. The minimum amount of time that you want objects to stay in CloudFront caches
        /// before CloudFront forwards another request to your origin to determine whether the object has been updated. For more information,
        /// see [Managing How Long Content Stays in an Edge Cache (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html)
        /// in the *Amazon CloudFront Developer Guide*. You must specify ``0`` for ``MinTTL`` if you configure CloudFront to forward
        /// all headers to your origin (under ``Headers``, if you specify ``1`` for ``Quantity`` and ``*`` for ``Name``).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? MinTtl { get => this._minTtl; set => this._minTtl = value; }

        /// <summary>Backing field for <see cref="OriginRequestPolicyId" /> property.</summary>
        private string _originRequestPolicyId;

        /// <summary>
        /// The unique identifier of the origin request policy that is attached to the default cache behavior. For more information,
        /// see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
        /// or [Using the managed origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html)
        /// in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string OriginRequestPolicyId { get => this._originRequestPolicyId; set => this._originRequestPolicyId = value; }

        /// <summary>Backing field for <see cref="RealtimeLogConfigArn" /> property.</summary>
        private string _realtimeLogConfigArn;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the real-time log configuration that is attached to this cache behavior. For more information,
        /// see [Real-time logs](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html) in the *Amazon
        /// CloudFront Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string RealtimeLogConfigArn { get => this._realtimeLogConfigArn; set => this._realtimeLogConfigArn = value; }

        /// <summary>Backing field for <see cref="ResponseHeadersPolicyId" /> property.</summary>
        private string _responseHeadersPolicyId;

        /// <summary>The identifier for a response headers policy.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string ResponseHeadersPolicyId { get => this._responseHeadersPolicyId; set => this._responseHeadersPolicyId = value; }

        /// <summary>Backing field for <see cref="SmoothStreaming" /> property.</summary>
        private bool? _smoothStreaming;

        /// <summary>
        /// Indicates whether you want to distribute media files in the Microsoft Smooth Streaming format using the origin that is
        /// associated with this cache behavior. If so, specify ``true``; if not, specify ``false``. If you specify ``true`` for ``SmoothStreaming``,
        /// you can still distribute other content using this cache behavior if the content matches the value of ``PathPattern``.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public bool? SmoothStreaming { get => this._smoothStreaming; set => this._smoothStreaming = value; }

        /// <summary>Backing field for <see cref="TargetOriginId" /> property.</summary>
        private string _targetOriginId;

        /// <summary>
        /// The value of ``ID`` for the origin that you want CloudFront to route requests to when they use the default cache behavior.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string TargetOriginId { get => this._targetOriginId; set => this._targetOriginId = value; }

        /// <summary>Backing field for <see cref="TrustedKeyGroup" /> property.</summary>
        private string[] _trustedKeyGroup;

        /// <summary>
        /// A list of key groups that CloudFront can use to validate signed URLs or signed cookies. When a cache behavior contains
        /// trusted key groups, CloudFront requires signed URLs or signed cookies for all requests that match the cache behavior.
        /// The URLs or cookies must be signed with a private key whose corresponding public key is in the key group. The signed URL
        /// or cookie contains information about which public key CloudFront should use to verify the signature. For more information,
        /// see [Serving private content](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html)
        /// in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string[] TrustedKeyGroup { get => this._trustedKeyGroup; set => this._trustedKeyGroup = value; }

        /// <summary>Backing field for <see cref="TrustedSigner" /> property.</summary>
        private string[] _trustedSigner;

        /// <summary>
        /// We recommend using ``TrustedKeyGroups`` instead of ``TrustedSigners``. A list of AWS-account IDs whose public keys CloudFront
        /// can use to validate signed URLs or signed cookies. When a cache behavior contains trusted signers, CloudFront requires
        /// signed URLs or signed cookies for all requests that match the cache behavior. The URLs or cookies must be signed with
        /// the private key of a CloudFront key pair in a trusted signer's AWS-account. The signed URL or cookie contains information
        /// about which public key CloudFront should use to verify the signature. For more information, see [Serving private content](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html)
        /// in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string[] TrustedSigner { get => this._trustedSigner; set => this._trustedSigner = value; }

        /// <summary>Backing field for <see cref="ViewerProtocolPolicy" /> property.</summary>
        private string _viewerProtocolPolicy;

        /// <summary>
        /// The protocol that viewers can use to access the files in the origin specified by ``TargetOriginId`` when a request matches
        /// the path pattern in ``PathPattern``. You can specify the following options: + ``allow-all``: Viewers can use HTTP or HTTPS.
        /// + ``redirect-to-https``: If a viewer submits an HTTP request, CloudFront returns an HTTP status code of 301 (Moved Permanently)
        /// to the viewer along with the HTTPS URL. The viewer then resubmits the request using the new URL. + ``https-only``: If
        /// a viewer sends an HTTP request, CloudFront returns an HTTP status code of 403 (Forbidden). For more information about
        /// requiring the HTTPS protocol, see [Requiring HTTPS Between Viewers and CloudFront](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-viewers-to-cloudfront.html)
        /// in the *Amazon CloudFront Developer Guide*. The only way to guarantee that viewers retrieve an object that was fetched
        /// from the origin using HTTPS is never to use any other protocol to fetch the object. If you have recently changed from
        /// HTTP to HTTPS, we recommend that you clear your objects' cache because cached objects are protocol agnostic. That means
        /// that an edge location will return an object from the cache regardless of whether the current request protocol matches
        /// the protocol used previously. For more information, see [Managing Cache Expiration](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html)
        /// in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string ViewerProtocolPolicy { get => this._viewerProtocolPolicy; set => this._viewerProtocolPolicy = value; }

        /// <summary>Creates an new <see cref="DefaultCacheBehavior" /> instance.</summary>
        public DefaultCacheBehavior()
        {

        }
    }
    /// Definition of DefaultCacheBehavior
    public partial interface IDefaultCacheBehavior :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary>
        /// A complex type that controls which HTTP methods CloudFront processes and forwards to your Amazon S3 bucket or your custom
        /// origin. There are three choices: + CloudFront forwards only ``GET`` and ``HEAD`` requests. + CloudFront forwards only
        /// ``GET``, ``HEAD``, and ``OPTIONS`` requests. + CloudFront forwards ``GET, HEAD, OPTIONS, PUT, PATCH, POST``, and ``DELETE``
        /// requests. If you pick the third choice, you may need to restrict access to your Amazon S3 bucket or to your custom origin
        /// so users can't perform operations that you don't want them to. For example, you might not want users to have permissions
        /// to delete objects from your origin.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A complex type that controls which HTTP methods CloudFront processes and forwards to your Amazon S3 bucket or your custom origin. There are three choices:  +  CloudFront forwards only ``GET`` and ``HEAD`` requests.  +  CloudFront forwards only ``GET``, ``HEAD``, and ``OPTIONS`` requests.  +  CloudFront forwards ``GET, HEAD, OPTIONS, PUT, PATCH, POST``, and ``DELETE`` requests.   If you pick the third choice, you may need to restrict access to your Amazon S3 bucket or to your custom origin so users can't perform operations that you don't want them to. For example, you might not want users to have permissions to delete objects from your origin.",
        SerializedName = @"allowedMethods",
        PossibleTypes = new [] { typeof(string) })]
        string[] AllowedMethod { get; set; }
        /// <summary>
        /// The unique identifier of the cache policy that is attached to the default cache behavior. For more information, see [Creating
        /// cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
        /// in the *Amazon CloudFront Developer Guide*. A ``DefaultCacheBehavior`` must include either a ``CachePolicyId`` or ``ForwardedValues``.
        /// We recommend that you use a ``CachePolicyId``.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The unique identifier of the cache policy that is attached to the default cache behavior. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html) in the *Amazon CloudFront Developer Guide*. A ``DefaultCacheBehavior`` must include either a ``CachePolicyId`` or ``ForwardedValues``. We recommend that you use a ``CachePolicyId``.",
        SerializedName = @"cachePolicyId",
        PossibleTypes = new [] { typeof(string) })]
        string CachePolicyId { get; set; }
        /// <summary>
        /// A complex type that controls whether CloudFront caches the response to requests using the specified HTTP methods. There
        /// are two choices: + CloudFront caches responses to ``GET`` and ``HEAD`` requests. + CloudFront caches responses to ``GET``,
        /// ``HEAD``, and ``OPTIONS`` requests. If you pick the second choice for your Amazon S3 Origin, you may need to forward Access-Control-Request-Method,
        /// Access-Control-Request-Headers, and Origin headers for the responses to be cached correctly.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A complex type that controls whether CloudFront caches the response to requests using the specified HTTP methods. There are two choices:  +  CloudFront caches responses to ``GET`` and ``HEAD`` requests.  +  CloudFront caches responses to ``GET``, ``HEAD``, and ``OPTIONS`` requests.   If you pick the second choice for your Amazon S3 Origin, you may need to forward Access-Control-Request-Method, Access-Control-Request-Headers, and Origin headers for the responses to be cached correctly.",
        SerializedName = @"cachedMethods",
        PossibleTypes = new [] { typeof(string) })]
        string[] CachedMethod { get; set; }
        /// <summary>
        /// Whether you want CloudFront to automatically compress certain files for this cache behavior. If so, specify ``true``;
        /// if not, specify ``false``. For more information, see [Serving Compressed Files](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html)
        /// in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether you want CloudFront to automatically compress certain files for this cache behavior. If so, specify ``true``; if not, specify ``false``. For more information, see [Serving Compressed Files](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html) in the *Amazon CloudFront Developer Guide*.",
        SerializedName = @"compress",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Compress { get; set; }
        /// <summary>
        /// This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
        /// If you want to include cookies in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// in the *Amazon CloudFront Developer Guide*. If you want to send cookies to the origin but not include them in the cache
        /// key, use origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
        /// in the *Amazon CloudFront Developer Guide*. Specifies which cookies to forward to the origin for this cache behavior:
        /// all, none, or the list of cookies specified in the ``WhitelistedNames`` complex type. Amazon S3 doesn't process cookies.
        /// When the cache behavior is forwarding requests to an Amazon S3 origin, specify none for the ``Forward`` element.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field. If you want to include cookies in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) in the *Amazon CloudFront Developer Guide*. If you want to send cookies to the origin but not include them in the cache key, use origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) in the *Amazon CloudFront Developer Guide*. Specifies which cookies to forward to the origin for this cache behavior: all, none, or the list of cookies specified in the ``WhitelistedNames`` complex type. Amazon S3 doesn't process cookies. When the cache behavior is forwarding requests to an Amazon S3 origin, specify none for the ``Forward`` element.",
        SerializedName = @"forward",
        PossibleTypes = new [] { typeof(string) })]
        string CookyForward { get; set; }
        /// <summary>
        /// This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
        /// If you want to include cookies in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// in the *Amazon CloudFront Developer Guide*. If you want to send cookies to the origin but not include them in the cache
        /// key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
        /// in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field. If you want to include cookies in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) in the *Amazon CloudFront Developer Guide*. If you want to send cookies to the origin but not include them in the cache key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) in the *Amazon CloudFront Developer Guide*.",
        SerializedName = @"whitelistedNames",
        PossibleTypes = new [] { typeof(string) })]
        string[] CookyWhitelistedName { get; set; }
        /// <summary>
        /// This field is deprecated. We recommend that you use the ``DefaultTTL`` field in a cache policy instead of this field.
        /// For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
        /// in the *Amazon CloudFront Developer Guide*. The default amount of time that you want objects to stay in CloudFront caches
        /// before CloudFront forwards another request to your origin to determine whether the object has been updated. The value
        /// that you specify applies only when your origin does not add HTTP headers such as ``Cache-Control max-age``, ``Cache-Control
        /// s-maxage``, and ``Expires`` to objects. For more information, see [Managing How Long Content Stays in an Edge Cache (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html)
        /// in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This field is deprecated. We recommend that you use the ``DefaultTTL`` field in a cache policy instead of this field. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html) in the *Amazon CloudFront Developer Guide*. The default amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. The value that you specify applies only when your origin does not add HTTP headers such as ``Cache-Control max-age``, ``Cache-Control s-maxage``, and ``Expires`` to objects. For more information, see [Managing How Long Content Stays in an Edge Cache (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the *Amazon CloudFront Developer Guide*.",
        SerializedName = @"defaultTTL",
        PossibleTypes = new [] { typeof(int) })]
        int? DefaultTtl { get; set; }
        /// <summary>
        /// The value of ``ID`` for the field-level encryption configuration that you want CloudFront to use for encrypting specific
        /// fields of data for the default cache behavior.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The value of ``ID`` for the field-level encryption configuration that you want CloudFront to use for encrypting specific fields of data for the default cache behavior.",
        SerializedName = @"fieldLevelEncryptionId",
        PossibleTypes = new [] { typeof(string) })]
        string FieldLevelEncryptionId { get; set; }
        /// <summary>
        /// This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
        /// If you want to include headers in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// in the *Amazon CloudFront Developer Guide*. If you want to send headers to the origin but not include them in the cache
        /// key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
        /// in the *Amazon CloudFront Developer Guide*. A complex type that specifies the ``Headers``, if any, that you want CloudFront
        /// to forward to the origin for this cache behavior (whitelisted headers). For the headers that you specify, CloudFront also
        /// caches separate versions of a specified object that is based on the header values in viewer requests. For more information,
        /// see [Caching Content Based on Request Headers](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/header-caching.html)
        /// in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field. If you want to include headers in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) in the *Amazon CloudFront Developer Guide*. If you want to send headers to the origin but not include them in the cache key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) in the *Amazon CloudFront Developer Guide*. A complex type that specifies the ``Headers``, if any, that you want CloudFront to forward to the origin for this cache behavior (whitelisted headers). For the headers that you specify, CloudFront also caches separate versions of a specified object that is based on the header values in viewer requests. For more information, see [Caching Content Based on Request Headers](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/header-caching.html) in the *Amazon CloudFront Developer Guide*.",
        SerializedName = @"headers",
        PossibleTypes = new [] { typeof(string) })]
        string[] ForwardedValueHeader { get; set; }
        /// <summary>
        /// This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
        /// If you want to include query strings in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// in the *Amazon CloudFront Developer Guide*. If you want to send query strings to the origin but not include them in the
        /// cache key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
        /// in the *Amazon CloudFront Developer Guide*. Indicates whether you want CloudFront to forward query strings to the origin
        /// that is associated with this cache behavior and cache based on the query string parameters. CloudFront behavior depends
        /// on the value of ``QueryString`` and on the values that you specify for ``QueryStringCacheKeys``, if any: If you specify
        /// true for ``QueryString`` and you don't specify any values for ``QueryStringCacheKeys``, CloudFront forwards all query
        /// string parameters to the origin and caches based on all query string parameters. Depending on how many query string parameters
        /// and values you have, this can adversely affect performance because CloudFront must forward more requests to the origin.
        /// If you specify true for ``QueryString`` and you specify one or more values for ``QueryStringCacheKeys``, CloudFront forwards
        /// all query string parameters to the origin, but it only caches based on the query string parameters that you specify. If
        /// you specify false for ``QueryString``, CloudFront doesn't forward any query string parameters to the origin, and doesn't
        /// cache based on query string parameters. For more information, see [Configuring CloudFront to Cache Based on Query String
        /// Parameters](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/QueryStringParameters.html) in the *Amazon
        /// CloudFront Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field. If you want to include query strings in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) in the *Amazon CloudFront Developer Guide*. If you want to send query strings to the origin but not include them in the cache key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) in the *Amazon CloudFront Developer Guide*. Indicates whether you want CloudFront to forward query strings to the origin that is associated with this cache behavior and cache based on the query string parameters. CloudFront behavior depends on the value of ``QueryString`` and on the values that you specify for ``QueryStringCacheKeys``, if any: If you specify true for ``QueryString`` and you don't specify any values for ``QueryStringCacheKeys``, CloudFront forwards all query string parameters to the origin and caches based on all query string parameters. Depending on how many query string parameters and values you have, this can adversely affect performance because CloudFront must forward more requests to the origin. If you specify true for ``QueryString`` and you specify one or more values for ``QueryStringCacheKeys``, CloudFront forwards all query string parameters to the origin, but it only caches based on the query string parameters that you specify. If you specify false for ``QueryString``, CloudFront doesn't forward any query string parameters to the origin, and doesn't cache based on query string parameters. For more information, see [Configuring CloudFront to Cache Based on Query String Parameters](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/QueryStringParameters.html) in the *Amazon CloudFront Developer Guide*.",
        SerializedName = @"queryString",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ForwardedValueQueryString { get; set; }
        /// <summary>
        /// This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
        /// If you want to include query strings in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// in the *Amazon CloudFront Developer Guide*. If you want to send query strings to the origin but not include them in the
        /// cache key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
        /// in the *Amazon CloudFront Developer Guide*. A complex type that contains information about the query string parameters
        /// that you want CloudFront to use for caching for this cache behavior.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field. If you want to include query strings in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) in the *Amazon CloudFront Developer Guide*. If you want to send query strings to the origin but not include them in the cache key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) in the *Amazon CloudFront Developer Guide*. A complex type that contains information about the query string parameters that you want CloudFront to use for caching for this cache behavior.",
        SerializedName = @"queryStringCacheKeys",
        PossibleTypes = new [] { typeof(string) })]
        string[] ForwardedValueQueryStringCacheKey { get; set; }
        /// <summary>
        /// A list of CloudFront functions that are associated with this cache behavior. CloudFront functions must be published to
        /// the ``LIVE`` stage to associate them with a cache behavior.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A list of CloudFront functions that are associated with this cache behavior. CloudFront functions must be published to the ``LIVE`` stage to associate them with a cache behavior.",
        SerializedName = @"functionAssociations",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IFunctionAssociation) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IFunctionAssociation[] FunctionAssociation { get; set; }
        /// <summary>
        /// A complex type that contains zero or more Lambda@Edge function associations for a cache behavior.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A complex type that contains zero or more Lambda@Edge function associations for a cache behavior.",
        SerializedName = @"lambdaFunctionAssociations",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILambdaFunctionAssociation) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILambdaFunctionAssociation[] LambdaFunctionAssociation { get; set; }
        /// <summary>
        /// This field is deprecated. We recommend that you use the ``MaxTTL`` field in a cache policy instead of this field. For
        /// more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
        /// in the *Amazon CloudFront Developer Guide*. The maximum amount of time that you want objects to stay in CloudFront caches
        /// before CloudFront forwards another request to your origin to determine whether the object has been updated. The value
        /// that you specify applies only when your origin adds HTTP headers such as ``Cache-Control max-age``, ``Cache-Control s-maxage``,
        /// and ``Expires`` to objects. For more information, see [Managing How Long Content Stays in an Edge Cache (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html)
        /// in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This field is deprecated. We recommend that you use the ``MaxTTL`` field in a cache policy instead of this field. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html) in the *Amazon CloudFront Developer Guide*. The maximum amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. The value that you specify applies only when your origin adds HTTP headers such as ``Cache-Control max-age``, ``Cache-Control s-maxage``, and ``Expires`` to objects. For more information, see [Managing How Long Content Stays in an Edge Cache (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the *Amazon CloudFront Developer Guide*.",
        SerializedName = @"maxTTL",
        PossibleTypes = new [] { typeof(int) })]
        int? MaxTtl { get; set; }
        /// <summary>
        /// This field is deprecated. We recommend that you use the ``MinTTL`` field in a cache policy instead of this field. For
        /// more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
        /// in the *Amazon CloudFront Developer Guide*. The minimum amount of time that you want objects to stay in CloudFront caches
        /// before CloudFront forwards another request to your origin to determine whether the object has been updated. For more information,
        /// see [Managing How Long Content Stays in an Edge Cache (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html)
        /// in the *Amazon CloudFront Developer Guide*. You must specify ``0`` for ``MinTTL`` if you configure CloudFront to forward
        /// all headers to your origin (under ``Headers``, if you specify ``1`` for ``Quantity`` and ``*`` for ``Name``).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This field is deprecated. We recommend that you use the ``MinTTL`` field in a cache policy instead of this field. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html) in the *Amazon CloudFront Developer Guide*. The minimum amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. For more information, see [Managing How Long Content Stays in an Edge Cache (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the *Amazon CloudFront Developer Guide*. You must specify ``0`` for ``MinTTL`` if you configure CloudFront to forward all headers to your origin (under ``Headers``, if you specify ``1`` for ``Quantity`` and ``*`` for ``Name``).",
        SerializedName = @"minTTL",
        PossibleTypes = new [] { typeof(int) })]
        int? MinTtl { get; set; }
        /// <summary>
        /// The unique identifier of the origin request policy that is attached to the default cache behavior. For more information,
        /// see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
        /// or [Using the managed origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html)
        /// in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The unique identifier of the origin request policy that is attached to the default cache behavior. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) or [Using the managed origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html) in the *Amazon CloudFront Developer Guide*.",
        SerializedName = @"originRequestPolicyId",
        PossibleTypes = new [] { typeof(string) })]
        string OriginRequestPolicyId { get; set; }
        /// <summary>
        /// The Amazon Resource Name (ARN) of the real-time log configuration that is attached to this cache behavior. For more information,
        /// see [Real-time logs](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html) in the *Amazon
        /// CloudFront Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Amazon Resource Name (ARN) of the real-time log configuration that is attached to this cache behavior. For more information, see [Real-time logs](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html) in the *Amazon CloudFront Developer Guide*.",
        SerializedName = @"realtimeLogConfigArn",
        PossibleTypes = new [] { typeof(string) })]
        string RealtimeLogConfigArn { get; set; }
        /// <summary>The identifier for a response headers policy.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The identifier for a response headers policy.",
        SerializedName = @"responseHeadersPolicyId",
        PossibleTypes = new [] { typeof(string) })]
        string ResponseHeadersPolicyId { get; set; }
        /// <summary>
        /// Indicates whether you want to distribute media files in the Microsoft Smooth Streaming format using the origin that is
        /// associated with this cache behavior. If so, specify ``true``; if not, specify ``false``. If you specify ``true`` for ``SmoothStreaming``,
        /// you can still distribute other content using this cache behavior if the content matches the value of ``PathPattern``.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether you want to distribute media files in the Microsoft Smooth Streaming format using the origin that is associated with this cache behavior. If so, specify ``true``; if not, specify ``false``. If you specify ``true`` for ``SmoothStreaming``, you can still distribute other content using this cache behavior if the content matches the value of ``PathPattern``.",
        SerializedName = @"smoothStreaming",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SmoothStreaming { get; set; }
        /// <summary>
        /// The value of ``ID`` for the origin that you want CloudFront to route requests to when they use the default cache behavior.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The value of ``ID`` for the origin that you want CloudFront to route requests to when they use the default cache behavior.",
        SerializedName = @"targetOriginId",
        PossibleTypes = new [] { typeof(string) })]
        string TargetOriginId { get; set; }
        /// <summary>
        /// A list of key groups that CloudFront can use to validate signed URLs or signed cookies. When a cache behavior contains
        /// trusted key groups, CloudFront requires signed URLs or signed cookies for all requests that match the cache behavior.
        /// The URLs or cookies must be signed with a private key whose corresponding public key is in the key group. The signed URL
        /// or cookie contains information about which public key CloudFront should use to verify the signature. For more information,
        /// see [Serving private content](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html)
        /// in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A list of key groups that CloudFront can use to validate signed URLs or signed cookies. When a cache behavior contains trusted key groups, CloudFront requires signed URLs or signed cookies for all requests that match the cache behavior. The URLs or cookies must be signed with a private key whose corresponding public key is in the key group. The signed URL or cookie contains information about which public key CloudFront should use to verify the signature. For more information, see [Serving private content](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html) in the *Amazon CloudFront Developer Guide*.",
        SerializedName = @"trustedKeyGroups",
        PossibleTypes = new [] { typeof(string) })]
        string[] TrustedKeyGroup { get; set; }
        /// <summary>
        /// We recommend using ``TrustedKeyGroups`` instead of ``TrustedSigners``. A list of AWS-account IDs whose public keys CloudFront
        /// can use to validate signed URLs or signed cookies. When a cache behavior contains trusted signers, CloudFront requires
        /// signed URLs or signed cookies for all requests that match the cache behavior. The URLs or cookies must be signed with
        /// the private key of a CloudFront key pair in a trusted signer's AWS-account. The signed URL or cookie contains information
        /// about which public key CloudFront should use to verify the signature. For more information, see [Serving private content](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html)
        /// in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"We recommend using ``TrustedKeyGroups`` instead of ``TrustedSigners``.  A list of AWS-account IDs whose public keys CloudFront can use to validate signed URLs or signed cookies. When a cache behavior contains trusted signers, CloudFront requires signed URLs or signed cookies for all requests that match the cache behavior. The URLs or cookies must be signed with the private key of a CloudFront key pair in a trusted signer's AWS-account. The signed URL or cookie contains information about which public key CloudFront should use to verify the signature. For more information, see [Serving private content](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html) in the *Amazon CloudFront Developer Guide*.",
        SerializedName = @"trustedSigners",
        PossibleTypes = new [] { typeof(string) })]
        string[] TrustedSigner { get; set; }
        /// <summary>
        /// The protocol that viewers can use to access the files in the origin specified by ``TargetOriginId`` when a request matches
        /// the path pattern in ``PathPattern``. You can specify the following options: + ``allow-all``: Viewers can use HTTP or HTTPS.
        /// + ``redirect-to-https``: If a viewer submits an HTTP request, CloudFront returns an HTTP status code of 301 (Moved Permanently)
        /// to the viewer along with the HTTPS URL. The viewer then resubmits the request using the new URL. + ``https-only``: If
        /// a viewer sends an HTTP request, CloudFront returns an HTTP status code of 403 (Forbidden). For more information about
        /// requiring the HTTPS protocol, see [Requiring HTTPS Between Viewers and CloudFront](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-viewers-to-cloudfront.html)
        /// in the *Amazon CloudFront Developer Guide*. The only way to guarantee that viewers retrieve an object that was fetched
        /// from the origin using HTTPS is never to use any other protocol to fetch the object. If you have recently changed from
        /// HTTP to HTTPS, we recommend that you clear your objects' cache because cached objects are protocol agnostic. That means
        /// that an edge location will return an object from the cache regardless of whether the current request protocol matches
        /// the protocol used previously. For more information, see [Managing Cache Expiration](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html)
        /// in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The protocol that viewers can use to access the files in the origin specified by ``TargetOriginId`` when a request matches the path pattern in ``PathPattern``. You can specify the following options:  +   ``allow-all``: Viewers can use HTTP or HTTPS.  +   ``redirect-to-https``: If a viewer submits an HTTP request, CloudFront returns an HTTP status code of 301 (Moved Permanently) to the viewer along with the HTTPS URL. The viewer then resubmits the request using the new URL.  +   ``https-only``: If a viewer sends an HTTP request, CloudFront returns an HTTP status code of 403 (Forbidden).   For more information about requiring the HTTPS protocol, see [Requiring HTTPS Between Viewers and CloudFront](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-viewers-to-cloudfront.html) in the *Amazon CloudFront Developer Guide*.  The only way to guarantee that viewers retrieve an object that was fetched from the origin using HTTPS is never to use any other protocol to fetch the object. If you have recently changed from HTTP to HTTPS, we recommend that you clear your objects' cache because cached objects are protocol agnostic. That means that an edge location will return an object from the cache regardless of whether the current request protocol matches the protocol used previously. For more information, see [Managing Cache Expiration](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the *Amazon CloudFront Developer Guide*.",
        SerializedName = @"viewerProtocolPolicy",
        PossibleTypes = new [] { typeof(string) })]
        string ViewerProtocolPolicy { get; set; }

    }
    /// Definition of DefaultCacheBehavior
    internal partial interface IDefaultCacheBehaviorInternal

    {
        /// <summary>
        /// A complex type that controls which HTTP methods CloudFront processes and forwards to your Amazon S3 bucket or your custom
        /// origin. There are three choices: + CloudFront forwards only ``GET`` and ``HEAD`` requests. + CloudFront forwards only
        /// ``GET``, ``HEAD``, and ``OPTIONS`` requests. + CloudFront forwards ``GET, HEAD, OPTIONS, PUT, PATCH, POST``, and ``DELETE``
        /// requests. If you pick the third choice, you may need to restrict access to your Amazon S3 bucket or to your custom origin
        /// so users can't perform operations that you don't want them to. For example, you might not want users to have permissions
        /// to delete objects from your origin.
        /// </summary>
        string[] AllowedMethod { get; set; }
        /// <summary>
        /// The unique identifier of the cache policy that is attached to the default cache behavior. For more information, see [Creating
        /// cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
        /// in the *Amazon CloudFront Developer Guide*. A ``DefaultCacheBehavior`` must include either a ``CachePolicyId`` or ``ForwardedValues``.
        /// We recommend that you use a ``CachePolicyId``.
        /// </summary>
        string CachePolicyId { get; set; }
        /// <summary>
        /// A complex type that controls whether CloudFront caches the response to requests using the specified HTTP methods. There
        /// are two choices: + CloudFront caches responses to ``GET`` and ``HEAD`` requests. + CloudFront caches responses to ``GET``,
        /// ``HEAD``, and ``OPTIONS`` requests. If you pick the second choice for your Amazon S3 Origin, you may need to forward Access-Control-Request-Method,
        /// Access-Control-Request-Headers, and Origin headers for the responses to be cached correctly.
        /// </summary>
        string[] CachedMethod { get; set; }
        /// <summary>
        /// Whether you want CloudFront to automatically compress certain files for this cache behavior. If so, specify ``true``;
        /// if not, specify ``false``. For more information, see [Serving Compressed Files](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html)
        /// in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        bool? Compress { get; set; }
        /// <summary>
        /// This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
        /// If you want to include cookies in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// in the *Amazon CloudFront Developer Guide*. If you want to send cookies to the origin but not include them in the cache
        /// key, use origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
        /// in the *Amazon CloudFront Developer Guide*. Specifies which cookies to forward to the origin for this cache behavior:
        /// all, none, or the list of cookies specified in the ``WhitelistedNames`` complex type. Amazon S3 doesn't process cookies.
        /// When the cache behavior is forwarding requests to an Amazon S3 origin, specify none for the ``Forward`` element.
        /// </summary>
        string CookyForward { get; set; }
        /// <summary>
        /// This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
        /// If you want to include cookies in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// in the *Amazon CloudFront Developer Guide*. If you want to send cookies to the origin but not include them in the cache
        /// key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
        /// in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        string[] CookyWhitelistedName { get; set; }
        /// <summary>
        /// This field is deprecated. We recommend that you use the ``DefaultTTL`` field in a cache policy instead of this field.
        /// For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
        /// in the *Amazon CloudFront Developer Guide*. The default amount of time that you want objects to stay in CloudFront caches
        /// before CloudFront forwards another request to your origin to determine whether the object has been updated. The value
        /// that you specify applies only when your origin does not add HTTP headers such as ``Cache-Control max-age``, ``Cache-Control
        /// s-maxage``, and ``Expires`` to objects. For more information, see [Managing How Long Content Stays in an Edge Cache (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html)
        /// in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        int? DefaultTtl { get; set; }
        /// <summary>
        /// The value of ``ID`` for the field-level encryption configuration that you want CloudFront to use for encrypting specific
        /// fields of data for the default cache behavior.
        /// </summary>
        string FieldLevelEncryptionId { get; set; }
        /// <summary>
        /// This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
        /// For more information, see [Working with policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/working-with-policies.html)
        /// in the *Amazon CloudFront Developer Guide*. If you want to include values in the cache key, use a cache policy. For more
        /// information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
        /// in the *Amazon CloudFront Developer Guide*. If you want to send values to the origin but not include them in the cache
        /// key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
        /// or [Using the managed origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html)
        /// in the *Amazon CloudFront Developer Guide*. A ``DefaultCacheBehavior`` must include either a ``CachePolicyId`` or ``ForwardedValues``.
        /// We recommend that you use a ``CachePolicyId``. A complex type that specifies how CloudFront handles query strings, cookies,
        /// and HTTP headers. This field is deprecated. We recommend that you use a cache policy or an origin request policy instead
        /// of this field. If you want to include values in the cache key, use a cache policy. For more information, see [Creating
        /// cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// in the *Amazon CloudFront Developer Guide*. If you want to send values to the origin but not include them in the cache
        /// key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
        /// in the *Amazon CloudFront Developer Guide*. A complex type that specifies how CloudFront handles query strings, cookies,
        /// and HTTP headers.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IForwardedValues ForwardedValue { get; set; }
        /// <summary>
        /// This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
        /// If you want to include cookies in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// in the *Amazon CloudFront Developer Guide*. If you want to send cookies to the origin but not include them in the cache
        /// key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
        /// in the *Amazon CloudFront Developer Guide*. A complex type that specifies whether you want CloudFront to forward cookies
        /// to the origin and, if so, which ones. For more information about forwarding cookies to the origin, see [How CloudFront
        /// Forwards, Caches, and Logs Cookies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Cookies.html) in
        /// the *Amazon CloudFront Developer Guide*. This field is deprecated. We recommend that you use a cache policy or an origin
        /// request policy instead of this field. If you want to include cookies in the cache key, use a cache policy. For more information,
        /// see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// in the *Amazon CloudFront Developer Guide*. If you want to send cookies to the origin but not include them in the cache
        /// key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
        /// in the *Amazon CloudFront Developer Guide*. A complex type that specifies whether you want CloudFront to forward cookies
        /// to the origin and, if so, which ones. For more information about forwarding cookies to the origin, see [How CloudFront
        /// Forwards, Caches, and Logs Cookies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Cookies.html) in
        /// the *Amazon CloudFront Developer Guide*.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICookies ForwardedValueCooky { get; set; }
        /// <summary>
        /// This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
        /// If you want to include headers in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// in the *Amazon CloudFront Developer Guide*. If you want to send headers to the origin but not include them in the cache
        /// key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
        /// in the *Amazon CloudFront Developer Guide*. A complex type that specifies the ``Headers``, if any, that you want CloudFront
        /// to forward to the origin for this cache behavior (whitelisted headers). For the headers that you specify, CloudFront also
        /// caches separate versions of a specified object that is based on the header values in viewer requests. For more information,
        /// see [Caching Content Based on Request Headers](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/header-caching.html)
        /// in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        string[] ForwardedValueHeader { get; set; }
        /// <summary>
        /// This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
        /// If you want to include query strings in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// in the *Amazon CloudFront Developer Guide*. If you want to send query strings to the origin but not include them in the
        /// cache key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
        /// in the *Amazon CloudFront Developer Guide*. Indicates whether you want CloudFront to forward query strings to the origin
        /// that is associated with this cache behavior and cache based on the query string parameters. CloudFront behavior depends
        /// on the value of ``QueryString`` and on the values that you specify for ``QueryStringCacheKeys``, if any: If you specify
        /// true for ``QueryString`` and you don't specify any values for ``QueryStringCacheKeys``, CloudFront forwards all query
        /// string parameters to the origin and caches based on all query string parameters. Depending on how many query string parameters
        /// and values you have, this can adversely affect performance because CloudFront must forward more requests to the origin.
        /// If you specify true for ``QueryString`` and you specify one or more values for ``QueryStringCacheKeys``, CloudFront forwards
        /// all query string parameters to the origin, but it only caches based on the query string parameters that you specify. If
        /// you specify false for ``QueryString``, CloudFront doesn't forward any query string parameters to the origin, and doesn't
        /// cache based on query string parameters. For more information, see [Configuring CloudFront to Cache Based on Query String
        /// Parameters](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/QueryStringParameters.html) in the *Amazon
        /// CloudFront Developer Guide*.
        /// </summary>
        bool? ForwardedValueQueryString { get; set; }
        /// <summary>
        /// This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
        /// If you want to include query strings in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// in the *Amazon CloudFront Developer Guide*. If you want to send query strings to the origin but not include them in the
        /// cache key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
        /// in the *Amazon CloudFront Developer Guide*. A complex type that contains information about the query string parameters
        /// that you want CloudFront to use for caching for this cache behavior.
        /// </summary>
        string[] ForwardedValueQueryStringCacheKey { get; set; }
        /// <summary>
        /// A list of CloudFront functions that are associated with this cache behavior. CloudFront functions must be published to
        /// the ``LIVE`` stage to associate them with a cache behavior.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IFunctionAssociation[] FunctionAssociation { get; set; }
        /// <summary>
        /// A complex type that contains zero or more Lambda@Edge function associations for a cache behavior.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILambdaFunctionAssociation[] LambdaFunctionAssociation { get; set; }
        /// <summary>
        /// This field is deprecated. We recommend that you use the ``MaxTTL`` field in a cache policy instead of this field. For
        /// more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
        /// in the *Amazon CloudFront Developer Guide*. The maximum amount of time that you want objects to stay in CloudFront caches
        /// before CloudFront forwards another request to your origin to determine whether the object has been updated. The value
        /// that you specify applies only when your origin adds HTTP headers such as ``Cache-Control max-age``, ``Cache-Control s-maxage``,
        /// and ``Expires`` to objects. For more information, see [Managing How Long Content Stays in an Edge Cache (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html)
        /// in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        int? MaxTtl { get; set; }
        /// <summary>
        /// This field is deprecated. We recommend that you use the ``MinTTL`` field in a cache policy instead of this field. For
        /// more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
        /// or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
        /// in the *Amazon CloudFront Developer Guide*. The minimum amount of time that you want objects to stay in CloudFront caches
        /// before CloudFront forwards another request to your origin to determine whether the object has been updated. For more information,
        /// see [Managing How Long Content Stays in an Edge Cache (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html)
        /// in the *Amazon CloudFront Developer Guide*. You must specify ``0`` for ``MinTTL`` if you configure CloudFront to forward
        /// all headers to your origin (under ``Headers``, if you specify ``1`` for ``Quantity`` and ``*`` for ``Name``).
        /// </summary>
        int? MinTtl { get; set; }
        /// <summary>
        /// The unique identifier of the origin request policy that is attached to the default cache behavior. For more information,
        /// see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
        /// or [Using the managed origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html)
        /// in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        string OriginRequestPolicyId { get; set; }
        /// <summary>
        /// The Amazon Resource Name (ARN) of the real-time log configuration that is attached to this cache behavior. For more information,
        /// see [Real-time logs](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html) in the *Amazon
        /// CloudFront Developer Guide*.
        /// </summary>
        string RealtimeLogConfigArn { get; set; }
        /// <summary>The identifier for a response headers policy.</summary>
        string ResponseHeadersPolicyId { get; set; }
        /// <summary>
        /// Indicates whether you want to distribute media files in the Microsoft Smooth Streaming format using the origin that is
        /// associated with this cache behavior. If so, specify ``true``; if not, specify ``false``. If you specify ``true`` for ``SmoothStreaming``,
        /// you can still distribute other content using this cache behavior if the content matches the value of ``PathPattern``.
        /// </summary>
        bool? SmoothStreaming { get; set; }
        /// <summary>
        /// The value of ``ID`` for the origin that you want CloudFront to route requests to when they use the default cache behavior.
        /// </summary>
        string TargetOriginId { get; set; }
        /// <summary>
        /// A list of key groups that CloudFront can use to validate signed URLs or signed cookies. When a cache behavior contains
        /// trusted key groups, CloudFront requires signed URLs or signed cookies for all requests that match the cache behavior.
        /// The URLs or cookies must be signed with a private key whose corresponding public key is in the key group. The signed URL
        /// or cookie contains information about which public key CloudFront should use to verify the signature. For more information,
        /// see [Serving private content](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html)
        /// in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        string[] TrustedKeyGroup { get; set; }
        /// <summary>
        /// We recommend using ``TrustedKeyGroups`` instead of ``TrustedSigners``. A list of AWS-account IDs whose public keys CloudFront
        /// can use to validate signed URLs or signed cookies. When a cache behavior contains trusted signers, CloudFront requires
        /// signed URLs or signed cookies for all requests that match the cache behavior. The URLs or cookies must be signed with
        /// the private key of a CloudFront key pair in a trusted signer's AWS-account. The signed URL or cookie contains information
        /// about which public key CloudFront should use to verify the signature. For more information, see [Serving private content](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html)
        /// in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        string[] TrustedSigner { get; set; }
        /// <summary>
        /// The protocol that viewers can use to access the files in the origin specified by ``TargetOriginId`` when a request matches
        /// the path pattern in ``PathPattern``. You can specify the following options: + ``allow-all``: Viewers can use HTTP or HTTPS.
        /// + ``redirect-to-https``: If a viewer submits an HTTP request, CloudFront returns an HTTP status code of 301 (Moved Permanently)
        /// to the viewer along with the HTTPS URL. The viewer then resubmits the request using the new URL. + ``https-only``: If
        /// a viewer sends an HTTP request, CloudFront returns an HTTP status code of 403 (Forbidden). For more information about
        /// requiring the HTTPS protocol, see [Requiring HTTPS Between Viewers and CloudFront](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-viewers-to-cloudfront.html)
        /// in the *Amazon CloudFront Developer Guide*. The only way to guarantee that viewers retrieve an object that was fetched
        /// from the origin using HTTPS is never to use any other protocol to fetch the object. If you have recently changed from
        /// HTTP to HTTPS, we recommend that you clear your objects' cache because cached objects are protocol agnostic. That means
        /// that an edge location will return an object from the cache regardless of whether the current request protocol matches
        /// the protocol used previously. For more information, see [Managing Cache Expiration](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html)
        /// in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        string ViewerProtocolPolicy { get; set; }

    }
}