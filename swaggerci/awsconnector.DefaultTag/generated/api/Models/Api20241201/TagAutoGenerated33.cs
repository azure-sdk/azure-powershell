// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of Tag</summary>
    public partial class TagAutoGenerated33 :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated33,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated33Internal
    {

        /// <summary>Backing field for <see cref="Key" /> property.</summary>
        private string _key;

        /// <summary>
        /// The key name that can be used to look up or retrieve the associated value. For example, ``Department`` or ``Cost Center``
        /// are common choices.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string Key { get => this._key; set => this._key = value; }

        /// <summary>Backing field for <see cref="Value" /> property.</summary>
        private string _value;

        /// <summary>
        /// The value associated with this tag. For example, tags with a key name of ``Department`` could have values such as ``Human
        /// Resources``, ``Accounting``, and ``Support``. Tags with a key name of ``Cost Center`` might have values that consist of
        /// the number associated with the different cost centers in your company. Typically, many resources have tags with the same
        /// key name but with different values. AWS always interprets the tag ``Value`` as a single string. If you need to store an
        /// array, you can store comma-separated values in the string. However, you must interpret the value in your code.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string Value { get => this._value; set => this._value = value; }

        /// <summary>Creates an new <see cref="TagAutoGenerated33" /> instance.</summary>
        public TagAutoGenerated33()
        {

        }
    }
    /// Definition of Tag
    public partial interface ITagAutoGenerated33 :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The key name that can be used to look up or retrieve the associated value. For example, ``Department`` or ``Cost Center``
        /// are common choices.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The key name that can be used to look up or retrieve the associated value. For example, ``Department`` or ``Cost Center`` are common choices.",
        SerializedName = @"key",
        PossibleTypes = new [] { typeof(string) })]
        string Key { get; set; }
        /// <summary>
        /// The value associated with this tag. For example, tags with a key name of ``Department`` could have values such as ``Human
        /// Resources``, ``Accounting``, and ``Support``. Tags with a key name of ``Cost Center`` might have values that consist of
        /// the number associated with the different cost centers in your company. Typically, many resources have tags with the same
        /// key name but with different values. AWS always interprets the tag ``Value`` as a single string. If you need to store an
        /// array, you can store comma-separated values in the string. However, you must interpret the value in your code.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The value associated with this tag. For example, tags with a key name of ``Department`` could have values such as ``Human Resources``, ``Accounting``, and ``Support``. Tags with a key name of ``Cost Center`` might have values that consist of the number associated with the different cost centers in your company. Typically, many resources have tags with the same key name but with different values.   AWS always interprets the tag ``Value`` as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(string) })]
        string Value { get; set; }

    }
    /// Definition of Tag
    internal partial interface ITagAutoGenerated33Internal

    {
        /// <summary>
        /// The key name that can be used to look up or retrieve the associated value. For example, ``Department`` or ``Cost Center``
        /// are common choices.
        /// </summary>
        string Key { get; set; }
        /// <summary>
        /// The value associated with this tag. For example, tags with a key name of ``Department`` could have values such as ``Human
        /// Resources``, ``Accounting``, and ``Support``. Tags with a key name of ``Cost Center`` might have values that consist of
        /// the number associated with the different cost centers in your company. Typically, many resources have tags with the same
        /// key name but with different values. AWS always interprets the tag ``Value`` as a single string. If you need to store an
        /// array, you can store comma-separated values in the string. However, you must interpret the value in your code.
        /// </summary>
        string Value { get; set; }

    }
}