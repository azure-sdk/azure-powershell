// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of awsAcmCertificateSummary</summary>
    public partial class AwsAcmCertificateSummaryProperties :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryProperties,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal
    {

        /// <summary>Backing field for <see cref="CertificateArn" /> property.</summary>
        private string _certificateArn;

        /// <summary>
        /// <p>Amazon Resource Name (ARN) of the certificate. This is of the form:</p> <p> <code>arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012</code>
        /// </p> <p>For more information about ARNs, see <a href='https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html'>Amazon
        /// Resource Names (ARNs)</a>.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string CertificateArn { get => this._certificateArn; set => this._certificateArn = value; }

        /// <summary>Backing field for <see cref="CreatedAt" /> property.</summary>
        private global::System.DateTime? _createdAt;

        /// <summary><p>The time at which the certificate was requested.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public global::System.DateTime? CreatedAt { get => this._createdAt; set => this._createdAt = value; }

        /// <summary>Backing field for <see cref="DomainName" /> property.</summary>
        private string _domainName;

        /// <summary>
        /// <p>Fully qualified domain name (FQDN), such as www.example.com or example.com, for the certificate.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string DomainName { get => this._domainName; set => this._domainName = value; }

        /// <summary>Backing field for <see cref="Exported" /> property.</summary>
        private bool? _exported;

        /// <summary>
        /// <p>Indicates whether the certificate has been exported. This value exists only when the certificate type is <code>PRIVATE</code>.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public bool? Exported { get => this._exported; set => this._exported = value; }

        /// <summary>Backing field for <see cref="ExtendedKeyUsage" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ExtendedKeyUsageName[] _extendedKeyUsage;

        /// <summary>
        /// <p>Contains a list of Extended Key Usage X.509 v3 extension objects. Each object specifies a purpose for which the certificate
        /// public key can be used and consists of a name and an object identifier (OID). </p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ExtendedKeyUsageName[] ExtendedKeyUsage { get => this._extendedKeyUsage; set => this._extendedKeyUsage = value; }

        /// <summary>Backing field for <see cref="HasAdditionalSubjectAlternativeName" /> property.</summary>
        private bool? _hasAdditionalSubjectAlternativeName;

        /// <summary>
        /// <p>When called by <a href='https://docs.aws.amazon.com/acm/latestAPIReference/API_ListCertificates.html'>ListCertificates</a>,
        /// indicates whether the full list of subject alternative names has been included in the response. If false, the response
        /// includes all of the subject alternative names included in the certificate. If true, the response only includes the first
        /// 100 subject alternative names included in the certificate. To display the full list of subject alternative names, use
        /// <a href='https://docs.aws.amazon.com/acm/latestAPIReference/API_DescribeCertificate.html'>DescribeCertificate</a>.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public bool? HasAdditionalSubjectAlternativeName { get => this._hasAdditionalSubjectAlternativeName; set => this._hasAdditionalSubjectAlternativeName = value; }

        /// <summary>Backing field for <see cref="ImportedAt" /> property.</summary>
        private global::System.DateTime? _importedAt;

        /// <summary>
        /// <p>The date and time when the certificate was imported. This value exists only when the certificate type is <code>IMPORTED</code>.
        /// </p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public global::System.DateTime? ImportedAt { get => this._importedAt; set => this._importedAt = value; }

        /// <summary>Backing field for <see cref="InUse" /> property.</summary>
        private bool? _inUse;

        /// <summary>
        /// <p>Indicates whether the certificate is currently in use by any Amazon Web Services resources.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public bool? InUse { get => this._inUse; set => this._inUse = value; }

        /// <summary>Backing field for <see cref="IssuedAt" /> property.</summary>
        private global::System.DateTime? _issuedAt;

        /// <summary>
        /// <p>The time at which the certificate was issued. This value exists only when the certificate type is <code>AMAZON_ISSUED</code>.
        /// </p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public global::System.DateTime? IssuedAt { get => this._issuedAt; set => this._issuedAt = value; }

        /// <summary>Backing field for <see cref="KeyAlgorithm" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IKeyAlgorithmEnumValue _keyAlgorithm;

        /// <summary><p>The algorithm that was used to generate the public-private key pair.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IKeyAlgorithmEnumValue KeyAlgorithm { get => (this._keyAlgorithm = this._keyAlgorithm ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.KeyAlgorithmEnumValue()); set => this._keyAlgorithm = value; }

        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.KeyAlgorithm? KeyAlgorithmValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IKeyAlgorithmEnumValueInternal)KeyAlgorithm).Value; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IKeyAlgorithmEnumValueInternal)KeyAlgorithm).Value = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.KeyAlgorithm)""); }

        /// <summary>Backing field for <see cref="KeyUsage" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.KeyUsageName[] _keyUsage;

        /// <summary>
        /// <p>A list of Key Usage X.509 v3 extension objects. Each object is a string value that identifies the purpose of the public
        /// key contained in the certificate. Possible extension values include DIGITAL_SIGNATURE, KEY_ENCHIPHERMENT, NON_REPUDIATION,
        /// and more.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.KeyUsageName[] KeyUsage { get => this._keyUsage; set => this._keyUsage = value; }

        /// <summary>Internal Acessors for KeyAlgorithm</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IKeyAlgorithmEnumValue Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal.KeyAlgorithm { get => (this._keyAlgorithm = this._keyAlgorithm ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.KeyAlgorithmEnumValue()); set { {_keyAlgorithm = value;} } }

        /// <summary>Internal Acessors for RenewalEligibility</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IRenewalEligibilityEnumValue Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal.RenewalEligibility { get => (this._renewalEligibility = this._renewalEligibility ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.RenewalEligibilityEnumValue()); set { {_renewalEligibility = value;} } }

        /// <summary>Internal Acessors for Status</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICertificateStatusEnumValue Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal.Status { get => (this._status = this._status ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.CertificateStatusEnumValue()); set { {_status = value;} } }

        /// <summary>Internal Acessors for Type</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICertificateTypeEnumValue Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal.Type { get => (this._type = this._type ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.CertificateTypeEnumValue()); set { {_type = value;} } }

        /// <summary>Backing field for <see cref="NotAfter" /> property.</summary>
        private global::System.DateTime? _notAfter;

        /// <summary><p>The time after which the certificate is not valid.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public global::System.DateTime? NotAfter { get => this._notAfter; set => this._notAfter = value; }

        /// <summary>Backing field for <see cref="NotBefore" /> property.</summary>
        private global::System.DateTime? _notBefore;

        /// <summary><p>The time before which the certificate is not valid.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public global::System.DateTime? NotBefore { get => this._notBefore; set => this._notBefore = value; }

        /// <summary>Backing field for <see cref="RenewalEligibility" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IRenewalEligibilityEnumValue _renewalEligibility;

        /// <summary>
        /// <p>Specifies whether the certificate is eligible for renewal. At this time, only exported private certificates can be
        /// renewed with the <a>RenewCertificate</a> command.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IRenewalEligibilityEnumValue RenewalEligibility { get => (this._renewalEligibility = this._renewalEligibility ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.RenewalEligibilityEnumValue()); set => this._renewalEligibility = value; }

        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.RenewalEligibility? RenewalEligibilityValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IRenewalEligibilityEnumValueInternal)RenewalEligibility).Value; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IRenewalEligibilityEnumValueInternal)RenewalEligibility).Value = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.RenewalEligibility)""); }

        /// <summary>Backing field for <see cref="RevokedAt" /> property.</summary>
        private global::System.DateTime? _revokedAt;

        /// <summary>
        /// <p>The time at which the certificate was revoked. This value exists only when the certificate status is <code>REVOKED</code>.
        /// </p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public global::System.DateTime? RevokedAt { get => this._revokedAt; set => this._revokedAt = value; }

        /// <summary>Backing field for <see cref="Status" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICertificateStatusEnumValue _status;

        /// <summary>
        /// <p>The status of the certificate.</p> <p>A certificate enters status PENDING_VALIDATION upon being requested, unless it
        /// fails for any of the reasons given in the troubleshooting topic <a href='https://docs.aws.amazon.com/acm/latest/userguide/troubleshooting-failed.html'>Certificate
        /// request fails</a>. ACM makes repeated attempts to validate a certificate for 72 hours and then times out. If a certificate
        /// shows status FAILED or VALIDATION_TIMED_OUT, delete the request, correct the issue with <a href='https://docs.aws.amazon.com/acm/latest/userguide/dns-validation.html'>DNS
        /// validation</a> or <a href='https://docs.aws.amazon.com/acm/latest/userguide/email-validation.html'>Email validation</a>,
        /// and try again. If validation succeeds, the certificate enters status ISSUED. </p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICertificateStatusEnumValue Status { get => (this._status = this._status ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.CertificateStatusEnumValue()); set => this._status = value; }

        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CertificateStatus? StatusValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICertificateStatusEnumValueInternal)Status).Value; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICertificateStatusEnumValueInternal)Status).Value = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CertificateStatus)""); }

        /// <summary>Backing field for <see cref="SubjectAlternativeNameSummary" /> property.</summary>
        private string[] _subjectAlternativeNameSummary;

        /// <summary>
        /// <p>One or more domain names (subject alternative names) included in the certificate. This list contains the domain names
        /// that are bound to the public key that is contained in the certificate. The subject alternative names include the canonical
        /// domain name (CN) of the certificate and additional domain names that can be used to connect to the website. </p> <p>When
        /// called by <a href='https://docs.aws.amazon.com/acm/latestAPIReference/API_ListCertificates.html'>ListCertificates</a>,
        /// this parameter will only return the first 100 subject alternative names included in the certificate. To display the full
        /// list of subject alternative names, use <a href='https://docs.aws.amazon.com/acm/latestAPIReference/API_DescribeCertificate.html'>DescribeCertificate</a>.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string[] SubjectAlternativeNameSummary { get => this._subjectAlternativeNameSummary; set => this._subjectAlternativeNameSummary = value; }

        /// <summary>Backing field for <see cref="Type" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICertificateTypeEnumValue _type;

        /// <summary>
        /// <p>The source of the certificate. For certificates provided by ACM, this value is <code>AMAZON_ISSUED</code>. For certificates
        /// that you imported with <a>ImportCertificate</a>, this value is <code>IMPORTED</code>. ACM does not provide <a href='https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html'>managed
        /// renewal</a> for imported certificates. For more information about the differences between certificates that you import
        /// and those that ACM provides, see <a href='https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html'>Importing
        /// Certificates</a> in the <i>Certificate Manager User Guide</i>. </p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICertificateTypeEnumValue Type { get => (this._type = this._type ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.CertificateTypeEnumValue()); set => this._type = value; }

        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CertificateType? TypeValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICertificateTypeEnumValueInternal)Type).Value; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICertificateTypeEnumValueInternal)Type).Value = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CertificateType)""); }

        /// <summary>Creates an new <see cref="AwsAcmCertificateSummaryProperties" /> instance.</summary>
        public AwsAcmCertificateSummaryProperties()
        {

        }
    }
    /// Definition of awsAcmCertificateSummary
    public partial interface IAwsAcmCertificateSummaryProperties :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary>
        /// <p>Amazon Resource Name (ARN) of the certificate. This is of the form:</p> <p> <code>arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012</code>
        /// </p> <p>For more information about ARNs, see <a href='https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html'>Amazon
        /// Resource Names (ARNs)</a>.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>Amazon Resource Name (ARN) of the certificate. This is of the form:</p> <p> <code>arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012</code> </p> <p>For more information about ARNs, see <a href='https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html'>Amazon Resource Names (ARNs)</a>.</p>",
        SerializedName = @"certificateArn",
        PossibleTypes = new [] { typeof(string) })]
        string CertificateArn { get; set; }
        /// <summary><p>The time at which the certificate was requested.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The time at which the certificate was requested.</p>",
        SerializedName = @"createdAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? CreatedAt { get; set; }
        /// <summary>
        /// <p>Fully qualified domain name (FQDN), such as www.example.com or example.com, for the certificate.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>Fully qualified domain name (FQDN), such as www.example.com or example.com, for the certificate.</p>",
        SerializedName = @"domainName",
        PossibleTypes = new [] { typeof(string) })]
        string DomainName { get; set; }
        /// <summary>
        /// <p>Indicates whether the certificate has been exported. This value exists only when the certificate type is <code>PRIVATE</code>.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>Indicates whether the certificate has been exported. This value exists only when the certificate type is <code>PRIVATE</code>.</p>",
        SerializedName = @"exported",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Exported { get; set; }
        /// <summary>
        /// <p>Contains a list of Extended Key Usage X.509 v3 extension objects. Each object specifies a purpose for which the certificate
        /// public key can be used and consists of a name and an object identifier (OID). </p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>Contains a list of Extended Key Usage X.509 v3 extension objects. Each object specifies a purpose for which the certificate public key can be used and consists of a name and an object identifier (OID). </p>",
        SerializedName = @"extendedKeyUsages",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ExtendedKeyUsageName) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ExtendedKeyUsageName[] ExtendedKeyUsage { get; set; }
        /// <summary>
        /// <p>When called by <a href='https://docs.aws.amazon.com/acm/latestAPIReference/API_ListCertificates.html'>ListCertificates</a>,
        /// indicates whether the full list of subject alternative names has been included in the response. If false, the response
        /// includes all of the subject alternative names included in the certificate. If true, the response only includes the first
        /// 100 subject alternative names included in the certificate. To display the full list of subject alternative names, use
        /// <a href='https://docs.aws.amazon.com/acm/latestAPIReference/API_DescribeCertificate.html'>DescribeCertificate</a>.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>When called by <a href='https://docs.aws.amazon.com/acm/latestAPIReference/API_ListCertificates.html'>ListCertificates</a>, indicates whether the full list of subject alternative names has been included in the response. If false, the response includes all of the subject alternative names included in the certificate. If true, the response only includes the first 100 subject alternative names included in the certificate. To display the full list of subject alternative names, use <a href='https://docs.aws.amazon.com/acm/latestAPIReference/API_DescribeCertificate.html'>DescribeCertificate</a>.</p>",
        SerializedName = @"hasAdditionalSubjectAlternativeNames",
        PossibleTypes = new [] { typeof(bool) })]
        bool? HasAdditionalSubjectAlternativeName { get; set; }
        /// <summary>
        /// <p>The date and time when the certificate was imported. This value exists only when the certificate type is <code>IMPORTED</code>.
        /// </p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The date and time when the certificate was imported. This value exists only when the certificate type is <code>IMPORTED</code>. </p>",
        SerializedName = @"importedAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ImportedAt { get; set; }
        /// <summary>
        /// <p>Indicates whether the certificate is currently in use by any Amazon Web Services resources.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>Indicates whether the certificate is currently in use by any Amazon Web Services resources.</p>",
        SerializedName = @"inUse",
        PossibleTypes = new [] { typeof(bool) })]
        bool? InUse { get; set; }
        /// <summary>
        /// <p>The time at which the certificate was issued. This value exists only when the certificate type is <code>AMAZON_ISSUED</code>.
        /// </p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The time at which the certificate was issued. This value exists only when the certificate type is <code>AMAZON_ISSUED</code>. </p>",
        SerializedName = @"issuedAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? IssuedAt { get; set; }
        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property value",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.KeyAlgorithm) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.KeyAlgorithm? KeyAlgorithmValue { get; set; }
        /// <summary>
        /// <p>A list of Key Usage X.509 v3 extension objects. Each object is a string value that identifies the purpose of the public
        /// key contained in the certificate. Possible extension values include DIGITAL_SIGNATURE, KEY_ENCHIPHERMENT, NON_REPUDIATION,
        /// and more.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>A list of Key Usage X.509 v3 extension objects. Each object is a string value that identifies the purpose of the public key contained in the certificate. Possible extension values include DIGITAL_SIGNATURE, KEY_ENCHIPHERMENT, NON_REPUDIATION, and more.</p>",
        SerializedName = @"keyUsages",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.KeyUsageName) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.KeyUsageName[] KeyUsage { get; set; }
        /// <summary><p>The time after which the certificate is not valid.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The time after which the certificate is not valid.</p>",
        SerializedName = @"notAfter",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? NotAfter { get; set; }
        /// <summary><p>The time before which the certificate is not valid.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The time before which the certificate is not valid.</p>",
        SerializedName = @"notBefore",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? NotBefore { get; set; }
        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property value",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.RenewalEligibility) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.RenewalEligibility? RenewalEligibilityValue { get; set; }
        /// <summary>
        /// <p>The time at which the certificate was revoked. This value exists only when the certificate status is <code>REVOKED</code>.
        /// </p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The time at which the certificate was revoked. This value exists only when the certificate status is <code>REVOKED</code>. </p>",
        SerializedName = @"revokedAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? RevokedAt { get; set; }
        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property value",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CertificateStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CertificateStatus? StatusValue { get; set; }
        /// <summary>
        /// <p>One or more domain names (subject alternative names) included in the certificate. This list contains the domain names
        /// that are bound to the public key that is contained in the certificate. The subject alternative names include the canonical
        /// domain name (CN) of the certificate and additional domain names that can be used to connect to the website. </p> <p>When
        /// called by <a href='https://docs.aws.amazon.com/acm/latestAPIReference/API_ListCertificates.html'>ListCertificates</a>,
        /// this parameter will only return the first 100 subject alternative names included in the certificate. To display the full
        /// list of subject alternative names, use <a href='https://docs.aws.amazon.com/acm/latestAPIReference/API_DescribeCertificate.html'>DescribeCertificate</a>.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>One or more domain names (subject alternative names) included in the certificate. This list contains the domain names that are bound to the public key that is contained in the certificate. The subject alternative names include the canonical domain name (CN) of the certificate and additional domain names that can be used to connect to the website. </p> <p>When called by <a href='https://docs.aws.amazon.com/acm/latestAPIReference/API_ListCertificates.html'>ListCertificates</a>, this parameter will only return the first 100 subject alternative names included in the certificate. To display the full list of subject alternative names, use <a href='https://docs.aws.amazon.com/acm/latestAPIReference/API_DescribeCertificate.html'>DescribeCertificate</a>.</p>",
        SerializedName = @"subjectAlternativeNameSummaries",
        PossibleTypes = new [] { typeof(string) })]
        string[] SubjectAlternativeNameSummary { get; set; }
        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property value",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CertificateType) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CertificateType? TypeValue { get; set; }

    }
    /// Definition of awsAcmCertificateSummary
    internal partial interface IAwsAcmCertificateSummaryPropertiesInternal

    {
        /// <summary>
        /// <p>Amazon Resource Name (ARN) of the certificate. This is of the form:</p> <p> <code>arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012</code>
        /// </p> <p>For more information about ARNs, see <a href='https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html'>Amazon
        /// Resource Names (ARNs)</a>.</p>
        /// </summary>
        string CertificateArn { get; set; }
        /// <summary><p>The time at which the certificate was requested.</p></summary>
        global::System.DateTime? CreatedAt { get; set; }
        /// <summary>
        /// <p>Fully qualified domain name (FQDN), such as www.example.com or example.com, for the certificate.</p>
        /// </summary>
        string DomainName { get; set; }
        /// <summary>
        /// <p>Indicates whether the certificate has been exported. This value exists only when the certificate type is <code>PRIVATE</code>.</p>
        /// </summary>
        bool? Exported { get; set; }
        /// <summary>
        /// <p>Contains a list of Extended Key Usage X.509 v3 extension objects. Each object specifies a purpose for which the certificate
        /// public key can be used and consists of a name and an object identifier (OID). </p>
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ExtendedKeyUsageName[] ExtendedKeyUsage { get; set; }
        /// <summary>
        /// <p>When called by <a href='https://docs.aws.amazon.com/acm/latestAPIReference/API_ListCertificates.html'>ListCertificates</a>,
        /// indicates whether the full list of subject alternative names has been included in the response. If false, the response
        /// includes all of the subject alternative names included in the certificate. If true, the response only includes the first
        /// 100 subject alternative names included in the certificate. To display the full list of subject alternative names, use
        /// <a href='https://docs.aws.amazon.com/acm/latestAPIReference/API_DescribeCertificate.html'>DescribeCertificate</a>.</p>
        /// </summary>
        bool? HasAdditionalSubjectAlternativeName { get; set; }
        /// <summary>
        /// <p>The date and time when the certificate was imported. This value exists only when the certificate type is <code>IMPORTED</code>.
        /// </p>
        /// </summary>
        global::System.DateTime? ImportedAt { get; set; }
        /// <summary>
        /// <p>Indicates whether the certificate is currently in use by any Amazon Web Services resources.</p>
        /// </summary>
        bool? InUse { get; set; }
        /// <summary>
        /// <p>The time at which the certificate was issued. This value exists only when the certificate type is <code>AMAZON_ISSUED</code>.
        /// </p>
        /// </summary>
        global::System.DateTime? IssuedAt { get; set; }
        /// <summary><p>The algorithm that was used to generate the public-private key pair.</p></summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IKeyAlgorithmEnumValue KeyAlgorithm { get; set; }
        /// <summary>Property value</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.KeyAlgorithm? KeyAlgorithmValue { get; set; }
        /// <summary>
        /// <p>A list of Key Usage X.509 v3 extension objects. Each object is a string value that identifies the purpose of the public
        /// key contained in the certificate. Possible extension values include DIGITAL_SIGNATURE, KEY_ENCHIPHERMENT, NON_REPUDIATION,
        /// and more.</p>
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.KeyUsageName[] KeyUsage { get; set; }
        /// <summary><p>The time after which the certificate is not valid.</p></summary>
        global::System.DateTime? NotAfter { get; set; }
        /// <summary><p>The time before which the certificate is not valid.</p></summary>
        global::System.DateTime? NotBefore { get; set; }
        /// <summary>
        /// <p>Specifies whether the certificate is eligible for renewal. At this time, only exported private certificates can be
        /// renewed with the <a>RenewCertificate</a> command.</p>
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IRenewalEligibilityEnumValue RenewalEligibility { get; set; }
        /// <summary>Property value</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.RenewalEligibility? RenewalEligibilityValue { get; set; }
        /// <summary>
        /// <p>The time at which the certificate was revoked. This value exists only when the certificate status is <code>REVOKED</code>.
        /// </p>
        /// </summary>
        global::System.DateTime? RevokedAt { get; set; }
        /// <summary>
        /// <p>The status of the certificate.</p> <p>A certificate enters status PENDING_VALIDATION upon being requested, unless it
        /// fails for any of the reasons given in the troubleshooting topic <a href='https://docs.aws.amazon.com/acm/latest/userguide/troubleshooting-failed.html'>Certificate
        /// request fails</a>. ACM makes repeated attempts to validate a certificate for 72 hours and then times out. If a certificate
        /// shows status FAILED or VALIDATION_TIMED_OUT, delete the request, correct the issue with <a href='https://docs.aws.amazon.com/acm/latest/userguide/dns-validation.html'>DNS
        /// validation</a> or <a href='https://docs.aws.amazon.com/acm/latest/userguide/email-validation.html'>Email validation</a>,
        /// and try again. If validation succeeds, the certificate enters status ISSUED. </p>
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICertificateStatusEnumValue Status { get; set; }
        /// <summary>Property value</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CertificateStatus? StatusValue { get; set; }
        /// <summary>
        /// <p>One or more domain names (subject alternative names) included in the certificate. This list contains the domain names
        /// that are bound to the public key that is contained in the certificate. The subject alternative names include the canonical
        /// domain name (CN) of the certificate and additional domain names that can be used to connect to the website. </p> <p>When
        /// called by <a href='https://docs.aws.amazon.com/acm/latestAPIReference/API_ListCertificates.html'>ListCertificates</a>,
        /// this parameter will only return the first 100 subject alternative names included in the certificate. To display the full
        /// list of subject alternative names, use <a href='https://docs.aws.amazon.com/acm/latestAPIReference/API_DescribeCertificate.html'>DescribeCertificate</a>.</p>
        /// </summary>
        string[] SubjectAlternativeNameSummary { get; set; }
        /// <summary>
        /// <p>The source of the certificate. For certificates provided by ACM, this value is <code>AMAZON_ISSUED</code>. For certificates
        /// that you imported with <a>ImportCertificate</a>, this value is <code>IMPORTED</code>. ACM does not provide <a href='https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html'>managed
        /// renewal</a> for imported certificates. For more information about the differences between certificates that you import
        /// and those that ACM provides, see <a href='https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html'>Importing
        /// Certificates</a> in the <i>Certificate Manager User Guide</i>. </p>
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICertificateTypeEnumValue Type { get; set; }
        /// <summary>Property value</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CertificateType? TypeValue { get; set; }

    }
}