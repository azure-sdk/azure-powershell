// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of AcmCertificateSummary</summary>
    public partial class AcmCertificateSummaryProperties :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAcmCertificateSummaryProperties,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAcmCertificateSummaryPropertiesInternal
    {

        /// <summary>Backing field for <see cref="Arn" /> property.</summary>
        private string _arn;

        /// <summary>Amazon Resource Name (ARN)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string Arn { get => this._arn; set => this._arn = value; }

        /// <summary>
        /// <p>Amazon Resource Name (ARN) of the certificate. This is of the form:</p> <p> <code>arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012</code>
        /// </p> <p>For more information about ARNs, see <a href='https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html'>Amazon
        /// Resource Names (ARNs)</a>.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwPropertyCertificateArn { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).CertificateArn; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).CertificateArn = value ?? null; }

        /// <summary><p>The time at which the certificate was requested.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public global::System.DateTime? AwPropertyCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).CreatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).CreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>
        /// <p>Fully qualified domain name (FQDN), such as www.example.com or example.com, for the certificate.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwPropertyDomainName { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).DomainName; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).DomainName = value ?? null; }

        /// <summary>
        /// <p>Indicates whether the certificate has been exported. This value exists only when the certificate type is <code>PRIVATE</code>.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? AwPropertyExported { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).Exported; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).Exported = value ?? default(bool); }

        /// <summary>
        /// <p>Contains a list of Extended Key Usage X.509 v3 extension objects. Each object specifies a purpose for which the certificate
        /// public key can be used and consists of a name and an object identifier (OID). </p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ExtendedKeyUsageName[] AwPropertyExtendedKeyUsage { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).ExtendedKeyUsage; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).ExtendedKeyUsage = value ?? null /* arrayOf */; }

        /// <summary>
        /// <p>When called by <a href='https://docs.aws.amazon.com/acm/latestAPIReference/API_ListCertificates.html'>ListCertificates</a>,
        /// indicates whether the full list of subject alternative names has been included in the response. If false, the response
        /// includes all of the subject alternative names included in the certificate. If true, the response only includes the first
        /// 100 subject alternative names included in the certificate. To display the full list of subject alternative names, use
        /// <a href='https://docs.aws.amazon.com/acm/latestAPIReference/API_DescribeCertificate.html'>DescribeCertificate</a>.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? AwPropertyHasAdditionalSubjectAlternativeName { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).HasAdditionalSubjectAlternativeName; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).HasAdditionalSubjectAlternativeName = value ?? default(bool); }

        /// <summary>
        /// <p>The date and time when the certificate was imported. This value exists only when the certificate type is <code>IMPORTED</code>.
        /// </p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public global::System.DateTime? AwPropertyImportedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).ImportedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).ImportedAt = value ?? default(global::System.DateTime); }

        /// <summary>
        /// <p>Indicates whether the certificate is currently in use by any Amazon Web Services resources.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? AwPropertyInUse { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).InUse; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).InUse = value ?? default(bool); }

        /// <summary>
        /// <p>The time at which the certificate was issued. This value exists only when the certificate type is <code>AMAZON_ISSUED</code>.
        /// </p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public global::System.DateTime? AwPropertyIssuedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).IssuedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).IssuedAt = value ?? default(global::System.DateTime); }

        /// <summary>
        /// <p>A list of Key Usage X.509 v3 extension objects. Each object is a string value that identifies the purpose of the public
        /// key contained in the certificate. Possible extension values include DIGITAL_SIGNATURE, KEY_ENCHIPHERMENT, NON_REPUDIATION,
        /// and more.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.KeyUsageName[] AwPropertyKeyUsage { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).KeyUsage; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).KeyUsage = value ?? null /* arrayOf */; }

        /// <summary><p>The time after which the certificate is not valid.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public global::System.DateTime? AwPropertyNotAfter { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).NotAfter; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).NotAfter = value ?? default(global::System.DateTime); }

        /// <summary><p>The time before which the certificate is not valid.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public global::System.DateTime? AwPropertyNotBefore { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).NotBefore; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).NotBefore = value ?? default(global::System.DateTime); }

        /// <summary>
        /// <p>The time at which the certificate was revoked. This value exists only when the certificate status is <code>REVOKED</code>.
        /// </p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public global::System.DateTime? AwPropertyRevokedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).RevokedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).RevokedAt = value ?? default(global::System.DateTime); }

        /// <summary>
        /// <p>One or more domain names (subject alternative names) included in the certificate. This list contains the domain names
        /// that are bound to the public key that is contained in the certificate. The subject alternative names include the canonical
        /// domain name (CN) of the certificate and additional domain names that can be used to connect to the website. </p> <p>When
        /// called by <a href='https://docs.aws.amazon.com/acm/latestAPIReference/API_ListCertificates.html'>ListCertificates</a>,
        /// this parameter will only return the first 100 subject alternative names included in the certificate. To display the full
        /// list of subject alternative names, use <a href='https://docs.aws.amazon.com/acm/latestAPIReference/API_DescribeCertificate.html'>DescribeCertificate</a>.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string[] AwPropertySubjectAlternativeNameSummary { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).SubjectAlternativeNameSummary; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).SubjectAlternativeNameSummary = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="AwsAccountId" /> property.</summary>
        private string _awsAccountId;

        /// <summary>AWS Account ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string AwsAccountId { get => this._awsAccountId; set => this._awsAccountId = value; }

        /// <summary>Backing field for <see cref="AwsProperty" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryProperties _awsProperty;

        /// <summary>AWS Properties</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryProperties AwsProperty { get => (this._awsProperty = this._awsProperty ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AwsAcmCertificateSummaryProperties()); set => this._awsProperty = value; }

        /// <summary>Backing field for <see cref="AwsRegion" /> property.</summary>
        private string _awsRegion;

        /// <summary>AWS Region</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string AwsRegion { get => this._awsRegion; set => this._awsRegion = value; }

        /// <summary>Backing field for <see cref="AwsSourceSchema" /> property.</summary>
        private string _awsSourceSchema;

        /// <summary>AWS Source Schema</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string AwsSourceSchema { get => this._awsSourceSchema; set => this._awsSourceSchema = value; }

        /// <summary>Backing field for <see cref="AwsTag" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAcmCertificateSummaryPropertiesAwsTags _awsTag;

        /// <summary>AWS Tags</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAcmCertificateSummaryPropertiesAwsTags AwsTag { get => (this._awsTag = this._awsTag ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AcmCertificateSummaryPropertiesAwsTags()); set => this._awsTag = value; }

        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.KeyAlgorithm? KeyAlgorithmValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).KeyAlgorithmValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).KeyAlgorithmValue = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.KeyAlgorithm)""); }

        /// <summary>Internal Acessors for AwPropertyKeyAlgorithm</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IKeyAlgorithmEnumValue Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAcmCertificateSummaryPropertiesInternal.AwPropertyKeyAlgorithm { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).KeyAlgorithm; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).KeyAlgorithm = value; }

        /// <summary>Internal Acessors for AwPropertyRenewalEligibility</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IRenewalEligibilityEnumValue Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAcmCertificateSummaryPropertiesInternal.AwPropertyRenewalEligibility { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).RenewalEligibility; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).RenewalEligibility = value; }

        /// <summary>Internal Acessors for AwPropertyStatus</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICertificateStatusEnumValue Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAcmCertificateSummaryPropertiesInternal.AwPropertyStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).Status; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).Status = value; }

        /// <summary>Internal Acessors for AwPropertyType</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICertificateTypeEnumValue Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAcmCertificateSummaryPropertiesInternal.AwPropertyType { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).Type = value; }

        /// <summary>Internal Acessors for AwsProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryProperties Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAcmCertificateSummaryPropertiesInternal.AwsProperty { get => (this._awsProperty = this._awsProperty ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AwsAcmCertificateSummaryProperties()); set { {_awsProperty = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAcmCertificateSummaryPropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? _provisioningState;

        /// <summary>The status of the last operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="PublicCloudConnectorsResourceId" /> property.</summary>
        private string _publicCloudConnectorsResourceId;

        /// <summary>Public Cloud Connectors Resource ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string PublicCloudConnectorsResourceId { get => this._publicCloudConnectorsResourceId; set => this._publicCloudConnectorsResourceId = value; }

        /// <summary>Backing field for <see cref="PublicCloudResourceName" /> property.</summary>
        private string _publicCloudResourceName;

        /// <summary>Public Cloud Resource Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string PublicCloudResourceName { get => this._publicCloudResourceName; set => this._publicCloudResourceName = value; }

        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.RenewalEligibility? RenewalEligibilityValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).RenewalEligibilityValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).RenewalEligibilityValue = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.RenewalEligibility)""); }

        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CertificateStatus? StatusValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).StatusValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).StatusValue = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CertificateStatus)""); }

        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CertificateType? TypeValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).TypeValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryPropertiesInternal)AwsProperty).TypeValue = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CertificateType)""); }

        /// <summary>Creates an new <see cref="AcmCertificateSummaryProperties" /> instance.</summary>
        public AcmCertificateSummaryProperties()
        {

        }
    }
    /// Definition of AcmCertificateSummary
    public partial interface IAcmCertificateSummaryProperties :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary>Amazon Resource Name (ARN)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Amazon Resource Name (ARN)",
        SerializedName = @"arn",
        PossibleTypes = new [] { typeof(string) })]
        string Arn { get; set; }
        /// <summary>
        /// <p>Amazon Resource Name (ARN) of the certificate. This is of the form:</p> <p> <code>arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012</code>
        /// </p> <p>For more information about ARNs, see <a href='https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html'>Amazon
        /// Resource Names (ARNs)</a>.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>Amazon Resource Name (ARN) of the certificate. This is of the form:</p> <p> <code>arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012</code> </p> <p>For more information about ARNs, see <a href='https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html'>Amazon Resource Names (ARNs)</a>.</p>",
        SerializedName = @"certificateArn",
        PossibleTypes = new [] { typeof(string) })]
        string AwPropertyCertificateArn { get; set; }
        /// <summary><p>The time at which the certificate was requested.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The time at which the certificate was requested.</p>",
        SerializedName = @"createdAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? AwPropertyCreatedAt { get; set; }
        /// <summary>
        /// <p>Fully qualified domain name (FQDN), such as www.example.com or example.com, for the certificate.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>Fully qualified domain name (FQDN), such as www.example.com or example.com, for the certificate.</p>",
        SerializedName = @"domainName",
        PossibleTypes = new [] { typeof(string) })]
        string AwPropertyDomainName { get; set; }
        /// <summary>
        /// <p>Indicates whether the certificate has been exported. This value exists only when the certificate type is <code>PRIVATE</code>.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>Indicates whether the certificate has been exported. This value exists only when the certificate type is <code>PRIVATE</code>.</p>",
        SerializedName = @"exported",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AwPropertyExported { get; set; }
        /// <summary>
        /// <p>Contains a list of Extended Key Usage X.509 v3 extension objects. Each object specifies a purpose for which the certificate
        /// public key can be used and consists of a name and an object identifier (OID). </p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>Contains a list of Extended Key Usage X.509 v3 extension objects. Each object specifies a purpose for which the certificate public key can be used and consists of a name and an object identifier (OID). </p>",
        SerializedName = @"extendedKeyUsages",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ExtendedKeyUsageName) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ExtendedKeyUsageName[] AwPropertyExtendedKeyUsage { get; set; }
        /// <summary>
        /// <p>When called by <a href='https://docs.aws.amazon.com/acm/latestAPIReference/API_ListCertificates.html'>ListCertificates</a>,
        /// indicates whether the full list of subject alternative names has been included in the response. If false, the response
        /// includes all of the subject alternative names included in the certificate. If true, the response only includes the first
        /// 100 subject alternative names included in the certificate. To display the full list of subject alternative names, use
        /// <a href='https://docs.aws.amazon.com/acm/latestAPIReference/API_DescribeCertificate.html'>DescribeCertificate</a>.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>When called by <a href='https://docs.aws.amazon.com/acm/latestAPIReference/API_ListCertificates.html'>ListCertificates</a>, indicates whether the full list of subject alternative names has been included in the response. If false, the response includes all of the subject alternative names included in the certificate. If true, the response only includes the first 100 subject alternative names included in the certificate. To display the full list of subject alternative names, use <a href='https://docs.aws.amazon.com/acm/latestAPIReference/API_DescribeCertificate.html'>DescribeCertificate</a>.</p>",
        SerializedName = @"hasAdditionalSubjectAlternativeNames",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AwPropertyHasAdditionalSubjectAlternativeName { get; set; }
        /// <summary>
        /// <p>The date and time when the certificate was imported. This value exists only when the certificate type is <code>IMPORTED</code>.
        /// </p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The date and time when the certificate was imported. This value exists only when the certificate type is <code>IMPORTED</code>. </p>",
        SerializedName = @"importedAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? AwPropertyImportedAt { get; set; }
        /// <summary>
        /// <p>Indicates whether the certificate is currently in use by any Amazon Web Services resources.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>Indicates whether the certificate is currently in use by any Amazon Web Services resources.</p>",
        SerializedName = @"inUse",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AwPropertyInUse { get; set; }
        /// <summary>
        /// <p>The time at which the certificate was issued. This value exists only when the certificate type is <code>AMAZON_ISSUED</code>.
        /// </p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The time at which the certificate was issued. This value exists only when the certificate type is <code>AMAZON_ISSUED</code>. </p>",
        SerializedName = @"issuedAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? AwPropertyIssuedAt { get; set; }
        /// <summary>
        /// <p>A list of Key Usage X.509 v3 extension objects. Each object is a string value that identifies the purpose of the public
        /// key contained in the certificate. Possible extension values include DIGITAL_SIGNATURE, KEY_ENCHIPHERMENT, NON_REPUDIATION,
        /// and more.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>A list of Key Usage X.509 v3 extension objects. Each object is a string value that identifies the purpose of the public key contained in the certificate. Possible extension values include DIGITAL_SIGNATURE, KEY_ENCHIPHERMENT, NON_REPUDIATION, and more.</p>",
        SerializedName = @"keyUsages",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.KeyUsageName) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.KeyUsageName[] AwPropertyKeyUsage { get; set; }
        /// <summary><p>The time after which the certificate is not valid.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The time after which the certificate is not valid.</p>",
        SerializedName = @"notAfter",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? AwPropertyNotAfter { get; set; }
        /// <summary><p>The time before which the certificate is not valid.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The time before which the certificate is not valid.</p>",
        SerializedName = @"notBefore",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? AwPropertyNotBefore { get; set; }
        /// <summary>
        /// <p>The time at which the certificate was revoked. This value exists only when the certificate status is <code>REVOKED</code>.
        /// </p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The time at which the certificate was revoked. This value exists only when the certificate status is <code>REVOKED</code>. </p>",
        SerializedName = @"revokedAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? AwPropertyRevokedAt { get; set; }
        /// <summary>
        /// <p>One or more domain names (subject alternative names) included in the certificate. This list contains the domain names
        /// that are bound to the public key that is contained in the certificate. The subject alternative names include the canonical
        /// domain name (CN) of the certificate and additional domain names that can be used to connect to the website. </p> <p>When
        /// called by <a href='https://docs.aws.amazon.com/acm/latestAPIReference/API_ListCertificates.html'>ListCertificates</a>,
        /// this parameter will only return the first 100 subject alternative names included in the certificate. To display the full
        /// list of subject alternative names, use <a href='https://docs.aws.amazon.com/acm/latestAPIReference/API_DescribeCertificate.html'>DescribeCertificate</a>.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>One or more domain names (subject alternative names) included in the certificate. This list contains the domain names that are bound to the public key that is contained in the certificate. The subject alternative names include the canonical domain name (CN) of the certificate and additional domain names that can be used to connect to the website. </p> <p>When called by <a href='https://docs.aws.amazon.com/acm/latestAPIReference/API_ListCertificates.html'>ListCertificates</a>, this parameter will only return the first 100 subject alternative names included in the certificate. To display the full list of subject alternative names, use <a href='https://docs.aws.amazon.com/acm/latestAPIReference/API_DescribeCertificate.html'>DescribeCertificate</a>.</p>",
        SerializedName = @"subjectAlternativeNameSummaries",
        PossibleTypes = new [] { typeof(string) })]
        string[] AwPropertySubjectAlternativeNameSummary { get; set; }
        /// <summary>AWS Account ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Account ID",
        SerializedName = @"awsAccountId",
        PossibleTypes = new [] { typeof(string) })]
        string AwsAccountId { get; set; }
        /// <summary>AWS Region</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Region",
        SerializedName = @"awsRegion",
        PossibleTypes = new [] { typeof(string) })]
        string AwsRegion { get; set; }
        /// <summary>AWS Source Schema</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Source Schema",
        SerializedName = @"awsSourceSchema",
        PossibleTypes = new [] { typeof(string) })]
        string AwsSourceSchema { get; set; }
        /// <summary>AWS Tags</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Tags",
        SerializedName = @"awsTags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAcmCertificateSummaryPropertiesAwsTags) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAcmCertificateSummaryPropertiesAwsTags AwsTag { get; set; }
        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property value",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.KeyAlgorithm) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.KeyAlgorithm? KeyAlgorithmValue { get; set; }
        /// <summary>The status of the last operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The status of the last operation.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? ProvisioningState { get;  }
        /// <summary>Public Cloud Connectors Resource ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Public Cloud Connectors Resource ID",
        SerializedName = @"publicCloudConnectorsResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string PublicCloudConnectorsResourceId { get; set; }
        /// <summary>Public Cloud Resource Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Public Cloud Resource Name",
        SerializedName = @"publicCloudResourceName",
        PossibleTypes = new [] { typeof(string) })]
        string PublicCloudResourceName { get; set; }
        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property value",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.RenewalEligibility) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.RenewalEligibility? RenewalEligibilityValue { get; set; }
        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property value",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CertificateStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CertificateStatus? StatusValue { get; set; }
        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property value",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CertificateType) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CertificateType? TypeValue { get; set; }

    }
    /// Definition of AcmCertificateSummary
    internal partial interface IAcmCertificateSummaryPropertiesInternal

    {
        /// <summary>Amazon Resource Name (ARN)</summary>
        string Arn { get; set; }
        /// <summary>
        /// <p>Amazon Resource Name (ARN) of the certificate. This is of the form:</p> <p> <code>arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012</code>
        /// </p> <p>For more information about ARNs, see <a href='https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html'>Amazon
        /// Resource Names (ARNs)</a>.</p>
        /// </summary>
        string AwPropertyCertificateArn { get; set; }
        /// <summary><p>The time at which the certificate was requested.</p></summary>
        global::System.DateTime? AwPropertyCreatedAt { get; set; }
        /// <summary>
        /// <p>Fully qualified domain name (FQDN), such as www.example.com or example.com, for the certificate.</p>
        /// </summary>
        string AwPropertyDomainName { get; set; }
        /// <summary>
        /// <p>Indicates whether the certificate has been exported. This value exists only when the certificate type is <code>PRIVATE</code>.</p>
        /// </summary>
        bool? AwPropertyExported { get; set; }
        /// <summary>
        /// <p>Contains a list of Extended Key Usage X.509 v3 extension objects. Each object specifies a purpose for which the certificate
        /// public key can be used and consists of a name and an object identifier (OID). </p>
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ExtendedKeyUsageName[] AwPropertyExtendedKeyUsage { get; set; }
        /// <summary>
        /// <p>When called by <a href='https://docs.aws.amazon.com/acm/latestAPIReference/API_ListCertificates.html'>ListCertificates</a>,
        /// indicates whether the full list of subject alternative names has been included in the response. If false, the response
        /// includes all of the subject alternative names included in the certificate. If true, the response only includes the first
        /// 100 subject alternative names included in the certificate. To display the full list of subject alternative names, use
        /// <a href='https://docs.aws.amazon.com/acm/latestAPIReference/API_DescribeCertificate.html'>DescribeCertificate</a>.</p>
        /// </summary>
        bool? AwPropertyHasAdditionalSubjectAlternativeName { get; set; }
        /// <summary>
        /// <p>The date and time when the certificate was imported. This value exists only when the certificate type is <code>IMPORTED</code>.
        /// </p>
        /// </summary>
        global::System.DateTime? AwPropertyImportedAt { get; set; }
        /// <summary>
        /// <p>Indicates whether the certificate is currently in use by any Amazon Web Services resources.</p>
        /// </summary>
        bool? AwPropertyInUse { get; set; }
        /// <summary>
        /// <p>The time at which the certificate was issued. This value exists only when the certificate type is <code>AMAZON_ISSUED</code>.
        /// </p>
        /// </summary>
        global::System.DateTime? AwPropertyIssuedAt { get; set; }
        /// <summary><p>The algorithm that was used to generate the public-private key pair.</p></summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IKeyAlgorithmEnumValue AwPropertyKeyAlgorithm { get; set; }
        /// <summary>
        /// <p>A list of Key Usage X.509 v3 extension objects. Each object is a string value that identifies the purpose of the public
        /// key contained in the certificate. Possible extension values include DIGITAL_SIGNATURE, KEY_ENCHIPHERMENT, NON_REPUDIATION,
        /// and more.</p>
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.KeyUsageName[] AwPropertyKeyUsage { get; set; }
        /// <summary><p>The time after which the certificate is not valid.</p></summary>
        global::System.DateTime? AwPropertyNotAfter { get; set; }
        /// <summary><p>The time before which the certificate is not valid.</p></summary>
        global::System.DateTime? AwPropertyNotBefore { get; set; }
        /// <summary>
        /// <p>Specifies whether the certificate is eligible for renewal. At this time, only exported private certificates can be
        /// renewed with the <a>RenewCertificate</a> command.</p>
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IRenewalEligibilityEnumValue AwPropertyRenewalEligibility { get; set; }
        /// <summary>
        /// <p>The time at which the certificate was revoked. This value exists only when the certificate status is <code>REVOKED</code>.
        /// </p>
        /// </summary>
        global::System.DateTime? AwPropertyRevokedAt { get; set; }
        /// <summary>
        /// <p>The status of the certificate.</p> <p>A certificate enters status PENDING_VALIDATION upon being requested, unless it
        /// fails for any of the reasons given in the troubleshooting topic <a href='https://docs.aws.amazon.com/acm/latest/userguide/troubleshooting-failed.html'>Certificate
        /// request fails</a>. ACM makes repeated attempts to validate a certificate for 72 hours and then times out. If a certificate
        /// shows status FAILED or VALIDATION_TIMED_OUT, delete the request, correct the issue with <a href='https://docs.aws.amazon.com/acm/latest/userguide/dns-validation.html'>DNS
        /// validation</a> or <a href='https://docs.aws.amazon.com/acm/latest/userguide/email-validation.html'>Email validation</a>,
        /// and try again. If validation succeeds, the certificate enters status ISSUED. </p>
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICertificateStatusEnumValue AwPropertyStatus { get; set; }
        /// <summary>
        /// <p>One or more domain names (subject alternative names) included in the certificate. This list contains the domain names
        /// that are bound to the public key that is contained in the certificate. The subject alternative names include the canonical
        /// domain name (CN) of the certificate and additional domain names that can be used to connect to the website. </p> <p>When
        /// called by <a href='https://docs.aws.amazon.com/acm/latestAPIReference/API_ListCertificates.html'>ListCertificates</a>,
        /// this parameter will only return the first 100 subject alternative names included in the certificate. To display the full
        /// list of subject alternative names, use <a href='https://docs.aws.amazon.com/acm/latestAPIReference/API_DescribeCertificate.html'>DescribeCertificate</a>.</p>
        /// </summary>
        string[] AwPropertySubjectAlternativeNameSummary { get; set; }
        /// <summary>
        /// <p>The source of the certificate. For certificates provided by ACM, this value is <code>AMAZON_ISSUED</code>. For certificates
        /// that you imported with <a>ImportCertificate</a>, this value is <code>IMPORTED</code>. ACM does not provide <a href='https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html'>managed
        /// renewal</a> for imported certificates. For more information about the differences between certificates that you import
        /// and those that ACM provides, see <a href='https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html'>Importing
        /// Certificates</a> in the <i>Certificate Manager User Guide</i>. </p>
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICertificateTypeEnumValue AwPropertyType { get; set; }
        /// <summary>AWS Account ID</summary>
        string AwsAccountId { get; set; }
        /// <summary>AWS Properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsAcmCertificateSummaryProperties AwsProperty { get; set; }
        /// <summary>AWS Region</summary>
        string AwsRegion { get; set; }
        /// <summary>AWS Source Schema</summary>
        string AwsSourceSchema { get; set; }
        /// <summary>AWS Tags</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAcmCertificateSummaryPropertiesAwsTags AwsTag { get; set; }
        /// <summary>Property value</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.KeyAlgorithm? KeyAlgorithmValue { get; set; }
        /// <summary>The status of the last operation.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? ProvisioningState { get; set; }
        /// <summary>Public Cloud Connectors Resource ID</summary>
        string PublicCloudConnectorsResourceId { get; set; }
        /// <summary>Public Cloud Resource Name</summary>
        string PublicCloudResourceName { get; set; }
        /// <summary>Property value</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.RenewalEligibility? RenewalEligibilityValue { get; set; }
        /// <summary>Property value</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CertificateStatus? StatusValue { get; set; }
        /// <summary>Property value</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CertificateType? TypeValue { get; set; }

    }
}