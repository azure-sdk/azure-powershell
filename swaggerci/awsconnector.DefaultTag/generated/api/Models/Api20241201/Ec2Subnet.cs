// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>A Microsoft.AwsConnector resource</summary>
    public partial class Ec2Subnet :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2Subnet,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetInternal,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IValidates,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IHeaderSerializable
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResource __trackedResource = new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.TrackedResource();

        /// <summary>Amazon Resource Name (ARN)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string Arn { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).Arn; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).Arn = value ?? null; }

        /// <summary>
        /// Indicates whether a network interface created in this subnet receives an IPv6 address. The default value is ``false``.
        /// If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? AwPropertyAssignIpv6AddressOnCreation { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyAssignIpv6AddressOnCreation; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyAssignIpv6AddressOnCreation = value ?? default(bool); }

        /// <summary>
        /// The Availability Zone of the subnet. If you update this property, you must also update the ``CidrBlock`` property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwPropertyAvailabilityZone { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyAvailabilityZone; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyAvailabilityZone = value ?? null; }

        /// <summary>The AZ ID of the subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwPropertyAvailabilityZoneId { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyAvailabilityZoneId; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyAvailabilityZoneId = value ?? null; }

        /// <summary>
        /// The IPv4 CIDR block assigned to the subnet. If you update this property, we create a new subnet, and then delete the existing
        /// one.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwPropertyCidrBlock { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyCidrBlock; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyCidrBlock = value ?? null; }

        /// <summary>
        /// Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses
        /// for IPv4-only destinations. For more information, see [DNS64 and NAT64](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-nat64-dns64)
        /// in the *User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? AwPropertyEnableDns64 { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyEnableDns64; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyEnableDns64 = value ?? default(bool); }

        /// <summary>
        /// Indicates the device position for local network interfaces in this subnet. For example, ``1`` indicates local network
        /// interfaces in this subnet are the secondary network interface (eth1).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public int? AwPropertyEnableLniAtDeviceIndex { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyEnableLniAtDeviceIndex; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyEnableLniAtDeviceIndex = value ?? default(int); }

        /// <summary>An IPv4 IPAM pool ID for the subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwPropertyIpv4IpamPoolId { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyIpv4IpamPoolId; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyIpv4IpamPoolId = value ?? null; }

        /// <summary>An IPv4 netmask length for the subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public int? AwPropertyIpv4NetmaskLength { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyIpv4NetmaskLength; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyIpv4NetmaskLength = value ?? default(int); }

        /// <summary>
        /// The IPv6 CIDR block. If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwPropertyIpv6CidrBlock { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyIpv6CidrBlock; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyIpv6CidrBlock = value ?? null; }

        /// <summary>An IPv6 IPAM pool ID for the subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwPropertyIpv6IpamPoolId { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyIpv6IpamPoolId; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyIpv6IpamPoolId = value ?? null; }

        /// <summary>
        /// Indicates whether this is an IPv6 only subnet. For more information, see [Subnet basics](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html#subnet-basics)
        /// in the *User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? AwPropertyIpv6Native { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyIpv6Native; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyIpv6Native = value ?? default(bool); }

        /// <summary>An IPv6 netmask length for the subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public int? AwPropertyIpv6NetmaskLength { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyIpv6NetmaskLength; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyIpv6NetmaskLength = value ?? default(int); }

        /// <summary>
        /// Indicates whether instances launched in this subnet receive a public IPv4 address. The default value is ``false``. AWS
        /// charges for all public IPv4 addresses, including public IPv4 addresses associated with running instances and Elastic IP
        /// addresses. For more information, see the *Public IPv4 Address* tab on the [VPC pricing page](https://docs.aws.amazon.com/vpc/pricing/).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? AwPropertyMapPublicIPOnLaunch { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyMapPublicIPOnLaunch; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyMapPublicIPOnLaunch = value ?? default(bool); }

        /// <summary>Property networkAclAssociationId</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwPropertyNetworkAclAssociationId { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyNetworkAclAssociationId; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyNetworkAclAssociationId = value ?? null; }

        /// <summary>The Amazon Resource Name (ARN) of the Outpost.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwPropertyOutpostArn { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyOutpostArn; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyOutpostArn = value ?? null; }

        /// <summary>Property subnetId</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwPropertySubnetId { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertySubnetId; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertySubnetId = value ?? null; }

        /// <summary>Any tags assigned to the subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated21[] AwPropertyTag { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyTag; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyTag = value ?? null /* arrayOf */; }

        /// <summary>
        /// The ID of the VPC the subnet is in. If you update this property, you must also update the ``CidrBlock`` property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwPropertyVpcId { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyVpcId; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyVpcId = value ?? null; }

        /// <summary>AWS Account ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwsAccountId { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwsAccountId; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwsAccountId = value ?? null; }

        /// <summary>AWS Region</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwsRegion { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwsRegion; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwsRegion = value ?? null; }

        /// <summary>AWS Source Schema</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwsSourceSchema { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwsSourceSchema; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwsSourceSchema = value ?? null; }

        /// <summary>AWS Tags</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesAwsTags AwsTag { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwsTag; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwsTag = value ?? null /* model class */; }

        /// <summary>Backing field for <see cref="AzureAsyncOperation" /> property.</summary>
        private string _azureAsyncOperation;

        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string AzureAsyncOperation { get => this._azureAsyncOperation; set => this._azureAsyncOperation = value; }

        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).Id; }

        /// <summary>The geo-location where the resource lives</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public string Location { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResourceInternal)__trackedResource).Location; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResourceInternal)__trackedResource).Location = value ; }

        /// <summary>Internal Acessors for AwPropertyPrivateDnsNameOptionsOnLaunch</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPrivateDnsNameOptionsOnLaunchModelProperties Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetInternal.AwPropertyPrivateDnsNameOptionsOnLaunch { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyPrivateDnsNameOptionsOnLaunch; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwPropertyPrivateDnsNameOptionsOnLaunch = value; }

        /// <summary>Internal Acessors for AwsProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetProperties Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetInternal.AwsProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwsProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwsProperty = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetProperties Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.Ec2SubnetProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).ProvisioningState = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).Name = value; }

        /// <summary>Internal Acessors for SystemData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ISystemData Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal.SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemData; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemData = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).Type = value; }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).Name; }

        /// <summary>Property enableResourceNameDnsARecord</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? PrivateDnsNameOptionOnLaunchEnableResourceNameDnsARecord { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).PrivateDnsNameOptionOnLaunchEnableResourceNameDnsARecord; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).PrivateDnsNameOptionOnLaunchEnableResourceNameDnsARecord = value ?? default(bool); }

        /// <summary>Property enableResourceNameDnsAAAARecord</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? PrivateDnsNameOptionOnLaunchEnableResourceNameDnsAaaaRecord { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).PrivateDnsNameOptionOnLaunchEnableResourceNameDnsAaaaRecord; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).PrivateDnsNameOptionOnLaunchEnableResourceNameDnsAaaaRecord = value ?? default(bool); }

        /// <summary>Property hostnameType</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string PrivateDnsNameOptionOnLaunchHostnameType { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).PrivateDnsNameOptionOnLaunchHostnameType; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).PrivateDnsNameOptionOnLaunchHostnameType = value ?? null; }

        /// <summary>The IPv6 network ranges for the subnet, in CIDR notation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string[] PropertiesAwsPropertiesIpv6CidrBlocks { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwsPropertiesIpv6CidrBlocks; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).AwsPropertiesIpv6CidrBlocks = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetProperties _property;

        /// <summary>The resource-specific properties for this resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.Ec2SubnetProperties()); set => this._property = value; }

        /// <summary>The status of the last operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).ProvisioningState; }

        /// <summary>Public Cloud Connectors Resource ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string PublicCloudConnectorsResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).PublicCloudConnectorsResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).PublicCloudConnectorsResourceId = value ?? null; }

        /// <summary>Public Cloud Resource Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string PublicCloudResourceName { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).PublicCloudResourceName; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesInternal)Property).PublicCloudResourceName = value ?? null; }

        /// <summary>Backing field for <see cref="RetryAfter" /> property.</summary>
        private int? _retryAfter;

        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? RetryAfter { get => this._retryAfter; set => this._retryAfter = value; }

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ISystemData SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemData; }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataCreatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataCreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public string SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataCreatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataCreatedBy = value ?? null; }

        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CreatedByType? SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataCreatedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataCreatedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CreatedByType)""); }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataLastModifiedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataLastModifiedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public string SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataLastModifiedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataLastModifiedBy = value ?? null; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CreatedByType? SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataLastModifiedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataLastModifiedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CreatedByType)""); }

        /// <summary>Resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResourceTags Tag { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResourceInternal)__trackedResource).Tag; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResourceInternal)__trackedResource).Tag = value ?? null /* model class */; }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).Type; }

        /// <summary>Creates an new <see cref="Ec2Subnet" /> instance.</summary>
        public Ec2Subnet()
        {

        }

        /// <param name="headers"></param>
        void Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IHeaderSerializable.ReadHeaders(global::System.Net.Http.Headers.HttpResponseHeaders headers)
        {
            if (headers.TryGetValues("Azure-AsyncOperation", out var __azureAsyncOperationHeader0))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetInternal)this).AzureAsyncOperation = System.Linq.Enumerable.FirstOrDefault(__azureAsyncOperationHeader0) is string __headerAzureAsyncOperationHeader0 ? __headerAzureAsyncOperationHeader0 : (string)null;
            }
            if (headers.TryGetValues("Retry-After", out var __retryAfterHeader1))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetInternal)this).RetryAfter = System.Linq.Enumerable.FirstOrDefault(__retryAfterHeader1) is string __headerRetryAfterHeader1 ? int.TryParse( __headerRetryAfterHeader1, out int __headerRetryAfterHeader1Value ) ? __headerRetryAfterHeader1Value : default(int?) : default(int?);
            }
        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__trackedResource), __trackedResource);
            await eventListener.AssertObjectIsValid(nameof(__trackedResource), __trackedResource);
        }
    }
    /// A Microsoft.AwsConnector resource
    public partial interface IEc2Subnet :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResource
    {
        /// <summary>Amazon Resource Name (ARN)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Amazon Resource Name (ARN)",
        SerializedName = @"arn",
        PossibleTypes = new [] { typeof(string) })]
        string Arn { get; set; }
        /// <summary>
        /// Indicates whether a network interface created in this subnet receives an IPv6 address. The default value is ``false``.
        /// If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether a network interface created in this subnet receives an IPv6 address. The default value is ``false``. If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.",
        SerializedName = @"assignIpv6AddressOnCreation",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AwPropertyAssignIpv6AddressOnCreation { get; set; }
        /// <summary>
        /// The Availability Zone of the subnet. If you update this property, you must also update the ``CidrBlock`` property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Availability Zone of the subnet. If you update this property, you must also update the ``CidrBlock`` property.",
        SerializedName = @"availabilityZone",
        PossibleTypes = new [] { typeof(string) })]
        string AwPropertyAvailabilityZone { get; set; }
        /// <summary>The AZ ID of the subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The AZ ID of the subnet.",
        SerializedName = @"availabilityZoneId",
        PossibleTypes = new [] { typeof(string) })]
        string AwPropertyAvailabilityZoneId { get; set; }
        /// <summary>
        /// The IPv4 CIDR block assigned to the subnet. If you update this property, we create a new subnet, and then delete the existing
        /// one.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The IPv4 CIDR block assigned to the subnet. If you update this property, we create a new subnet, and then delete the existing one.",
        SerializedName = @"cidrBlock",
        PossibleTypes = new [] { typeof(string) })]
        string AwPropertyCidrBlock { get; set; }
        /// <summary>
        /// Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses
        /// for IPv4-only destinations. For more information, see [DNS64 and NAT64](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-nat64-dns64)
        /// in the *User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. For more information, see [DNS64 and NAT64](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-nat64-dns64) in the *User Guide*.",
        SerializedName = @"enableDns64",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AwPropertyEnableDns64 { get; set; }
        /// <summary>
        /// Indicates the device position for local network interfaces in this subnet. For example, ``1`` indicates local network
        /// interfaces in this subnet are the secondary network interface (eth1).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates the device position for local network interfaces in this subnet. For example, ``1`` indicates local network interfaces in this subnet are the secondary network interface (eth1).",
        SerializedName = @"enableLniAtDeviceIndex",
        PossibleTypes = new [] { typeof(int) })]
        int? AwPropertyEnableLniAtDeviceIndex { get; set; }
        /// <summary>An IPv4 IPAM pool ID for the subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An IPv4 IPAM pool ID for the subnet.",
        SerializedName = @"ipv4IpamPoolId",
        PossibleTypes = new [] { typeof(string) })]
        string AwPropertyIpv4IpamPoolId { get; set; }
        /// <summary>An IPv4 netmask length for the subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An IPv4 netmask length for the subnet.",
        SerializedName = @"ipv4NetmaskLength",
        PossibleTypes = new [] { typeof(int) })]
        int? AwPropertyIpv4NetmaskLength { get; set; }
        /// <summary>
        /// The IPv6 CIDR block. If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The IPv6 CIDR block. If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.",
        SerializedName = @"ipv6CidrBlock",
        PossibleTypes = new [] { typeof(string) })]
        string AwPropertyIpv6CidrBlock { get; set; }
        /// <summary>An IPv6 IPAM pool ID for the subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An IPv6 IPAM pool ID for the subnet.",
        SerializedName = @"ipv6IpamPoolId",
        PossibleTypes = new [] { typeof(string) })]
        string AwPropertyIpv6IpamPoolId { get; set; }
        /// <summary>
        /// Indicates whether this is an IPv6 only subnet. For more information, see [Subnet basics](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html#subnet-basics)
        /// in the *User Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether this is an IPv6 only subnet. For more information, see [Subnet basics](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html#subnet-basics) in the *User Guide*.",
        SerializedName = @"ipv6Native",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AwPropertyIpv6Native { get; set; }
        /// <summary>An IPv6 netmask length for the subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An IPv6 netmask length for the subnet.",
        SerializedName = @"ipv6NetmaskLength",
        PossibleTypes = new [] { typeof(int) })]
        int? AwPropertyIpv6NetmaskLength { get; set; }
        /// <summary>
        /// Indicates whether instances launched in this subnet receive a public IPv4 address. The default value is ``false``. AWS
        /// charges for all public IPv4 addresses, including public IPv4 addresses associated with running instances and Elastic IP
        /// addresses. For more information, see the *Public IPv4 Address* tab on the [VPC pricing page](https://docs.aws.amazon.com/vpc/pricing/).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether instances launched in this subnet receive a public IPv4 address. The default value is ``false``.  AWS charges for all public IPv4 addresses, including public IPv4 addresses associated with running instances and Elastic IP addresses. For more information, see the *Public IPv4 Address* tab on the [VPC pricing page](https://docs.aws.amazon.com/vpc/pricing/).",
        SerializedName = @"mapPublicIpOnLaunch",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AwPropertyMapPublicIPOnLaunch { get; set; }
        /// <summary>Property networkAclAssociationId</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property networkAclAssociationId",
        SerializedName = @"networkAclAssociationId",
        PossibleTypes = new [] { typeof(string) })]
        string AwPropertyNetworkAclAssociationId { get; set; }
        /// <summary>The Amazon Resource Name (ARN) of the Outpost.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Amazon Resource Name (ARN) of the Outpost.",
        SerializedName = @"outpostArn",
        PossibleTypes = new [] { typeof(string) })]
        string AwPropertyOutpostArn { get; set; }
        /// <summary>Property subnetId</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property subnetId",
        SerializedName = @"subnetId",
        PossibleTypes = new [] { typeof(string) })]
        string AwPropertySubnetId { get; set; }
        /// <summary>Any tags assigned to the subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Any tags assigned to the subnet.",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated21) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated21[] AwPropertyTag { get; set; }
        /// <summary>
        /// The ID of the VPC the subnet is in. If you update this property, you must also update the ``CidrBlock`` property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ID of the VPC the subnet is in. If you update this property, you must also update the ``CidrBlock`` property.",
        SerializedName = @"vpcId",
        PossibleTypes = new [] { typeof(string) })]
        string AwPropertyVpcId { get; set; }
        /// <summary>AWS Account ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Account ID",
        SerializedName = @"awsAccountId",
        PossibleTypes = new [] { typeof(string) })]
        string AwsAccountId { get; set; }
        /// <summary>AWS Region</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Region",
        SerializedName = @"awsRegion",
        PossibleTypes = new [] { typeof(string) })]
        string AwsRegion { get; set; }
        /// <summary>AWS Source Schema</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Source Schema",
        SerializedName = @"awsSourceSchema",
        PossibleTypes = new [] { typeof(string) })]
        string AwsSourceSchema { get; set; }
        /// <summary>AWS Tags</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Tags",
        SerializedName = @"awsTags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesAwsTags) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesAwsTags AwsTag { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"Azure-AsyncOperation",
        PossibleTypes = new [] { typeof(string) })]
        string AzureAsyncOperation { get; set; }
        /// <summary>Property enableResourceNameDnsARecord</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property enableResourceNameDnsARecord",
        SerializedName = @"enableResourceNameDnsARecord",
        PossibleTypes = new [] { typeof(bool) })]
        bool? PrivateDnsNameOptionOnLaunchEnableResourceNameDnsARecord { get; set; }
        /// <summary>Property enableResourceNameDnsAAAARecord</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property enableResourceNameDnsAAAARecord",
        SerializedName = @"enableResourceNameDnsAAAARecord",
        PossibleTypes = new [] { typeof(bool) })]
        bool? PrivateDnsNameOptionOnLaunchEnableResourceNameDnsAaaaRecord { get; set; }
        /// <summary>Property hostnameType</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property hostnameType",
        SerializedName = @"hostnameType",
        PossibleTypes = new [] { typeof(string) })]
        string PrivateDnsNameOptionOnLaunchHostnameType { get; set; }
        /// <summary>The IPv6 network ranges for the subnet, in CIDR notation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The IPv6 network ranges for the subnet, in CIDR notation.",
        SerializedName = @"ipv6CidrBlocks",
        PossibleTypes = new [] { typeof(string) })]
        string[] PropertiesAwsPropertiesIpv6CidrBlocks { get; set; }
        /// <summary>The status of the last operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The status of the last operation.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? ProvisioningState { get;  }
        /// <summary>Public Cloud Connectors Resource ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Public Cloud Connectors Resource ID",
        SerializedName = @"publicCloudConnectorsResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string PublicCloudConnectorsResourceId { get; set; }
        /// <summary>Public Cloud Resource Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Public Cloud Resource Name",
        SerializedName = @"publicCloudResourceName",
        PossibleTypes = new [] { typeof(string) })]
        string PublicCloudResourceName { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"Retry-After",
        PossibleTypes = new [] { typeof(int) })]
        int? RetryAfter { get; set; }

    }
    /// A Microsoft.AwsConnector resource
    internal partial interface IEc2SubnetInternal :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResourceInternal
    {
        /// <summary>Amazon Resource Name (ARN)</summary>
        string Arn { get; set; }
        /// <summary>
        /// Indicates whether a network interface created in this subnet receives an IPv6 address. The default value is ``false``.
        /// If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
        /// </summary>
        bool? AwPropertyAssignIpv6AddressOnCreation { get; set; }
        /// <summary>
        /// The Availability Zone of the subnet. If you update this property, you must also update the ``CidrBlock`` property.
        /// </summary>
        string AwPropertyAvailabilityZone { get; set; }
        /// <summary>The AZ ID of the subnet.</summary>
        string AwPropertyAvailabilityZoneId { get; set; }
        /// <summary>
        /// The IPv4 CIDR block assigned to the subnet. If you update this property, we create a new subnet, and then delete the existing
        /// one.
        /// </summary>
        string AwPropertyCidrBlock { get; set; }
        /// <summary>
        /// Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses
        /// for IPv4-only destinations. For more information, see [DNS64 and NAT64](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-nat64-dns64)
        /// in the *User Guide*.
        /// </summary>
        bool? AwPropertyEnableDns64 { get; set; }
        /// <summary>
        /// Indicates the device position for local network interfaces in this subnet. For example, ``1`` indicates local network
        /// interfaces in this subnet are the secondary network interface (eth1).
        /// </summary>
        int? AwPropertyEnableLniAtDeviceIndex { get; set; }
        /// <summary>An IPv4 IPAM pool ID for the subnet.</summary>
        string AwPropertyIpv4IpamPoolId { get; set; }
        /// <summary>An IPv4 netmask length for the subnet.</summary>
        int? AwPropertyIpv4NetmaskLength { get; set; }
        /// <summary>
        /// The IPv6 CIDR block. If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
        /// </summary>
        string AwPropertyIpv6CidrBlock { get; set; }
        /// <summary>An IPv6 IPAM pool ID for the subnet.</summary>
        string AwPropertyIpv6IpamPoolId { get; set; }
        /// <summary>
        /// Indicates whether this is an IPv6 only subnet. For more information, see [Subnet basics](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html#subnet-basics)
        /// in the *User Guide*.
        /// </summary>
        bool? AwPropertyIpv6Native { get; set; }
        /// <summary>An IPv6 netmask length for the subnet.</summary>
        int? AwPropertyIpv6NetmaskLength { get; set; }
        /// <summary>
        /// Indicates whether instances launched in this subnet receive a public IPv4 address. The default value is ``false``. AWS
        /// charges for all public IPv4 addresses, including public IPv4 addresses associated with running instances and Elastic IP
        /// addresses. For more information, see the *Public IPv4 Address* tab on the [VPC pricing page](https://docs.aws.amazon.com/vpc/pricing/).
        /// </summary>
        bool? AwPropertyMapPublicIPOnLaunch { get; set; }
        /// <summary>Property networkAclAssociationId</summary>
        string AwPropertyNetworkAclAssociationId { get; set; }
        /// <summary>The Amazon Resource Name (ARN) of the Outpost.</summary>
        string AwPropertyOutpostArn { get; set; }
        /// <summary>
        /// The hostname type for EC2 instances launched into this subnet and how DNS A and AAAA record queries to the instances should
        /// be handled. For more information, see [Amazon EC2 instance hostname types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html)
        /// in the *User Guide*. Available options: + EnableResourceNameDnsAAAARecord (true | false) + EnableResourceNameDnsARecord
        /// (true | false) + HostnameType (ip-name | resource-name)
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IPrivateDnsNameOptionsOnLaunchModelProperties AwPropertyPrivateDnsNameOptionsOnLaunch { get; set; }
        /// <summary>Property subnetId</summary>
        string AwPropertySubnetId { get; set; }
        /// <summary>Any tags assigned to the subnet.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated21[] AwPropertyTag { get; set; }
        /// <summary>
        /// The ID of the VPC the subnet is in. If you update this property, you must also update the ``CidrBlock`` property.
        /// </summary>
        string AwPropertyVpcId { get; set; }
        /// <summary>AWS Account ID</summary>
        string AwsAccountId { get; set; }
        /// <summary>AWS Properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEc2SubnetProperties AwsProperty { get; set; }
        /// <summary>AWS Region</summary>
        string AwsRegion { get; set; }
        /// <summary>AWS Source Schema</summary>
        string AwsSourceSchema { get; set; }
        /// <summary>AWS Tags</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetPropertiesAwsTags AwsTag { get; set; }

        string AzureAsyncOperation { get; set; }
        /// <summary>Property enableResourceNameDnsARecord</summary>
        bool? PrivateDnsNameOptionOnLaunchEnableResourceNameDnsARecord { get; set; }
        /// <summary>Property enableResourceNameDnsAAAARecord</summary>
        bool? PrivateDnsNameOptionOnLaunchEnableResourceNameDnsAaaaRecord { get; set; }
        /// <summary>Property hostnameType</summary>
        string PrivateDnsNameOptionOnLaunchHostnameType { get; set; }
        /// <summary>The IPv6 network ranges for the subnet, in CIDR notation.</summary>
        string[] PropertiesAwsPropertiesIpv6CidrBlocks { get; set; }
        /// <summary>The resource-specific properties for this resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEc2SubnetProperties Property { get; set; }
        /// <summary>The status of the last operation.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? ProvisioningState { get; set; }
        /// <summary>Public Cloud Connectors Resource ID</summary>
        string PublicCloudConnectorsResourceId { get; set; }
        /// <summary>Public Cloud Resource Name</summary>
        string PublicCloudResourceName { get; set; }

        int? RetryAfter { get; set; }

    }
}