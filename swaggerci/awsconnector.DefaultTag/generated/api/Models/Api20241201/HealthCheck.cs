// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of HealthCheck</summary>
    public partial class HealthCheck :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IHealthCheck,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IHealthCheckInternal
    {

        /// <summary>Backing field for <see cref="Command" /> property.</summary>
        private string[] _command;

        /// <summary>
        /// A string array representing the command that the container runs to determine if it is healthy. The string array must start
        /// with ``CMD`` to run the command arguments directly, or ``CMD-SHELL`` to run the command with the container's default shell.
        /// When you use the AWS Management Console JSON panel, the CLIlong, or the APIs, enclose the list of commands in double quotes
        /// and brackets. ``[ 'CMD-SHELL', 'curl -f http://localhost/ || exit 1' ]`` You don't include the double quotes and brackets
        /// when you use the AWS Management Console. ``CMD-SHELL, curl -f http://localhost/ || exit 1`` An exit code of 0 indicates
        /// success, and non-zero exit code indicates failure. For more information, see ``HealthCheck`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
        /// section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string[] Command { get => this._command; set => this._command = value; }

        /// <summary>Backing field for <see cref="Interval" /> property.</summary>
        private int? _interval;

        /// <summary>
        /// The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default
        /// value is 30 seconds.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? Interval { get => this._interval; set => this._interval = value; }

        /// <summary>Backing field for <see cref="Retry" /> property.</summary>
        private int? _retry;

        /// <summary>
        /// The number of times to retry a failed health check before the container is considered unhealthy. You may specify between
        /// 1 and 10 retries. The default value is 3.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? Retry { get => this._retry; set => this._retry = value; }

        /// <summary>Backing field for <see cref="StartPeriod" /> property.</summary>
        private int? _startPeriod;

        /// <summary>
        /// The optional grace period to provide containers time to bootstrap before failed health checks count towards the maximum
        /// number of retries. You can specify between 0 and 300 seconds. By default, the ``startPeriod`` is off. If a health check
        /// succeeds within the ``startPeriod``, then the container is considered healthy and any subsequent failures count toward
        /// the maximum number of retries.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? StartPeriod { get => this._startPeriod; set => this._startPeriod = value; }

        /// <summary>Backing field for <see cref="Timeout" /> property.</summary>
        private int? _timeout;

        /// <summary>
        /// The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between
        /// 2 and 60 seconds. The default value is 5.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? Timeout { get => this._timeout; set => this._timeout = value; }

        /// <summary>Creates an new <see cref="HealthCheck" /> instance.</summary>
        public HealthCheck()
        {

        }
    }
    /// Definition of HealthCheck
    public partial interface IHealthCheck :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary>
        /// A string array representing the command that the container runs to determine if it is healthy. The string array must start
        /// with ``CMD`` to run the command arguments directly, or ``CMD-SHELL`` to run the command with the container's default shell.
        /// When you use the AWS Management Console JSON panel, the CLIlong, or the APIs, enclose the list of commands in double quotes
        /// and brackets. ``[ 'CMD-SHELL', 'curl -f http://localhost/ || exit 1' ]`` You don't include the double quotes and brackets
        /// when you use the AWS Management Console. ``CMD-SHELL, curl -f http://localhost/ || exit 1`` An exit code of 0 indicates
        /// success, and non-zero exit code indicates failure. For more information, see ``HealthCheck`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
        /// section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A string array representing the command that the container runs to determine if it is healthy. The string array must start with ``CMD`` to run the command arguments directly, or ``CMD-SHELL`` to run the command with the container's default shell.   When you use the AWS Management Console JSON panel, the CLIlong, or the APIs, enclose the list of commands in double quotes and brackets.  ``[ 'CMD-SHELL', 'curl -f http://localhost/ || exit 1' ]``  You don't include the double quotes and brackets when you use the AWS Management Console.  ``CMD-SHELL, curl -f http://localhost/ || exit 1``  An exit code of 0 indicates success, and non-zero exit code indicates failure. For more information, see ``HealthCheck`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/).",
        SerializedName = @"command",
        PossibleTypes = new [] { typeof(string) })]
        string[] Command { get; set; }
        /// <summary>
        /// The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default
        /// value is 30 seconds.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds.",
        SerializedName = @"interval",
        PossibleTypes = new [] { typeof(int) })]
        int? Interval { get; set; }
        /// <summary>
        /// The number of times to retry a failed health check before the container is considered unhealthy. You may specify between
        /// 1 and 10 retries. The default value is 3.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is 3.",
        SerializedName = @"retries",
        PossibleTypes = new [] { typeof(int) })]
        int? Retry { get; set; }
        /// <summary>
        /// The optional grace period to provide containers time to bootstrap before failed health checks count towards the maximum
        /// number of retries. You can specify between 0 and 300 seconds. By default, the ``startPeriod`` is off. If a health check
        /// succeeds within the ``startPeriod``, then the container is considered healthy and any subsequent failures count toward
        /// the maximum number of retries.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The optional grace period to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You can specify between 0 and 300 seconds. By default, the ``startPeriod`` is off.  If a health check succeeds within the ``startPeriod``, then the container is considered healthy and any subsequent failures count toward the maximum number of retries.",
        SerializedName = @"startPeriod",
        PossibleTypes = new [] { typeof(int) })]
        int? StartPeriod { get; set; }
        /// <summary>
        /// The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between
        /// 2 and 60 seconds. The default value is 5.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5.",
        SerializedName = @"timeout",
        PossibleTypes = new [] { typeof(int) })]
        int? Timeout { get; set; }

    }
    /// Definition of HealthCheck
    internal partial interface IHealthCheckInternal

    {
        /// <summary>
        /// A string array representing the command that the container runs to determine if it is healthy. The string array must start
        /// with ``CMD`` to run the command arguments directly, or ``CMD-SHELL`` to run the command with the container's default shell.
        /// When you use the AWS Management Console JSON panel, the CLIlong, or the APIs, enclose the list of commands in double quotes
        /// and brackets. ``[ 'CMD-SHELL', 'curl -f http://localhost/ || exit 1' ]`` You don't include the double quotes and brackets
        /// when you use the AWS Management Console. ``CMD-SHELL, curl -f http://localhost/ || exit 1`` An exit code of 0 indicates
        /// success, and non-zero exit code indicates failure. For more information, see ``HealthCheck`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
        /// section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/).
        /// </summary>
        string[] Command { get; set; }
        /// <summary>
        /// The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default
        /// value is 30 seconds.
        /// </summary>
        int? Interval { get; set; }
        /// <summary>
        /// The number of times to retry a failed health check before the container is considered unhealthy. You may specify between
        /// 1 and 10 retries. The default value is 3.
        /// </summary>
        int? Retry { get; set; }
        /// <summary>
        /// The optional grace period to provide containers time to bootstrap before failed health checks count towards the maximum
        /// number of retries. You can specify between 0 and 300 seconds. By default, the ``startPeriod`` is off. If a health check
        /// succeeds within the ``startPeriod``, then the container is considered healthy and any subsequent failures count toward
        /// the maximum number of retries.
        /// </summary>
        int? StartPeriod { get; set; }
        /// <summary>
        /// The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between
        /// 2 and 60 seconds. The default value is 5.
        /// </summary>
        int? Timeout { get; set; }

    }
}