// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>A Microsoft.AwsConnector resource</summary>
    public partial class ConfigServiceConfigurationRecorder :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorder,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderInternal,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IValidates,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IHeaderSerializable
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResource __trackedResource = new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.TrackedResource();

        /// <summary>Amazon Resource Name (ARN)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string Arn { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).Arn; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).Arn = value ?? null; }

        /// <summary>
        /// <p>The name of the configuration recorder. Config automatically assigns the name of 'default' when creating the configuration
        /// recorder.</p> <note> <p>You cannot change the name of the configuration recorder after it has been created. To change
        /// the configuration recorder name, you must delete it and create a new configuration recorder with a new name. </p> </note>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwPropertyName { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).AwPropertyName; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).AwPropertyName = value ?? null; }

        /// <summary>
        /// <p>Amazon Resource Name (ARN) of the IAM role assumed by Config and used by the configuration recorder.</p> <note> <p>While
        /// the API model does not require this field, the server will reject a request without a defined <code>roleARN</code> for
        /// the configuration recorder.</p> </note> <note> <p> <b>Pre-existing Config role</b> </p> <p>If you have used an Amazon
        /// Web Services service that uses Config, such as Security Hub or Control Tower, and an Config role has already been created,
        /// make sure that the IAM role that you use when setting up Config keeps the same minimum permissions as the already created
        /// Config role. You must do this so that the other Amazon Web Services service continues to run as expected. </p> <p>For
        /// example, if Control Tower has an IAM role that allows Config to read Amazon Simple Storage Service (Amazon S3) objects,
        /// make sure that the same permissions are granted within the IAM role you use when setting up Config. Otherwise, it may
        /// interfere with how Control Tower operates. For more information about IAM roles for Config, see <a href='https://docs.aws.amazon.com/config/latest/developerguide/security-iam.html'>
        /// <b>Identity and Access Management for Config</b> </a> in the <i>Config Developer Guide</i>. </p> </note>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwPropertyRoleArn { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).AwPropertyRoleArn; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).AwPropertyRoleArn = value ?? null; }

        /// <summary>AWS Account ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwsAccountId { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).AwsAccountId; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).AwsAccountId = value ?? null; }

        /// <summary>AWS Region</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwsRegion { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).AwsRegion; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).AwsRegion = value ?? null; }

        /// <summary>AWS Source Schema</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string AwsSourceSchema { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).AwsSourceSchema; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).AwsSourceSchema = value ?? null; }

        /// <summary>AWS Tags</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesAwsTags AwsTag { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).AwsTag; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).AwsTag = value ?? null /* model class */; }

        /// <summary>Backing field for <see cref="AzureAsyncOperation" /> property.</summary>
        private string _azureAsyncOperation;

        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string AzureAsyncOperation { get => this._azureAsyncOperation; set => this._azureAsyncOperation = value; }

        /// <summary>
        /// <p>A comma-separated list of resource types to exclude from recording by the configuration recorder.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ResourceType[] ExclusionByResourceType { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).ExclusionByResourceType; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).ExclusionByResourceType = value ?? null /* arrayOf */; }

        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).Id; }

        /// <summary>The geo-location where the resource lives</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public string Location { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResourceInternal)__trackedResource).Location; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResourceInternal)__trackedResource).Location = value ; }

        /// <summary>Internal Acessors for AwPropertyRecordingGroup</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IRecordingGroup Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderInternal.AwPropertyRecordingGroup { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).AwPropertyRecordingGroup; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).AwPropertyRecordingGroup = value; }

        /// <summary>Internal Acessors for AwPropertyRecordingMode</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IRecordingMode Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderInternal.AwPropertyRecordingMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).AwPropertyRecordingMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).AwPropertyRecordingMode = value; }

        /// <summary>Internal Acessors for AwsProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsConfigServiceConfigurationRecorderProperties Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderInternal.AwsProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).AwsProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).AwsProperty = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderProperties Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ConfigServiceConfigurationRecorderProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).ProvisioningState = value; }

        /// <summary>Internal Acessors for RecordingGroupExclusionByResourceType</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IExclusionByResourceTypes Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderInternal.RecordingGroupExclusionByResourceType { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).RecordingGroupExclusionByResourceType; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).RecordingGroupExclusionByResourceType = value; }

        /// <summary>Internal Acessors for RecordingGroupRecordingStrategy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IRecordingStrategy Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderInternal.RecordingGroupRecordingStrategy { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).RecordingGroupRecordingStrategy; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).RecordingGroupRecordingStrategy = value; }

        /// <summary>Internal Acessors for RecordingModeRecordingFrequency</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IRecordingFrequencyEnumValue Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderInternal.RecordingModeRecordingFrequency { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).RecordingModeRecordingFrequency; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).RecordingModeRecordingFrequency = value; }

        /// <summary>Internal Acessors for RecordingStrategyUseOnly</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IRecordingStrategyTypeEnumValue Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderInternal.RecordingStrategyUseOnly { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).RecordingStrategyUseOnly; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).RecordingStrategyUseOnly = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).Name = value; }

        /// <summary>Internal Acessors for SystemData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ISystemData Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal.SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemData; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemData = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).Type = value; }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).Name; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderProperties _property;

        /// <summary>The resource-specific properties for this resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ConfigServiceConfigurationRecorderProperties()); set => this._property = value; }

        /// <summary>The status of the last operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).ProvisioningState; }

        /// <summary>Public Cloud Connectors Resource ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string PublicCloudConnectorsResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).PublicCloudConnectorsResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).PublicCloudConnectorsResourceId = value ?? null; }

        /// <summary>Public Cloud Resource Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string PublicCloudResourceName { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).PublicCloudResourceName; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).PublicCloudResourceName = value ?? null; }

        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.RecordingFrequency? RecordingFrequencyValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).RecordingFrequencyValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).RecordingFrequencyValue = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.RecordingFrequency)""); }

        /// <summary>
        /// <p>Specifies whether Config records configuration changes for all supported resource types, excluding the global IAM resource
        /// types.</p> <p>If you set this field to <code>true</code>, when Config adds support for a new resource type, Config starts
        /// recording resources of that type automatically.</p> <p>If you set this field to <code>true</code>, you cannot enumerate
        /// specific resource types to record in the <code>resourceTypes</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingGroup.html'>RecordingGroup</a>,
        /// or to exclude in the <code>resourceTypes</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_ExclusionByResourceTypes.html'>ExclusionByResourceTypes</a>.</p>
        /// <note> <p> <b>Region availability</b> </p> <p>Check <a href='https://docs.aws.amazon.com/config/latest/developerguide/what-is-resource-config-coverage.html'>Resource
        /// Coverage by Region Availability</a> to see if a resource type is supported in the Amazon Web Services Region where you
        /// set up Config.</p> </note>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? RecordingGroupAllSupported { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).RecordingGroupAllSupported; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).RecordingGroupAllSupported = value ?? default(bool); }

        /// <summary>
        /// <p>This option is a bundle which only applies to the global IAM resource types: IAM users, groups, roles, and customer
        /// managed policies. These global IAM resource types can only be recorded by Config in Regions where Config was available
        /// before February 2022. You cannot be record the global IAM resouce types in Regions supported by Config after February
        /// 2022. This list where you cannot record the global IAM resource types includes the following Regions:</p> <ul> <li> <p>Asia
        /// Pacific (Hyderabad)</p> </li> <li> <p>Asia Pacific (Melbourne)</p> </li> <li> <p>Canada West (Calgary)</p> </li> <li>
        /// <p>Europe (Spain)</p> </li> <li> <p>Europe (Zurich)</p> </li> <li> <p>Israel (Tel Aviv)</p> </li> <li> <p>Middle East
        /// (UAE)</p> </li> </ul> <important> <p> <b>Aurora global clusters are recorded in all enabled Regions</b> </p> <p>The <code>AWS::RDS::GlobalCluster</code>
        /// resource type will be recorded in all supported Config Regions where the configuration recorder is enabled, even if <code>includeGlobalResourceTypes</code>
        /// is set<code>false</code>. The <code>includeGlobalResourceTypes</code> option is a bundle which only applies to IAM users,
        /// groups, roles, and customer managed policies. </p> <p>If you do not want to record <code>AWS::RDS::GlobalCluster</code>
        /// in all enabled Regions, use one of the following recording strategies:</p> <ol> <li> <p> <b>Record all current and future
        /// resource types with exclusions</b> (<code>EXCLUSION_BY_RESOURCE_TYPES</code>), or</p> </li> <li> <p> <b>Record specific
        /// resource types</b> (<code>INCLUSION_BY_RESOURCE_TYPES</code>).</p> </li> </ol> <p>For more information, see <a href='https://docs.aws.amazon.com/config/latest/developerguide/select-resources.html#select-resources-all'>Selecting
        /// Which Resources are Recorded</a> in the <i>Config developer guide</i>.</p> </important> <important> <p> <b>includeGlobalResourceTypes
        /// and the exclusion recording strategy</b> </p> <p>The <code>includeGlobalResourceTypes</code> field has no impact on the
        /// <code>EXCLUSION_BY_RESOURCE_TYPES</code> recording strategy. This means that the global IAM resource types (IAM users,
        /// groups, roles, and customer managed policies) will not be automatically added as exclusions for <code>exclusionByResourceTypes</code>
        /// when <code>includeGlobalResourceTypes</code> is set to <code>false</code>.</p> <p>The <code>includeGlobalResourceTypes</code>
        /// field should only be used to modify the <code>AllSupported</code> field, as the default for the <code>AllSupported</code>
        /// field is to record configuration changes for all supported resource types excluding the global IAM resource types. To
        /// include the global IAM resource types when <code>AllSupported</code> is set to <code>true</code>, make sure to set <code>includeGlobalResourceTypes</code>
        /// to <code>true</code>.</p> <p>To exclude the global IAM resource types for the <code>EXCLUSION_BY_RESOURCE_TYPES</code>
        /// recording strategy, you need to manually add them to the <code>resourceTypes</code> field of <code>exclusionByResourceTypes</code>.</p>
        /// </important> <note> <p> <b>Required and optional fields</b> </p> <p>Before you set this field to <code>true</code>, set
        /// the <code>allSupported</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingGroup.html'>RecordingGroup</a>
        /// to <code>true</code>. Optionally, you can set the <code>useOnly</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingStrategy.html'>RecordingStrategy</a>
        /// to <code>ALL_SUPPORTED_RESOURCE_TYPES</code>.</p> </note> <note> <p> <b>Overriding fields</b> </p> <p>If you set this
        /// field to <code>false</code> but list global IAM resource types in the <code>resourceTypes</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingGroup.html'>RecordingGroup</a>,
        /// Config will still record configuration changes for those specified resource types <i>regardless</i> of if you set the
        /// <code>includeGlobalResourceTypes</code> field to false.</p> <p>If you do not want to record configuration changes to the
        /// global IAM resource types (IAM users, groups, roles, and customer managed policies), make sure to not list them in the
        /// <code>resourceTypes</code> field in addition to setting the <code>includeGlobalResourceTypes</code> field to false.</p>
        /// </note>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public bool? RecordingGroupIncludeGlobalResourceType { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).RecordingGroupIncludeGlobalResourceType; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).RecordingGroupIncludeGlobalResourceType = value ?? default(bool); }

        /// <summary>
        /// <p>A comma-separated list that specifies which resource types Config records.</p> <p>For a list of valid <code>resourceTypes</code>
        /// values, see the <b>Resource Type Value</b> column in <a href='https://docs.aws.amazon.com/config/latest/developerguide/resource-config-reference.html#supported-resources'>Supported
        /// Amazon Web Services resource Types</a> in the <i>Config developer guide</i>.</p> <note> <p> <b>Required and optional fields</b>
        /// </p> <p>Optionally, you can set the <code>useOnly</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingStrategy.html'>RecordingStrategy</a>
        /// to <code>INCLUSION_BY_RESOURCE_TYPES</code>.</p> <p>To record all configuration changes, set the <code>allSupported</code>
        /// field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingGroup.html'>RecordingGroup</a> to
        /// <code>true</code>, and either omit this field or don't specify any resource types in this field. If you set the <code>allSupported</code>
        /// field to <code>false</code> and specify values for <code>resourceTypes</code>, when Config adds support for a new type
        /// of resource, it will not record resources of that type unless you manually add that type to your recording group.</p>
        /// </note> <note> <p> <b>Region availability</b> </p> <p>Before specifying a resource type for Config to track, check <a
        /// href='https://docs.aws.amazon.com/config/latest/developerguide/what-is-resource-config-coverage.html'>Resource Coverage
        /// by Region Availability</a> to see if the resource type is supported in the Amazon Web Services Region where you set up
        /// Config. If a resource type is supported by Config in at least one Region, you can enable the recording of that resource
        /// type in all Regions supported by Config, even if the specified resource type is not supported in the Amazon Web Services
        /// Region where you set up Config.</p> </note>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ResourceType[] RecordingGroupResourceType { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).RecordingGroupResourceType; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).RecordingGroupResourceType = value ?? null /* arrayOf */; }

        /// <summary>
        /// <p>An array of <code>recordingModeOverride</code> objects for you to specify your overrides for the recording mode. The
        /// <code>recordingModeOverride</code> object in the <code>recordingModeOverrides</code> array consists of three fields: a
        /// <code>description</code>, the new <code>recordingFrequency</code>, and an array of <code>resourceTypes</code> to override.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IRecordingModeOverride[] RecordingModeOverride { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).RecordingModeOverride; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).RecordingModeOverride = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="RetryAfter" /> property.</summary>
        private int? _retryAfter;

        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? RetryAfter { get => this._retryAfter; set => this._retryAfter = value; }

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ISystemData SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemData; }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataCreatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataCreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public string SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataCreatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataCreatedBy = value ?? null; }

        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CreatedByType? SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataCreatedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataCreatedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CreatedByType)""); }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataLastModifiedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataLastModifiedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public string SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataLastModifiedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataLastModifiedBy = value ?? null; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CreatedByType? SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataLastModifiedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).SystemDataLastModifiedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.CreatedByType)""); }

        /// <summary>Resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResourceTags Tag { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResourceInternal)__trackedResource).Tag; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResourceInternal)__trackedResource).Tag = value ?? null /* model class */; }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IResourceInternal)__trackedResource).Type; }

        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.RecordingStrategyType? UseOnlyValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).UseOnlyValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesInternal)Property).UseOnlyValue = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.RecordingStrategyType)""); }

        /// <summary>Creates an new <see cref="ConfigServiceConfigurationRecorder" /> instance.</summary>
        public ConfigServiceConfigurationRecorder()
        {

        }

        /// <param name="headers"></param>
        void Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IHeaderSerializable.ReadHeaders(global::System.Net.Http.Headers.HttpResponseHeaders headers)
        {
            if (headers.TryGetValues("Azure-AsyncOperation", out var __azureAsyncOperationHeader0))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderInternal)this).AzureAsyncOperation = System.Linq.Enumerable.FirstOrDefault(__azureAsyncOperationHeader0) is string __headerAzureAsyncOperationHeader0 ? __headerAzureAsyncOperationHeader0 : (string)null;
            }
            if (headers.TryGetValues("Retry-After", out var __retryAfterHeader1))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderInternal)this).RetryAfter = System.Linq.Enumerable.FirstOrDefault(__retryAfterHeader1) is string __headerRetryAfterHeader1 ? int.TryParse( __headerRetryAfterHeader1, out int __headerRetryAfterHeader1Value ) ? __headerRetryAfterHeader1Value : default(int?) : default(int?);
            }
        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__trackedResource), __trackedResource);
            await eventListener.AssertObjectIsValid(nameof(__trackedResource), __trackedResource);
        }
    }
    /// A Microsoft.AwsConnector resource
    public partial interface IConfigServiceConfigurationRecorder :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResource
    {
        /// <summary>Amazon Resource Name (ARN)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Amazon Resource Name (ARN)",
        SerializedName = @"arn",
        PossibleTypes = new [] { typeof(string) })]
        string Arn { get; set; }
        /// <summary>
        /// <p>The name of the configuration recorder. Config automatically assigns the name of 'default' when creating the configuration
        /// recorder.</p> <note> <p>You cannot change the name of the configuration recorder after it has been created. To change
        /// the configuration recorder name, you must delete it and create a new configuration recorder with a new name. </p> </note>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The name of the configuration recorder. Config automatically assigns the name of 'default' when creating the configuration recorder.</p> <note> <p>You cannot change the name of the configuration recorder after it has been created. To change the configuration recorder name, you must delete it and create a new configuration recorder with a new name. </p> </note>",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string AwPropertyName { get; set; }
        /// <summary>
        /// <p>Amazon Resource Name (ARN) of the IAM role assumed by Config and used by the configuration recorder.</p> <note> <p>While
        /// the API model does not require this field, the server will reject a request without a defined <code>roleARN</code> for
        /// the configuration recorder.</p> </note> <note> <p> <b>Pre-existing Config role</b> </p> <p>If you have used an Amazon
        /// Web Services service that uses Config, such as Security Hub or Control Tower, and an Config role has already been created,
        /// make sure that the IAM role that you use when setting up Config keeps the same minimum permissions as the already created
        /// Config role. You must do this so that the other Amazon Web Services service continues to run as expected. </p> <p>For
        /// example, if Control Tower has an IAM role that allows Config to read Amazon Simple Storage Service (Amazon S3) objects,
        /// make sure that the same permissions are granted within the IAM role you use when setting up Config. Otherwise, it may
        /// interfere with how Control Tower operates. For more information about IAM roles for Config, see <a href='https://docs.aws.amazon.com/config/latest/developerguide/security-iam.html'>
        /// <b>Identity and Access Management for Config</b> </a> in the <i>Config Developer Guide</i>. </p> </note>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>Amazon Resource Name (ARN) of the IAM role assumed by Config and used by the configuration recorder.</p> <note> <p>While the API model does not require this field, the server will reject a request without a defined <code>roleARN</code> for the configuration recorder.</p> </note> <note> <p> <b>Pre-existing Config role</b> </p> <p>If you have used an Amazon Web Services service that uses Config, such as Security Hub or Control Tower, and an Config role has already been created, make sure that the IAM role that you use when setting up Config keeps the same minimum permissions as the already created Config role. You must do this so that the other Amazon Web Services service continues to run as expected. </p> <p>For example, if Control Tower has an IAM role that allows Config to read Amazon Simple Storage Service (Amazon S3) objects, make sure that the same permissions are granted within the IAM role you use when setting up Config. Otherwise, it may interfere with how Control Tower operates. For more information about IAM roles for Config, see <a href='https://docs.aws.amazon.com/config/latest/developerguide/security-iam.html'> <b>Identity and Access Management for Config</b> </a> in the <i>Config Developer Guide</i>. </p> </note>",
        SerializedName = @"roleARN",
        PossibleTypes = new [] { typeof(string) })]
        string AwPropertyRoleArn { get; set; }
        /// <summary>AWS Account ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Account ID",
        SerializedName = @"awsAccountId",
        PossibleTypes = new [] { typeof(string) })]
        string AwsAccountId { get; set; }
        /// <summary>AWS Region</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Region",
        SerializedName = @"awsRegion",
        PossibleTypes = new [] { typeof(string) })]
        string AwsRegion { get; set; }
        /// <summary>AWS Source Schema</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Source Schema",
        SerializedName = @"awsSourceSchema",
        PossibleTypes = new [] { typeof(string) })]
        string AwsSourceSchema { get; set; }
        /// <summary>AWS Tags</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Tags",
        SerializedName = @"awsTags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesAwsTags) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesAwsTags AwsTag { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"Azure-AsyncOperation",
        PossibleTypes = new [] { typeof(string) })]
        string AzureAsyncOperation { get; set; }
        /// <summary>
        /// <p>A comma-separated list of resource types to exclude from recording by the configuration recorder.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>A comma-separated list of resource types to exclude from recording by the configuration recorder.</p>",
        SerializedName = @"resourceTypes",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ResourceType) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ResourceType[] ExclusionByResourceType { get; set; }
        /// <summary>The status of the last operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The status of the last operation.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? ProvisioningState { get;  }
        /// <summary>Public Cloud Connectors Resource ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Public Cloud Connectors Resource ID",
        SerializedName = @"publicCloudConnectorsResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string PublicCloudConnectorsResourceId { get; set; }
        /// <summary>Public Cloud Resource Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Public Cloud Resource Name",
        SerializedName = @"publicCloudResourceName",
        PossibleTypes = new [] { typeof(string) })]
        string PublicCloudResourceName { get; set; }
        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property value",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.RecordingFrequency) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.RecordingFrequency? RecordingFrequencyValue { get; set; }
        /// <summary>
        /// <p>Specifies whether Config records configuration changes for all supported resource types, excluding the global IAM resource
        /// types.</p> <p>If you set this field to <code>true</code>, when Config adds support for a new resource type, Config starts
        /// recording resources of that type automatically.</p> <p>If you set this field to <code>true</code>, you cannot enumerate
        /// specific resource types to record in the <code>resourceTypes</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingGroup.html'>RecordingGroup</a>,
        /// or to exclude in the <code>resourceTypes</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_ExclusionByResourceTypes.html'>ExclusionByResourceTypes</a>.</p>
        /// <note> <p> <b>Region availability</b> </p> <p>Check <a href='https://docs.aws.amazon.com/config/latest/developerguide/what-is-resource-config-coverage.html'>Resource
        /// Coverage by Region Availability</a> to see if a resource type is supported in the Amazon Web Services Region where you
        /// set up Config.</p> </note>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>Specifies whether Config records configuration changes for all supported resource types, excluding the global IAM resource types.</p> <p>If you set this field to <code>true</code>, when Config adds support for a new resource type, Config starts recording resources of that type automatically.</p> <p>If you set this field to <code>true</code>, you cannot enumerate specific resource types to record in the <code>resourceTypes</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingGroup.html'>RecordingGroup</a>, or to exclude in the <code>resourceTypes</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_ExclusionByResourceTypes.html'>ExclusionByResourceTypes</a>.</p> <note> <p> <b>Region availability</b> </p> <p>Check <a href='https://docs.aws.amazon.com/config/latest/developerguide/what-is-resource-config-coverage.html'>Resource Coverage by Region Availability</a> to see if a resource type is supported in the Amazon Web Services Region where you set up Config.</p> </note>",
        SerializedName = @"allSupported",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RecordingGroupAllSupported { get; set; }
        /// <summary>
        /// <p>This option is a bundle which only applies to the global IAM resource types: IAM users, groups, roles, and customer
        /// managed policies. These global IAM resource types can only be recorded by Config in Regions where Config was available
        /// before February 2022. You cannot be record the global IAM resouce types in Regions supported by Config after February
        /// 2022. This list where you cannot record the global IAM resource types includes the following Regions:</p> <ul> <li> <p>Asia
        /// Pacific (Hyderabad)</p> </li> <li> <p>Asia Pacific (Melbourne)</p> </li> <li> <p>Canada West (Calgary)</p> </li> <li>
        /// <p>Europe (Spain)</p> </li> <li> <p>Europe (Zurich)</p> </li> <li> <p>Israel (Tel Aviv)</p> </li> <li> <p>Middle East
        /// (UAE)</p> </li> </ul> <important> <p> <b>Aurora global clusters are recorded in all enabled Regions</b> </p> <p>The <code>AWS::RDS::GlobalCluster</code>
        /// resource type will be recorded in all supported Config Regions where the configuration recorder is enabled, even if <code>includeGlobalResourceTypes</code>
        /// is set<code>false</code>. The <code>includeGlobalResourceTypes</code> option is a bundle which only applies to IAM users,
        /// groups, roles, and customer managed policies. </p> <p>If you do not want to record <code>AWS::RDS::GlobalCluster</code>
        /// in all enabled Regions, use one of the following recording strategies:</p> <ol> <li> <p> <b>Record all current and future
        /// resource types with exclusions</b> (<code>EXCLUSION_BY_RESOURCE_TYPES</code>), or</p> </li> <li> <p> <b>Record specific
        /// resource types</b> (<code>INCLUSION_BY_RESOURCE_TYPES</code>).</p> </li> </ol> <p>For more information, see <a href='https://docs.aws.amazon.com/config/latest/developerguide/select-resources.html#select-resources-all'>Selecting
        /// Which Resources are Recorded</a> in the <i>Config developer guide</i>.</p> </important> <important> <p> <b>includeGlobalResourceTypes
        /// and the exclusion recording strategy</b> </p> <p>The <code>includeGlobalResourceTypes</code> field has no impact on the
        /// <code>EXCLUSION_BY_RESOURCE_TYPES</code> recording strategy. This means that the global IAM resource types (IAM users,
        /// groups, roles, and customer managed policies) will not be automatically added as exclusions for <code>exclusionByResourceTypes</code>
        /// when <code>includeGlobalResourceTypes</code> is set to <code>false</code>.</p> <p>The <code>includeGlobalResourceTypes</code>
        /// field should only be used to modify the <code>AllSupported</code> field, as the default for the <code>AllSupported</code>
        /// field is to record configuration changes for all supported resource types excluding the global IAM resource types. To
        /// include the global IAM resource types when <code>AllSupported</code> is set to <code>true</code>, make sure to set <code>includeGlobalResourceTypes</code>
        /// to <code>true</code>.</p> <p>To exclude the global IAM resource types for the <code>EXCLUSION_BY_RESOURCE_TYPES</code>
        /// recording strategy, you need to manually add them to the <code>resourceTypes</code> field of <code>exclusionByResourceTypes</code>.</p>
        /// </important> <note> <p> <b>Required and optional fields</b> </p> <p>Before you set this field to <code>true</code>, set
        /// the <code>allSupported</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingGroup.html'>RecordingGroup</a>
        /// to <code>true</code>. Optionally, you can set the <code>useOnly</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingStrategy.html'>RecordingStrategy</a>
        /// to <code>ALL_SUPPORTED_RESOURCE_TYPES</code>.</p> </note> <note> <p> <b>Overriding fields</b> </p> <p>If you set this
        /// field to <code>false</code> but list global IAM resource types in the <code>resourceTypes</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingGroup.html'>RecordingGroup</a>,
        /// Config will still record configuration changes for those specified resource types <i>regardless</i> of if you set the
        /// <code>includeGlobalResourceTypes</code> field to false.</p> <p>If you do not want to record configuration changes to the
        /// global IAM resource types (IAM users, groups, roles, and customer managed policies), make sure to not list them in the
        /// <code>resourceTypes</code> field in addition to setting the <code>includeGlobalResourceTypes</code> field to false.</p>
        /// </note>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>This option is a bundle which only applies to the global IAM resource types: IAM users, groups, roles, and customer managed policies. These global IAM resource types can only be recorded by Config in Regions where Config was available before February 2022. You cannot be record the global IAM resouce types in Regions supported by Config after February 2022. This list where you cannot record the global IAM resource types includes the following Regions:</p> <ul> <li> <p>Asia Pacific (Hyderabad)</p> </li> <li> <p>Asia Pacific (Melbourne)</p> </li> <li> <p>Canada West (Calgary)</p> </li> <li> <p>Europe (Spain)</p> </li> <li> <p>Europe (Zurich)</p> </li> <li> <p>Israel (Tel Aviv)</p> </li> <li> <p>Middle East (UAE)</p> </li> </ul> <important> <p> <b>Aurora global clusters are recorded in all enabled Regions</b> </p> <p>The <code>AWS::RDS::GlobalCluster</code> resource type will be recorded in all supported Config Regions where the configuration recorder is enabled, even if <code>includeGlobalResourceTypes</code> is set<code>false</code>. The <code>includeGlobalResourceTypes</code> option is a bundle which only applies to IAM users, groups, roles, and customer managed policies. </p> <p>If you do not want to record <code>AWS::RDS::GlobalCluster</code> in all enabled Regions, use one of the following recording strategies:</p> <ol> <li> <p> <b>Record all current and future resource types with exclusions</b> (<code>EXCLUSION_BY_RESOURCE_TYPES</code>), or</p> </li> <li> <p> <b>Record specific resource types</b> (<code>INCLUSION_BY_RESOURCE_TYPES</code>).</p> </li> </ol> <p>For more information, see <a href='https://docs.aws.amazon.com/config/latest/developerguide/select-resources.html#select-resources-all'>Selecting Which Resources are Recorded</a> in the <i>Config developer guide</i>.</p> </important> <important> <p> <b>includeGlobalResourceTypes and the exclusion recording strategy</b> </p> <p>The <code>includeGlobalResourceTypes</code> field has no impact on the <code>EXCLUSION_BY_RESOURCE_TYPES</code> recording strategy. This means that the global IAM resource types (IAM users, groups, roles, and customer managed policies) will not be automatically added as exclusions for <code>exclusionByResourceTypes</code> when <code>includeGlobalResourceTypes</code> is set to <code>false</code>.</p> <p>The <code>includeGlobalResourceTypes</code> field should only be used to modify the <code>AllSupported</code> field, as the default for the <code>AllSupported</code> field is to record configuration changes for all supported resource types excluding the global IAM resource types. To include the global IAM resource types when <code>AllSupported</code> is set to <code>true</code>, make sure to set <code>includeGlobalResourceTypes</code> to <code>true</code>.</p> <p>To exclude the global IAM resource types for the <code>EXCLUSION_BY_RESOURCE_TYPES</code> recording strategy, you need to manually add them to the <code>resourceTypes</code> field of <code>exclusionByResourceTypes</code>.</p> </important> <note> <p> <b>Required and optional fields</b> </p> <p>Before you set this field to <code>true</code>, set the <code>allSupported</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingGroup.html'>RecordingGroup</a> to <code>true</code>. Optionally, you can set the <code>useOnly</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingStrategy.html'>RecordingStrategy</a> to <code>ALL_SUPPORTED_RESOURCE_TYPES</code>.</p> </note> <note> <p> <b>Overriding fields</b> </p> <p>If you set this field to <code>false</code> but list global IAM resource types in the <code>resourceTypes</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingGroup.html'>RecordingGroup</a>, Config will still record configuration changes for those specified resource types <i>regardless</i> of if you set the <code>includeGlobalResourceTypes</code> field to false.</p> <p>If you do not want to record configuration changes to the global IAM resource types (IAM users, groups, roles, and customer managed policies), make sure to not list them in the <code>resourceTypes</code> field in addition to setting the <code>includeGlobalResourceTypes</code> field to false.</p> </note>",
        SerializedName = @"includeGlobalResourceTypes",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RecordingGroupIncludeGlobalResourceType { get; set; }
        /// <summary>
        /// <p>A comma-separated list that specifies which resource types Config records.</p> <p>For a list of valid <code>resourceTypes</code>
        /// values, see the <b>Resource Type Value</b> column in <a href='https://docs.aws.amazon.com/config/latest/developerguide/resource-config-reference.html#supported-resources'>Supported
        /// Amazon Web Services resource Types</a> in the <i>Config developer guide</i>.</p> <note> <p> <b>Required and optional fields</b>
        /// </p> <p>Optionally, you can set the <code>useOnly</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingStrategy.html'>RecordingStrategy</a>
        /// to <code>INCLUSION_BY_RESOURCE_TYPES</code>.</p> <p>To record all configuration changes, set the <code>allSupported</code>
        /// field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingGroup.html'>RecordingGroup</a> to
        /// <code>true</code>, and either omit this field or don't specify any resource types in this field. If you set the <code>allSupported</code>
        /// field to <code>false</code> and specify values for <code>resourceTypes</code>, when Config adds support for a new type
        /// of resource, it will not record resources of that type unless you manually add that type to your recording group.</p>
        /// </note> <note> <p> <b>Region availability</b> </p> <p>Before specifying a resource type for Config to track, check <a
        /// href='https://docs.aws.amazon.com/config/latest/developerguide/what-is-resource-config-coverage.html'>Resource Coverage
        /// by Region Availability</a> to see if the resource type is supported in the Amazon Web Services Region where you set up
        /// Config. If a resource type is supported by Config in at least one Region, you can enable the recording of that resource
        /// type in all Regions supported by Config, even if the specified resource type is not supported in the Amazon Web Services
        /// Region where you set up Config.</p> </note>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>A comma-separated list that specifies which resource types Config records.</p> <p>For a list of valid <code>resourceTypes</code> values, see the <b>Resource Type Value</b> column in <a href='https://docs.aws.amazon.com/config/latest/developerguide/resource-config-reference.html#supported-resources'>Supported Amazon Web Services resource Types</a> in the <i>Config developer guide</i>.</p> <note> <p> <b>Required and optional fields</b> </p> <p>Optionally, you can set the <code>useOnly</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingStrategy.html'>RecordingStrategy</a> to <code>INCLUSION_BY_RESOURCE_TYPES</code>.</p> <p>To record all configuration changes, set the <code>allSupported</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingGroup.html'>RecordingGroup</a> to <code>true</code>, and either omit this field or don't specify any resource types in this field. If you set the <code>allSupported</code> field to <code>false</code> and specify values for <code>resourceTypes</code>, when Config adds support for a new type of resource, it will not record resources of that type unless you manually add that type to your recording group.</p> </note> <note> <p> <b>Region availability</b> </p> <p>Before specifying a resource type for Config to track, check <a href='https://docs.aws.amazon.com/config/latest/developerguide/what-is-resource-config-coverage.html'>Resource Coverage by Region Availability</a> to see if the resource type is supported in the Amazon Web Services Region where you set up Config. If a resource type is supported by Config in at least one Region, you can enable the recording of that resource type in all Regions supported by Config, even if the specified resource type is not supported in the Amazon Web Services Region where you set up Config.</p> </note>",
        SerializedName = @"resourceTypes",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ResourceType) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ResourceType[] RecordingGroupResourceType { get; set; }
        /// <summary>
        /// <p>An array of <code>recordingModeOverride</code> objects for you to specify your overrides for the recording mode. The
        /// <code>recordingModeOverride</code> object in the <code>recordingModeOverrides</code> array consists of three fields: a
        /// <code>description</code>, the new <code>recordingFrequency</code>, and an array of <code>resourceTypes</code> to override.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>An array of <code>recordingModeOverride</code> objects for you to specify your overrides for the recording mode. The <code>recordingModeOverride</code> object in the <code>recordingModeOverrides</code> array consists of three fields: a <code>description</code>, the new <code>recordingFrequency</code>, and an array of <code>resourceTypes</code> to override.</p>",
        SerializedName = @"recordingModeOverrides",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IRecordingModeOverride) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IRecordingModeOverride[] RecordingModeOverride { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"Retry-After",
        PossibleTypes = new [] { typeof(int) })]
        int? RetryAfter { get; set; }
        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property value",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.RecordingStrategyType) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.RecordingStrategyType? UseOnlyValue { get; set; }

    }
    /// A Microsoft.AwsConnector resource
    internal partial interface IConfigServiceConfigurationRecorderInternal :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResourceInternal
    {
        /// <summary>Amazon Resource Name (ARN)</summary>
        string Arn { get; set; }
        /// <summary>
        /// <p>The name of the configuration recorder. Config automatically assigns the name of 'default' when creating the configuration
        /// recorder.</p> <note> <p>You cannot change the name of the configuration recorder after it has been created. To change
        /// the configuration recorder name, you must delete it and create a new configuration recorder with a new name. </p> </note>
        /// </summary>
        string AwPropertyName { get; set; }
        /// <summary>
        /// <p>Specifies which resource types Config records for configuration changes.</p> <note> <p> <b> High Number of Config Evaluations</b>
        /// </p> <p>You may notice increased activity in your account during your initial month recording with Config when compared
        /// to subsequent months. During the initial bootstrapping process, Config runs evaluations on all the resources in your account
        /// that you have selected for Config to record.</p> <p>If you are running ephemeral workloads, you may see increased activity
        /// from Config as it records configuration changes associated with creating and deleting these temporary resources. An <i>ephemeral
        /// workload</i> is a temporary use of computing resources that are loaded and run when needed. Examples include Amazon Elastic
        /// Compute Cloud (Amazon EC2) Spot Instances, Amazon EMR jobs, and Auto Scaling. If you want to avoid the increased activity
        /// from running ephemeral workloads, you can run these types of workloads in a separate account with Config turned off to
        /// avoid increased configuration recording and rule evaluations.</p> </note>
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IRecordingGroup AwPropertyRecordingGroup { get; set; }
        /// <summary>
        /// <p>Specifies the default recording frequency that Config uses to record configuration changes. Config supports <i>Continuous
        /// recording</i> and <i>Daily recording</i>.</p> <ul> <li> <p>Continuous recording allows you to record configuration changes
        /// continuously whenever a change occurs.</p> </li> <li> <p>Daily recording allows you to receive a configuration item (CI)
        /// representing the most recent state of your resources over the last 24-hour period, only if it’s different from the previous
        /// CI recorded. </p> </li> </ul> <note> <p>Firewall Manager depends on continuous recording to monitor your resources. If
        /// you are using Firewall Manager, it is recommended that you set the recording frequency to Continuous.</p> </note> <p>You
        /// can also override the recording frequency for specific resource types.</p>
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IRecordingMode AwPropertyRecordingMode { get; set; }
        /// <summary>
        /// <p>Amazon Resource Name (ARN) of the IAM role assumed by Config and used by the configuration recorder.</p> <note> <p>While
        /// the API model does not require this field, the server will reject a request without a defined <code>roleARN</code> for
        /// the configuration recorder.</p> </note> <note> <p> <b>Pre-existing Config role</b> </p> <p>If you have used an Amazon
        /// Web Services service that uses Config, such as Security Hub or Control Tower, and an Config role has already been created,
        /// make sure that the IAM role that you use when setting up Config keeps the same minimum permissions as the already created
        /// Config role. You must do this so that the other Amazon Web Services service continues to run as expected. </p> <p>For
        /// example, if Control Tower has an IAM role that allows Config to read Amazon Simple Storage Service (Amazon S3) objects,
        /// make sure that the same permissions are granted within the IAM role you use when setting up Config. Otherwise, it may
        /// interfere with how Control Tower operates. For more information about IAM roles for Config, see <a href='https://docs.aws.amazon.com/config/latest/developerguide/security-iam.html'>
        /// <b>Identity and Access Management for Config</b> </a> in the <i>Config Developer Guide</i>. </p> </note>
        /// </summary>
        string AwPropertyRoleArn { get; set; }
        /// <summary>AWS Account ID</summary>
        string AwsAccountId { get; set; }
        /// <summary>AWS Properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsConfigServiceConfigurationRecorderProperties AwsProperty { get; set; }
        /// <summary>AWS Region</summary>
        string AwsRegion { get; set; }
        /// <summary>AWS Source Schema</summary>
        string AwsSourceSchema { get; set; }
        /// <summary>AWS Tags</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderPropertiesAwsTags AwsTag { get; set; }

        string AzureAsyncOperation { get; set; }
        /// <summary>
        /// <p>A comma-separated list of resource types to exclude from recording by the configuration recorder.</p>
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ResourceType[] ExclusionByResourceType { get; set; }
        /// <summary>The resource-specific properties for this resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IConfigServiceConfigurationRecorderProperties Property { get; set; }
        /// <summary>The status of the last operation.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ProvisioningState? ProvisioningState { get; set; }
        /// <summary>Public Cloud Connectors Resource ID</summary>
        string PublicCloudConnectorsResourceId { get; set; }
        /// <summary>Public Cloud Resource Name</summary>
        string PublicCloudResourceName { get; set; }
        /// <summary>Property value</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.RecordingFrequency? RecordingFrequencyValue { get; set; }
        /// <summary>
        /// <p>Specifies whether Config records configuration changes for all supported resource types, excluding the global IAM resource
        /// types.</p> <p>If you set this field to <code>true</code>, when Config adds support for a new resource type, Config starts
        /// recording resources of that type automatically.</p> <p>If you set this field to <code>true</code>, you cannot enumerate
        /// specific resource types to record in the <code>resourceTypes</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingGroup.html'>RecordingGroup</a>,
        /// or to exclude in the <code>resourceTypes</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_ExclusionByResourceTypes.html'>ExclusionByResourceTypes</a>.</p>
        /// <note> <p> <b>Region availability</b> </p> <p>Check <a href='https://docs.aws.amazon.com/config/latest/developerguide/what-is-resource-config-coverage.html'>Resource
        /// Coverage by Region Availability</a> to see if a resource type is supported in the Amazon Web Services Region where you
        /// set up Config.</p> </note>
        /// </summary>
        bool? RecordingGroupAllSupported { get; set; }
        /// <summary>
        /// <p>An object that specifies how Config excludes resource types from being recorded by the configuration recorder.</p>
        /// <note> <p> <b>Required fields</b> </p> <p>To use this option, you must set the <code>useOnly</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingStrategy.html'>RecordingStrategy</a>
        /// to <code>EXCLUSION_BY_RESOURCE_TYPES</code>.</p> </note>
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IExclusionByResourceTypes RecordingGroupExclusionByResourceType { get; set; }
        /// <summary>
        /// <p>This option is a bundle which only applies to the global IAM resource types: IAM users, groups, roles, and customer
        /// managed policies. These global IAM resource types can only be recorded by Config in Regions where Config was available
        /// before February 2022. You cannot be record the global IAM resouce types in Regions supported by Config after February
        /// 2022. This list where you cannot record the global IAM resource types includes the following Regions:</p> <ul> <li> <p>Asia
        /// Pacific (Hyderabad)</p> </li> <li> <p>Asia Pacific (Melbourne)</p> </li> <li> <p>Canada West (Calgary)</p> </li> <li>
        /// <p>Europe (Spain)</p> </li> <li> <p>Europe (Zurich)</p> </li> <li> <p>Israel (Tel Aviv)</p> </li> <li> <p>Middle East
        /// (UAE)</p> </li> </ul> <important> <p> <b>Aurora global clusters are recorded in all enabled Regions</b> </p> <p>The <code>AWS::RDS::GlobalCluster</code>
        /// resource type will be recorded in all supported Config Regions where the configuration recorder is enabled, even if <code>includeGlobalResourceTypes</code>
        /// is set<code>false</code>. The <code>includeGlobalResourceTypes</code> option is a bundle which only applies to IAM users,
        /// groups, roles, and customer managed policies. </p> <p>If you do not want to record <code>AWS::RDS::GlobalCluster</code>
        /// in all enabled Regions, use one of the following recording strategies:</p> <ol> <li> <p> <b>Record all current and future
        /// resource types with exclusions</b> (<code>EXCLUSION_BY_RESOURCE_TYPES</code>), or</p> </li> <li> <p> <b>Record specific
        /// resource types</b> (<code>INCLUSION_BY_RESOURCE_TYPES</code>).</p> </li> </ol> <p>For more information, see <a href='https://docs.aws.amazon.com/config/latest/developerguide/select-resources.html#select-resources-all'>Selecting
        /// Which Resources are Recorded</a> in the <i>Config developer guide</i>.</p> </important> <important> <p> <b>includeGlobalResourceTypes
        /// and the exclusion recording strategy</b> </p> <p>The <code>includeGlobalResourceTypes</code> field has no impact on the
        /// <code>EXCLUSION_BY_RESOURCE_TYPES</code> recording strategy. This means that the global IAM resource types (IAM users,
        /// groups, roles, and customer managed policies) will not be automatically added as exclusions for <code>exclusionByResourceTypes</code>
        /// when <code>includeGlobalResourceTypes</code> is set to <code>false</code>.</p> <p>The <code>includeGlobalResourceTypes</code>
        /// field should only be used to modify the <code>AllSupported</code> field, as the default for the <code>AllSupported</code>
        /// field is to record configuration changes for all supported resource types excluding the global IAM resource types. To
        /// include the global IAM resource types when <code>AllSupported</code> is set to <code>true</code>, make sure to set <code>includeGlobalResourceTypes</code>
        /// to <code>true</code>.</p> <p>To exclude the global IAM resource types for the <code>EXCLUSION_BY_RESOURCE_TYPES</code>
        /// recording strategy, you need to manually add them to the <code>resourceTypes</code> field of <code>exclusionByResourceTypes</code>.</p>
        /// </important> <note> <p> <b>Required and optional fields</b> </p> <p>Before you set this field to <code>true</code>, set
        /// the <code>allSupported</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingGroup.html'>RecordingGroup</a>
        /// to <code>true</code>. Optionally, you can set the <code>useOnly</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingStrategy.html'>RecordingStrategy</a>
        /// to <code>ALL_SUPPORTED_RESOURCE_TYPES</code>.</p> </note> <note> <p> <b>Overriding fields</b> </p> <p>If you set this
        /// field to <code>false</code> but list global IAM resource types in the <code>resourceTypes</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingGroup.html'>RecordingGroup</a>,
        /// Config will still record configuration changes for those specified resource types <i>regardless</i> of if you set the
        /// <code>includeGlobalResourceTypes</code> field to false.</p> <p>If you do not want to record configuration changes to the
        /// global IAM resource types (IAM users, groups, roles, and customer managed policies), make sure to not list them in the
        /// <code>resourceTypes</code> field in addition to setting the <code>includeGlobalResourceTypes</code> field to false.</p>
        /// </note>
        /// </summary>
        bool? RecordingGroupIncludeGlobalResourceType { get; set; }
        /// <summary>
        /// <p>An object that specifies the recording strategy for the configuration recorder.</p> <ul> <li> <p>If you set the <code>useOnly</code>
        /// field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingStrategy.html'>RecordingStrategy</a>
        /// to <code>ALL_SUPPORTED_RESOURCE_TYPES</code>, Config records configuration changes for all supported resource types, excluding
        /// the global IAM resource types. You also must set the <code>allSupported</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingGroup.html'>RecordingGroup</a>
        /// to <code>true</code>. When Config adds support for a new resource type, Config automatically starts recording resources
        /// of that type.</p> </li> <li> <p>If you set the <code>useOnly</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingStrategy.html'>RecordingStrategy</a>
        /// to <code>INCLUSION_BY_RESOURCE_TYPES</code>, Config records configuration changes for only the resource types you specify
        /// in the <code>resourceTypes</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingGroup.html'>RecordingGroup</a>.</p>
        /// </li> <li> <p>If you set the <code>useOnly</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingStrategy.html'>RecordingStrategy</a>
        /// to <code>EXCLUSION_BY_RESOURCE_TYPES</code>, Config records configuration changes for all supported resource types except
        /// the resource types that you specify to exclude from being recorded in the <code>resourceTypes</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_ExclusionByResourceTypes.html'>ExclusionByResourceTypes</a>.</p>
        /// </li> </ul> <note> <p> <b>Required and optional fields</b> </p> <p>The <code>recordingStrategy</code> field is optional
        /// when you set the <code>allSupported</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingGroup.html'>RecordingGroup</a>
        /// to <code>true</code>.</p> <p>The <code>recordingStrategy</code> field is optional when you list resource types in the
        /// <code>resourceTypes</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingGroup.html'>RecordingGroup</a>.</p>
        /// <p>The <code>recordingStrategy</code> field is required if you list resource types to exclude from recording in the <code>resourceTypes</code>
        /// field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_ExclusionByResourceTypes.html'>ExclusionByResourceTypes</a>.</p>
        /// </note> <note> <p> <b>Overriding fields</b> </p> <p>If you choose <code>EXCLUSION_BY_RESOURCE_TYPES</code> for the recording
        /// strategy, the <code>exclusionByResourceTypes</code> field will override other properties in the request.</p> <p>For example,
        /// even if you set <code>includeGlobalResourceTypes</code> to false, global IAM resource types will still be automatically
        /// recorded in this option unless those resource types are specifically listed as exclusions in the <code>resourceTypes</code>
        /// field of <code>exclusionByResourceTypes</code>.</p> </note> <note> <p> <b>Global resources types and the resource exclusion
        /// recording strategy</b> </p> <p>By default, if you choose the <code>EXCLUSION_BY_RESOURCE_TYPES</code> recording strategy,
        /// when Config adds support for a new resource type in the Region where you set up the configuration recorder, including
        /// global resource types, Config starts recording resources of that type automatically.</p> <p>Unless specifically listed
        /// as exclusions, <code>AWS::RDS::GlobalCluster</code> will be recorded automatically in all supported Config Regions were
        /// the configuration recorder is enabled.</p> <p>IAM users, groups, roles, and customer managed policies will be recorded
        /// in the Region where you set up the configuration recorder if that is a Region where Config was available before February
        /// 2022. You cannot be record the global IAM resouce types in Regions supported by Config after February 2022. This list
        /// where you cannot record the global IAM resource types includes the following Regions:</p> <ul> <li> <p>Asia Pacific (Hyderabad)</p>
        /// </li> <li> <p>Asia Pacific (Melbourne)</p> </li> <li> <p>Canada West (Calgary)</p> </li> <li> <p>Europe (Spain)</p> </li>
        /// <li> <p>Europe (Zurich)</p> </li> <li> <p>Israel (Tel Aviv)</p> </li> <li> <p>Middle East (UAE)</p> </li> </ul> </note>
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IRecordingStrategy RecordingGroupRecordingStrategy { get; set; }
        /// <summary>
        /// <p>A comma-separated list that specifies which resource types Config records.</p> <p>For a list of valid <code>resourceTypes</code>
        /// values, see the <b>Resource Type Value</b> column in <a href='https://docs.aws.amazon.com/config/latest/developerguide/resource-config-reference.html#supported-resources'>Supported
        /// Amazon Web Services resource Types</a> in the <i>Config developer guide</i>.</p> <note> <p> <b>Required and optional fields</b>
        /// </p> <p>Optionally, you can set the <code>useOnly</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingStrategy.html'>RecordingStrategy</a>
        /// to <code>INCLUSION_BY_RESOURCE_TYPES</code>.</p> <p>To record all configuration changes, set the <code>allSupported</code>
        /// field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingGroup.html'>RecordingGroup</a> to
        /// <code>true</code>, and either omit this field or don't specify any resource types in this field. If you set the <code>allSupported</code>
        /// field to <code>false</code> and specify values for <code>resourceTypes</code>, when Config adds support for a new type
        /// of resource, it will not record resources of that type unless you manually add that type to your recording group.</p>
        /// </note> <note> <p> <b>Region availability</b> </p> <p>Before specifying a resource type for Config to track, check <a
        /// href='https://docs.aws.amazon.com/config/latest/developerguide/what-is-resource-config-coverage.html'>Resource Coverage
        /// by Region Availability</a> to see if the resource type is supported in the Amazon Web Services Region where you set up
        /// Config. If a resource type is supported by Config in at least one Region, you can enable the recording of that resource
        /// type in all Regions supported by Config, even if the specified resource type is not supported in the Amazon Web Services
        /// Region where you set up Config.</p> </note>
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ResourceType[] RecordingGroupResourceType { get; set; }
        /// <summary>
        /// <p>An array of <code>recordingModeOverride</code> objects for you to specify your overrides for the recording mode. The
        /// <code>recordingModeOverride</code> object in the <code>recordingModeOverrides</code> array consists of three fields: a
        /// <code>description</code>, the new <code>recordingFrequency</code>, and an array of <code>resourceTypes</code> to override.</p>
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IRecordingModeOverride[] RecordingModeOverride { get; set; }
        /// <summary>
        /// <p>The default recording frequency that Config uses to record configuration changes.</p> <important> <p>Daily recording
        /// is not supported for the following resource types:</p> <ul> <li> <p> <code>AWS::Config::ResourceCompliance</code> </p>
        /// </li> <li> <p> <code>AWS::Config::ConformancePackCompliance</code> </p> </li> <li> <p> <code>AWS::Config::ConfigurationRecorder</code>
        /// </p> </li> </ul> <p>For the <b>allSupported</b> (<code>ALL_SUPPORTED_RESOURCE_TYPES</code>) recording strategy, these
        /// resource types will be set to Continuous recording.</p> </important>
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IRecordingFrequencyEnumValue RecordingModeRecordingFrequency { get; set; }
        /// <summary>
        /// <p>The recording strategy for the configuration recorder.</p> <ul> <li> <p>If you set this option to <code>ALL_SUPPORTED_RESOURCE_TYPES</code>,
        /// Config records configuration changes for all supported resource types, excluding the global IAM resource types. You also
        /// must set the <code>allSupported</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingGroup.html'>RecordingGroup</a>
        /// to <code>true</code>. When Config adds support for a new resource type, Config automatically starts recording resources
        /// of that type. For a list of supported resource types, see <a href='https://docs.aws.amazon.com/config/latest/developerguide/resource-config-reference.html#supported-resources'>Supported
        /// Resource Types</a> in the <i>Config developer guide</i>.</p> </li> <li> <p>If you set this option to <code>INCLUSION_BY_RESOURCE_TYPES</code>,
        /// Config records configuration changes for only the resource types that you specify in the <code>resourceTypes</code> field
        /// of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingGroup.html'>RecordingGroup</a>.</p> </li>
        /// <li> <p>If you set this option to <code>EXCLUSION_BY_RESOURCE_TYPES</code>, Config records configuration changes for all
        /// supported resource types, except the resource types that you specify to exclude from being recorded in the <code>resourceTypes</code>
        /// field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_ExclusionByResourceTypes.html'>ExclusionByResourceTypes</a>.</p>
        /// </li> </ul> <note> <p> <b>Required and optional fields</b> </p> <p>The <code>recordingStrategy</code> field is optional
        /// when you set the <code>allSupported</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingGroup.html'>RecordingGroup</a>
        /// to <code>true</code>.</p> <p>The <code>recordingStrategy</code> field is optional when you list resource types in the
        /// <code>resourceTypes</code> field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingGroup.html'>RecordingGroup</a>.</p>
        /// <p>The <code>recordingStrategy</code> field is required if you list resource types to exclude from recording in the <code>resourceTypes</code>
        /// field of <a href='https://docs.aws.amazon.com/config/latest/APIReference/API_ExclusionByResourceTypes.html'>ExclusionByResourceTypes</a>.</p>
        /// </note> <note> <p> <b>Overriding fields</b> </p> <p>If you choose <code>EXCLUSION_BY_RESOURCE_TYPES</code> for the recording
        /// strategy, the <code>exclusionByResourceTypes</code> field will override other properties in the request.</p> <p>For example,
        /// even if you set <code>includeGlobalResourceTypes</code> to false, global IAM resource types will still be automatically
        /// recorded in this option unless those resource types are specifically listed as exclusions in the <code>resourceTypes</code>
        /// field of <code>exclusionByResourceTypes</code>.</p> </note> <note> <p> <b>Global resource types and the exclusion recording
        /// strategy</b> </p> <p>By default, if you choose the <code>EXCLUSION_BY_RESOURCE_TYPES</code> recording strategy, when Config
        /// adds support for a new resource type in the Region where you set up the configuration recorder, including global resource
        /// types, Config starts recording resources of that type automatically.</p> <p>Unless specifically listed as exclusions,
        /// <code>AWS::RDS::GlobalCluster</code> will be recorded automatically in all supported Config Regions were the configuration
        /// recorder is enabled.</p> <p>IAM users, groups, roles, and customer managed policies will be recorded in the Region where
        /// you set up the configuration recorder if that is a Region where Config was available before February 2022. You cannot
        /// be record the global IAM resouce types in Regions supported by Config after February 2022. This list where you cannot
        /// record the global IAM resource types includes the following Regions:</p> <ul> <li> <p>Asia Pacific (Hyderabad)</p> </li>
        /// <li> <p>Asia Pacific (Melbourne)</p> </li> <li> <p>Canada West (Calgary)</p> </li> <li> <p>Europe (Spain)</p> </li> <li>
        /// <p>Europe (Zurich)</p> </li> <li> <p>Israel (Tel Aviv)</p> </li> <li> <p>Middle East (UAE)</p> </li> </ul> </note>
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IRecordingStrategyTypeEnumValue RecordingStrategyUseOnly { get; set; }

        int? RetryAfter { get; set; }
        /// <summary>Property value</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.RecordingStrategyType? UseOnlyValue { get; set; }

    }
}