// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.PowerShell;

    /// <summary>Definition of awsEcsCluster</summary>
    [System.ComponentModel.TypeConverter(typeof(AwsEcsClusterPropertiesTypeConverter))]
    public partial class AwsEcsClusterProperties
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AwsEcsClusterProperties"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal AwsEcsClusterProperties(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("Configuration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).Configuration = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfiguration) content.GetValueForProperty("Configuration",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).Configuration, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ClusterConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("ServiceConnectDefault"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).ServiceConnectDefault = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceConnectDefaults) content.GetValueForProperty("ServiceConnectDefault",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).ServiceConnectDefault, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ServiceConnectDefaultsTypeConverter.ConvertFrom);
            }
            if (content.Contains("Arn"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).Arn = (string) content.GetValueForProperty("Arn",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).Arn, global::System.Convert.ToString);
            }
            if (content.Contains("CapacityProvider"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).CapacityProvider = (string[]) content.GetValueForProperty("CapacityProvider",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).CapacityProvider, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("ClusterName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).ClusterName = (string) content.GetValueForProperty("ClusterName",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).ClusterName, global::System.Convert.ToString);
            }
            if (content.Contains("ClusterSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).ClusterSetting = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterSettings[]) content.GetValueForProperty("ClusterSetting",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).ClusterSetting, __y => TypeConverterExtensions.SelectToArray<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterSettings>(__y, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ClusterSettingsTypeConverter.ConvertFrom));
            }
            if (content.Contains("DefaultCapacityProviderStrategy"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).DefaultCapacityProviderStrategy = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICapacityProviderStrategyItem[]) content.GetValueForProperty("DefaultCapacityProviderStrategy",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).DefaultCapacityProviderStrategy, __y => TypeConverterExtensions.SelectToArray<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICapacityProviderStrategyItem>(__y, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.CapacityProviderStrategyItemTypeConverter.ConvertFrom));
            }
            if (content.Contains("Tag"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).Tag = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated26[]) content.GetValueForProperty("Tag",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).Tag, __y => TypeConverterExtensions.SelectToArray<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated26>(__y, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.TagAutoGenerated26TypeConverter.ConvertFrom));
            }
            if (content.Contains("ServiceConnectDefaultNamespace"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).ServiceConnectDefaultNamespace = (string) content.GetValueForProperty("ServiceConnectDefaultNamespace",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).ServiceConnectDefaultNamespace, global::System.Convert.ToString);
            }
            if (content.Contains("ConfigurationExecuteCommandConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).ConfigurationExecuteCommandConfiguration = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IExecuteCommandConfiguration) content.GetValueForProperty("ConfigurationExecuteCommandConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).ConfigurationExecuteCommandConfiguration, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ExecuteCommandConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("ExecuteCommandConfigurationLogging"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).ExecuteCommandConfigurationLogging = (string) content.GetValueForProperty("ExecuteCommandConfigurationLogging",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).ExecuteCommandConfigurationLogging, global::System.Convert.ToString);
            }
            if (content.Contains("ExecuteCommandConfigurationLogConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).ExecuteCommandConfigurationLogConfiguration = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IExecuteCommandLogConfiguration) content.GetValueForProperty("ExecuteCommandConfigurationLogConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).ExecuteCommandConfigurationLogConfiguration, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ExecuteCommandLogConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("ExecuteCommandConfigurationKmsKeyId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).ExecuteCommandConfigurationKmsKeyId = (string) content.GetValueForProperty("ExecuteCommandConfigurationKmsKeyId",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).ExecuteCommandConfigurationKmsKeyId, global::System.Convert.ToString);
            }
            if (content.Contains("LogConfigurationCloudWatchEncryptionEnabled"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).LogConfigurationCloudWatchEncryptionEnabled = (bool?) content.GetValueForProperty("LogConfigurationCloudWatchEncryptionEnabled",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).LogConfigurationCloudWatchEncryptionEnabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("LogConfigurationCloudWatchLogGroupName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).LogConfigurationCloudWatchLogGroupName = (string) content.GetValueForProperty("LogConfigurationCloudWatchLogGroupName",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).LogConfigurationCloudWatchLogGroupName, global::System.Convert.ToString);
            }
            if (content.Contains("LogConfigurationS3BucketName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).LogConfigurationS3BucketName = (string) content.GetValueForProperty("LogConfigurationS3BucketName",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).LogConfigurationS3BucketName, global::System.Convert.ToString);
            }
            if (content.Contains("LogConfigurationS3EncryptionEnabled"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).LogConfigurationS3EncryptionEnabled = (bool?) content.GetValueForProperty("LogConfigurationS3EncryptionEnabled",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).LogConfigurationS3EncryptionEnabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("LogConfigurationS3KeyPrefix"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).LogConfigurationS3KeyPrefix = (string) content.GetValueForProperty("LogConfigurationS3KeyPrefix",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).LogConfigurationS3KeyPrefix, global::System.Convert.ToString);
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AwsEcsClusterProperties"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal AwsEcsClusterProperties(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("Configuration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).Configuration = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterConfiguration) content.GetValueForProperty("Configuration",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).Configuration, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ClusterConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("ServiceConnectDefault"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).ServiceConnectDefault = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IServiceConnectDefaults) content.GetValueForProperty("ServiceConnectDefault",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).ServiceConnectDefault, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ServiceConnectDefaultsTypeConverter.ConvertFrom);
            }
            if (content.Contains("Arn"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).Arn = (string) content.GetValueForProperty("Arn",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).Arn, global::System.Convert.ToString);
            }
            if (content.Contains("CapacityProvider"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).CapacityProvider = (string[]) content.GetValueForProperty("CapacityProvider",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).CapacityProvider, __y => TypeConverterExtensions.SelectToArray<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("ClusterName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).ClusterName = (string) content.GetValueForProperty("ClusterName",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).ClusterName, global::System.Convert.ToString);
            }
            if (content.Contains("ClusterSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).ClusterSetting = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterSettings[]) content.GetValueForProperty("ClusterSetting",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).ClusterSetting, __y => TypeConverterExtensions.SelectToArray<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterSettings>(__y, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ClusterSettingsTypeConverter.ConvertFrom));
            }
            if (content.Contains("DefaultCapacityProviderStrategy"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).DefaultCapacityProviderStrategy = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICapacityProviderStrategyItem[]) content.GetValueForProperty("DefaultCapacityProviderStrategy",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).DefaultCapacityProviderStrategy, __y => TypeConverterExtensions.SelectToArray<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICapacityProviderStrategyItem>(__y, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.CapacityProviderStrategyItemTypeConverter.ConvertFrom));
            }
            if (content.Contains("Tag"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).Tag = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated26[]) content.GetValueForProperty("Tag",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).Tag, __y => TypeConverterExtensions.SelectToArray<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ITagAutoGenerated26>(__y, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.TagAutoGenerated26TypeConverter.ConvertFrom));
            }
            if (content.Contains("ServiceConnectDefaultNamespace"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).ServiceConnectDefaultNamespace = (string) content.GetValueForProperty("ServiceConnectDefaultNamespace",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).ServiceConnectDefaultNamespace, global::System.Convert.ToString);
            }
            if (content.Contains("ConfigurationExecuteCommandConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).ConfigurationExecuteCommandConfiguration = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IExecuteCommandConfiguration) content.GetValueForProperty("ConfigurationExecuteCommandConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).ConfigurationExecuteCommandConfiguration, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ExecuteCommandConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("ExecuteCommandConfigurationLogging"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).ExecuteCommandConfigurationLogging = (string) content.GetValueForProperty("ExecuteCommandConfigurationLogging",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).ExecuteCommandConfigurationLogging, global::System.Convert.ToString);
            }
            if (content.Contains("ExecuteCommandConfigurationLogConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).ExecuteCommandConfigurationLogConfiguration = (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IExecuteCommandLogConfiguration) content.GetValueForProperty("ExecuteCommandConfigurationLogConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).ExecuteCommandConfigurationLogConfiguration, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ExecuteCommandLogConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("ExecuteCommandConfigurationKmsKeyId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).ExecuteCommandConfigurationKmsKeyId = (string) content.GetValueForProperty("ExecuteCommandConfigurationKmsKeyId",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).ExecuteCommandConfigurationKmsKeyId, global::System.Convert.ToString);
            }
            if (content.Contains("LogConfigurationCloudWatchEncryptionEnabled"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).LogConfigurationCloudWatchEncryptionEnabled = (bool?) content.GetValueForProperty("LogConfigurationCloudWatchEncryptionEnabled",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).LogConfigurationCloudWatchEncryptionEnabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("LogConfigurationCloudWatchLogGroupName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).LogConfigurationCloudWatchLogGroupName = (string) content.GetValueForProperty("LogConfigurationCloudWatchLogGroupName",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).LogConfigurationCloudWatchLogGroupName, global::System.Convert.ToString);
            }
            if (content.Contains("LogConfigurationS3BucketName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).LogConfigurationS3BucketName = (string) content.GetValueForProperty("LogConfigurationS3BucketName",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).LogConfigurationS3BucketName, global::System.Convert.ToString);
            }
            if (content.Contains("LogConfigurationS3EncryptionEnabled"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).LogConfigurationS3EncryptionEnabled = (bool?) content.GetValueForProperty("LogConfigurationS3EncryptionEnabled",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).LogConfigurationS3EncryptionEnabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("LogConfigurationS3KeyPrefix"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).LogConfigurationS3KeyPrefix = (string) content.GetValueForProperty("LogConfigurationS3KeyPrefix",((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterPropertiesInternal)this).LogConfigurationS3KeyPrefix, global::System.Convert.ToString);
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AwsEcsClusterProperties"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterProperties"
        /// />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterProperties DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new AwsEcsClusterProperties(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.AwsEcsClusterProperties"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterProperties"
        /// />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterProperties DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new AwsEcsClusterProperties(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="AwsEcsClusterProperties" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="AwsEcsClusterProperties" /> model class.</returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsEcsClusterProperties FromJsonString(string jsonText) => FromJson(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.SerializationMode.IncludeAll)?.ToString();
    }
    /// Definition of awsEcsCluster
    [System.ComponentModel.TypeConverter(typeof(AwsEcsClusterPropertiesTypeConverter))]
    public partial interface IAwsEcsClusterProperties

    {

    }
}