// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of awsDaxCluster</summary>
    public partial class AwsDaxClusterProperties :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsDaxClusterProperties,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsDaxClusterPropertiesInternal
    {

        /// <summary>Backing field for <see cref="ActiveNode" /> property.</summary>
        private int? _activeNode;

        /// <summary>
        /// <p>The number of nodes in the cluster that are active (i.e., capable of serving requests).</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? ActiveNode { get => this._activeNode; set => this._activeNode = value; }

        /// <summary>Backing field for <see cref="ClusterArn" /> property.</summary>
        private string _clusterArn;

        /// <summary><p>The Amazon Resource Name (ARN) that uniquely identifies the cluster. </p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string ClusterArn { get => this._clusterArn; set => this._clusterArn = value; }

        /// <summary>Backing field for <see cref="ClusterDiscoveryEndpoint" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEndpoint _clusterDiscoveryEndpoint;

        /// <summary>
        /// <p>The endpoint for this DAX cluster, consisting of a DNS name, a port number, and a URL. Applications should use the
        /// URL to configure the DAX client to find their cluster.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEndpoint ClusterDiscoveryEndpoint { get => (this._clusterDiscoveryEndpoint = this._clusterDiscoveryEndpoint ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.Endpoint()); set => this._clusterDiscoveryEndpoint = value; }

        /// <summary><p>The DNS hostname of the endpoint.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string ClusterDiscoveryEndpointAddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEndpointInternal)ClusterDiscoveryEndpoint).Address; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEndpointInternal)ClusterDiscoveryEndpoint).Address = value ?? null; }

        /// <summary><p>The port number that applications should use to connect to the endpoint.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public int? ClusterDiscoveryEndpointPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEndpointInternal)ClusterDiscoveryEndpoint).Port; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEndpointInternal)ClusterDiscoveryEndpoint).Port = value ?? default(int); }

        /// <summary>
        /// <p>The URL that applications should use to connect to the endpoint. The default ports are 8111 for the 'dax' protocol
        /// and 9111 for the 'daxs' protocol.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string ClusterDiscoveryEndpointUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEndpointInternal)ClusterDiscoveryEndpoint).Url; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEndpointInternal)ClusterDiscoveryEndpoint).Url = value ?? null; }

        /// <summary>Backing field for <see cref="ClusterEndpointEncryptionType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterEndpointEncryptionTypeEnumValue _clusterEndpointEncryptionType;

        /// <summary>
        /// <p>The type of encryption supported by the cluster's endpoint. Values are:</p> <ul> <li> <p> <code>NONE</code> for no
        /// encryption</p> <p> <code>TLS</code> for Transport Layer Security</p> </li> </ul>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterEndpointEncryptionTypeEnumValue ClusterEndpointEncryptionType { get => (this._clusterEndpointEncryptionType = this._clusterEndpointEncryptionType ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ClusterEndpointEncryptionTypeEnumValue()); set => this._clusterEndpointEncryptionType = value; }

        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ClusterEndpointEncryptionType? ClusterEndpointEncryptionTypeValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterEndpointEncryptionTypeEnumValueInternal)ClusterEndpointEncryptionType).Value; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterEndpointEncryptionTypeEnumValueInternal)ClusterEndpointEncryptionType).Value = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ClusterEndpointEncryptionType)""); }

        /// <summary>Backing field for <see cref="ClusterName" /> property.</summary>
        private string _clusterName;

        /// <summary><p>The name of the DAX cluster.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string ClusterName { get => this._clusterName; set => this._clusterName = value; }

        /// <summary>Backing field for <see cref="Description" /> property.</summary>
        private string _description;

        /// <summary><p>The description of the cluster.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string Description { get => this._description; set => this._description = value; }

        /// <summary>Backing field for <see cref="IamRoleArn" /> property.</summary>
        private string _iamRoleArn;

        /// <summary>
        /// <p>A valid Amazon Resource Name (ARN) that identifies an IAM role. At runtime, DAX will assume this role and use the role's
        /// permissions to access DynamoDB on your behalf.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string IamRoleArn { get => this._iamRoleArn; set => this._iamRoleArn = value; }

        /// <summary>Internal Acessors for ClusterDiscoveryEndpoint</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEndpoint Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsDaxClusterPropertiesInternal.ClusterDiscoveryEndpoint { get => (this._clusterDiscoveryEndpoint = this._clusterDiscoveryEndpoint ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.Endpoint()); set { {_clusterDiscoveryEndpoint = value;} } }

        /// <summary>Internal Acessors for ClusterEndpointEncryptionType</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterEndpointEncryptionTypeEnumValue Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsDaxClusterPropertiesInternal.ClusterEndpointEncryptionType { get => (this._clusterEndpointEncryptionType = this._clusterEndpointEncryptionType ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ClusterEndpointEncryptionTypeEnumValue()); set { {_clusterEndpointEncryptionType = value;} } }

        /// <summary>Internal Acessors for NotificationConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INotificationConfigurationAutoGenerated Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsDaxClusterPropertiesInternal.NotificationConfiguration { get => (this._notificationConfiguration = this._notificationConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.NotificationConfigurationAutoGenerated()); set { {_notificationConfiguration = value;} } }

        /// <summary>Internal Acessors for ParameterGroup</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IParameterGroupStatus Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsDaxClusterPropertiesInternal.ParameterGroup { get => (this._parameterGroup = this._parameterGroup ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ParameterGroupStatus()); set { {_parameterGroup = value;} } }

        /// <summary>Internal Acessors for SseDescription</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ISseDescription Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsDaxClusterPropertiesInternal.SseDescription { get => (this._sseDescription = this._sseDescription ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.SseDescription()); set { {_sseDescription = value;} } }

        /// <summary>Internal Acessors for SseDescriptionStatus</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ISseStatusEnumValue Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAwsDaxClusterPropertiesInternal.SseDescriptionStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ISseDescriptionInternal)SseDescription).Status; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ISseDescriptionInternal)SseDescription).Status = value; }

        /// <summary>Backing field for <see cref="Node" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INode[] _node;

        /// <summary><p>A list of nodes that are currently in the cluster.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INode[] Node { get => this._node; set => this._node = value; }

        /// <summary>Backing field for <see cref="NodeIdsToRemove" /> property.</summary>
        private string[] _nodeIdsToRemove;

        /// <summary><p>A list of nodes to be removed from the cluster.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string[] NodeIdsToRemove { get => this._nodeIdsToRemove; set => this._nodeIdsToRemove = value; }

        /// <summary>Backing field for <see cref="NodeType" /> property.</summary>
        private string _nodeType;

        /// <summary>
        /// <p>The node type for the nodes in the cluster. (All nodes in a DAX cluster are of the same type.)</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string NodeType { get => this._nodeType; set => this._nodeType = value; }

        /// <summary>Backing field for <see cref="NotificationConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INotificationConfigurationAutoGenerated _notificationConfiguration;

        /// <summary>
        /// <p>Describes a notification topic and its status. Notification topics are used for publishing DAX events to subscribers
        /// using Amazon Simple Notification Service (SNS).</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INotificationConfigurationAutoGenerated NotificationConfiguration { get => (this._notificationConfiguration = this._notificationConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.NotificationConfigurationAutoGenerated()); set => this._notificationConfiguration = value; }

        /// <summary><p>The Amazon Resource Name (ARN) that identifies the topic. </p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string NotificationConfigurationTopicArn { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INotificationConfigurationAutoGeneratedInternal)NotificationConfiguration).TopicArn; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INotificationConfigurationAutoGeneratedInternal)NotificationConfiguration).TopicArn = value ?? null; }

        /// <summary>
        /// <p>The current state of the topic. A value of “active” means that notifications will be sent to the topic. A value of
        /// “inactive” means that notifications will not be sent to the topic.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string NotificationConfigurationTopicStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INotificationConfigurationAutoGeneratedInternal)NotificationConfiguration).TopicStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INotificationConfigurationAutoGeneratedInternal)NotificationConfiguration).TopicStatus = value ?? null; }

        /// <summary>Backing field for <see cref="ParameterGroup" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IParameterGroupStatus _parameterGroup;

        /// <summary><p>The parameter group being used by nodes in the cluster.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IParameterGroupStatus ParameterGroup { get => (this._parameterGroup = this._parameterGroup ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ParameterGroupStatus()); set => this._parameterGroup = value; }

        /// <summary><p>The name of the parameter group.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string ParameterGroupName { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IParameterGroupStatusInternal)ParameterGroup).ParameterGroupName; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IParameterGroupStatusInternal)ParameterGroup).ParameterGroupName = value ?? null; }

        /// <summary><p>The node IDs of one or more nodes to be rebooted.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string[] ParameterGroupNodeIdsToReboot { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IParameterGroupStatusInternal)ParameterGroup).NodeIdsToReboot; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IParameterGroupStatusInternal)ParameterGroup).NodeIdsToReboot = value ?? null /* arrayOf */; }

        /// <summary><p>The status of parameter updates. </p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string ParameterGroupParameterApplyStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IParameterGroupStatusInternal)ParameterGroup).ParameterApplyStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IParameterGroupStatusInternal)ParameterGroup).ParameterApplyStatus = value ?? null; }

        /// <summary>Backing field for <see cref="PreferredMaintenanceWindow" /> property.</summary>
        private string _preferredMaintenanceWindow;

        /// <summary>
        /// <p>A range of time when maintenance of DAX cluster software will be performed. For example: <code>sun:01:00-sun:09:00</code>.
        /// Cluster maintenance normally takes less than 30 minutes, and is performed automatically within the maintenance window.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string PreferredMaintenanceWindow { get => this._preferredMaintenanceWindow; set => this._preferredMaintenanceWindow = value; }

        /// <summary>Backing field for <see cref="SecurityGroup" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ISecurityGroupMembership[] _securityGroup;

        /// <summary>
        /// <p>A list of security groups, and the status of each, for the nodes in the cluster.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ISecurityGroupMembership[] SecurityGroup { get => this._securityGroup; set => this._securityGroup = value; }

        /// <summary>Backing field for <see cref="SseDescription" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ISseDescription _sseDescription;

        /// <summary>
        /// <p>The description of the server-side encryption status on the specified DAX cluster.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ISseDescription SseDescription { get => (this._sseDescription = this._sseDescription ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.SseDescription()); set => this._sseDescription = value; }

        /// <summary>Backing field for <see cref="Status" /> property.</summary>
        private string _status;

        /// <summary><p>The current status of the cluster.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string Status { get => this._status; set => this._status = value; }

        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.SseStatus? StatusValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ISseDescriptionInternal)SseDescription).StatusValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ISseDescriptionInternal)SseDescription).StatusValue = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.SseStatus)""); }

        /// <summary>Backing field for <see cref="SubnetGroup" /> property.</summary>
        private string _subnetGroup;

        /// <summary><p>The subnet group where the DAX cluster is running.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string SubnetGroup { get => this._subnetGroup; set => this._subnetGroup = value; }

        /// <summary>Backing field for <see cref="TotalNode" /> property.</summary>
        private int? _totalNode;

        /// <summary><p>The total number of nodes in the cluster.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? TotalNode { get => this._totalNode; set => this._totalNode = value; }

        /// <summary>Creates an new <see cref="AwsDaxClusterProperties" /> instance.</summary>
        public AwsDaxClusterProperties()
        {

        }
    }
    /// Definition of awsDaxCluster
    public partial interface IAwsDaxClusterProperties :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary>
        /// <p>The number of nodes in the cluster that are active (i.e., capable of serving requests).</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The number of nodes in the cluster that are active (i.e., capable of serving requests).</p>",
        SerializedName = @"activeNodes",
        PossibleTypes = new [] { typeof(int) })]
        int? ActiveNode { get; set; }
        /// <summary><p>The Amazon Resource Name (ARN) that uniquely identifies the cluster. </p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The Amazon Resource Name (ARN) that uniquely identifies the cluster. </p>",
        SerializedName = @"clusterArn",
        PossibleTypes = new [] { typeof(string) })]
        string ClusterArn { get; set; }
        /// <summary><p>The DNS hostname of the endpoint.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The DNS hostname of the endpoint.</p>",
        SerializedName = @"address",
        PossibleTypes = new [] { typeof(string) })]
        string ClusterDiscoveryEndpointAddress { get; set; }
        /// <summary><p>The port number that applications should use to connect to the endpoint.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The port number that applications should use to connect to the endpoint.</p>",
        SerializedName = @"port",
        PossibleTypes = new [] { typeof(int) })]
        int? ClusterDiscoveryEndpointPort { get; set; }
        /// <summary>
        /// <p>The URL that applications should use to connect to the endpoint. The default ports are 8111 for the 'dax' protocol
        /// and 9111 for the 'daxs' protocol.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The URL that applications should use to connect to the endpoint. The default ports are 8111 for the 'dax' protocol and 9111 for the 'daxs' protocol.</p>",
        SerializedName = @"url",
        PossibleTypes = new [] { typeof(string) })]
        string ClusterDiscoveryEndpointUrl { get; set; }
        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property value",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ClusterEndpointEncryptionType) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ClusterEndpointEncryptionType? ClusterEndpointEncryptionTypeValue { get; set; }
        /// <summary><p>The name of the DAX cluster.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The name of the DAX cluster.</p>",
        SerializedName = @"clusterName",
        PossibleTypes = new [] { typeof(string) })]
        string ClusterName { get; set; }
        /// <summary><p>The description of the cluster.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The description of the cluster.</p>",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        string Description { get; set; }
        /// <summary>
        /// <p>A valid Amazon Resource Name (ARN) that identifies an IAM role. At runtime, DAX will assume this role and use the role's
        /// permissions to access DynamoDB on your behalf.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>A valid Amazon Resource Name (ARN) that identifies an IAM role. At runtime, DAX will assume this role and use the role's permissions to access DynamoDB on your behalf.</p>",
        SerializedName = @"iamRoleArn",
        PossibleTypes = new [] { typeof(string) })]
        string IamRoleArn { get; set; }
        /// <summary><p>A list of nodes that are currently in the cluster.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>A list of nodes that are currently in the cluster.</p>",
        SerializedName = @"nodes",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INode) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INode[] Node { get; set; }
        /// <summary><p>A list of nodes to be removed from the cluster.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>A list of nodes to be removed from the cluster.</p>",
        SerializedName = @"nodeIdsToRemove",
        PossibleTypes = new [] { typeof(string) })]
        string[] NodeIdsToRemove { get; set; }
        /// <summary>
        /// <p>The node type for the nodes in the cluster. (All nodes in a DAX cluster are of the same type.)</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The node type for the nodes in the cluster. (All nodes in a DAX cluster are of the same type.)</p>",
        SerializedName = @"nodeType",
        PossibleTypes = new [] { typeof(string) })]
        string NodeType { get; set; }
        /// <summary><p>The Amazon Resource Name (ARN) that identifies the topic. </p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The Amazon Resource Name (ARN) that identifies the topic. </p>",
        SerializedName = @"topicArn",
        PossibleTypes = new [] { typeof(string) })]
        string NotificationConfigurationTopicArn { get; set; }
        /// <summary>
        /// <p>The current state of the topic. A value of “active” means that notifications will be sent to the topic. A value of
        /// “inactive” means that notifications will not be sent to the topic.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The current state of the topic. A value of “active” means that notifications will be sent to the topic. A value of “inactive” means that notifications will not be sent to the topic.</p>",
        SerializedName = @"topicStatus",
        PossibleTypes = new [] { typeof(string) })]
        string NotificationConfigurationTopicStatus { get; set; }
        /// <summary><p>The name of the parameter group.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The name of the parameter group.</p>",
        SerializedName = @"parameterGroupName",
        PossibleTypes = new [] { typeof(string) })]
        string ParameterGroupName { get; set; }
        /// <summary><p>The node IDs of one or more nodes to be rebooted.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The node IDs of one or more nodes to be rebooted.</p>",
        SerializedName = @"nodeIdsToReboot",
        PossibleTypes = new [] { typeof(string) })]
        string[] ParameterGroupNodeIdsToReboot { get; set; }
        /// <summary><p>The status of parameter updates. </p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The status of parameter updates. </p>",
        SerializedName = @"parameterApplyStatus",
        PossibleTypes = new [] { typeof(string) })]
        string ParameterGroupParameterApplyStatus { get; set; }
        /// <summary>
        /// <p>A range of time when maintenance of DAX cluster software will be performed. For example: <code>sun:01:00-sun:09:00</code>.
        /// Cluster maintenance normally takes less than 30 minutes, and is performed automatically within the maintenance window.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>A range of time when maintenance of DAX cluster software will be performed. For example: <code>sun:01:00-sun:09:00</code>. Cluster maintenance normally takes less than 30 minutes, and is performed automatically within the maintenance window.</p>",
        SerializedName = @"preferredMaintenanceWindow",
        PossibleTypes = new [] { typeof(string) })]
        string PreferredMaintenanceWindow { get; set; }
        /// <summary>
        /// <p>A list of security groups, and the status of each, for the nodes in the cluster.</p>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>A list of security groups, and the status of each, for the nodes in the cluster.</p>",
        SerializedName = @"securityGroups",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ISecurityGroupMembership) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ISecurityGroupMembership[] SecurityGroup { get; set; }
        /// <summary><p>The current status of the cluster.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The current status of the cluster.</p>",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        string Status { get; set; }
        /// <summary>Property value</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property value",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.SseStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.SseStatus? StatusValue { get; set; }
        /// <summary><p>The subnet group where the DAX cluster is running.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The subnet group where the DAX cluster is running.</p>",
        SerializedName = @"subnetGroup",
        PossibleTypes = new [] { typeof(string) })]
        string SubnetGroup { get; set; }
        /// <summary><p>The total number of nodes in the cluster.</p></summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<p>The total number of nodes in the cluster.</p>",
        SerializedName = @"totalNodes",
        PossibleTypes = new [] { typeof(int) })]
        int? TotalNode { get; set; }

    }
    /// Definition of awsDaxCluster
    internal partial interface IAwsDaxClusterPropertiesInternal

    {
        /// <summary>
        /// <p>The number of nodes in the cluster that are active (i.e., capable of serving requests).</p>
        /// </summary>
        int? ActiveNode { get; set; }
        /// <summary><p>The Amazon Resource Name (ARN) that uniquely identifies the cluster. </p></summary>
        string ClusterArn { get; set; }
        /// <summary>
        /// <p>The endpoint for this DAX cluster, consisting of a DNS name, a port number, and a URL. Applications should use the
        /// URL to configure the DAX client to find their cluster.</p>
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IEndpoint ClusterDiscoveryEndpoint { get; set; }
        /// <summary><p>The DNS hostname of the endpoint.</p></summary>
        string ClusterDiscoveryEndpointAddress { get; set; }
        /// <summary><p>The port number that applications should use to connect to the endpoint.</p></summary>
        int? ClusterDiscoveryEndpointPort { get; set; }
        /// <summary>
        /// <p>The URL that applications should use to connect to the endpoint. The default ports are 8111 for the 'dax' protocol
        /// and 9111 for the 'daxs' protocol.</p>
        /// </summary>
        string ClusterDiscoveryEndpointUrl { get; set; }
        /// <summary>
        /// <p>The type of encryption supported by the cluster's endpoint. Values are:</p> <ul> <li> <p> <code>NONE</code> for no
        /// encryption</p> <p> <code>TLS</code> for Transport Layer Security</p> </li> </ul>
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IClusterEndpointEncryptionTypeEnumValue ClusterEndpointEncryptionType { get; set; }
        /// <summary>Property value</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.ClusterEndpointEncryptionType? ClusterEndpointEncryptionTypeValue { get; set; }
        /// <summary><p>The name of the DAX cluster.</p></summary>
        string ClusterName { get; set; }
        /// <summary><p>The description of the cluster.</p></summary>
        string Description { get; set; }
        /// <summary>
        /// <p>A valid Amazon Resource Name (ARN) that identifies an IAM role. At runtime, DAX will assume this role and use the role's
        /// permissions to access DynamoDB on your behalf.</p>
        /// </summary>
        string IamRoleArn { get; set; }
        /// <summary><p>A list of nodes that are currently in the cluster.</p></summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INode[] Node { get; set; }
        /// <summary><p>A list of nodes to be removed from the cluster.</p></summary>
        string[] NodeIdsToRemove { get; set; }
        /// <summary>
        /// <p>The node type for the nodes in the cluster. (All nodes in a DAX cluster are of the same type.)</p>
        /// </summary>
        string NodeType { get; set; }
        /// <summary>
        /// <p>Describes a notification topic and its status. Notification topics are used for publishing DAX events to subscribers
        /// using Amazon Simple Notification Service (SNS).</p>
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.INotificationConfigurationAutoGenerated NotificationConfiguration { get; set; }
        /// <summary><p>The Amazon Resource Name (ARN) that identifies the topic. </p></summary>
        string NotificationConfigurationTopicArn { get; set; }
        /// <summary>
        /// <p>The current state of the topic. A value of “active” means that notifications will be sent to the topic. A value of
        /// “inactive” means that notifications will not be sent to the topic.</p>
        /// </summary>
        string NotificationConfigurationTopicStatus { get; set; }
        /// <summary><p>The parameter group being used by nodes in the cluster.</p></summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IParameterGroupStatus ParameterGroup { get; set; }
        /// <summary><p>The name of the parameter group.</p></summary>
        string ParameterGroupName { get; set; }
        /// <summary><p>The node IDs of one or more nodes to be rebooted.</p></summary>
        string[] ParameterGroupNodeIdsToReboot { get; set; }
        /// <summary><p>The status of parameter updates. </p></summary>
        string ParameterGroupParameterApplyStatus { get; set; }
        /// <summary>
        /// <p>A range of time when maintenance of DAX cluster software will be performed. For example: <code>sun:01:00-sun:09:00</code>.
        /// Cluster maintenance normally takes less than 30 minutes, and is performed automatically within the maintenance window.</p>
        /// </summary>
        string PreferredMaintenanceWindow { get; set; }
        /// <summary>
        /// <p>A list of security groups, and the status of each, for the nodes in the cluster.</p>
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ISecurityGroupMembership[] SecurityGroup { get; set; }
        /// <summary>
        /// <p>The description of the server-side encryption status on the specified DAX cluster.</p>
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ISseDescription SseDescription { get; set; }
        /// <summary>
        /// <p>The current state of server-side encryption:</p> <ul> <li> <p> <code>ENABLING</code> - Server-side encryption is being
        /// enabled.</p> </li> <li> <p> <code>ENABLED</code> - Server-side encryption is enabled.</p> </li> <li> <p> <code>DISABLING</code>
        /// - Server-side encryption is being disabled.</p> </li> <li> <p> <code>DISABLED</code> - Server-side encryption is disabled.</p>
        /// </li> </ul>
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ISseStatusEnumValue SseDescriptionStatus { get; set; }
        /// <summary><p>The current status of the cluster.</p></summary>
        string Status { get; set; }
        /// <summary>Property value</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Support.SseStatus? StatusValue { get; set; }
        /// <summary><p>The subnet group where the DAX cluster is running.</p></summary>
        string SubnetGroup { get; set; }
        /// <summary><p>The total number of nodes in the cluster.</p></summary>
        int? TotalNode { get; set; }

    }
}