// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of LaunchTemplateOverrides</summary>
    public partial class LaunchTemplateOverrides :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILaunchTemplateOverrides,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILaunchTemplateOverridesInternal
    {

        /// <summary>Backing field for <see cref="InstanceRequirement" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IInstanceRequirements _instanceRequirement;

        /// <summary>
        /// The instance requirements. Amazon EC2 Auto Scaling uses your specified requirements to identify instance types. Then,
        /// it uses your On-Demand and Spot allocation strategies to launch instances from these instance types. You can specify up
        /// to four separate sets of instance requirements per Auto Scaling group. This is useful for provisioning instances from
        /// different Amazon Machine Images (AMIs) in the same Auto Scaling group. To do this, create the AMIs and create a new launch
        /// template for each AMI. Then, create a compatible set of instance requirements for each launch template. If you specify
        /// ``InstanceRequirements``, you can't specify ``InstanceType``. The attributes for the instance types for a mixed instances
        /// policy. Amazon EC2 Auto Scaling uses your specified requirements to identify instance types. Then, it uses your On-Demand
        /// and Spot allocation strategies to launch instances from these instance types. When you specify multiple attributes, you
        /// get instance types that satisfy all of the specified attributes. If you specify multiple values for an attribute, you
        /// get instance types that satisfy any of the specified values. To limit the list of instance types from which Amazon EC2
        /// Auto Scaling can identify matching instance types, you can use one of the following parameters, but not both in the same
        /// request: + ``AllowedInstanceTypes`` - The instance types to include in the list. All other instance types are ignored,
        /// even if they match your specified attributes. + ``ExcludedInstanceTypes`` - The instance types to exclude from the list,
        /// even if they match your specified attributes. You must specify ``VCpuCount`` and ``MemoryMiB``. All other attributes are
        /// optional. Any unspecified optional attribute is set to its default. For an example template, see [Auto scaling template
        /// snippets](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-autoscaling.html). For more information,
        /// see [Creating an Auto Scaling group using attribute-based instance type selection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html)
        /// in the *Amazon EC2 Auto Scaling User Guide*. For help determining which instance types match your attributes before you
        /// apply them to your Auto Scaling group, see [Preview instance types with specified attributes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-attribute-based-instance-type-selection.html#ec2fleet-get-instance-types-from-instance-requirements)
        /// in the *Amazon EC2 User Guide for Linux Instances*. ``InstanceRequirements`` is a property of the ``LaunchTemplateOverrides``
        /// property of the [AWS::AutoScaling::AutoScalingGroup LaunchTemplate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplate.html)
        /// property type.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IInstanceRequirements InstanceRequirement { get => (this._instanceRequirement = this._instanceRequirement ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.InstanceRequirements()); set => this._instanceRequirement = value; }

        /// <summary>Backing field for <see cref="InstanceType" /> property.</summary>
        private string _instanceType;

        /// <summary>
        /// The instance type, such as ``m3.xlarge``. You must specify an instance type that is supported in your requested Region
        /// and Availability Zones. For more information, see [Instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html)
        /// in the *Amazon Elastic Compute Cloud User Guide*. You can specify up to 40 instance types per Auto Scaling group.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string InstanceType { get => this._instanceType; set => this._instanceType = value; }

        /// <summary>Backing field for <see cref="LaunchTemplateSpecification" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILaunchTemplateSpecification _launchTemplateSpecification;

        /// <summary>
        /// Provides a launch template for the specified instance type or set of instance requirements. For example, some instance
        /// types might require a launch template with a different AMI. If not provided, Amazon EC2 Auto Scaling uses the launch template
        /// that's specified in the ``LaunchTemplate`` definition. For more information, see [Specifying a different launch template
        /// for an instance type](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups-launch-template-overrides.html)
        /// in the *Amazon EC2 Auto Scaling User Guide*. You can specify up to 20 launch templates per Auto Scaling group. The launch
        /// templates specified in the overrides and in the ``LaunchTemplate`` definition count towards this limit. Specifies a launch
        /// template to use when provisioning EC2 instances for an Auto Scaling group. You must specify the following: + The ID or
        /// the name of the launch template, but not both. + The version of the launch template. ``LaunchTemplateSpecification`` is
        /// property of the [AWS::AutoScaling::AutoScalingGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-autoscalinggroup.html)
        /// resource. It is also a property of the [AWS::AutoScaling::AutoScalingGroup LaunchTemplate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplate.html)
        /// and [AWS::AutoScaling::AutoScalingGroup LaunchTemplateOverrides](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplateoverrides.html)
        /// property types. For information about creating a launch template, see [AWS::EC2::LaunchTemplate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html)
        /// and [Create a launch template for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html)
        /// in the *Amazon EC2 Auto Scaling User Guide*. For examples of launch templates, see [Auto scaling template snippets](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-autoscaling.html)
        /// and the [Examples](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html#aws-resource-ec2-launchtemplate--examples)
        /// section in the ``AWS::EC2::LaunchTemplate`` resource.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILaunchTemplateSpecification LaunchTemplateSpecification { get => (this._launchTemplateSpecification = this._launchTemplateSpecification ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.LaunchTemplateSpecification()); set => this._launchTemplateSpecification = value; }

        /// <summary>
        /// The ID of the launch template. You must specify the ``LaunchTemplateID`` or the ``LaunchTemplateName``, but not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string LaunchTemplateSpecificationLaunchTemplateId { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILaunchTemplateSpecificationInternal)LaunchTemplateSpecification).LaunchTemplateId; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILaunchTemplateSpecificationInternal)LaunchTemplateSpecification).LaunchTemplateId = value ?? null; }

        /// <summary>
        /// The name of the launch template. You must specify the ``LaunchTemplateName`` or the ``LaunchTemplateID``, but not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string LaunchTemplateSpecificationLaunchTemplateName { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILaunchTemplateSpecificationInternal)LaunchTemplateSpecification).LaunchTemplateName; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILaunchTemplateSpecificationInternal)LaunchTemplateSpecification).LaunchTemplateName = value ?? null; }

        /// <summary>
        /// The version number of the launch template. Specifying ``$Latest`` or ``$Default`` for the template version number is not
        /// supported. However, you can specify ``LatestVersionNumber`` or ``DefaultVersionNumber`` using the ``Fn::GetAtt`` intrinsic
        /// function. For more information, see [Fn::GetAtt](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-getatt.html).
        /// For an example of using the ``Fn::GetAtt`` function, see the [Examples](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-autoscalinggroup.html#aws-resource-autoscaling-autoscalinggroup--examples)
        /// section of the ``AWS::AutoScaling::AutoScalingGroup`` resource.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Inlined)]
        public string LaunchTemplateSpecificationVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILaunchTemplateSpecificationInternal)LaunchTemplateSpecification).Version; set => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILaunchTemplateSpecificationInternal)LaunchTemplateSpecification).Version = value ?? null; }

        /// <summary>Internal Acessors for LaunchTemplateSpecification</summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILaunchTemplateSpecification Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILaunchTemplateOverridesInternal.LaunchTemplateSpecification { get => (this._launchTemplateSpecification = this._launchTemplateSpecification ?? new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.LaunchTemplateSpecification()); set { {_launchTemplateSpecification = value;} } }

        /// <summary>Backing field for <see cref="WeightedCapacity" /> property.</summary>
        private string _weightedCapacity;

        /// <summary>
        /// If you provide a list of instance types to use, you can specify the number of capacity units provided by each instance
        /// type in terms of virtual CPUs, memory, storage, throughput, or other relative performance characteristic. When a Spot
        /// or On-Demand Instance is launched, the capacity units count toward the desired capacity. Amazon EC2 Auto Scaling launches
        /// instances until the desired capacity is totally fulfilled, even if this results in an overage. For example, if there are
        /// two units remaining to fulfill capacity, and Amazon EC2 Auto Scaling can only launch an instance with a ``WeightedCapacity``
        /// of five units, the instance is launched, and the desired capacity is exceeded by three units. For more information, see
        /// [Configure instance weighting for Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups-instance-weighting.html)
        /// in the *Amazon EC2 Auto Scaling User Guide*. Value must be in the range of 1-999. If you specify a value for ``WeightedCapacity``
        /// for one instance type, you must specify a value for ``WeightedCapacity`` for all of them. Every Auto Scaling group has
        /// three size parameters (``DesiredCapacity``, ``MaxSize``, and ``MinSize``). Usually, you set these sizes based on a specific
        /// number of instances. However, if you configure a mixed instances policy that defines weights for the instance types, you
        /// must specify these sizes with the same units that you use for weighting instances.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string WeightedCapacity { get => this._weightedCapacity; set => this._weightedCapacity = value; }

        /// <summary>Creates an new <see cref="LaunchTemplateOverrides" /> instance.</summary>
        public LaunchTemplateOverrides()
        {

        }
    }
    /// Definition of LaunchTemplateOverrides
    public partial interface ILaunchTemplateOverrides :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The instance requirements. Amazon EC2 Auto Scaling uses your specified requirements to identify instance types. Then,
        /// it uses your On-Demand and Spot allocation strategies to launch instances from these instance types. You can specify up
        /// to four separate sets of instance requirements per Auto Scaling group. This is useful for provisioning instances from
        /// different Amazon Machine Images (AMIs) in the same Auto Scaling group. To do this, create the AMIs and create a new launch
        /// template for each AMI. Then, create a compatible set of instance requirements for each launch template. If you specify
        /// ``InstanceRequirements``, you can't specify ``InstanceType``. The attributes for the instance types for a mixed instances
        /// policy. Amazon EC2 Auto Scaling uses your specified requirements to identify instance types. Then, it uses your On-Demand
        /// and Spot allocation strategies to launch instances from these instance types. When you specify multiple attributes, you
        /// get instance types that satisfy all of the specified attributes. If you specify multiple values for an attribute, you
        /// get instance types that satisfy any of the specified values. To limit the list of instance types from which Amazon EC2
        /// Auto Scaling can identify matching instance types, you can use one of the following parameters, but not both in the same
        /// request: + ``AllowedInstanceTypes`` - The instance types to include in the list. All other instance types are ignored,
        /// even if they match your specified attributes. + ``ExcludedInstanceTypes`` - The instance types to exclude from the list,
        /// even if they match your specified attributes. You must specify ``VCpuCount`` and ``MemoryMiB``. All other attributes are
        /// optional. Any unspecified optional attribute is set to its default. For an example template, see [Auto scaling template
        /// snippets](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-autoscaling.html). For more information,
        /// see [Creating an Auto Scaling group using attribute-based instance type selection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html)
        /// in the *Amazon EC2 Auto Scaling User Guide*. For help determining which instance types match your attributes before you
        /// apply them to your Auto Scaling group, see [Preview instance types with specified attributes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-attribute-based-instance-type-selection.html#ec2fleet-get-instance-types-from-instance-requirements)
        /// in the *Amazon EC2 User Guide for Linux Instances*. ``InstanceRequirements`` is a property of the ``LaunchTemplateOverrides``
        /// property of the [AWS::AutoScaling::AutoScalingGroup LaunchTemplate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplate.html)
        /// property type.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The instance requirements. Amazon EC2 Auto Scaling uses your specified requirements to identify instance types. Then, it uses your On-Demand and Spot allocation strategies to launch instances from these instance types. You can specify up to four separate sets of instance requirements per Auto Scaling group. This is useful for provisioning instances from different Amazon Machine Images (AMIs) in the same Auto Scaling group. To do this, create the AMIs and create a new launch template for each AMI. Then, create a compatible set of instance requirements for each launch template.   If you specify ``InstanceRequirements``, you can't specify ``InstanceType``. The attributes for the instance types for a mixed instances policy. Amazon EC2 Auto Scaling uses your specified requirements to identify instance types. Then, it uses your On-Demand and Spot allocation strategies to launch instances from these instance types. When you specify multiple attributes, you get instance types that satisfy all of the specified attributes. If you specify multiple values for an attribute, you get instance types that satisfy any of the specified values. To limit the list of instance types from which Amazon EC2 Auto Scaling can identify matching instance types, you can use one of the following parameters, but not both in the same request:  +  ``AllowedInstanceTypes`` - The instance types to include in the list. All other instance types are ignored, even if they match your specified attributes.  +  ``ExcludedInstanceTypes`` - The instance types to exclude from the list, even if they match your specified attributes.    You must specify ``VCpuCount`` and ``MemoryMiB``. All other attributes are optional. Any unspecified optional attribute is set to its default.  For an example template, see [Auto scaling template snippets](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-autoscaling.html). For more information, see [Creating an Auto Scaling group using attribute-based instance type selection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html) in the *Amazon EC2 Auto Scaling User Guide*. For help determining which instance types match your attributes before you apply them to your Auto Scaling group, see [Preview instance types with specified attributes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-attribute-based-instance-type-selection.html#ec2fleet-get-instance-types-from-instance-requirements) in the *Amazon EC2 User Guide for Linux Instances*. ``InstanceRequirements`` is a property of the ``LaunchTemplateOverrides`` property of the [AWS::AutoScaling::AutoScalingGroup LaunchTemplate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplate.html) property type.",
        SerializedName = @"instanceRequirements",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IInstanceRequirements) })]
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IInstanceRequirements InstanceRequirement { get; set; }
        /// <summary>
        /// The instance type, such as ``m3.xlarge``. You must specify an instance type that is supported in your requested Region
        /// and Availability Zones. For more information, see [Instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html)
        /// in the *Amazon Elastic Compute Cloud User Guide*. You can specify up to 40 instance types per Auto Scaling group.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The instance type, such as ``m3.xlarge``. You must specify an instance type that is supported in your requested Region and Availability Zones. For more information, see [Instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the *Amazon Elastic Compute Cloud User Guide*. You can specify up to 40 instance types per Auto Scaling group.",
        SerializedName = @"instanceType",
        PossibleTypes = new [] { typeof(string) })]
        string InstanceType { get; set; }
        /// <summary>
        /// The ID of the launch template. You must specify the ``LaunchTemplateID`` or the ``LaunchTemplateName``, but not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ID of the launch template. You must specify the ``LaunchTemplateID`` or the ``LaunchTemplateName``, but not both.",
        SerializedName = @"launchTemplateId",
        PossibleTypes = new [] { typeof(string) })]
        string LaunchTemplateSpecificationLaunchTemplateId { get; set; }
        /// <summary>
        /// The name of the launch template. You must specify the ``LaunchTemplateName`` or the ``LaunchTemplateID``, but not both.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the launch template. You must specify the ``LaunchTemplateName`` or the ``LaunchTemplateID``, but not both.",
        SerializedName = @"launchTemplateName",
        PossibleTypes = new [] { typeof(string) })]
        string LaunchTemplateSpecificationLaunchTemplateName { get; set; }
        /// <summary>
        /// The version number of the launch template. Specifying ``$Latest`` or ``$Default`` for the template version number is not
        /// supported. However, you can specify ``LatestVersionNumber`` or ``DefaultVersionNumber`` using the ``Fn::GetAtt`` intrinsic
        /// function. For more information, see [Fn::GetAtt](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-getatt.html).
        /// For an example of using the ``Fn::GetAtt`` function, see the [Examples](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-autoscalinggroup.html#aws-resource-autoscaling-autoscalinggroup--examples)
        /// section of the ``AWS::AutoScaling::AutoScalingGroup`` resource.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The version number of the launch template. Specifying ``$Latest`` or ``$Default`` for the template version number is not supported. However, you can specify ``LatestVersionNumber`` or ``DefaultVersionNumber`` using the ``Fn::GetAtt`` intrinsic function. For more information, see [Fn::GetAtt](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-getatt.html).  For an example of using the ``Fn::GetAtt`` function, see the [Examples](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-autoscalinggroup.html#aws-resource-autoscaling-autoscalinggroup--examples) section of the ``AWS::AutoScaling::AutoScalingGroup`` resource.",
        SerializedName = @"version",
        PossibleTypes = new [] { typeof(string) })]
        string LaunchTemplateSpecificationVersion { get; set; }
        /// <summary>
        /// If you provide a list of instance types to use, you can specify the number of capacity units provided by each instance
        /// type in terms of virtual CPUs, memory, storage, throughput, or other relative performance characteristic. When a Spot
        /// or On-Demand Instance is launched, the capacity units count toward the desired capacity. Amazon EC2 Auto Scaling launches
        /// instances until the desired capacity is totally fulfilled, even if this results in an overage. For example, if there are
        /// two units remaining to fulfill capacity, and Amazon EC2 Auto Scaling can only launch an instance with a ``WeightedCapacity``
        /// of five units, the instance is launched, and the desired capacity is exceeded by three units. For more information, see
        /// [Configure instance weighting for Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups-instance-weighting.html)
        /// in the *Amazon EC2 Auto Scaling User Guide*. Value must be in the range of 1-999. If you specify a value for ``WeightedCapacity``
        /// for one instance type, you must specify a value for ``WeightedCapacity`` for all of them. Every Auto Scaling group has
        /// three size parameters (``DesiredCapacity``, ``MaxSize``, and ``MinSize``). Usually, you set these sizes based on a specific
        /// number of instances. However, if you configure a mixed instances policy that defines weights for the instance types, you
        /// must specify these sizes with the same units that you use for weighting instances.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If you provide a list of instance types to use, you can specify the number of capacity units provided by each instance type in terms of virtual CPUs, memory, storage, throughput, or other relative performance characteristic. When a Spot or On-Demand Instance is launched, the capacity units count toward the desired capacity. Amazon EC2 Auto Scaling launches instances until the desired capacity is totally fulfilled, even if this results in an overage. For example, if there are two units remaining to fulfill capacity, and Amazon EC2 Auto Scaling can only launch an instance with a ``WeightedCapacity`` of five units, the instance is launched, and the desired capacity is exceeded by three units. For more information, see [Configure instance weighting for Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups-instance-weighting.html) in the *Amazon EC2 Auto Scaling User Guide*. Value must be in the range of 1-999.  If you specify a value for ``WeightedCapacity`` for one instance type, you must specify a value for ``WeightedCapacity`` for all of them.  Every Auto Scaling group has three size parameters (``DesiredCapacity``, ``MaxSize``, and ``MinSize``). Usually, you set these sizes based on a specific number of instances. However, if you configure a mixed instances policy that defines weights for the instance types, you must specify these sizes with the same units that you use for weighting instances.",
        SerializedName = @"weightedCapacity",
        PossibleTypes = new [] { typeof(string) })]
        string WeightedCapacity { get; set; }

    }
    /// Definition of LaunchTemplateOverrides
    internal partial interface ILaunchTemplateOverridesInternal

    {
        /// <summary>
        /// The instance requirements. Amazon EC2 Auto Scaling uses your specified requirements to identify instance types. Then,
        /// it uses your On-Demand and Spot allocation strategies to launch instances from these instance types. You can specify up
        /// to four separate sets of instance requirements per Auto Scaling group. This is useful for provisioning instances from
        /// different Amazon Machine Images (AMIs) in the same Auto Scaling group. To do this, create the AMIs and create a new launch
        /// template for each AMI. Then, create a compatible set of instance requirements for each launch template. If you specify
        /// ``InstanceRequirements``, you can't specify ``InstanceType``. The attributes for the instance types for a mixed instances
        /// policy. Amazon EC2 Auto Scaling uses your specified requirements to identify instance types. Then, it uses your On-Demand
        /// and Spot allocation strategies to launch instances from these instance types. When you specify multiple attributes, you
        /// get instance types that satisfy all of the specified attributes. If you specify multiple values for an attribute, you
        /// get instance types that satisfy any of the specified values. To limit the list of instance types from which Amazon EC2
        /// Auto Scaling can identify matching instance types, you can use one of the following parameters, but not both in the same
        /// request: + ``AllowedInstanceTypes`` - The instance types to include in the list. All other instance types are ignored,
        /// even if they match your specified attributes. + ``ExcludedInstanceTypes`` - The instance types to exclude from the list,
        /// even if they match your specified attributes. You must specify ``VCpuCount`` and ``MemoryMiB``. All other attributes are
        /// optional. Any unspecified optional attribute is set to its default. For an example template, see [Auto scaling template
        /// snippets](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-autoscaling.html). For more information,
        /// see [Creating an Auto Scaling group using attribute-based instance type selection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html)
        /// in the *Amazon EC2 Auto Scaling User Guide*. For help determining which instance types match your attributes before you
        /// apply them to your Auto Scaling group, see [Preview instance types with specified attributes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-attribute-based-instance-type-selection.html#ec2fleet-get-instance-types-from-instance-requirements)
        /// in the *Amazon EC2 User Guide for Linux Instances*. ``InstanceRequirements`` is a property of the ``LaunchTemplateOverrides``
        /// property of the [AWS::AutoScaling::AutoScalingGroup LaunchTemplate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplate.html)
        /// property type.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IInstanceRequirements InstanceRequirement { get; set; }
        /// <summary>
        /// The instance type, such as ``m3.xlarge``. You must specify an instance type that is supported in your requested Region
        /// and Availability Zones. For more information, see [Instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html)
        /// in the *Amazon Elastic Compute Cloud User Guide*. You can specify up to 40 instance types per Auto Scaling group.
        /// </summary>
        string InstanceType { get; set; }
        /// <summary>
        /// Provides a launch template for the specified instance type or set of instance requirements. For example, some instance
        /// types might require a launch template with a different AMI. If not provided, Amazon EC2 Auto Scaling uses the launch template
        /// that's specified in the ``LaunchTemplate`` definition. For more information, see [Specifying a different launch template
        /// for an instance type](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups-launch-template-overrides.html)
        /// in the *Amazon EC2 Auto Scaling User Guide*. You can specify up to 20 launch templates per Auto Scaling group. The launch
        /// templates specified in the overrides and in the ``LaunchTemplate`` definition count towards this limit. Specifies a launch
        /// template to use when provisioning EC2 instances for an Auto Scaling group. You must specify the following: + The ID or
        /// the name of the launch template, but not both. + The version of the launch template. ``LaunchTemplateSpecification`` is
        /// property of the [AWS::AutoScaling::AutoScalingGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-autoscalinggroup.html)
        /// resource. It is also a property of the [AWS::AutoScaling::AutoScalingGroup LaunchTemplate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplate.html)
        /// and [AWS::AutoScaling::AutoScalingGroup LaunchTemplateOverrides](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplateoverrides.html)
        /// property types. For information about creating a launch template, see [AWS::EC2::LaunchTemplate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html)
        /// and [Create a launch template for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html)
        /// in the *Amazon EC2 Auto Scaling User Guide*. For examples of launch templates, see [Auto scaling template snippets](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-autoscaling.html)
        /// and the [Examples](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html#aws-resource-ec2-launchtemplate--examples)
        /// section in the ``AWS::EC2::LaunchTemplate`` resource.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ILaunchTemplateSpecification LaunchTemplateSpecification { get; set; }
        /// <summary>
        /// The ID of the launch template. You must specify the ``LaunchTemplateID`` or the ``LaunchTemplateName``, but not both.
        /// </summary>
        string LaunchTemplateSpecificationLaunchTemplateId { get; set; }
        /// <summary>
        /// The name of the launch template. You must specify the ``LaunchTemplateName`` or the ``LaunchTemplateID``, but not both.
        /// </summary>
        string LaunchTemplateSpecificationLaunchTemplateName { get; set; }
        /// <summary>
        /// The version number of the launch template. Specifying ``$Latest`` or ``$Default`` for the template version number is not
        /// supported. However, you can specify ``LatestVersionNumber`` or ``DefaultVersionNumber`` using the ``Fn::GetAtt`` intrinsic
        /// function. For more information, see [Fn::GetAtt](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-getatt.html).
        /// For an example of using the ``Fn::GetAtt`` function, see the [Examples](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-autoscalinggroup.html#aws-resource-autoscaling-autoscalinggroup--examples)
        /// section of the ``AWS::AutoScaling::AutoScalingGroup`` resource.
        /// </summary>
        string LaunchTemplateSpecificationVersion { get; set; }
        /// <summary>
        /// If you provide a list of instance types to use, you can specify the number of capacity units provided by each instance
        /// type in terms of virtual CPUs, memory, storage, throughput, or other relative performance characteristic. When a Spot
        /// or On-Demand Instance is launched, the capacity units count toward the desired capacity. Amazon EC2 Auto Scaling launches
        /// instances until the desired capacity is totally fulfilled, even if this results in an overage. For example, if there are
        /// two units remaining to fulfill capacity, and Amazon EC2 Auto Scaling can only launch an instance with a ``WeightedCapacity``
        /// of five units, the instance is launched, and the desired capacity is exceeded by three units. For more information, see
        /// [Configure instance weighting for Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups-instance-weighting.html)
        /// in the *Amazon EC2 Auto Scaling User Guide*. Value must be in the range of 1-999. If you specify a value for ``WeightedCapacity``
        /// for one instance type, you must specify a value for ``WeightedCapacity`` for all of them. Every Auto Scaling group has
        /// three size parameters (``DesiredCapacity``, ``MaxSize``, and ``MinSize``). Usually, you set these sizes based on a specific
        /// number of instances. However, if you configure a mixed instances policy that defines weights for the instance types, you
        /// must specify these sizes with the same units that you use for weighting instances.
        /// </summary>
        string WeightedCapacity { get; set; }

    }
}