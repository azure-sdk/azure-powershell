// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of CustomErrorResponse</summary>
    public partial class CustomErrorResponse :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICustomErrorResponse,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICustomErrorResponseInternal
    {

        /// <summary>Backing field for <see cref="ErrorCachingMinTtl" /> property.</summary>
        private int? _errorCachingMinTtl;

        /// <summary>
        /// The minimum amount of time, in seconds, that you want CloudFront to cache the HTTP status code specified in ``ErrorCode``.
        /// When this time period has elapsed, CloudFront queries your origin to see whether the problem that caused the error has
        /// been resolved and the requested object is now available. For more information, see [Customizing Error Responses](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/custom-error-pages.html)
        /// in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? ErrorCachingMinTtl { get => this._errorCachingMinTtl; set => this._errorCachingMinTtl = value; }

        /// <summary>Backing field for <see cref="ErrorCode" /> property.</summary>
        private int? _errorCode;

        /// <summary>
        /// The HTTP status code for which you want to specify a custom error page and/or a caching duration.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? ErrorCode { get => this._errorCode; set => this._errorCode = value; }

        /// <summary>Backing field for <see cref="ResponseCode" /> property.</summary>
        private int? _responseCode;

        /// <summary>
        /// The HTTP status code that you want CloudFront to return to the viewer along with the custom error page. There are a variety
        /// of reasons that you might want CloudFront to return a status code different from the status code that your origin returned
        /// to CloudFront, for example: + Some Internet devices (some firewalls and corporate proxies, for example) intercept HTTP
        /// 4xx and 5xx and prevent the response from being returned to the viewer. If you substitute ``200``, the response typically
        /// won't be intercepted. + If you don't care about distinguishing among different client errors or server errors, you can
        /// specify ``400`` or ``500`` as the ``ResponseCode`` for all 4xx or 5xx errors. + You might want to return a ``200`` status
        /// code (OK) and static website so your customers don't know that your website is down. If you specify a value for ``ResponseCode``,
        /// you must also specify a value for ``ResponsePagePath``.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? ResponseCode { get => this._responseCode; set => this._responseCode = value; }

        /// <summary>Backing field for <see cref="ResponsePagePath" /> property.</summary>
        private string _responsePagePath;

        /// <summary>
        /// The path to the custom error page that you want CloudFront to return to a viewer when your origin returns the HTTP status
        /// code specified by ``ErrorCode``, for example, ``/4xx-errors/403-forbidden.html``. If you want to store your objects and
        /// your custom error pages in different locations, your distribution must include a cache behavior for which the following
        /// is true: + The value of ``PathPattern`` matches the path to your custom error messages. For example, suppose you saved
        /// custom error pages for 4xx errors in an Amazon S3 bucket in a directory named ``/4xx-errors``. Your distribution must
        /// include a cache behavior for which the path pattern routes requests for your custom error pages to that location, for
        /// example, ``/4xx-errors/*``. + The value of ``TargetOriginId`` specifies the value of the ``ID`` element for the origin
        /// that contains your custom error pages. If you specify a value for ``ResponsePagePath``, you must also specify a value
        /// for ``ResponseCode``. We recommend that you store custom error pages in an Amazon S3 bucket. If you store custom error
        /// pages on an HTTP server and the server starts to return 5xx errors, CloudFront can't get the files that you want to return
        /// to viewers because the origin server is unavailable.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string ResponsePagePath { get => this._responsePagePath; set => this._responsePagePath = value; }

        /// <summary>Creates an new <see cref="CustomErrorResponse" /> instance.</summary>
        public CustomErrorResponse()
        {

        }
    }
    /// Definition of CustomErrorResponse
    public partial interface ICustomErrorResponse :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The minimum amount of time, in seconds, that you want CloudFront to cache the HTTP status code specified in ``ErrorCode``.
        /// When this time period has elapsed, CloudFront queries your origin to see whether the problem that caused the error has
        /// been resolved and the requested object is now available. For more information, see [Customizing Error Responses](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/custom-error-pages.html)
        /// in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The minimum amount of time, in seconds, that you want CloudFront to cache the HTTP status code specified in ``ErrorCode``. When this time period has elapsed, CloudFront queries your origin to see whether the problem that caused the error has been resolved and the requested object is now available. For more information, see [Customizing Error Responses](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/custom-error-pages.html) in the *Amazon CloudFront Developer Guide*.",
        SerializedName = @"errorCachingMinTTL",
        PossibleTypes = new [] { typeof(int) })]
        int? ErrorCachingMinTtl { get; set; }
        /// <summary>
        /// The HTTP status code for which you want to specify a custom error page and/or a caching duration.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The HTTP status code for which you want to specify a custom error page and/or a caching duration.",
        SerializedName = @"errorCode",
        PossibleTypes = new [] { typeof(int) })]
        int? ErrorCode { get; set; }
        /// <summary>
        /// The HTTP status code that you want CloudFront to return to the viewer along with the custom error page. There are a variety
        /// of reasons that you might want CloudFront to return a status code different from the status code that your origin returned
        /// to CloudFront, for example: + Some Internet devices (some firewalls and corporate proxies, for example) intercept HTTP
        /// 4xx and 5xx and prevent the response from being returned to the viewer. If you substitute ``200``, the response typically
        /// won't be intercepted. + If you don't care about distinguishing among different client errors or server errors, you can
        /// specify ``400`` or ``500`` as the ``ResponseCode`` for all 4xx or 5xx errors. + You might want to return a ``200`` status
        /// code (OK) and static website so your customers don't know that your website is down. If you specify a value for ``ResponseCode``,
        /// you must also specify a value for ``ResponsePagePath``.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The HTTP status code that you want CloudFront to return to the viewer along with the custom error page. There are a variety of reasons that you might want CloudFront to return a status code different from the status code that your origin returned to CloudFront, for example:  +  Some Internet devices (some firewalls and corporate proxies, for example) intercept HTTP 4xx and 5xx and prevent the response from being returned to the viewer. If you substitute ``200``, the response typically won't be intercepted.  +  If you don't care about distinguishing among different client errors or server errors, you can specify ``400`` or ``500`` as the ``ResponseCode`` for all 4xx or 5xx errors.  +  You might want to return a ``200`` status code (OK) and static website so your customers don't know that your website is down.   If you specify a value for ``ResponseCode``, you must also specify a value for ``ResponsePagePath``.",
        SerializedName = @"responseCode",
        PossibleTypes = new [] { typeof(int) })]
        int? ResponseCode { get; set; }
        /// <summary>
        /// The path to the custom error page that you want CloudFront to return to a viewer when your origin returns the HTTP status
        /// code specified by ``ErrorCode``, for example, ``/4xx-errors/403-forbidden.html``. If you want to store your objects and
        /// your custom error pages in different locations, your distribution must include a cache behavior for which the following
        /// is true: + The value of ``PathPattern`` matches the path to your custom error messages. For example, suppose you saved
        /// custom error pages for 4xx errors in an Amazon S3 bucket in a directory named ``/4xx-errors``. Your distribution must
        /// include a cache behavior for which the path pattern routes requests for your custom error pages to that location, for
        /// example, ``/4xx-errors/*``. + The value of ``TargetOriginId`` specifies the value of the ``ID`` element for the origin
        /// that contains your custom error pages. If you specify a value for ``ResponsePagePath``, you must also specify a value
        /// for ``ResponseCode``. We recommend that you store custom error pages in an Amazon S3 bucket. If you store custom error
        /// pages on an HTTP server and the server starts to return 5xx errors, CloudFront can't get the files that you want to return
        /// to viewers because the origin server is unavailable.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The path to the custom error page that you want CloudFront to return to a viewer when your origin returns the HTTP status code specified by ``ErrorCode``, for example, ``/4xx-errors/403-forbidden.html``. If you want to store your objects and your custom error pages in different locations, your distribution must include a cache behavior for which the following is true:  +  The value of ``PathPattern`` matches the path to your custom error messages. For example, suppose you saved custom error pages for 4xx errors in an Amazon S3 bucket in a directory named ``/4xx-errors``. Your distribution must include a cache behavior for which the path pattern routes requests for your custom error pages to that location, for example, ``/4xx-errors/*``.  +  The value of ``TargetOriginId`` specifies the value of the ``ID`` element for the origin that contains your custom error pages.   If you specify a value for ``ResponsePagePath``, you must also specify a value for ``ResponseCode``. We recommend that you store custom error pages in an Amazon S3 bucket. If you store custom error pages on an HTTP server and the server starts to return 5xx errors, CloudFront can't get the files that you want to return to viewers because the origin server is unavailable.",
        SerializedName = @"responsePagePath",
        PossibleTypes = new [] { typeof(string) })]
        string ResponsePagePath { get; set; }

    }
    /// Definition of CustomErrorResponse
    internal partial interface ICustomErrorResponseInternal

    {
        /// <summary>
        /// The minimum amount of time, in seconds, that you want CloudFront to cache the HTTP status code specified in ``ErrorCode``.
        /// When this time period has elapsed, CloudFront queries your origin to see whether the problem that caused the error has
        /// been resolved and the requested object is now available. For more information, see [Customizing Error Responses](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/custom-error-pages.html)
        /// in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        int? ErrorCachingMinTtl { get; set; }
        /// <summary>
        /// The HTTP status code for which you want to specify a custom error page and/or a caching duration.
        /// </summary>
        int? ErrorCode { get; set; }
        /// <summary>
        /// The HTTP status code that you want CloudFront to return to the viewer along with the custom error page. There are a variety
        /// of reasons that you might want CloudFront to return a status code different from the status code that your origin returned
        /// to CloudFront, for example: + Some Internet devices (some firewalls and corporate proxies, for example) intercept HTTP
        /// 4xx and 5xx and prevent the response from being returned to the viewer. If you substitute ``200``, the response typically
        /// won't be intercepted. + If you don't care about distinguishing among different client errors or server errors, you can
        /// specify ``400`` or ``500`` as the ``ResponseCode`` for all 4xx or 5xx errors. + You might want to return a ``200`` status
        /// code (OK) and static website so your customers don't know that your website is down. If you specify a value for ``ResponseCode``,
        /// you must also specify a value for ``ResponsePagePath``.
        /// </summary>
        int? ResponseCode { get; set; }
        /// <summary>
        /// The path to the custom error page that you want CloudFront to return to a viewer when your origin returns the HTTP status
        /// code specified by ``ErrorCode``, for example, ``/4xx-errors/403-forbidden.html``. If you want to store your objects and
        /// your custom error pages in different locations, your distribution must include a cache behavior for which the following
        /// is true: + The value of ``PathPattern`` matches the path to your custom error messages. For example, suppose you saved
        /// custom error pages for 4xx errors in an Amazon S3 bucket in a directory named ``/4xx-errors``. Your distribution must
        /// include a cache behavior for which the path pattern routes requests for your custom error pages to that location, for
        /// example, ``/4xx-errors/*``. + The value of ``TargetOriginId`` specifies the value of the ``ID`` element for the origin
        /// that contains your custom error pages. If you specify a value for ``ResponsePagePath``, you must also specify a value
        /// for ``ResponseCode``. We recommend that you store custom error pages in an Amazon S3 bucket. If you store custom error
        /// pages on an HTTP server and the server starts to return 5xx errors, CloudFront can't get the files that you want to return
        /// to viewers because the origin server is unavailable.
        /// </summary>
        string ResponsePagePath { get; set; }

    }
}