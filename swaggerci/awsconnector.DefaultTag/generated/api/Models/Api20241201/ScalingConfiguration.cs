// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;

    /// <summary>Definition of ScalingConfiguration</summary>
    public partial class ScalingConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IScalingConfiguration,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IScalingConfigurationInternal
    {

        /// <summary>Backing field for <see cref="AutoPause" /> property.</summary>
        private bool? _autoPause;

        /// <summary>
        /// A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in serverless DB engine mode.
        /// A DB cluster can be paused only when it's idle (it has no connections).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public bool? AutoPause { get => this._autoPause; set => this._autoPause = value; }

        /// <summary>Backing field for <see cref="MaxCapacity" /> property.</summary>
        private int? _maxCapacity;

        /// <summary>
        /// The maximum capacity for an Aurora DB cluster in serverless DB engine mode.For Aurora MySQL, valid capacity values are
        /// 1, 2, 4, 8, 16, 32, 64, 128, and 256.For Aurora PostgreSQL, valid capacity values are 2, 4, 8, 16, 32, 64, 192, and 384.The
        /// maximum capacity must be greater than or equal to the minimum capacity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? MaxCapacity { get => this._maxCapacity; set => this._maxCapacity = value; }

        /// <summary>Backing field for <see cref="MinCapacity" /> property.</summary>
        private int? _minCapacity;

        /// <summary>
        /// The minimum capacity for an Aurora DB cluster in serverless DB engine mode.For Aurora MySQL, valid capacity values are
        /// 1, 2, 4, 8, 16, 32, 64, 128, and 256.For Aurora PostgreSQL, valid capacity values are 2, 4, 8, 16, 32, 64, 192, and 384.The
        /// minimum capacity must be less than or equal to the maximum capacity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? MinCapacity { get => this._minCapacity; set => this._minCapacity = value; }

        /// <summary>Backing field for <see cref="SecondsBeforeTimeout" /> property.</summary>
        private int? _secondsBeforeTimeout;

        /// <summary>
        /// The amount of time, in seconds, that Aurora Serverless v1 tries to find a scaling point to perform seamless scaling before
        /// enforcing the timeout action.The default is 300.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? SecondsBeforeTimeout { get => this._secondsBeforeTimeout; set => this._secondsBeforeTimeout = value; }

        /// <summary>Backing field for <see cref="SecondsUntilAutoPause" /> property.</summary>
        private int? _secondsUntilAutoPause;

        /// <summary>The time, in seconds, before an Aurora DB cluster in serverless mode is paused.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public int? SecondsUntilAutoPause { get => this._secondsUntilAutoPause; set => this._secondsUntilAutoPause = value; }

        /// <summary>Backing field for <see cref="TimeoutAction" /> property.</summary>
        private string _timeoutAction;

        /// <summary>
        /// The action to take when the timeout is reached, either ForceApplyCapacityChange or RollbackCapacityChange.ForceApplyCapacityChange
        /// sets the capacity to the specified value as soon as possible.RollbackCapacityChange, the default, ignores the capacity
        /// change if a scaling point isn't found in the timeout period.For more information, see Autoscaling for Aurora Serverless
        /// v1 in the Amazon Aurora User Guide.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Origin(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.PropertyOrigin.Owned)]
        public string TimeoutAction { get => this._timeoutAction; set => this._timeoutAction = value; }

        /// <summary>Creates an new <see cref="ScalingConfiguration" /> instance.</summary>
        public ScalingConfiguration()
        {

        }
    }
    /// Definition of ScalingConfiguration
    public partial interface IScalingConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IJsonSerializable
    {
        /// <summary>
        /// A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in serverless DB engine mode.
        /// A DB cluster can be paused only when it's idle (it has no connections).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in serverless DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).",
        SerializedName = @"autoPause",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutoPause { get; set; }
        /// <summary>
        /// The maximum capacity for an Aurora DB cluster in serverless DB engine mode.For Aurora MySQL, valid capacity values are
        /// 1, 2, 4, 8, 16, 32, 64, 128, and 256.For Aurora PostgreSQL, valid capacity values are 2, 4, 8, 16, 32, 64, 192, and 384.The
        /// maximum capacity must be greater than or equal to the minimum capacity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum capacity for an Aurora DB cluster in serverless DB engine mode.For Aurora MySQL, valid capacity values are 1, 2, 4, 8, 16, 32, 64, 128, and 256.For Aurora PostgreSQL, valid capacity values are 2, 4, 8, 16, 32, 64, 192, and 384.The maximum capacity must be greater than or equal to the minimum capacity.",
        SerializedName = @"maxCapacity",
        PossibleTypes = new [] { typeof(int) })]
        int? MaxCapacity { get; set; }
        /// <summary>
        /// The minimum capacity for an Aurora DB cluster in serverless DB engine mode.For Aurora MySQL, valid capacity values are
        /// 1, 2, 4, 8, 16, 32, 64, 128, and 256.For Aurora PostgreSQL, valid capacity values are 2, 4, 8, 16, 32, 64, 192, and 384.The
        /// minimum capacity must be less than or equal to the maximum capacity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The minimum capacity for an Aurora DB cluster in serverless DB engine mode.For Aurora MySQL, valid capacity values are 1, 2, 4, 8, 16, 32, 64, 128, and 256.For Aurora PostgreSQL, valid capacity values are 2, 4, 8, 16, 32, 64, 192, and 384.The minimum capacity must be less than or equal to the maximum capacity.",
        SerializedName = @"minCapacity",
        PossibleTypes = new [] { typeof(int) })]
        int? MinCapacity { get; set; }
        /// <summary>
        /// The amount of time, in seconds, that Aurora Serverless v1 tries to find a scaling point to perform seamless scaling before
        /// enforcing the timeout action.The default is 300.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The amount of time, in seconds, that Aurora Serverless v1 tries to find a scaling point to perform seamless scaling before enforcing the timeout action.The default is 300.",
        SerializedName = @"secondsBeforeTimeout",
        PossibleTypes = new [] { typeof(int) })]
        int? SecondsBeforeTimeout { get; set; }
        /// <summary>The time, in seconds, before an Aurora DB cluster in serverless mode is paused.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The time, in seconds, before an Aurora DB cluster in serverless mode is paused.",
        SerializedName = @"secondsUntilAutoPause",
        PossibleTypes = new [] { typeof(int) })]
        int? SecondsUntilAutoPause { get; set; }
        /// <summary>
        /// The action to take when the timeout is reached, either ForceApplyCapacityChange or RollbackCapacityChange.ForceApplyCapacityChange
        /// sets the capacity to the specified value as soon as possible.RollbackCapacityChange, the default, ignores the capacity
        /// change if a scaling point isn't found in the timeout period.For more information, see Autoscaling for Aurora Serverless
        /// v1 in the Amazon Aurora User Guide.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The action to take when the timeout is reached, either ForceApplyCapacityChange or RollbackCapacityChange.ForceApplyCapacityChange sets the capacity to the specified value as soon as possible.RollbackCapacityChange, the default, ignores the capacity change if a scaling point isn't found in the timeout period.For more information, see Autoscaling for Aurora Serverless v1 in the Amazon Aurora User Guide.",
        SerializedName = @"timeoutAction",
        PossibleTypes = new [] { typeof(string) })]
        string TimeoutAction { get; set; }

    }
    /// Definition of ScalingConfiguration
    internal partial interface IScalingConfigurationInternal

    {
        /// <summary>
        /// A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in serverless DB engine mode.
        /// A DB cluster can be paused only when it's idle (it has no connections).
        /// </summary>
        bool? AutoPause { get; set; }
        /// <summary>
        /// The maximum capacity for an Aurora DB cluster in serverless DB engine mode.For Aurora MySQL, valid capacity values are
        /// 1, 2, 4, 8, 16, 32, 64, 128, and 256.For Aurora PostgreSQL, valid capacity values are 2, 4, 8, 16, 32, 64, 192, and 384.The
        /// maximum capacity must be greater than or equal to the minimum capacity.
        /// </summary>
        int? MaxCapacity { get; set; }
        /// <summary>
        /// The minimum capacity for an Aurora DB cluster in serverless DB engine mode.For Aurora MySQL, valid capacity values are
        /// 1, 2, 4, 8, 16, 32, 64, 128, and 256.For Aurora PostgreSQL, valid capacity values are 2, 4, 8, 16, 32, 64, 192, and 384.The
        /// minimum capacity must be less than or equal to the maximum capacity.
        /// </summary>
        int? MinCapacity { get; set; }
        /// <summary>
        /// The amount of time, in seconds, that Aurora Serverless v1 tries to find a scaling point to perform seamless scaling before
        /// enforcing the timeout action.The default is 300.
        /// </summary>
        int? SecondsBeforeTimeout { get; set; }
        /// <summary>The time, in seconds, before an Aurora DB cluster in serverless mode is paused.</summary>
        int? SecondsUntilAutoPause { get; set; }
        /// <summary>
        /// The action to take when the timeout is reached, either ForceApplyCapacityChange or RollbackCapacityChange.ForceApplyCapacityChange
        /// sets the capacity to the specified value as soon as possible.RollbackCapacityChange, the default, ignores the capacity
        /// change if a scaling point isn't found in the timeout period.For more information, see Autoscaling for Aurora Serverless
        /// v1 in the Amazon Aurora User Guide.
        /// </summary>
        string TimeoutAction { get; set; }

    }
}