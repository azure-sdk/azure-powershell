// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Extensions;
    using System;

    /// <summary>
    /// Create a ElasticLoadBalancingV2Listener. Please note that end user resource creation is currently restricted, but it will
    /// be enabled in the future.
    /// </summary>
    /// <remarks>
    /// [OpenAPI] CreateOrReplace=>PUT:"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AwsConnector/elasticLoadBalancingV2Listeners/{name}"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsCommon.New, @"AzAwsConnectorElasticLoadBalancingV2Listener_CreateExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IElasticLoadBalancingV2Listener))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Description(@"Create a ElasticLoadBalancingV2Listener. Please note that end user resource creation is currently restricted, but it will be enabled in the future.")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Generated]
    [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.HttpPath(Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AwsConnector/elasticLoadBalancingV2Listeners/{name}", ApiVersion = "2024-12-01")]
    public partial class NewAzAwsConnectorElasticLoadBalancingV2Listener_CreateExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IEventListener
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>A Microsoft.AwsConnector resource</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IElasticLoadBalancingV2Listener _resourceBody = new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ElasticLoadBalancingV2Listener();

        /// <summary>Amazon Resource Name (ARN)</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Amazon Resource Name (ARN)")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Amazon Resource Name (ARN)",
        SerializedName = @"arn",
        PossibleTypes = new [] { typeof(string) })]
        public string Arn { get => _resourceBody.Arn ?? null; set => _resourceBody.Arn = value; }

        /// <summary>when specified, runs this cmdlet as a PowerShell job</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Run the command as a job")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter AsJob { get; set; }

        /// <summary>
        /// [TLS listener] The name of the Application-Layer Protocol Negotiation (ALPN) policy.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "[TLS listener] The name of the Application-Layer Protocol Negotiation (ALPN) policy.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"[TLS listener] The name of the Application-Layer Protocol Negotiation (ALPN) policy.",
        SerializedName = @"alpnPolicy",
        PossibleTypes = new [] { typeof(string) })]
        public string[] AwPropertyAlpnPolicy { get => _resourceBody.AwPropertyAlpnPolicy ?? null /* arrayOf */; set => _resourceBody.AwPropertyAlpnPolicy = value; }

        /// <summary>
        /// The default SSL server certificate for a secure listener. You must provide exactly one certificate if the listener protocol
        /// is HTTPS or TLS. To create a certificate list for a secure listener, use [AWS::ElasticLoadBalancingV2::ListenerCertificate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listenercertificate.html).
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The default SSL server certificate for a secure listener. You must provide exactly one certificate if the listener protocol is HTTPS or TLS. To create a certificate list for a secure listener, use [AWS::ElasticLoadBalancingV2::ListenerCertificate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listenercertificate.html).")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default SSL server certificate for a secure listener. You must provide exactly one certificate if the listener protocol is HTTPS or TLS. To create a certificate list for a secure listener, use [AWS::ElasticLoadBalancingV2::ListenerCertificate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listenercertificate.html).",
        SerializedName = @"certificates",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICertificateAutoGenerated) })]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.ICertificateAutoGenerated[] AwPropertyCertificate { get => _resourceBody.AwPropertyCertificate ?? null /* arrayOf */; set => _resourceBody.AwPropertyCertificate = value; }

        /// <summary>
        /// The actions for the default rule. You cannot define a condition for a default rule. To create additional rules for an
        /// Application Load Balancer, use [AWS::ElasticLoadBalancingV2::ListenerRule](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listenerrule.html).
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The actions for the default rule. You cannot define a condition for a default rule. To create additional rules for an Application Load Balancer, use [AWS::ElasticLoadBalancingV2::ListenerRule](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listenerrule.html).")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The actions for the default rule. You cannot define a condition for a default rule. To create additional rules for an Application Load Balancer, use [AWS::ElasticLoadBalancingV2::ListenerRule](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listenerrule.html).",
        SerializedName = @"defaultActions",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAction1) })]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IAction1[] AwPropertyDefaultAction { get => _resourceBody.AwPropertyDefaultAction ?? null /* arrayOf */; set => _resourceBody.AwPropertyDefaultAction = value; }

        /// <summary>Property listenerArn</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Property listenerArn")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Property listenerArn",
        SerializedName = @"listenerArn",
        PossibleTypes = new [] { typeof(string) })]
        public string AwPropertyListenerArn { get => _resourceBody.AwPropertyListenerArn ?? null; set => _resourceBody.AwPropertyListenerArn = value; }

        /// <summary>The Amazon Resource Name (ARN) of the load balancer.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The Amazon Resource Name (ARN) of the load balancer.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Amazon Resource Name (ARN) of the load balancer.",
        SerializedName = @"loadBalancerArn",
        PossibleTypes = new [] { typeof(string) })]
        public string AwPropertyLoadBalancerArn { get => _resourceBody.AwPropertyLoadBalancerArn ?? null; set => _resourceBody.AwPropertyLoadBalancerArn = value; }

        /// <summary>
        /// The port on which the load balancer is listening. You cannot specify a port for a Gateway Load Balancer.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The port on which the load balancer is listening. You cannot specify a port for a Gateway Load Balancer.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The port on which the load balancer is listening. You cannot specify a port for a Gateway Load Balancer.",
        SerializedName = @"port",
        PossibleTypes = new [] { typeof(int) })]
        public int AwPropertyPort { get => _resourceBody.AwPropertyPort ?? default(int); set => _resourceBody.AwPropertyPort = value; }

        /// <summary>
        /// The protocol for connections from clients to the load balancer. For Application Load Balancers, the supported protocols
        /// are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, and TCP_UDP. You can’t specify
        /// the UDP or TCP_UDP protocol if dual-stack mode is enabled. You cannot specify a protocol for a Gateway Load Balancer.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The protocol for connections from clients to the load balancer. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, and TCP_UDP. You can’t specify the UDP or TCP_UDP protocol if dual-stack mode is enabled. You cannot specify a protocol for a Gateway Load Balancer.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The protocol for connections from clients to the load balancer. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, and TCP_UDP. You can’t specify the UDP or TCP_UDP protocol if dual-stack mode is enabled. You cannot specify a protocol for a Gateway Load Balancer.",
        SerializedName = @"protocol",
        PossibleTypes = new [] { typeof(string) })]
        public string AwPropertyProtocol { get => _resourceBody.AwPropertyProtocol ?? null; set => _resourceBody.AwPropertyProtocol = value; }

        /// <summary>
        /// [HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are supported. Updating the security
        /// policy can result in interruptions if the load balancer is handling a high volume of traffic. For more information, see
        /// [Security policies](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies)
        /// in the *Application Load Balancers Guide* and [Security policies](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies)
        /// in the *Network Load Balancers Guide*.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "[HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are supported. Updating the security policy can result in interruptions if the load balancer is handling a high volume of traffic. For more information, see [Security policies](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies) in the *Application Load Balancers Guide* and [Security policies](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies) in the *Network Load Balancers Guide*.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"[HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are supported. Updating the security policy can result in interruptions if the load balancer is handling a high volume of traffic. For more information, see [Security policies](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies) in the *Application Load Balancers Guide* and [Security policies](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies) in the *Network Load Balancers Guide*.",
        SerializedName = @"sslPolicy",
        PossibleTypes = new [] { typeof(string) })]
        public string AwPropertySslPolicy { get => _resourceBody.AwPropertySslPolicy ?? null; set => _resourceBody.AwPropertySslPolicy = value; }

        /// <summary>AWS Account ID</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "AWS Account ID")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Account ID",
        SerializedName = @"awsAccountId",
        PossibleTypes = new [] { typeof(string) })]
        public string AwsAccountId { get => _resourceBody.AwsAccountId ?? null; set => _resourceBody.AwsAccountId = value; }

        /// <summary>AWS Region</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "AWS Region")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Region",
        SerializedName = @"awsRegion",
        PossibleTypes = new [] { typeof(string) })]
        public string AwsRegion { get => _resourceBody.AwsRegion ?? null; set => _resourceBody.AwsRegion = value; }

        /// <summary>AWS Source Schema</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "AWS Source Schema")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Source Schema",
        SerializedName = @"awsSourceSchema",
        PossibleTypes = new [] { typeof(string) })]
        public string AwsSourceSchema { get => _resourceBody.AwsSourceSchema ?? null; set => _resourceBody.AwsSourceSchema = value; }

        /// <summary>AWS Tags</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ExportAs(typeof(global::System.Collections.Hashtable))]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "AWS Tags")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AWS Tags",
        SerializedName = @"awsTags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IElasticLoadBalancingV2ListenerPropertiesAwsTags) })]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IElasticLoadBalancingV2ListenerPropertiesAwsTags AwsTag { get => _resourceBody.AwsTag ?? null /* object */; set => _resourceBody.AwsTag = value; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.MicrosoftAwsConnector Client => Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Module.Instance.ClientAPI;

        /// <summary>
        /// The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet
        /// against a different subscription
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>The geo-location where the resource lives</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The geo-location where the resource lives")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The geo-location where the resource lives",
        SerializedName = @"location",
        PossibleTypes = new [] { typeof(string) })]
        public string Location { get => _resourceBody.Location ?? null; set => _resourceBody.Location = value; }

        /// <summary>
        /// <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>Indicates whether expired client certificates are ignored.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Indicates whether expired client certificates are ignored.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether expired client certificates are ignored.",
        SerializedName = @"ignoreClientCertificateExpiry",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter MutualAuthenticationIgnoreClientCertificateExpiry { get => _resourceBody.MutualAuthenticationIgnoreClientCertificateExpiry ?? default(global::System.Management.Automation.SwitchParameter); set => _resourceBody.MutualAuthenticationIgnoreClientCertificateExpiry = value; }

        /// <summary>
        /// The client certificate handling method. Options are ``off``, ``passthrough`` or ``verify``. The default value is ``off``.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The client certificate handling method. Options are ``off``, ``passthrough`` or ``verify``. The default value is ``off``.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The client certificate handling method. Options are ``off``, ``passthrough`` or ``verify``. The default value is ``off``.",
        SerializedName = @"mode",
        PossibleTypes = new [] { typeof(string) })]
        public string MutualAuthenticationMode { get => _resourceBody.MutualAuthenticationMode ?? null; set => _resourceBody.MutualAuthenticationMode = value; }

        /// <summary>The Amazon Resource Name (ARN) of the trust store.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The Amazon Resource Name (ARN) of the trust store.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Amazon Resource Name (ARN) of the trust store.",
        SerializedName = @"trustStoreArn",
        PossibleTypes = new [] { typeof(string) })]
        public string MutualAuthenticationTrustStoreArn { get => _resourceBody.MutualAuthenticationTrustStoreArn ?? null; set => _resourceBody.MutualAuthenticationTrustStoreArn = value; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>Name of ElasticLoadBalancingV2Listener</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Name of ElasticLoadBalancingV2Listener")]
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Name of ElasticLoadBalancingV2Listener",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ParameterCategory.Path)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>
        /// when specified, will make the remote call, and return an AsyncOperationResponse, letting the remote operation continue
        /// asynchronously.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Run the command asynchronously")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter NoWait { get; set; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>Public Cloud Connectors Resource ID</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Public Cloud Connectors Resource ID")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Public Cloud Connectors Resource ID",
        SerializedName = @"publicCloudConnectorsResourceId",
        PossibleTypes = new [] { typeof(string) })]
        public string PublicCloudConnectorsResourceId { get => _resourceBody.PublicCloudConnectorsResourceId ?? null; set => _resourceBody.PublicCloudConnectorsResourceId = value; }

        /// <summary>Public Cloud Resource Name</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Public Cloud Resource Name")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Public Cloud Resource Name",
        SerializedName = @"publicCloudResourceName",
        PossibleTypes = new [] { typeof(string) })]
        public string PublicCloudResourceName { get => _resourceBody.PublicCloudResourceName ?? null; set => _resourceBody.PublicCloudResourceName = value; }

        /// <summary>Backing field for <see cref="ResourceGroupName" /> property.</summary>
        private string _resourceGroupName;

        /// <summary>The name of the resource group. The name is case insensitive.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The name of the resource group. The name is case insensitive.")]
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the resource group. The name is case insensitive.",
        SerializedName = @"resourceGroupName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ParameterCategory.Path)]
        public string ResourceGroupName { get => this._resourceGroupName; set => this._resourceGroupName = value; }

        /// <summary>Backing field for <see cref="SubscriptionId" /> property.</summary>
        private string _subscriptionId;

        /// <summary>The ID of the target subscription. The value must be an UUID.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The ID of the target subscription. The value must be an UUID.")]
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The ID of the target subscription. The value must be an UUID.",
        SerializedName = @"subscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.DefaultInfo(
        Name = @"",
        Description =@"",
        Script = @"(Get-AzContext).Subscription.Id")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ParameterCategory.Path)]
        public string SubscriptionId { get => this._subscriptionId; set => this._subscriptionId = value; }

        /// <summary>Resource tags.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ExportAs(typeof(global::System.Collections.Hashtable))]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Resource tags.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource tags.",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResourceTags) })]
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.ITrackedResourceTags Tag { get => _resourceBody.Tag ?? null /* object */; set => _resourceBody.Tag = value; }

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IErrorResponse">Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IErrorResponse</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IErrorResponse> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IElasticLoadBalancingV2Listener">Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IElasticLoadBalancingV2Listener</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IElasticLoadBalancingV2Listener> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Creates a duplicate instance of this cmdlet (via JSON serialization).</summary>
        /// <returns>
        /// a duplicate instance of NewAzAwsConnectorElasticLoadBalancingV2Listener_CreateExpanded
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Cmdlets.NewAzAwsConnectorElasticLoadBalancingV2Listener_CreateExpanded Clone()
        {
            var clone = new NewAzAwsConnectorElasticLoadBalancingV2Listener_CreateExpanded();
            clone.__correlationId = this.__correlationId;
            clone.__processRecordId = this.__processRecordId;
            clone.DefaultProfile = this.DefaultProfile;
            clone.InvocationInformation = this.InvocationInformation;
            clone.Proxy = this.Proxy;
            clone.Pipeline = this.Pipeline;
            clone.AsJob = this.AsJob;
            clone.Break = this.Break;
            clone.ProxyCredential = this.ProxyCredential;
            clone.ProxyUseDefaultCredentials = this.ProxyUseDefaultCredentials;
            clone.HttpPipelinePrepend = this.HttpPipelinePrepend;
            clone.HttpPipelineAppend = this.HttpPipelineAppend;
            clone._resourceBody = this._resourceBody;
            clone.SubscriptionId = this.SubscriptionId;
            clone.ResourceGroupName = this.ResourceGroupName;
            clone.Name = this.Name;
            return clone;
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {
            var telemetryInfo = Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Module.Instance.GetTelemetryInfo?.Invoke(__correlationId);
            if (telemetryInfo != null)
            {
                telemetryInfo.TryGetValue("ShowSecretsWarning", out var showSecretsWarning);
                telemetryInfo.TryGetValue("SanitizedProperties", out var sanitizedProperties);
                telemetryInfo.TryGetValue("InvocationName", out var invocationName);
                if (showSecretsWarning == "true")
                {
                    if (string.IsNullOrEmpty(sanitizedProperties))
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing secrets. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                    else
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing the following secrets: {sanitizedProperties}. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                }
            }
        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Events.Information:
                    {
                        // When an operation supports asjob, Information messages must go thru verbose.
                        WriteVerbose($"INFORMATION: {(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Events.DelayBeforePolling:
                    {
                        if (true == MyInvocation?.BoundParameters?.ContainsKey("NoWait"))
                        {
                            var data = messageData();
                            if (data.ResponseMessage is System.Net.Http.HttpResponseMessage response)
                            {
                                var asyncOperation = response.GetFirstHeader(@"Azure-AsyncOperation");
                                var location = response.GetFirstHeader(@"Location");
                                var uri = global::System.String.IsNullOrEmpty(asyncOperation) ? global::System.String.IsNullOrEmpty(location) ? response.RequestMessage.RequestUri.AbsoluteUri : location : asyncOperation;
                                WriteObject(new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.PowerShell.AsyncOperationResponse { Target = uri });
                                // do nothing more.
                                data.Cancel();
                                return;
                            }
                        }
                        break;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Module.Instance.Signal(id, token, messageData, (i,t,m) => ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IEventListener)this).Signal(i,t,()=> Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.EventDataConverter.ConvertFrom( m() ) as Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.EventData ), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>
        /// Intializes a new instance of the <see cref="NewAzAwsConnectorElasticLoadBalancingV2Listener_CreateExpanded" /> cmdlet
        /// class.
        /// </summary>
        public NewAzAwsConnectorElasticLoadBalancingV2Listener_CreateExpanded()
        {

        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'ElasticLoadBalancingV2ListenersCreateOrReplace' operation"))
                {
                    if (true == MyInvocation?.BoundParameters?.ContainsKey("AsJob"))
                    {
                        var instance = this.Clone();
                        var job = new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.PowerShell.AsyncJob(instance, this.MyInvocation.Line, this.MyInvocation.MyCommand.Name, this._cancellationTokenSource.Token, this._cancellationTokenSource.Cancel);
                        JobRepository.Add(job);
                        var task = instance.ProcessRecordAsync();
                        job.Monitor(task);
                        WriteObject(job);
                    }
                    else
                    {
                        using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IEventListener)this).Token) )
                        {
                            asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IEventListener)this).Token);
                        }
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    await this.Client.ElasticLoadBalancingV2ListenersCreateOrReplace(SubscriptionId, ResourceGroupName, Name, _resourceBody, onOk, onDefault, this, Pipeline);
                    await ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  SubscriptionId=SubscriptionId,ResourceGroupName=ResourceGroupName,Name=Name,body=_resourceBody})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <param name="sendToPipeline"></param>
        new protected void WriteObject(object sendToPipeline)
        {
            Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline);
        }

        /// <param name="sendToPipeline"></param>
        /// <param name="enumerateCollection"></param>
        new protected void WriteObject(object sendToPipeline, bool enumerateCollection)
        {
            Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline, enumerateCollection);
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IErrorResponse">Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IErrorResponse</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IErrorResponse> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.Message;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api50.IErrorResponse>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new { SubscriptionId=SubscriptionId, ResourceGroupName=ResourceGroupName, Name=Name, body=_resourceBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { SubscriptionId=SubscriptionId, ResourceGroupName=ResourceGroupName, Name=Name, body=_resourceBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IElasticLoadBalancingV2Listener">Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IElasticLoadBalancingV2Listener</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IElasticLoadBalancingV2Listener> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.AwsConnector.Models.Api20241201.IElasticLoadBalancingV2Listener
                WriteObject((await response));
            }
        }
    }
}