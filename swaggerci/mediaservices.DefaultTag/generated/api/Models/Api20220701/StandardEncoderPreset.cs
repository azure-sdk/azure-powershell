// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Extensions;

    /// <summary>
    /// Describes all the settings to be used when encoding the input video with the Standard Encoder.
    /// </summary>
    public partial class StandardEncoderPreset :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IStandardEncoderPreset,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IStandardEncoderPresetInternal,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IPreset"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IPreset __preset = new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.Preset();

        /// <summary>Backing field for <see cref="Codec" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.ICodec[] _codec;

        /// <summary>The list of codecs to be used when encoding the input video.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.ICodec[] Codec { get => this._codec; set => this._codec = value; }

        /// <summary>
        /// The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of
        /// the video (For example, 50%).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string CropHeight { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).CropHeight; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).CropHeight = value ?? null; }

        /// <summary>
        /// The number of pixels from the left-margin. This can be absolute pixel value (e.g 100), or relative to the size of the
        /// video (For example, 50%).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string CropLeft { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).CropLeft; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).CropLeft = value ?? null; }

        /// <summary>
        /// The number of pixels from the top-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video
        /// (For example, 50%).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string CropTop { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).CropTop; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).CropTop = value ?? null; }

        /// <summary>
        /// The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of
        /// the video (For example, 50%).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string CropWidth { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).CropWidth; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).CropWidth = value ?? null; }

        /// <summary>The deinterlacing mode. Defaults to AutoPixelAdaptive.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.DeinterlaceMode? DeinterlaceMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).DeinterlaceMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).DeinterlaceMode = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.DeinterlaceMode)""); }

        /// <summary>The field parity for de-interlacing, defaults to Auto.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.DeinterlaceParity? DeinterlaceParity { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).DeinterlaceParity; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).DeinterlaceParity = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.DeinterlaceParity)""); }

        /// <summary>Backing field for <see cref="ExperimentalOption" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IStandardEncoderPresetExperimentalOptions _experimentalOption;

        /// <summary>
        /// Dictionary containing key value pairs for parameters not exposed in the preset itself
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IStandardEncoderPresetExperimentalOptions ExperimentalOption { get => (this._experimentalOption = this._experimentalOption ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.StandardEncoderPresetExperimentalOptions()); set => this._experimentalOption = value; }

        /// <summary>
        /// The Duration of the fade effect in the video. The value can be in ISO 8601 format (For example, PT05S to fade In/Out a
        /// color during 5 seconds), or a frame count (For example, 10 to fade 10 frames from the start time), or a relative value
        /// to stream duration (For example, 10% to fade 10% of stream duration)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? FadeInDuration { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).FadeInDuration; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).FadeInDuration = value ?? default(global::System.TimeSpan); }

        /// <summary>
        /// The Color for the fade In/Out. it can be on the CSS Level1 colors https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color_keywords
        /// or an RGB/hex value: e.g: rgb(255,0,0), 0xFF0000 or #FF0000
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string FadeInFadeColor { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).FadeInFadeColor; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).FadeInFadeColor = value ?? null; }

        /// <summary>
        /// The position in the input video from where to start fade. The value can be in ISO 8601 format (For example, PT05S to start
        /// at 5 seconds), or a frame count (For example, 10 to start at the 10th frame), or a relative value to stream duration (For
        /// example, 10% to start at 10% of stream duration). Default is 0
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string FadeInStart { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).FadeInStart; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).FadeInStart = value ?? null; }

        /// <summary>
        /// The Duration of the fade effect in the video. The value can be in ISO 8601 format (For example, PT05S to fade In/Out a
        /// color during 5 seconds), or a frame count (For example, 10 to fade 10 frames from the start time), or a relative value
        /// to stream duration (For example, 10% to fade 10% of stream duration)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? FadeOutDuration { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).FadeOutDuration; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).FadeOutDuration = value ?? default(global::System.TimeSpan); }

        /// <summary>
        /// The Color for the fade In/Out. it can be on the CSS Level1 colors https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color_keywords
        /// or an RGB/hex value: e.g: rgb(255,0,0), 0xFF0000 or #FF0000
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string FadeOutFadeColor { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).FadeOutFadeColor; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).FadeOutFadeColor = value ?? null; }

        /// <summary>
        /// The position in the input video from where to start fade. The value can be in ISO 8601 format (For example, PT05S to start
        /// at 5 seconds), or a frame count (For example, 10 to start at the 10th frame), or a relative value to stream duration (For
        /// example, 10% to start at 10% of stream duration). Default is 0
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string FadeOutStart { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).FadeOutStart; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).FadeOutStart = value ?? null; }

        /// <summary>Backing field for <see cref="Filter" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFilters _filter;

        /// <summary>
        /// One or more filtering operations that are applied to the input media before encoding.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFilters Filter { get => (this._filter = this._filter ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.Filters()); set => this._filter = value; }

        /// <summary>
        /// The properties of overlays to be applied to the input video. These could be audio, image or video overlays.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IOverlay[] FilterOverlay { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).Overlay; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).Overlay = value ?? null /* arrayOf */; }

        /// <summary>
        /// The rotation, if any, to be applied to the input video, before it is encoded. Default is Auto
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.Rotation? FilterRotation { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).Rotation; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).Rotation = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.Rotation)""); }

        /// <summary>Backing field for <see cref="Format" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFormat[] _format;

        /// <summary>The list of outputs to be produced by the encoder.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFormat[] Format { get => this._format; set => this._format = value; }

        /// <summary>Internal Acessors for Filter</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFilters Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IStandardEncoderPresetInternal.Filter { get => (this._filter = this._filter ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.Filters()); set { {_filter = value;} } }

        /// <summary>Internal Acessors for FilterCrop</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IRectangle Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IStandardEncoderPresetInternal.FilterCrop { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).Crop; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).Crop = value; }

        /// <summary>Internal Acessors for FilterDeinterlace</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IDeinterlace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IStandardEncoderPresetInternal.FilterDeinterlace { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).Deinterlace; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).Deinterlace = value; }

        /// <summary>Internal Acessors for FilterFadeIn</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFade Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IStandardEncoderPresetInternal.FilterFadeIn { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).FadeIn; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).FadeIn = value; }

        /// <summary>Internal Acessors for FilterFadeOut</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFade Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IStandardEncoderPresetInternal.FilterFadeOut { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).FadeOut; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFiltersInternal)Filter).FadeOut = value; }

        /// <summary>The discriminator for derived types.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inherited)]
        public string OdataType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IPresetInternal)__preset).OdataType; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IPresetInternal)__preset).OdataType = value ; }

        /// <summary>Creates an new <see cref="StandardEncoderPreset" /> instance.</summary>
        public StandardEncoderPreset()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__preset), __preset);
            await eventListener.AssertObjectIsValid(nameof(__preset), __preset);
        }
    }
    /// Describes all the settings to be used when encoding the input video with the Standard Encoder.
    public partial interface IStandardEncoderPreset :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IPreset
    {
        /// <summary>The list of codecs to be used when encoding the input video.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The list of codecs to be used when encoding the input video.",
        SerializedName = @"codecs",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.ICodec),typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IAudio),typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IAacAudio),typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IDdAudio),typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IVideo),typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IH265Video),typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.ICopyVideo),typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IImage),typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.ICopyAudio),typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IH264Video),typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IJpgImage),typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IPngImage) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.ICodec[] Codec { get; set; }
        /// <summary>
        /// The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of
        /// the video (For example, 50%).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).",
        SerializedName = @"height",
        PossibleTypes = new [] { typeof(string) })]
        string CropHeight { get; set; }
        /// <summary>
        /// The number of pixels from the left-margin. This can be absolute pixel value (e.g 100), or relative to the size of the
        /// video (For example, 50%).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of pixels from the left-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).",
        SerializedName = @"left",
        PossibleTypes = new [] { typeof(string) })]
        string CropLeft { get; set; }
        /// <summary>
        /// The number of pixels from the top-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video
        /// (For example, 50%).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of pixels from the top-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).",
        SerializedName = @"top",
        PossibleTypes = new [] { typeof(string) })]
        string CropTop { get; set; }
        /// <summary>
        /// The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of
        /// the video (For example, 50%).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).",
        SerializedName = @"width",
        PossibleTypes = new [] { typeof(string) })]
        string CropWidth { get; set; }
        /// <summary>The deinterlacing mode. Defaults to AutoPixelAdaptive.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The deinterlacing mode. Defaults to AutoPixelAdaptive.",
        SerializedName = @"mode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.DeinterlaceMode) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.DeinterlaceMode? DeinterlaceMode { get; set; }
        /// <summary>The field parity for de-interlacing, defaults to Auto.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The field parity for de-interlacing, defaults to Auto.",
        SerializedName = @"parity",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.DeinterlaceParity) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.DeinterlaceParity? DeinterlaceParity { get; set; }
        /// <summary>
        /// Dictionary containing key value pairs for parameters not exposed in the preset itself
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Dictionary containing key value pairs for parameters not exposed in the preset itself",
        SerializedName = @"experimentalOptions",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IStandardEncoderPresetExperimentalOptions) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IStandardEncoderPresetExperimentalOptions ExperimentalOption { get; set; }
        /// <summary>
        /// The Duration of the fade effect in the video. The value can be in ISO 8601 format (For example, PT05S to fade In/Out a
        /// color during 5 seconds), or a frame count (For example, 10 to fade 10 frames from the start time), or a relative value
        /// to stream duration (For example, 10% to fade 10% of stream duration)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Duration of the fade effect in the video. The value can be in ISO 8601 format (For example, PT05S to fade In/Out a color during 5 seconds), or a frame count (For example, 10 to fade 10 frames from the start time), or a relative value to stream duration (For example, 10% to fade 10% of stream duration)",
        SerializedName = @"duration",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? FadeInDuration { get; set; }
        /// <summary>
        /// The Color for the fade In/Out. it can be on the CSS Level1 colors https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color_keywords
        /// or an RGB/hex value: e.g: rgb(255,0,0), 0xFF0000 or #FF0000
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Color for the fade In/Out. it can be on the CSS Level1 colors https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color_keywords or an RGB/hex value: e.g: rgb(255,0,0), 0xFF0000 or #FF0000",
        SerializedName = @"fadeColor",
        PossibleTypes = new [] { typeof(string) })]
        string FadeInFadeColor { get; set; }
        /// <summary>
        /// The position in the input video from where to start fade. The value can be in ISO 8601 format (For example, PT05S to start
        /// at 5 seconds), or a frame count (For example, 10 to start at the 10th frame), or a relative value to stream duration (For
        /// example, 10% to start at 10% of stream duration). Default is 0
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The position in the input video from where to start fade. The value can be in ISO 8601 format (For example, PT05S to start at 5 seconds), or a frame count (For example, 10 to start at the 10th frame), or a relative value to stream duration (For example, 10% to start at 10% of stream duration). Default is 0",
        SerializedName = @"start",
        PossibleTypes = new [] { typeof(string) })]
        string FadeInStart { get; set; }
        /// <summary>
        /// The Duration of the fade effect in the video. The value can be in ISO 8601 format (For example, PT05S to fade In/Out a
        /// color during 5 seconds), or a frame count (For example, 10 to fade 10 frames from the start time), or a relative value
        /// to stream duration (For example, 10% to fade 10% of stream duration)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Duration of the fade effect in the video. The value can be in ISO 8601 format (For example, PT05S to fade In/Out a color during 5 seconds), or a frame count (For example, 10 to fade 10 frames from the start time), or a relative value to stream duration (For example, 10% to fade 10% of stream duration)",
        SerializedName = @"duration",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? FadeOutDuration { get; set; }
        /// <summary>
        /// The Color for the fade In/Out. it can be on the CSS Level1 colors https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color_keywords
        /// or an RGB/hex value: e.g: rgb(255,0,0), 0xFF0000 or #FF0000
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Color for the fade In/Out. it can be on the CSS Level1 colors https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color_keywords or an RGB/hex value: e.g: rgb(255,0,0), 0xFF0000 or #FF0000",
        SerializedName = @"fadeColor",
        PossibleTypes = new [] { typeof(string) })]
        string FadeOutFadeColor { get; set; }
        /// <summary>
        /// The position in the input video from where to start fade. The value can be in ISO 8601 format (For example, PT05S to start
        /// at 5 seconds), or a frame count (For example, 10 to start at the 10th frame), or a relative value to stream duration (For
        /// example, 10% to start at 10% of stream duration). Default is 0
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The position in the input video from where to start fade. The value can be in ISO 8601 format (For example, PT05S to start at 5 seconds), or a frame count (For example, 10 to start at the 10th frame), or a relative value to stream duration (For example, 10% to start at 10% of stream duration). Default is 0",
        SerializedName = @"start",
        PossibleTypes = new [] { typeof(string) })]
        string FadeOutStart { get; set; }
        /// <summary>
        /// The properties of overlays to be applied to the input video. These could be audio, image or video overlays.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The properties of overlays to be applied to the input video. These could be audio, image or video overlays.",
        SerializedName = @"overlays",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IOverlay),typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IAudioOverlay) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IOverlay[] FilterOverlay { get; set; }
        /// <summary>
        /// The rotation, if any, to be applied to the input video, before it is encoded. Default is Auto
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The rotation, if any, to be applied to the input video, before it is encoded. Default is Auto",
        SerializedName = @"rotation",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.Rotation) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.Rotation? FilterRotation { get; set; }
        /// <summary>The list of outputs to be produced by the encoder.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The list of outputs to be produced by the encoder.",
        SerializedName = @"formats",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFormat),typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IImageFormat),typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IJpgFormat),typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IPngFormat),typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IMultiBitrateFormat),typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IMp4Format) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFormat[] Format { get; set; }

    }
    /// Describes all the settings to be used when encoding the input video with the Standard Encoder.
    internal partial interface IStandardEncoderPresetInternal :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IPresetInternal
    {
        /// <summary>The list of codecs to be used when encoding the input video.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.ICodec[] Codec { get; set; }
        /// <summary>
        /// The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of
        /// the video (For example, 50%).
        /// </summary>
        string CropHeight { get; set; }
        /// <summary>
        /// The number of pixels from the left-margin. This can be absolute pixel value (e.g 100), or relative to the size of the
        /// video (For example, 50%).
        /// </summary>
        string CropLeft { get; set; }
        /// <summary>
        /// The number of pixels from the top-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video
        /// (For example, 50%).
        /// </summary>
        string CropTop { get; set; }
        /// <summary>
        /// The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of
        /// the video (For example, 50%).
        /// </summary>
        string CropWidth { get; set; }
        /// <summary>The deinterlacing mode. Defaults to AutoPixelAdaptive.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.DeinterlaceMode? DeinterlaceMode { get; set; }
        /// <summary>The field parity for de-interlacing, defaults to Auto.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.DeinterlaceParity? DeinterlaceParity { get; set; }
        /// <summary>
        /// Dictionary containing key value pairs for parameters not exposed in the preset itself
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IStandardEncoderPresetExperimentalOptions ExperimentalOption { get; set; }
        /// <summary>
        /// The Duration of the fade effect in the video. The value can be in ISO 8601 format (For example, PT05S to fade In/Out a
        /// color during 5 seconds), or a frame count (For example, 10 to fade 10 frames from the start time), or a relative value
        /// to stream duration (For example, 10% to fade 10% of stream duration)
        /// </summary>
        global::System.TimeSpan? FadeInDuration { get; set; }
        /// <summary>
        /// The Color for the fade In/Out. it can be on the CSS Level1 colors https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color_keywords
        /// or an RGB/hex value: e.g: rgb(255,0,0), 0xFF0000 or #FF0000
        /// </summary>
        string FadeInFadeColor { get; set; }
        /// <summary>
        /// The position in the input video from where to start fade. The value can be in ISO 8601 format (For example, PT05S to start
        /// at 5 seconds), or a frame count (For example, 10 to start at the 10th frame), or a relative value to stream duration (For
        /// example, 10% to start at 10% of stream duration). Default is 0
        /// </summary>
        string FadeInStart { get; set; }
        /// <summary>
        /// The Duration of the fade effect in the video. The value can be in ISO 8601 format (For example, PT05S to fade In/Out a
        /// color during 5 seconds), or a frame count (For example, 10 to fade 10 frames from the start time), or a relative value
        /// to stream duration (For example, 10% to fade 10% of stream duration)
        /// </summary>
        global::System.TimeSpan? FadeOutDuration { get; set; }
        /// <summary>
        /// The Color for the fade In/Out. it can be on the CSS Level1 colors https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color_keywords
        /// or an RGB/hex value: e.g: rgb(255,0,0), 0xFF0000 or #FF0000
        /// </summary>
        string FadeOutFadeColor { get; set; }
        /// <summary>
        /// The position in the input video from where to start fade. The value can be in ISO 8601 format (For example, PT05S to start
        /// at 5 seconds), or a frame count (For example, 10 to start at the 10th frame), or a relative value to stream duration (For
        /// example, 10% to start at 10% of stream duration). Default is 0
        /// </summary>
        string FadeOutStart { get; set; }
        /// <summary>
        /// One or more filtering operations that are applied to the input media before encoding.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFilters Filter { get; set; }
        /// <summary>The parameters for the rectangular window with which to crop the input video.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IRectangle FilterCrop { get; set; }
        /// <summary>The de-interlacing settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IDeinterlace FilterDeinterlace { get; set; }
        /// <summary>Describes the properties of a Fade effect applied to the input media.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFade FilterFadeIn { get; set; }
        /// <summary>Describes the properties of a Fade effect applied to the input media.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFade FilterFadeOut { get; set; }
        /// <summary>
        /// The properties of overlays to be applied to the input video. These could be audio, image or video overlays.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IOverlay[] FilterOverlay { get; set; }
        /// <summary>
        /// The rotation, if any, to be applied to the input video, before it is encoded. Default is Auto
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.Rotation? FilterRotation { get; set; }
        /// <summary>The list of outputs to be produced by the encoder.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20220701.IFormat[] Format { get; set; }

    }
}