// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Extensions;

    /// <summary>The live event status.</summary>
    public partial class LiveEventStatus :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventStatus,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventStatusInternal
    {

        /// <summary>Backing field for <see cref="HealthDescription" /> property.</summary>
        private string[] _healthDescription;

        /// <summary>List of strings justifying the health status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string[] HealthDescription { get => this._healthDescription; set => this._healthDescription = value; }

        /// <summary>Backing field for <see cref="HealthStatus" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventHealthStatus? _healthStatus;

        /// <summary>Health status of last 20 seconds.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventHealthStatus? HealthStatus { get => this._healthStatus; set => this._healthStatus = value; }

        /// <summary>Backing field for <see cref="Ingestion" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventIngestion _ingestion;

        /// <summary>Live event ingestion entry.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventIngestion Ingestion { get => (this._ingestion = this._ingestion ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.LiveEventIngestion()); set => this._ingestion = value; }

        /// <summary>Ingestion begin time in UTC.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public global::System.DateTime? IngestionBegin { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventIngestionInternal)Ingestion).Begin; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventIngestionInternal)Ingestion).Begin = value ?? default(global::System.DateTime); }

        /// <summary>Ingestion end time in UTC. Empty if it's not stopped yet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public global::System.DateTime? IngestionEnd { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventIngestionInternal)Ingestion).End; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventIngestionInternal)Ingestion).End = value ?? default(global::System.DateTime); }

        /// <summary>
        /// Reason why ingestion stops. Empty if it's not stopped yet. E.g) Service Stopped. No Ingestion.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string IngestionEndReason { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventIngestionInternal)Ingestion).EndReason; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventIngestionInternal)Ingestion).EndReason = value ?? null; }

        /// <summary>IngestInterruption entry list.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventIngestInterruption[] IngestionIngestInterruption { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventIngestionInternal)Ingestion).IngestInterruption; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventIngestionInternal)Ingestion).IngestInterruption = value ?? null /* arrayOf */; }

        /// <summary>Ingestion stream name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Inlined)]
        public string IngestionStreamName { get => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventIngestionInternal)Ingestion).StreamName; set => ((Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventIngestionInternal)Ingestion).StreamName = value ?? null; }

        /// <summary>Backing field for <see cref="LastUpdatedTime" /> property.</summary>
        private global::System.DateTime? _lastUpdatedTime;

        /// <summary>Last updated UTC time of this status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public global::System.DateTime? LastUpdatedTime { get => this._lastUpdatedTime; set => this._lastUpdatedTime = value; }

        /// <summary>Internal Acessors for Ingestion</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventIngestion Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventStatusInternal.Ingestion { get => (this._ingestion = this._ingestion ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.LiveEventIngestion()); set { {_ingestion = value;} } }

        /// <summary>Backing field for <see cref="State" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventState? _state;

        /// <summary>
        /// Current state of the live event. See https://go.microsoft.com/fwlink/?linkid=2139012 for more information.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventState? State { get => this._state; set => this._state = value; }

        /// <summary>Backing field for <see cref="TrackStatus" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventTrackStatus[] _trackStatus;

        /// <summary>Track entry list.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventTrackStatus[] TrackStatus { get => this._trackStatus; set => this._trackStatus = value; }

        /// <summary>Creates an new <see cref="LiveEventStatus" /> instance.</summary>
        public LiveEventStatus()
        {

        }
    }
    /// The live event status.
    public partial interface ILiveEventStatus :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IJsonSerializable
    {
        /// <summary>List of strings justifying the health status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of strings justifying the health status.",
        SerializedName = @"healthDescriptions",
        PossibleTypes = new [] { typeof(string) })]
        string[] HealthDescription { get; set; }
        /// <summary>Health status of last 20 seconds.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Health status of last 20 seconds.",
        SerializedName = @"healthStatus",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventHealthStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventHealthStatus? HealthStatus { get; set; }
        /// <summary>Ingestion begin time in UTC.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Ingestion begin time in UTC.",
        SerializedName = @"begin",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? IngestionBegin { get; set; }
        /// <summary>Ingestion end time in UTC. Empty if it's not stopped yet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Ingestion end time in UTC. Empty if it's not stopped yet.",
        SerializedName = @"end",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? IngestionEnd { get; set; }
        /// <summary>
        /// Reason why ingestion stops. Empty if it's not stopped yet. E.g) Service Stopped. No Ingestion.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Reason why ingestion stops. Empty if it's not stopped yet. E.g) Service Stopped. No Ingestion.",
        SerializedName = @"endReason",
        PossibleTypes = new [] { typeof(string) })]
        string IngestionEndReason { get; set; }
        /// <summary>IngestInterruption entry list.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"IngestInterruption entry list.",
        SerializedName = @"ingestInterruptions",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventIngestInterruption) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventIngestInterruption[] IngestionIngestInterruption { get; set; }
        /// <summary>Ingestion stream name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Ingestion stream name.",
        SerializedName = @"streamName",
        PossibleTypes = new [] { typeof(string) })]
        string IngestionStreamName { get; set; }
        /// <summary>Last updated UTC time of this status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Last updated UTC time of this status.",
        SerializedName = @"lastUpdatedTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastUpdatedTime { get; set; }
        /// <summary>
        /// Current state of the live event. See https://go.microsoft.com/fwlink/?linkid=2139012 for more information.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Current state of the live event. See https://go.microsoft.com/fwlink/?linkid=2139012 for more information.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventState) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventState? State { get; set; }
        /// <summary>Track entry list.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Track entry list.",
        SerializedName = @"trackStatus",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventTrackStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventTrackStatus[] TrackStatus { get; set; }

    }
    /// The live event status.
    internal partial interface ILiveEventStatusInternal

    {
        /// <summary>List of strings justifying the health status.</summary>
        string[] HealthDescription { get; set; }
        /// <summary>Health status of last 20 seconds.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventHealthStatus? HealthStatus { get; set; }
        /// <summary>Live event ingestion entry.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventIngestion Ingestion { get; set; }
        /// <summary>Ingestion begin time in UTC.</summary>
        global::System.DateTime? IngestionBegin { get; set; }
        /// <summary>Ingestion end time in UTC. Empty if it's not stopped yet.</summary>
        global::System.DateTime? IngestionEnd { get; set; }
        /// <summary>
        /// Reason why ingestion stops. Empty if it's not stopped yet. E.g) Service Stopped. No Ingestion.
        /// </summary>
        string IngestionEndReason { get; set; }
        /// <summary>IngestInterruption entry list.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventIngestInterruption[] IngestionIngestInterruption { get; set; }
        /// <summary>Ingestion stream name.</summary>
        string IngestionStreamName { get; set; }
        /// <summary>Last updated UTC time of this status.</summary>
        global::System.DateTime? LastUpdatedTime { get; set; }
        /// <summary>
        /// Current state of the live event. See https://go.microsoft.com/fwlink/?linkid=2139012 for more information.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventState? State { get; set; }
        /// <summary>Track entry list.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventTrackStatus[] TrackStatus { get; set; }

    }
}