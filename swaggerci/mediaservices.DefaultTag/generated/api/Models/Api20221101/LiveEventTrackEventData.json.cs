// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Extensions;

    /// <summary>The live event track ingest heart beat event data.</summary>
    public partial class LiveEventTrackEventData
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json serialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name= "returnNow" />
        /// output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventTrackEventData.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventTrackEventData.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventTrackEventData FromJson(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode node)
        {
            return node is Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject json ? new LiveEventTrackEventData(json) : null;
        }

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject into a new instance of <see cref="LiveEventTrackEventData" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal LiveEventTrackEventData(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_trackName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("trackName"), out var __jsonTrackName) ? (string)__jsonTrackName : (string)TrackName;}
            {_trackType = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("trackType"), out var __jsonTrackType) ? (string)__jsonTrackType : (string)TrackType;}
            {_bitrate = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNumber>("bitrate"), out var __jsonBitrate) ? (long?)__jsonBitrate : Bitrate;}
            {_incomingBitrate = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNumber>("incomingBitrate"), out var __jsonIncomingBitrate) ? (long?)__jsonIncomingBitrate : IncomingBitrate;}
            {_lastTimestamp = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("lastTimestamp"), out var __jsonLastTimestamp) ? (string)__jsonLastTimestamp : (string)LastTimestamp;}
            {_timescale = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("timescale"), out var __jsonTimescale) ? (string)__jsonTimescale : (string)Timescale;}
            {_overlapCount = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNumber>("overlapCount"), out var __jsonOverlapCount) ? (long?)__jsonOverlapCount : OverlapCount;}
            {_discontinuityCount = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNumber>("discontinuityCount"), out var __jsonDiscontinuityCount) ? (long?)__jsonDiscontinuityCount : DiscontinuityCount;}
            {_nonincreasingCount = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNumber>("nonincreasingCount"), out var __jsonNonincreasingCount) ? (long?)__jsonNonincreasingCount : NonincreasingCount;}
            {_unexpectedBitrate = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonBoolean>("unexpectedBitrate"), out var __jsonUnexpectedBitrate) ? (bool?)__jsonUnexpectedBitrate : UnexpectedBitrate;}
            {_state = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("state"), out var __jsonState) ? (string)__jsonState : (string)State;}
            {_healthy = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonBoolean>("healthy"), out var __jsonHealthy) ? (bool?)__jsonHealthy : Healthy;}
            {_lastFragmentArrivalTime = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("lastFragmentArrivalTime"), out var __jsonLastFragmentArrivalTime) ? global::System.DateTime.TryParse((string)__jsonLastFragmentArrivalTime, global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.AdjustToUniversal, out var __jsonLastFragmentArrivalTimeValue) ? __jsonLastFragmentArrivalTimeValue : LastFragmentArrivalTime : LastFragmentArrivalTime;}
            {_ingestDriftValue = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("ingestDriftValue"), out var __jsonIngestDriftValue) ? (string)__jsonIngestDriftValue : (string)IngestDriftValue;}
            {_transcriptionState = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("transcriptionState"), out var __jsonTranscriptionState) ? (string)__jsonTranscriptionState : (string)TranscriptionState;}
            {_transcriptionLanguage = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("transcriptionLanguage"), out var __jsonTranscriptionLanguage) ? (string)__jsonTranscriptionLanguage : (string)TranscriptionLanguage;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Serializes this instance of <see cref="LiveEventTrackEventData" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="LiveEventTrackEventData" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode" />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            AddIf( null != (((object)this._trackName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._trackName.ToString()) : null, "trackName" ,container.Add );
            AddIf( null != (((object)this._trackType)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._trackType.ToString()) : null, "trackType" ,container.Add );
            AddIf( null != this._bitrate ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNumber((long)this._bitrate) : null, "bitrate" ,container.Add );
            AddIf( null != this._incomingBitrate ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNumber((long)this._incomingBitrate) : null, "incomingBitrate" ,container.Add );
            AddIf( null != (((object)this._lastTimestamp)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._lastTimestamp.ToString()) : null, "lastTimestamp" ,container.Add );
            AddIf( null != (((object)this._timescale)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._timescale.ToString()) : null, "timescale" ,container.Add );
            AddIf( null != this._overlapCount ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNumber((long)this._overlapCount) : null, "overlapCount" ,container.Add );
            AddIf( null != this._discontinuityCount ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNumber((long)this._discontinuityCount) : null, "discontinuityCount" ,container.Add );
            AddIf( null != this._nonincreasingCount ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNumber((long)this._nonincreasingCount) : null, "nonincreasingCount" ,container.Add );
            AddIf( null != this._unexpectedBitrate ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonBoolean((bool)this._unexpectedBitrate) : null, "unexpectedBitrate" ,container.Add );
            AddIf( null != (((object)this._state)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._state.ToString()) : null, "state" ,container.Add );
            AddIf( null != this._healthy ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonBoolean((bool)this._healthy) : null, "healthy" ,container.Add );
            AddIf( null != this._lastFragmentArrivalTime ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._lastFragmentArrivalTime?.ToString(@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK",global::System.Globalization.CultureInfo.InvariantCulture)) : null, "lastFragmentArrivalTime" ,container.Add );
            AddIf( null != (((object)this._ingestDriftValue)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._ingestDriftValue.ToString()) : null, "ingestDriftValue" ,container.Add );
            AddIf( null != (((object)this._transcriptionState)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._transcriptionState.ToString()) : null, "transcriptionState" ,container.Add );
            AddIf( null != (((object)this._transcriptionLanguage)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._transcriptionLanguage.ToString()) : null, "transcriptionLanguage" ,container.Add );
            AfterToJson(ref container);
            return container;
        }
    }
}