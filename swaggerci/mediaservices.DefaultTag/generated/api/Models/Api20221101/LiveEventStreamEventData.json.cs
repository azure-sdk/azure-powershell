// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Extensions;

    /// <summary>The live event stream event data.</summary>
    public partial class LiveEventStreamEventData
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json serialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name= "returnNow" />
        /// output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventStreamEventData.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventStreamEventData.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventStreamEventData FromJson(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode node)
        {
            return node is Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject json ? new LiveEventStreamEventData(json) : null;
        }

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject into a new instance of <see cref="LiveEventStreamEventData" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal LiveEventStreamEventData(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_trackName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("trackName"), out var __jsonTrackName) ? (string)__jsonTrackName : (string)TrackName;}
            {_streamId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("streamId"), out var __jsonStreamId) ? (string)__jsonStreamId : (string)StreamId;}
            {_trackId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNumber>("trackId"), out var __jsonTrackId) ? (int?)__jsonTrackId : TrackId;}
            {_mediaType = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("mediaType"), out var __jsonMediaType) ? (string)__jsonMediaType : (string)MediaType;}
            {_bitrate = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNumber>("bitrate"), out var __jsonBitrate) ? (long?)__jsonBitrate : Bitrate;}
            {_mediaTimestamp = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("mediaTimestamp"), out var __jsonMediaTimestamp) ? (string)__jsonMediaTimestamp : (string)MediaTimestamp;}
            {_timescale = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("timescale"), out var __jsonTimescale) ? (string)__jsonTimescale : (string)Timescale;}
            {_previousFragmentTimestamp = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("previousFragmentTimestamp"), out var __jsonPreviousFragmentTimestamp) ? (string)__jsonPreviousFragmentTimestamp : (string)PreviousFragmentTimestamp;}
            {_previousFragmentDuration = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("previousFragmentDuration"), out var __jsonPreviousFragmentDuration) ? (string)__jsonPreviousFragmentDuration : (string)PreviousFragmentDuration;}
            {_currentFragmentTimestamp = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("currentFragmentTimestamp"), out var __jsonCurrentFragmentTimestamp) ? (string)__jsonCurrentFragmentTimestamp : (string)CurrentFragmentTimestamp;}
            {_fragmentOneTimestamp = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("fragmentOneTimestamp"), out var __jsonFragmentOneTimestamp) ? (string)__jsonFragmentOneTimestamp : (string)FragmentOneTimestamp;}
            {_fragmentOneDuration = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("fragmentOneDuration"), out var __jsonFragmentOneDuration) ? (string)__jsonFragmentOneDuration : (string)FragmentOneDuration;}
            {_fragmentTwoTimestamp = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("fragmentTwoTimestamp"), out var __jsonFragmentTwoTimestamp) ? (string)__jsonFragmentTwoTimestamp : (string)FragmentTwoTimestamp;}
            {_fragmentTwoDuration = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("fragmentTwoDuration"), out var __jsonFragmentTwoDuration) ? (string)__jsonFragmentTwoDuration : (string)FragmentTwoDuration;}
            {_fragmentDropReason = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("fragmentDropReason"), out var __jsonFragmentDropReason) ? (string)__jsonFragmentDropReason : (string)FragmentDropReason;}
            {_discontinuityGap = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNumber>("discontinuityGap"), out var __jsonDiscontinuityGap) ? (long?)__jsonDiscontinuityGap : DiscontinuityGap;}
            {_streamName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("streamName"), out var __jsonStreamName) ? (string)__jsonStreamName : (string)StreamName;}
            {_resultCode = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("resultCode"), out var __jsonResultCode) ? (string)__jsonResultCode : (string)ResultCode;}
            {_resultMessage = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("resultMessage"), out var __jsonResultMessage) ? (string)__jsonResultMessage : (string)ResultMessage;}
            {_duration = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("duration"), out var __jsonDuration) ? (string)__jsonDuration : (string)Duration;}
            {_resolution = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("resolution"), out var __jsonResolution) ? (string)__jsonResolution : (string)Resolution;}
            {_minTime = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("minTime"), out var __jsonMinTime) ? (string)__jsonMinTime : (string)MinTime;}
            {_minTimeMediaType = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("minTimeMediaType"), out var __jsonMinTimeMediaType) ? (string)__jsonMinTimeMediaType : (string)MinTimeMediaType;}
            {_maxTime = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("maxTime"), out var __jsonMaxTime) ? (string)__jsonMaxTime : (string)MaxTime;}
            {_maxTimeMediaType = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("maxTimeMediaType"), out var __jsonMaxTimeMediaType) ? (string)__jsonMaxTimeMediaType : (string)MaxTimeMediaType;}
            {_timescaleOfMinTime = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("timescaleOfMinTime"), out var __jsonTimescaleOfMinTime) ? (string)__jsonTimescaleOfMinTime : (string)TimescaleOfMinTime;}
            {_timescaleOfMaxTime = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("timescaleOfMaxTime"), out var __jsonTimescaleOfMaxTime) ? (string)__jsonTimescaleOfMaxTime : (string)TimescaleOfMaxTime;}
            {_remoteIP = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("remoteIp"), out var __jsonRemoteIP) ? (string)__jsonRemoteIP : (string)RemoteIP;}
            {_remotePort = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString>("remotePort"), out var __jsonRemotePort) ? (string)__jsonRemotePort : (string)RemotePort;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Serializes this instance of <see cref="LiveEventStreamEventData" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="LiveEventStreamEventData" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode" />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            AddIf( null != (((object)this._trackName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._trackName.ToString()) : null, "trackName" ,container.Add );
            AddIf( null != (((object)this._streamId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._streamId.ToString()) : null, "streamId" ,container.Add );
            AddIf( null != this._trackId ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNumber((int)this._trackId) : null, "trackId" ,container.Add );
            AddIf( null != (((object)this._mediaType)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._mediaType.ToString()) : null, "mediaType" ,container.Add );
            AddIf( null != this._bitrate ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNumber((long)this._bitrate) : null, "bitrate" ,container.Add );
            AddIf( null != (((object)this._mediaTimestamp)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._mediaTimestamp.ToString()) : null, "mediaTimestamp" ,container.Add );
            AddIf( null != (((object)this._timescale)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._timescale.ToString()) : null, "timescale" ,container.Add );
            AddIf( null != (((object)this._previousFragmentTimestamp)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._previousFragmentTimestamp.ToString()) : null, "previousFragmentTimestamp" ,container.Add );
            AddIf( null != (((object)this._previousFragmentDuration)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._previousFragmentDuration.ToString()) : null, "previousFragmentDuration" ,container.Add );
            AddIf( null != (((object)this._currentFragmentTimestamp)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._currentFragmentTimestamp.ToString()) : null, "currentFragmentTimestamp" ,container.Add );
            AddIf( null != (((object)this._fragmentOneTimestamp)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._fragmentOneTimestamp.ToString()) : null, "fragmentOneTimestamp" ,container.Add );
            AddIf( null != (((object)this._fragmentOneDuration)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._fragmentOneDuration.ToString()) : null, "fragmentOneDuration" ,container.Add );
            AddIf( null != (((object)this._fragmentTwoTimestamp)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._fragmentTwoTimestamp.ToString()) : null, "fragmentTwoTimestamp" ,container.Add );
            AddIf( null != (((object)this._fragmentTwoDuration)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._fragmentTwoDuration.ToString()) : null, "fragmentTwoDuration" ,container.Add );
            AddIf( null != (((object)this._fragmentDropReason)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._fragmentDropReason.ToString()) : null, "fragmentDropReason" ,container.Add );
            AddIf( null != this._discontinuityGap ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNumber((long)this._discontinuityGap) : null, "discontinuityGap" ,container.Add );
            AddIf( null != (((object)this._streamName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._streamName.ToString()) : null, "streamName" ,container.Add );
            AddIf( null != (((object)this._resultCode)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._resultCode.ToString()) : null, "resultCode" ,container.Add );
            AddIf( null != (((object)this._resultMessage)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._resultMessage.ToString()) : null, "resultMessage" ,container.Add );
            AddIf( null != (((object)this._duration)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._duration.ToString()) : null, "duration" ,container.Add );
            AddIf( null != (((object)this._resolution)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._resolution.ToString()) : null, "resolution" ,container.Add );
            AddIf( null != (((object)this._minTime)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._minTime.ToString()) : null, "minTime" ,container.Add );
            AddIf( null != (((object)this._minTimeMediaType)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._minTimeMediaType.ToString()) : null, "minTimeMediaType" ,container.Add );
            AddIf( null != (((object)this._maxTime)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._maxTime.ToString()) : null, "maxTime" ,container.Add );
            AddIf( null != (((object)this._maxTimeMediaType)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._maxTimeMediaType.ToString()) : null, "maxTimeMediaType" ,container.Add );
            AddIf( null != (((object)this._timescaleOfMinTime)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._timescaleOfMinTime.ToString()) : null, "timescaleOfMinTime" ,container.Add );
            AddIf( null != (((object)this._timescaleOfMaxTime)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._timescaleOfMaxTime.ToString()) : null, "timescaleOfMaxTime" ,container.Add );
            AddIf( null != (((object)this._remoteIP)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._remoteIP.ToString()) : null, "remoteIp" ,container.Add );
            AddIf( null != (((object)this._remotePort)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Json.JsonString(this._remotePort.ToString()) : null, "remotePort" ,container.Add );
            AfterToJson(ref container);
            return container;
        }
    }
}