// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Extensions;

    /// <summary>The live event track status.</summary>
    public partial class LiveEventTrackStatus :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventTrackStatus,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventTrackStatusInternal
    {

        /// <summary>Backing field for <see cref="ExpectedBitrate" /> property.</summary>
        private long? _expectedBitrate;

        /// <summary>Expected bitrate for this track.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public long? ExpectedBitrate { get => this._expectedBitrate; set => this._expectedBitrate = value; }

        /// <summary>Backing field for <see cref="IncomingBitrate" /> property.</summary>
        private long? _incomingBitrate;

        /// <summary>Average incoming bitrate for last 20 seconds when live event is running.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public long? IncomingBitrate { get => this._incomingBitrate; set => this._incomingBitrate = value; }

        /// <summary>Backing field for <see cref="IngestDrift" /> property.</summary>
        private string _ingestDrift;

        /// <summary>Current ingest drift value in seconds for last 1 minute.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string IngestDrift { get => this._ingestDrift; set => this._ingestDrift = value; }

        /// <summary>Backing field for <see cref="RequestReceived" /> property.</summary>
        private long? _requestReceived;

        /// <summary>Total number of timed metadata request received.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public long? RequestReceived { get => this._requestReceived; set => this._requestReceived = value; }

        /// <summary>Backing field for <see cref="RequestSucceeded" /> property.</summary>
        private long? _requestSucceeded;

        /// <summary>Total number of successful timed metadata request received.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public long? RequestSucceeded { get => this._requestSucceeded; set => this._requestSucceeded = value; }

        /// <summary>Backing field for <see cref="TrackId" /> property.</summary>
        private string _trackId;

        /// <summary>Track Id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string TrackId { get => this._trackId; set => this._trackId = value; }

        /// <summary>Creates an new <see cref="LiveEventTrackStatus" /> instance.</summary>
        public LiveEventTrackStatus()
        {

        }
    }
    /// The live event track status.
    public partial interface ILiveEventTrackStatus :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IJsonSerializable
    {
        /// <summary>Expected bitrate for this track.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Expected bitrate for this track.",
        SerializedName = @"expectedBitrate",
        PossibleTypes = new [] { typeof(long) })]
        long? ExpectedBitrate { get; set; }
        /// <summary>Average incoming bitrate for last 20 seconds when live event is running.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Average incoming bitrate for last 20 seconds when live event is running.",
        SerializedName = @"incomingBitrate",
        PossibleTypes = new [] { typeof(long) })]
        long? IncomingBitrate { get; set; }
        /// <summary>Current ingest drift value in seconds for last 1 minute.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Current ingest drift value in seconds for last 1 minute.",
        SerializedName = @"ingestDrift",
        PossibleTypes = new [] { typeof(string) })]
        string IngestDrift { get; set; }
        /// <summary>Total number of timed metadata request received.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Total number of timed metadata request received.",
        SerializedName = @"requestReceived",
        PossibleTypes = new [] { typeof(long) })]
        long? RequestReceived { get; set; }
        /// <summary>Total number of successful timed metadata request received.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Total number of successful timed metadata request received.",
        SerializedName = @"requestSucceeded",
        PossibleTypes = new [] { typeof(long) })]
        long? RequestSucceeded { get; set; }
        /// <summary>Track Id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Track Id.",
        SerializedName = @"trackId",
        PossibleTypes = new [] { typeof(string) })]
        string TrackId { get; set; }

    }
    /// The live event track status.
    internal partial interface ILiveEventTrackStatusInternal

    {
        /// <summary>Expected bitrate for this track.</summary>
        long? ExpectedBitrate { get; set; }
        /// <summary>Average incoming bitrate for last 20 seconds when live event is running.</summary>
        long? IncomingBitrate { get; set; }
        /// <summary>Current ingest drift value in seconds for last 1 minute.</summary>
        string IngestDrift { get; set; }
        /// <summary>Total number of timed metadata request received.</summary>
        long? RequestReceived { get; set; }
        /// <summary>Total number of successful timed metadata request received.</summary>
        long? RequestSucceeded { get; set; }
        /// <summary>Track Id.</summary>
        string TrackId { get; set; }

    }
}