// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Extensions;

    /// <summary>The live event track ingest heart beat event data.</summary>
    public partial class LiveEventTrackEventData :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventTrackEventData,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventTrackEventDataInternal
    {

        /// <summary>Backing field for <see cref="Bitrate" /> property.</summary>
        private long? _bitrate;

        /// <summary>Bitrate of the track.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public long? Bitrate { get => this._bitrate; set => this._bitrate = value; }

        /// <summary>Backing field for <see cref="DiscontinuityCount" /> property.</summary>
        private long? _discontinuityCount;

        /// <summary>Number of discontinuities detected in the last 20 seconds.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public long? DiscontinuityCount { get => this._discontinuityCount; set => this._discontinuityCount = value; }

        /// <summary>Backing field for <see cref="Healthy" /> property.</summary>
        private bool? _healthy;

        /// <summary>Indicates whether ingest is healthy.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public bool? Healthy { get => this._healthy; set => this._healthy = value; }

        /// <summary>Backing field for <see cref="IncomingBitrate" /> property.</summary>
        private long? _incomingBitrate;

        /// <summary>Calculated bitrate based on data chunks coming from encoder.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public long? IncomingBitrate { get => this._incomingBitrate; set => this._incomingBitrate = value; }

        /// <summary>Backing field for <see cref="IngestDriftValue" /> property.</summary>
        private string _ingestDriftValue;

        /// <summary>
        /// Indicates the speed of delay, in seconds-per-minute, of the incoming audio or video data during the last minute. The value
        /// is greater than zero if data is arriving to the live event slower than expected in the last minute; zero if data arrived
        /// with no delay; and "n/a" if no audio or video data was received. For example, if you have a contribution encoder sending
        /// in live content, and it is slowing down due to processing issues, or network latency, it may be only able to deliver a
        /// total of 58 seconds of audio or video in a one-minute period. This would be reported as two seconds-per-minute of drift.
        /// If the encoder is able to catch up and send all 60 seconds or more of data every minute, you will see this value reported
        /// as 0. If there was a disconnection or discontinuity from the encoder, this value may still display as 0, as it does not
        /// account for breaks in the data - only data that is delayed in timestamps.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string IngestDriftValue { get => this._ingestDriftValue; set => this._ingestDriftValue = value; }

        /// <summary>Backing field for <see cref="LastFragmentArrivalTime" /> property.</summary>
        private global::System.DateTime? _lastFragmentArrivalTime;

        /// <summary>The last timestamp in UTC that a fragment arrived at the ingest endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public global::System.DateTime? LastFragmentArrivalTime { get => this._lastFragmentArrivalTime; set => this._lastFragmentArrivalTime = value; }

        /// <summary>Backing field for <see cref="LastTimestamp" /> property.</summary>
        private string _lastTimestamp;

        /// <summary>Latest timestamp received for a track in last 20 seconds.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string LastTimestamp { get => this._lastTimestamp; set => this._lastTimestamp = value; }

        /// <summary>Backing field for <see cref="NonincreasingCount" /> property.</summary>
        private long? _nonincreasingCount;

        /// <summary>
        /// Number of data chunks with timestamps in the past that were received in last 20 seconds.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public long? NonincreasingCount { get => this._nonincreasingCount; set => this._nonincreasingCount = value; }

        /// <summary>Backing field for <see cref="OverlapCount" /> property.</summary>
        private long? _overlapCount;

        /// <summary>Number of data chunks that had overlapped timestamps in last 20 seconds.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public long? OverlapCount { get => this._overlapCount; set => this._overlapCount = value; }

        /// <summary>Backing field for <see cref="State" /> property.</summary>
        private string _state;

        /// <summary>State of the live event.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string State { get => this._state; set => this._state = value; }

        /// <summary>Backing field for <see cref="Timescale" /> property.</summary>
        private string _timescale;

        /// <summary>Timescale in which timestamps are expressed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string Timescale { get => this._timescale; set => this._timescale = value; }

        /// <summary>Backing field for <see cref="TrackName" /> property.</summary>
        private string _trackName;

        /// <summary>Name of the track.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string TrackName { get => this._trackName; set => this._trackName = value; }

        /// <summary>Backing field for <see cref="TrackType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventTrackType? _trackType;

        /// <summary>Type of the track.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventTrackType? TrackType { get => this._trackType; set => this._trackType = value; }

        /// <summary>Backing field for <see cref="TranscriptionLanguage" /> property.</summary>
        private string _transcriptionLanguage;

        /// <summary>
        /// The language code (in BCP-47 format) of the transcription language. For example, "de-de" indicates German (Germany). The
        /// value is empty for the video track heartbeats, or when live transcription is turned off.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string TranscriptionLanguage { get => this._transcriptionLanguage; set => this._transcriptionLanguage = value; }

        /// <summary>Backing field for <see cref="TranscriptionState" /> property.</summary>
        private string _transcriptionState;

        /// <summary>
        /// This value is "On" for audio track heartbeats if live transcription is turned on, otherwise you will see an empty string.
        /// This state is only applicable to track type of "audio" for Live transcription. All other tracks will have an empty value.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string TranscriptionState { get => this._transcriptionState; set => this._transcriptionState = value; }

        /// <summary>Backing field for <see cref="UnexpectedBitrate" /> property.</summary>
        private bool? _unexpectedBitrate;

        /// <summary>
        /// If expected and actual bitrates differ by more than allowed limit in last 20 seconds.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public bool? UnexpectedBitrate { get => this._unexpectedBitrate; set => this._unexpectedBitrate = value; }

        /// <summary>Creates an new <see cref="LiveEventTrackEventData" /> instance.</summary>
        public LiveEventTrackEventData()
        {

        }
    }
    /// The live event track ingest heart beat event data.
    public partial interface ILiveEventTrackEventData :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IJsonSerializable
    {
        /// <summary>Bitrate of the track.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Bitrate of the track.",
        SerializedName = @"bitrate",
        PossibleTypes = new [] { typeof(long) })]
        long? Bitrate { get; set; }
        /// <summary>Number of discontinuities detected in the last 20 seconds.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of discontinuities detected in the last 20 seconds.",
        SerializedName = @"discontinuityCount",
        PossibleTypes = new [] { typeof(long) })]
        long? DiscontinuityCount { get; set; }
        /// <summary>Indicates whether ingest is healthy.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether ingest is healthy.",
        SerializedName = @"healthy",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Healthy { get; set; }
        /// <summary>Calculated bitrate based on data chunks coming from encoder.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Calculated bitrate based on data chunks coming from encoder.",
        SerializedName = @"incomingBitrate",
        PossibleTypes = new [] { typeof(long) })]
        long? IncomingBitrate { get; set; }
        /// <summary>
        /// Indicates the speed of delay, in seconds-per-minute, of the incoming audio or video data during the last minute. The value
        /// is greater than zero if data is arriving to the live event slower than expected in the last minute; zero if data arrived
        /// with no delay; and "n/a" if no audio or video data was received. For example, if you have a contribution encoder sending
        /// in live content, and it is slowing down due to processing issues, or network latency, it may be only able to deliver a
        /// total of 58 seconds of audio or video in a one-minute period. This would be reported as two seconds-per-minute of drift.
        /// If the encoder is able to catch up and send all 60 seconds or more of data every minute, you will see this value reported
        /// as 0. If there was a disconnection or discontinuity from the encoder, this value may still display as 0, as it does not
        /// account for breaks in the data - only data that is delayed in timestamps.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates the speed of delay, in seconds-per-minute, of the incoming audio or video data during the last minute. The value is greater than zero if data is arriving to the live event slower than expected in the last minute; zero if data arrived with no delay; and ""n/a"" if no audio or video data was received. For example, if you have a contribution encoder sending in live content, and it is slowing down due to processing issues, or network latency, it may be only able to deliver a total of 58 seconds of audio or video in a one-minute period. This would be reported as two seconds-per-minute of drift. If the encoder is able to catch up and send all 60 seconds or more of data every minute, you will see this value reported as 0. If there was a disconnection or discontinuity from the encoder, this value may still display as 0, as it does not account for breaks in the data - only data that is delayed in timestamps.",
        SerializedName = @"ingestDriftValue",
        PossibleTypes = new [] { typeof(string) })]
        string IngestDriftValue { get; set; }
        /// <summary>The last timestamp in UTC that a fragment arrived at the ingest endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The last timestamp in UTC that a fragment arrived at the ingest endpoint.",
        SerializedName = @"lastFragmentArrivalTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastFragmentArrivalTime { get; set; }
        /// <summary>Latest timestamp received for a track in last 20 seconds.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Latest timestamp received for a track in last 20 seconds.",
        SerializedName = @"lastTimestamp",
        PossibleTypes = new [] { typeof(string) })]
        string LastTimestamp { get; set; }
        /// <summary>
        /// Number of data chunks with timestamps in the past that were received in last 20 seconds.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of data chunks with timestamps in the past that were received in last 20 seconds.",
        SerializedName = @"nonincreasingCount",
        PossibleTypes = new [] { typeof(long) })]
        long? NonincreasingCount { get; set; }
        /// <summary>Number of data chunks that had overlapped timestamps in last 20 seconds.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of data chunks that had overlapped timestamps in last 20 seconds.",
        SerializedName = @"overlapCount",
        PossibleTypes = new [] { typeof(long) })]
        long? OverlapCount { get; set; }
        /// <summary>State of the live event.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"State of the live event.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(string) })]
        string State { get; set; }
        /// <summary>Timescale in which timestamps are expressed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Timescale in which timestamps are expressed.",
        SerializedName = @"timescale",
        PossibleTypes = new [] { typeof(string) })]
        string Timescale { get; set; }
        /// <summary>Name of the track.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the track.",
        SerializedName = @"trackName",
        PossibleTypes = new [] { typeof(string) })]
        string TrackName { get; set; }
        /// <summary>Type of the track.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Type of the track.",
        SerializedName = @"trackType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventTrackType) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventTrackType? TrackType { get; set; }
        /// <summary>
        /// The language code (in BCP-47 format) of the transcription language. For example, "de-de" indicates German (Germany). The
        /// value is empty for the video track heartbeats, or when live transcription is turned off.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The language code (in BCP-47 format) of the transcription language. For example, ""de-de"" indicates German (Germany). The value is empty for the video track heartbeats, or when live transcription is turned off.",
        SerializedName = @"transcriptionLanguage",
        PossibleTypes = new [] { typeof(string) })]
        string TranscriptionLanguage { get; set; }
        /// <summary>
        /// This value is "On" for audio track heartbeats if live transcription is turned on, otherwise you will see an empty string.
        /// This state is only applicable to track type of "audio" for Live transcription. All other tracks will have an empty value.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This value is ""On"" for audio track heartbeats if live transcription is turned on, otherwise you will see an empty string. This state is only applicable to track type of ""audio"" for Live transcription. All other tracks will have an empty value.",
        SerializedName = @"transcriptionState",
        PossibleTypes = new [] { typeof(string) })]
        string TranscriptionState { get; set; }
        /// <summary>
        /// If expected and actual bitrates differ by more than allowed limit in last 20 seconds.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If expected and actual bitrates differ by more than allowed limit in last 20 seconds.",
        SerializedName = @"unexpectedBitrate",
        PossibleTypes = new [] { typeof(bool) })]
        bool? UnexpectedBitrate { get; set; }

    }
    /// The live event track ingest heart beat event data.
    internal partial interface ILiveEventTrackEventDataInternal

    {
        /// <summary>Bitrate of the track.</summary>
        long? Bitrate { get; set; }
        /// <summary>Number of discontinuities detected in the last 20 seconds.</summary>
        long? DiscontinuityCount { get; set; }
        /// <summary>Indicates whether ingest is healthy.</summary>
        bool? Healthy { get; set; }
        /// <summary>Calculated bitrate based on data chunks coming from encoder.</summary>
        long? IncomingBitrate { get; set; }
        /// <summary>
        /// Indicates the speed of delay, in seconds-per-minute, of the incoming audio or video data during the last minute. The value
        /// is greater than zero if data is arriving to the live event slower than expected in the last minute; zero if data arrived
        /// with no delay; and "n/a" if no audio or video data was received. For example, if you have a contribution encoder sending
        /// in live content, and it is slowing down due to processing issues, or network latency, it may be only able to deliver a
        /// total of 58 seconds of audio or video in a one-minute period. This would be reported as two seconds-per-minute of drift.
        /// If the encoder is able to catch up and send all 60 seconds or more of data every minute, you will see this value reported
        /// as 0. If there was a disconnection or discontinuity from the encoder, this value may still display as 0, as it does not
        /// account for breaks in the data - only data that is delayed in timestamps.
        /// </summary>
        string IngestDriftValue { get; set; }
        /// <summary>The last timestamp in UTC that a fragment arrived at the ingest endpoint.</summary>
        global::System.DateTime? LastFragmentArrivalTime { get; set; }
        /// <summary>Latest timestamp received for a track in last 20 seconds.</summary>
        string LastTimestamp { get; set; }
        /// <summary>
        /// Number of data chunks with timestamps in the past that were received in last 20 seconds.
        /// </summary>
        long? NonincreasingCount { get; set; }
        /// <summary>Number of data chunks that had overlapped timestamps in last 20 seconds.</summary>
        long? OverlapCount { get; set; }
        /// <summary>State of the live event.</summary>
        string State { get; set; }
        /// <summary>Timescale in which timestamps are expressed.</summary>
        string Timescale { get; set; }
        /// <summary>Name of the track.</summary>
        string TrackName { get; set; }
        /// <summary>Type of the track.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventTrackType? TrackType { get; set; }
        /// <summary>
        /// The language code (in BCP-47 format) of the transcription language. For example, "de-de" indicates German (Germany). The
        /// value is empty for the video track heartbeats, or when live transcription is turned off.
        /// </summary>
        string TranscriptionLanguage { get; set; }
        /// <summary>
        /// This value is "On" for audio track heartbeats if live transcription is turned on, otherwise you will see an empty string.
        /// This state is only applicable to track type of "audio" for Live transcription. All other tracks will have an empty value.
        /// </summary>
        string TranscriptionState { get; set; }
        /// <summary>
        /// If expected and actual bitrates differ by more than allowed limit in last 20 seconds.
        /// </summary>
        bool? UnexpectedBitrate { get; set; }

    }
}