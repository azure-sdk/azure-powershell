// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Extensions;

    /// <summary>The live event stream event data.</summary>
    public partial class LiveEventStreamEventData :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventStreamEventData,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventStreamEventDataInternal
    {

        /// <summary>Backing field for <see cref="Bitrate" /> property.</summary>
        private long? _bitrate;

        /// <summary>Bitrate of the track.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public long? Bitrate { get => this._bitrate; set => this._bitrate = value; }

        /// <summary>Backing field for <see cref="CurrentFragmentTimestamp" /> property.</summary>
        private string _currentFragmentTimestamp;

        /// <summary>Current fragment timestamp in timescale.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string CurrentFragmentTimestamp { get => this._currentFragmentTimestamp; set => this._currentFragmentTimestamp = value; }

        /// <summary>Backing field for <see cref="DiscontinuityGap" /> property.</summary>
        private long? _discontinuityGap;

        /// <summary>Length of the discontinuity gap in timescale.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public long? DiscontinuityGap { get => this._discontinuityGap; set => this._discontinuityGap = value; }

        /// <summary>Backing field for <see cref="Duration" /> property.</summary>
        private string _duration;

        /// <summary>Fragment duration.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string Duration { get => this._duration; set => this._duration = value; }

        /// <summary>Backing field for <see cref="FragmentDropReason" /> property.</summary>
        private string _fragmentDropReason;

        /// <summary>Reason the fragment was dropped.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string FragmentDropReason { get => this._fragmentDropReason; set => this._fragmentDropReason = value; }

        /// <summary>Backing field for <see cref="FragmentOneDuration" /> property.</summary>
        private string _fragmentOneDuration;

        /// <summary>Duration of first fragment used to make a comparison, in timescale.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string FragmentOneDuration { get => this._fragmentOneDuration; set => this._fragmentOneDuration = value; }

        /// <summary>Backing field for <see cref="FragmentOneTimestamp" /> property.</summary>
        private string _fragmentOneTimestamp;

        /// <summary>Timestamp of first fragment used to make a comparison, in timescale.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string FragmentOneTimestamp { get => this._fragmentOneTimestamp; set => this._fragmentOneTimestamp = value; }

        /// <summary>Backing field for <see cref="FragmentTwoDuration" /> property.</summary>
        private string _fragmentTwoDuration;

        /// <summary>Duration of second fragment used to make a comparison, in timescale.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string FragmentTwoDuration { get => this._fragmentTwoDuration; set => this._fragmentTwoDuration = value; }

        /// <summary>Backing field for <see cref="FragmentTwoTimestamp" /> property.</summary>
        private string _fragmentTwoTimestamp;

        /// <summary>Timestamp of second fragment used to make a comparison, in timescale.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string FragmentTwoTimestamp { get => this._fragmentTwoTimestamp; set => this._fragmentTwoTimestamp = value; }

        /// <summary>Backing field for <see cref="MaxTime" /> property.</summary>
        private string _maxTime;

        /// <summary>The larger timestamp of the two fragments compared.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string MaxTime { get => this._maxTime; set => this._maxTime = value; }

        /// <summary>Backing field for <see cref="MaxTimeMediaType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventStreamEventMaxTimeMediaType? _maxTimeMediaType;

        /// <summary>The media type of the larger timestamp of two fragments compared.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventStreamEventMaxTimeMediaType? MaxTimeMediaType { get => this._maxTimeMediaType; set => this._maxTimeMediaType = value; }

        /// <summary>Backing field for <see cref="MediaTimestamp" /> property.</summary>
        private string _mediaTimestamp;

        /// <summary>Fragment timestamp in timescale.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string MediaTimestamp { get => this._mediaTimestamp; set => this._mediaTimestamp = value; }

        /// <summary>Backing field for <see cref="MediaType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventStreamEventMediaType? _mediaType;

        /// <summary>Type of the track.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventStreamEventMediaType? MediaType { get => this._mediaType; set => this._mediaType = value; }

        /// <summary>Backing field for <see cref="MinTime" /> property.</summary>
        private string _minTime;

        /// <summary>The smaller timestamp of the two fragments compared.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string MinTime { get => this._minTime; set => this._minTime = value; }

        /// <summary>Backing field for <see cref="MinTimeMediaType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventStreamEventMinTimeMediaType? _minTimeMediaType;

        /// <summary>The media type of the smaller timestamp of two fragments compared.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventStreamEventMinTimeMediaType? MinTimeMediaType { get => this._minTimeMediaType; set => this._minTimeMediaType = value; }

        /// <summary>Backing field for <see cref="PreviousFragmentDuration" /> property.</summary>
        private string _previousFragmentDuration;

        /// <summary>Previous fragment duration in timescale.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string PreviousFragmentDuration { get => this._previousFragmentDuration; set => this._previousFragmentDuration = value; }

        /// <summary>Backing field for <see cref="PreviousFragmentTimestamp" /> property.</summary>
        private string _previousFragmentTimestamp;

        /// <summary>Previous fragment timestamp in timescale.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string PreviousFragmentTimestamp { get => this._previousFragmentTimestamp; set => this._previousFragmentTimestamp = value; }

        /// <summary>Backing field for <see cref="RemoteIP" /> property.</summary>
        private string _remoteIP;

        /// <summary>Truncated IP of the encoder.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string RemoteIP { get => this._remoteIP; set => this._remoteIP = value; }

        /// <summary>Backing field for <see cref="RemotePort" /> property.</summary>
        private string _remotePort;

        /// <summary>Port of the encoder.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string RemotePort { get => this._remotePort; set => this._remotePort = value; }

        /// <summary>Backing field for <see cref="Resolution" /> property.</summary>
        private string _resolution;

        /// <summary>Width x Height for video, null otherwise.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string Resolution { get => this._resolution; set => this._resolution = value; }

        /// <summary>Backing field for <see cref="ResultCode" /> property.</summary>
        private string _resultCode;

        /// <summary>Result code.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string ResultCode { get => this._resultCode; set => this._resultCode = value; }

        /// <summary>Backing field for <see cref="ResultMessage" /> property.</summary>
        private string _resultMessage;

        /// <summary>Result message.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string ResultMessage { get => this._resultMessage; set => this._resultMessage = value; }

        /// <summary>Backing field for <see cref="StreamId" /> property.</summary>
        private string _streamId;

        /// <summary>Stream ID in the format "trackName_bitrate"</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string StreamId { get => this._streamId; set => this._streamId = value; }

        /// <summary>Backing field for <see cref="StreamName" /> property.</summary>
        private string _streamName;

        /// <summary>
        /// Identifier of the stream or connection. Encoder or customer is responsible to add this ID in the ingest URL.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string StreamName { get => this._streamName; set => this._streamName = value; }

        /// <summary>Backing field for <see cref="Timescale" /> property.</summary>
        private string _timescale;

        /// <summary>Timescale in which timestamps are expressed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string Timescale { get => this._timescale; set => this._timescale = value; }

        /// <summary>Backing field for <see cref="TimescaleOfMaxTime" /> property.</summary>
        private string _timescaleOfMaxTime;

        /// <summary>Timescale of the fragment with the larger timestamp.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string TimescaleOfMaxTime { get => this._timescaleOfMaxTime; set => this._timescaleOfMaxTime = value; }

        /// <summary>Backing field for <see cref="TimescaleOfMinTime" /> property.</summary>
        private string _timescaleOfMinTime;

        /// <summary>Timescale of the fragment with the smaller timestamp.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string TimescaleOfMinTime { get => this._timescaleOfMinTime; set => this._timescaleOfMinTime = value; }

        /// <summary>Backing field for <see cref="TrackId" /> property.</summary>
        private int? _trackId;

        /// <summary>Track index.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public int? TrackId { get => this._trackId; set => this._trackId = value; }

        /// <summary>Backing field for <see cref="TrackName" /> property.</summary>
        private string _trackName;

        /// <summary>Name of the track.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string TrackName { get => this._trackName; set => this._trackName = value; }

        /// <summary>Creates an new <see cref="LiveEventStreamEventData" /> instance.</summary>
        public LiveEventStreamEventData()
        {

        }
    }
    /// The live event stream event data.
    public partial interface ILiveEventStreamEventData :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IJsonSerializable
    {
        /// <summary>Bitrate of the track.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Bitrate of the track.",
        SerializedName = @"bitrate",
        PossibleTypes = new [] { typeof(long) })]
        long? Bitrate { get; set; }
        /// <summary>Current fragment timestamp in timescale.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Current fragment timestamp in timescale.",
        SerializedName = @"currentFragmentTimestamp",
        PossibleTypes = new [] { typeof(string) })]
        string CurrentFragmentTimestamp { get; set; }
        /// <summary>Length of the discontinuity gap in timescale.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Length of the discontinuity gap in timescale.",
        SerializedName = @"discontinuityGap",
        PossibleTypes = new [] { typeof(long) })]
        long? DiscontinuityGap { get; set; }
        /// <summary>Fragment duration.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Fragment duration.",
        SerializedName = @"duration",
        PossibleTypes = new [] { typeof(string) })]
        string Duration { get; set; }
        /// <summary>Reason the fragment was dropped.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Reason the fragment was dropped.",
        SerializedName = @"fragmentDropReason",
        PossibleTypes = new [] { typeof(string) })]
        string FragmentDropReason { get; set; }
        /// <summary>Duration of first fragment used to make a comparison, in timescale.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Duration of first fragment used to make a comparison, in timescale.",
        SerializedName = @"fragmentOneDuration",
        PossibleTypes = new [] { typeof(string) })]
        string FragmentOneDuration { get; set; }
        /// <summary>Timestamp of first fragment used to make a comparison, in timescale.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Timestamp of first fragment used to make a comparison, in timescale.",
        SerializedName = @"fragmentOneTimestamp",
        PossibleTypes = new [] { typeof(string) })]
        string FragmentOneTimestamp { get; set; }
        /// <summary>Duration of second fragment used to make a comparison, in timescale.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Duration of second fragment used to make a comparison, in timescale.",
        SerializedName = @"fragmentTwoDuration",
        PossibleTypes = new [] { typeof(string) })]
        string FragmentTwoDuration { get; set; }
        /// <summary>Timestamp of second fragment used to make a comparison, in timescale.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Timestamp of second fragment used to make a comparison, in timescale.",
        SerializedName = @"fragmentTwoTimestamp",
        PossibleTypes = new [] { typeof(string) })]
        string FragmentTwoTimestamp { get; set; }
        /// <summary>The larger timestamp of the two fragments compared.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The larger timestamp of the two fragments compared.",
        SerializedName = @"maxTime",
        PossibleTypes = new [] { typeof(string) })]
        string MaxTime { get; set; }
        /// <summary>The media type of the larger timestamp of two fragments compared.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The media type of the larger timestamp of two fragments compared.",
        SerializedName = @"maxTimeMediaType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventStreamEventMaxTimeMediaType) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventStreamEventMaxTimeMediaType? MaxTimeMediaType { get; set; }
        /// <summary>Fragment timestamp in timescale.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Fragment timestamp in timescale.",
        SerializedName = @"mediaTimestamp",
        PossibleTypes = new [] { typeof(string) })]
        string MediaTimestamp { get; set; }
        /// <summary>Type of the track.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Type of the track.",
        SerializedName = @"mediaType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventStreamEventMediaType) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventStreamEventMediaType? MediaType { get; set; }
        /// <summary>The smaller timestamp of the two fragments compared.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The smaller timestamp of the two fragments compared.",
        SerializedName = @"minTime",
        PossibleTypes = new [] { typeof(string) })]
        string MinTime { get; set; }
        /// <summary>The media type of the smaller timestamp of two fragments compared.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The media type of the smaller timestamp of two fragments compared.",
        SerializedName = @"minTimeMediaType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventStreamEventMinTimeMediaType) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventStreamEventMinTimeMediaType? MinTimeMediaType { get; set; }
        /// <summary>Previous fragment duration in timescale.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Previous fragment duration in timescale.",
        SerializedName = @"previousFragmentDuration",
        PossibleTypes = new [] { typeof(string) })]
        string PreviousFragmentDuration { get; set; }
        /// <summary>Previous fragment timestamp in timescale.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Previous fragment timestamp in timescale.",
        SerializedName = @"previousFragmentTimestamp",
        PossibleTypes = new [] { typeof(string) })]
        string PreviousFragmentTimestamp { get; set; }
        /// <summary>Truncated IP of the encoder.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Truncated IP of the encoder.",
        SerializedName = @"remoteIp",
        PossibleTypes = new [] { typeof(string) })]
        string RemoteIP { get; set; }
        /// <summary>Port of the encoder.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Port of the encoder.",
        SerializedName = @"remotePort",
        PossibleTypes = new [] { typeof(string) })]
        string RemotePort { get; set; }
        /// <summary>Width x Height for video, null otherwise.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Width x Height for video, null otherwise.",
        SerializedName = @"resolution",
        PossibleTypes = new [] { typeof(string) })]
        string Resolution { get; set; }
        /// <summary>Result code.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Result code.",
        SerializedName = @"resultCode",
        PossibleTypes = new [] { typeof(string) })]
        string ResultCode { get; set; }
        /// <summary>Result message.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Result message.",
        SerializedName = @"resultMessage",
        PossibleTypes = new [] { typeof(string) })]
        string ResultMessage { get; set; }
        /// <summary>Stream ID in the format "trackName_bitrate"</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Stream ID in the format ""trackName_bitrate""",
        SerializedName = @"streamId",
        PossibleTypes = new [] { typeof(string) })]
        string StreamId { get; set; }
        /// <summary>
        /// Identifier of the stream or connection. Encoder or customer is responsible to add this ID in the ingest URL.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Identifier of the stream or connection. Encoder or customer is responsible to add this ID in the ingest URL.",
        SerializedName = @"streamName",
        PossibleTypes = new [] { typeof(string) })]
        string StreamName { get; set; }
        /// <summary>Timescale in which timestamps are expressed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Timescale in which timestamps are expressed.",
        SerializedName = @"timescale",
        PossibleTypes = new [] { typeof(string) })]
        string Timescale { get; set; }
        /// <summary>Timescale of the fragment with the larger timestamp.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Timescale of the fragment with the larger timestamp.",
        SerializedName = @"timescaleOfMaxTime",
        PossibleTypes = new [] { typeof(string) })]
        string TimescaleOfMaxTime { get; set; }
        /// <summary>Timescale of the fragment with the smaller timestamp.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Timescale of the fragment with the smaller timestamp.",
        SerializedName = @"timescaleOfMinTime",
        PossibleTypes = new [] { typeof(string) })]
        string TimescaleOfMinTime { get; set; }
        /// <summary>Track index.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Track index.",
        SerializedName = @"trackId",
        PossibleTypes = new [] { typeof(int) })]
        int? TrackId { get; set; }
        /// <summary>Name of the track.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the track. ",
        SerializedName = @"trackName",
        PossibleTypes = new [] { typeof(string) })]
        string TrackName { get; set; }

    }
    /// The live event stream event data.
    internal partial interface ILiveEventStreamEventDataInternal

    {
        /// <summary>Bitrate of the track.</summary>
        long? Bitrate { get; set; }
        /// <summary>Current fragment timestamp in timescale.</summary>
        string CurrentFragmentTimestamp { get; set; }
        /// <summary>Length of the discontinuity gap in timescale.</summary>
        long? DiscontinuityGap { get; set; }
        /// <summary>Fragment duration.</summary>
        string Duration { get; set; }
        /// <summary>Reason the fragment was dropped.</summary>
        string FragmentDropReason { get; set; }
        /// <summary>Duration of first fragment used to make a comparison, in timescale.</summary>
        string FragmentOneDuration { get; set; }
        /// <summary>Timestamp of first fragment used to make a comparison, in timescale.</summary>
        string FragmentOneTimestamp { get; set; }
        /// <summary>Duration of second fragment used to make a comparison, in timescale.</summary>
        string FragmentTwoDuration { get; set; }
        /// <summary>Timestamp of second fragment used to make a comparison, in timescale.</summary>
        string FragmentTwoTimestamp { get; set; }
        /// <summary>The larger timestamp of the two fragments compared.</summary>
        string MaxTime { get; set; }
        /// <summary>The media type of the larger timestamp of two fragments compared.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventStreamEventMaxTimeMediaType? MaxTimeMediaType { get; set; }
        /// <summary>Fragment timestamp in timescale.</summary>
        string MediaTimestamp { get; set; }
        /// <summary>Type of the track.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventStreamEventMediaType? MediaType { get; set; }
        /// <summary>The smaller timestamp of the two fragments compared.</summary>
        string MinTime { get; set; }
        /// <summary>The media type of the smaller timestamp of two fragments compared.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Support.LiveEventStreamEventMinTimeMediaType? MinTimeMediaType { get; set; }
        /// <summary>Previous fragment duration in timescale.</summary>
        string PreviousFragmentDuration { get; set; }
        /// <summary>Previous fragment timestamp in timescale.</summary>
        string PreviousFragmentTimestamp { get; set; }
        /// <summary>Truncated IP of the encoder.</summary>
        string RemoteIP { get; set; }
        /// <summary>Port of the encoder.</summary>
        string RemotePort { get; set; }
        /// <summary>Width x Height for video, null otherwise.</summary>
        string Resolution { get; set; }
        /// <summary>Result code.</summary>
        string ResultCode { get; set; }
        /// <summary>Result message.</summary>
        string ResultMessage { get; set; }
        /// <summary>Stream ID in the format "trackName_bitrate"</summary>
        string StreamId { get; set; }
        /// <summary>
        /// Identifier of the stream or connection. Encoder or customer is responsible to add this ID in the ingest URL.
        /// </summary>
        string StreamName { get; set; }
        /// <summary>Timescale in which timestamps are expressed.</summary>
        string Timescale { get; set; }
        /// <summary>Timescale of the fragment with the larger timestamp.</summary>
        string TimescaleOfMaxTime { get; set; }
        /// <summary>Timescale of the fragment with the smaller timestamp.</summary>
        string TimescaleOfMinTime { get; set; }
        /// <summary>Track index.</summary>
        int? TrackId { get; set; }
        /// <summary>Name of the track.</summary>
        string TrackName { get; set; }

    }
}