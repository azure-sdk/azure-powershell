// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Extensions;

    /// <summary>The live event ingestion telemetry data.</summary>
    public partial class LiveEventIngestion :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventIngestion,
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventIngestionInternal
    {

        /// <summary>Backing field for <see cref="Begin" /> property.</summary>
        private global::System.DateTime? _begin;

        /// <summary>Ingestion begin time in UTC.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public global::System.DateTime? Begin { get => this._begin; set => this._begin = value; }

        /// <summary>Backing field for <see cref="End" /> property.</summary>
        private global::System.DateTime? _end;

        /// <summary>Ingestion end time in UTC. Empty if it's not stopped yet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public global::System.DateTime? End { get => this._end; set => this._end = value; }

        /// <summary>Backing field for <see cref="EndReason" /> property.</summary>
        private string _endReason;

        /// <summary>
        /// Reason why ingestion stops. Empty if it's not stopped yet. E.g) Service Stopped. No Ingestion.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string EndReason { get => this._endReason; set => this._endReason = value; }

        /// <summary>Backing field for <see cref="IngestInterruption" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventIngestInterruption[] _ingestInterruption;

        /// <summary>IngestInterruption entry list.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventIngestInterruption[] IngestInterruption { get => this._ingestInterruption; set => this._ingestInterruption = value; }

        /// <summary>Backing field for <see cref="StreamName" /> property.</summary>
        private string _streamName;

        /// <summary>Ingestion stream name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.PropertyOrigin.Owned)]
        public string StreamName { get => this._streamName; set => this._streamName = value; }

        /// <summary>Creates an new <see cref="LiveEventIngestion" /> instance.</summary>
        public LiveEventIngestion()
        {

        }
    }
    /// The live event ingestion telemetry data.
    public partial interface ILiveEventIngestion :
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.IJsonSerializable
    {
        /// <summary>Ingestion begin time in UTC.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Ingestion begin time in UTC.",
        SerializedName = @"begin",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? Begin { get; set; }
        /// <summary>Ingestion end time in UTC. Empty if it's not stopped yet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Ingestion end time in UTC. Empty if it's not stopped yet.",
        SerializedName = @"end",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? End { get; set; }
        /// <summary>
        /// Reason why ingestion stops. Empty if it's not stopped yet. E.g) Service Stopped. No Ingestion.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Reason why ingestion stops. Empty if it's not stopped yet. E.g) Service Stopped. No Ingestion.",
        SerializedName = @"endReason",
        PossibleTypes = new [] { typeof(string) })]
        string EndReason { get; set; }
        /// <summary>IngestInterruption entry list.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"IngestInterruption entry list.",
        SerializedName = @"ingestInterruptions",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventIngestInterruption) })]
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventIngestInterruption[] IngestInterruption { get; set; }
        /// <summary>Ingestion stream name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Ingestion stream name.",
        SerializedName = @"streamName",
        PossibleTypes = new [] { typeof(string) })]
        string StreamName { get; set; }

    }
    /// The live event ingestion telemetry data.
    internal partial interface ILiveEventIngestionInternal

    {
        /// <summary>Ingestion begin time in UTC.</summary>
        global::System.DateTime? Begin { get; set; }
        /// <summary>Ingestion end time in UTC. Empty if it's not stopped yet.</summary>
        global::System.DateTime? End { get; set; }
        /// <summary>
        /// Reason why ingestion stops. Empty if it's not stopped yet. E.g) Service Stopped. No Ingestion.
        /// </summary>
        string EndReason { get; set; }
        /// <summary>IngestInterruption entry list.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MediaServices.Models.Api20221101.ILiveEventIngestInterruption[] IngestInterruption { get; set; }
        /// <summary>Ingestion stream name.</summary>
        string StreamName { get; set; }

    }
}