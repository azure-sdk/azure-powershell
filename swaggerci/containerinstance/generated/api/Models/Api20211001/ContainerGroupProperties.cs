// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Extensions;

    /// <summary>The container group properties</summary>
    public partial class ContainerGroupProperties :
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupProperties,
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesInternal
    {

        /// <summary>The containers within the container group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainer[] Container { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).Container; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).Container = value ; }

        /// <summary>The DNS servers for the container group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Inlined)]
        public string[] DnsConfigNameServer { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).DnsConfigNameServer; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).DnsConfigNameServer = value ?? null /* arrayOf */; }

        /// <summary>The DNS options for the container group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Inlined)]
        public string DnsConfigOption { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).DnsConfigOption; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).DnsConfigOption = value ?? null; }

        /// <summary>The DNS search domains for hostname lookup in the container group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Inlined)]
        public string DnsConfigSearchDomain { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).DnsConfigSearchDomain; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).DnsConfigSearchDomain = value ?? null; }

        /// <summary>The encryption key name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Inlined)]
        public string EncryptionPropertyKeyName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).EncryptionPropertyKeyName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).EncryptionPropertyKeyName = value ?? null; }

        /// <summary>The encryption key version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Inlined)]
        public string EncryptionPropertyKeyVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).EncryptionPropertyKeyVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).EncryptionPropertyKeyVersion = value ?? null; }

        /// <summary>The keyvault base url.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Inlined)]
        public string EncryptionPropertyVaultBaseUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).EncryptionPropertyVaultBaseUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).EncryptionPropertyVaultBaseUrl = value ?? null; }

        /// <summary>The value representing the security enum.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.DnsNameLabelReusePolicy? IPAddressAutoGeneratedDomainNameLabelScope { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).IPAddressAutoGeneratedDomainNameLabelScope; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).IPAddressAutoGeneratedDomainNameLabelScope = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.DnsNameLabelReusePolicy)""); }

        /// <summary>The Dns name label for the IP.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Inlined)]
        public string IPAddressDnsNameLabel { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).IPAddressDnsNameLabel; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).IPAddressDnsNameLabel = value ?? null; }

        /// <summary>The FQDN for the IP.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Inlined)]
        public string IPAddressFqdn { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).IPAddressFqdn; }

        /// <summary>The IP exposed to the public internet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Inlined)]
        public string IPAddressIP { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).IPAddressIP; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).IPAddressIP = value ?? null; }

        /// <summary>The list of ports exposed on the container group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IPort[] IPAddressPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).IPAddressPort; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).IPAddressPort = value ?? null /* arrayOf */; }

        /// <summary>Specifies if the IP is exposed to the public internet or private VNET.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.ContainerGroupIPAddressType? IPAddressType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).IPAddressType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).IPAddressType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.ContainerGroupIPAddressType)""); }

        /// <summary>Backing field for <see cref="Identity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupIdentity _identity;

        /// <summary>The identity of the container group, if configured.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupIdentity Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.ContainerGroupIdentity()); set => this._identity = value; }

        /// <summary>
        /// The principal id of the container group identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Inlined)]
        public string IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupIdentityInternal)Identity).PrincipalId; }

        /// <summary>
        /// The tenant id associated with the container group. This property will only be provided for a system assigned identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Inlined)]
        public string IdentityTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupIdentityInternal)Identity).TenantId; }

        /// <summary>
        /// The type of identity used for the container group. The type 'SystemAssigned, UserAssigned' includes both an implicitly
        /// created identity and a set of user assigned identities. The type 'None' will remove any identities from the container
        /// group.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.ResourceIdentityType? IdentityType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupIdentityInternal)Identity).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupIdentityInternal)Identity).Type = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.ResourceIdentityType)""); }

        /// <summary>The list of user identities associated with the container group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupIdentityUserAssignedIdentities IdentityUserAssignedIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupIdentityInternal)Identity).UserAssignedIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupIdentityInternal)Identity).UserAssignedIdentity = value ?? null /* model class */; }

        /// <summary>The image registry credentials by which the container group is created from.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IImageRegistryCredential[] ImageRegistryCredentials { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).ImageRegistryCredentials; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).ImageRegistryCredentials = value ?? null /* arrayOf */; }

        /// <summary>The init containers for a container group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IInitContainerDefinition[] InitContainer { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).InitContainer; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).InitContainer = value ?? null /* arrayOf */; }

        /// <summary>The events of this container group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IEvent[] InstanceViewEvent { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).InstanceViewEvent; }

        /// <summary>The state of the container group. Only valid in response.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Inlined)]
        public string InstanceViewState { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).InstanceViewState; }

        /// <summary>The log type to be used.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.LogAnalyticsLogType? LogAnalyticLogType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).LogAnalyticLogType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).LogAnalyticLogType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.LogAnalyticsLogType)""); }

        /// <summary>Metadata for log analytics.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.ILogAnalyticsMetadata LogAnalyticMetadata { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).LogAnalyticMetadata; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).LogAnalyticMetadata = value ?? null /* model class */; }

        /// <summary>The workspace id for log analytics</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Inlined)]
        public string LogAnalyticWorkspaceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).LogAnalyticWorkspaceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).LogAnalyticWorkspaceId = value ?? null; }

        /// <summary>The workspace key for log analytics</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Inlined)]
        public string LogAnalyticWorkspaceKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).LogAnalyticWorkspaceKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).LogAnalyticWorkspaceKey = value ?? null; }

        /// <summary>The workspace resource id for log analytics</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Inlined)]
        public string LogAnalyticWorkspaceResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).LogAnalyticWorkspaceResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).LogAnalyticWorkspaceResourceId = value ?? null; }

        /// <summary>Internal Acessors for Diagnostic</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupDiagnostics Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesInternal.Diagnostic { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).Diagnostic; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).Diagnostic = value; }

        /// <summary>Internal Acessors for DiagnosticLogAnalytic</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.ILogAnalytics Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesInternal.DiagnosticLogAnalytic { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).DiagnosticLogAnalytic; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).DiagnosticLogAnalytic = value; }

        /// <summary>Internal Acessors for DnsConfig</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IDnsConfiguration Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesInternal.DnsConfig { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).DnsConfig; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).DnsConfig = value; }

        /// <summary>Internal Acessors for EncryptionProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IEncryptionProperties Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesInternal.EncryptionProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).EncryptionProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).EncryptionProperty = value; }

        /// <summary>Internal Acessors for IPAddress</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IIPAddress Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesInternal.IPAddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).IPAddress; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).IPAddress = value; }

        /// <summary>Internal Acessors for IPAddressFqdn</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesInternal.IPAddressFqdn { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).IPAddressFqdn; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).IPAddressFqdn = value; }

        /// <summary>Internal Acessors for Identity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupIdentity Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesInternal.Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.ContainerGroupIdentity()); set { {_identity = value;} } }

        /// <summary>Internal Acessors for IdentityPrincipalId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesInternal.IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupIdentityInternal)Identity).PrincipalId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupIdentityInternal)Identity).PrincipalId = value; }

        /// <summary>Internal Acessors for IdentityTenantId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesInternal.IdentityTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupIdentityInternal)Identity).TenantId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupIdentityInternal)Identity).TenantId = value; }

        /// <summary>Internal Acessors for InstanceView</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesInstanceView Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesInternal.InstanceView { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).InstanceView; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).InstanceView = value; }

        /// <summary>Internal Acessors for InstanceViewEvent</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IEvent[] Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesInternal.InstanceViewEvent { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).InstanceViewEvent; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).InstanceViewEvent = value; }

        /// <summary>Internal Acessors for InstanceViewState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesInternal.InstanceViewState { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).InstanceViewState; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).InstanceViewState = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGenerated Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.ContainerGroupPropertiesAutoGenerated()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).ProvisioningState = value; }

        /// <summary>The operating system type required by the containers in the container group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.OperatingSystemTypes OSType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).OSType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).OSType = value ; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGenerated _property;

        /// <summary>The container group properties</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGenerated Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.ContainerGroupPropertiesAutoGenerated()); set => this._property = value; }

        /// <summary>
        /// The provisioning state of the container group. This only appears in the response.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Inlined)]
        public string ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).ProvisioningState; }

        /// <summary>
        /// Restart policy for all containers within the container group.
        /// - `Always` Always restart
        /// - `OnFailure` Restart on failure
        /// - `Never` Never restart
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.ContainerGroupRestartPolicy? RestartPolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).RestartPolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).RestartPolicy = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.ContainerGroupRestartPolicy)""); }

        /// <summary>The SKU for a container group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.ContainerGroupSku? Sku { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).Sku; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).Sku = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.ContainerGroupSku)""); }

        /// <summary>The subnet resource IDs for a container group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupSubnetId[] SubnetId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).SubnetId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).SubnetId = value ?? null /* arrayOf */; }

        /// <summary>The list of volumes that can be mounted by containers in this container group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IVolume[] Volume { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).Volume; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGeneratedInternal)Property).Volume = value ?? null /* arrayOf */; }

        /// <summary>Creates an new <see cref="ContainerGroupProperties" /> instance.</summary>
        public ContainerGroupProperties()
        {

        }
    }
    /// The container group properties
    public partial interface IContainerGroupProperties :
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.IJsonSerializable
    {
        /// <summary>The containers within the container group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The containers within the container group.",
        SerializedName = @"containers",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainer) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainer[] Container { get; set; }
        /// <summary>The DNS servers for the container group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The DNS servers for the container group.",
        SerializedName = @"nameServers",
        PossibleTypes = new [] { typeof(string) })]
        string[] DnsConfigNameServer { get; set; }
        /// <summary>The DNS options for the container group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The DNS options for the container group.",
        SerializedName = @"options",
        PossibleTypes = new [] { typeof(string) })]
        string DnsConfigOption { get; set; }
        /// <summary>The DNS search domains for hostname lookup in the container group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The DNS search domains for hostname lookup in the container group.",
        SerializedName = @"searchDomains",
        PossibleTypes = new [] { typeof(string) })]
        string DnsConfigSearchDomain { get; set; }
        /// <summary>The encryption key name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The encryption key name.",
        SerializedName = @"keyName",
        PossibleTypes = new [] { typeof(string) })]
        string EncryptionPropertyKeyName { get; set; }
        /// <summary>The encryption key version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The encryption key version.",
        SerializedName = @"keyVersion",
        PossibleTypes = new [] { typeof(string) })]
        string EncryptionPropertyKeyVersion { get; set; }
        /// <summary>The keyvault base url.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The keyvault base url.",
        SerializedName = @"vaultBaseUrl",
        PossibleTypes = new [] { typeof(string) })]
        string EncryptionPropertyVaultBaseUrl { get; set; }
        /// <summary>The value representing the security enum.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The value representing the security enum.",
        SerializedName = @"autoGeneratedDomainNameLabelScope",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.DnsNameLabelReusePolicy) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.DnsNameLabelReusePolicy? IPAddressAutoGeneratedDomainNameLabelScope { get; set; }
        /// <summary>The Dns name label for the IP.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Dns name label for the IP.",
        SerializedName = @"dnsNameLabel",
        PossibleTypes = new [] { typeof(string) })]
        string IPAddressDnsNameLabel { get; set; }
        /// <summary>The FQDN for the IP.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The FQDN for the IP.",
        SerializedName = @"fqdn",
        PossibleTypes = new [] { typeof(string) })]
        string IPAddressFqdn { get;  }
        /// <summary>The IP exposed to the public internet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The IP exposed to the public internet.",
        SerializedName = @"ip",
        PossibleTypes = new [] { typeof(string) })]
        string IPAddressIP { get; set; }
        /// <summary>The list of ports exposed on the container group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of ports exposed on the container group.",
        SerializedName = @"ports",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IPort) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IPort[] IPAddressPort { get; set; }
        /// <summary>Specifies if the IP is exposed to the public internet or private VNET.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies if the IP is exposed to the public internet or private VNET.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.ContainerGroupIPAddressType) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.ContainerGroupIPAddressType? IPAddressType { get; set; }
        /// <summary>
        /// The principal id of the container group identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The principal id of the container group identity. This property will only be provided for a system assigned identity.",
        SerializedName = @"principalId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityPrincipalId { get;  }
        /// <summary>
        /// The tenant id associated with the container group. This property will only be provided for a system assigned identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The tenant id associated with the container group. This property will only be provided for a system assigned identity.",
        SerializedName = @"tenantId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityTenantId { get;  }
        /// <summary>
        /// The type of identity used for the container group. The type 'SystemAssigned, UserAssigned' includes both an implicitly
        /// created identity and a set of user assigned identities. The type 'None' will remove any identities from the container
        /// group.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of identity used for the container group. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the container group.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.ResourceIdentityType) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.ResourceIdentityType? IdentityType { get; set; }
        /// <summary>The list of user identities associated with the container group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of user identities associated with the container group.",
        SerializedName = @"userAssignedIdentities",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupIdentityUserAssignedIdentities) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupIdentityUserAssignedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>The image registry credentials by which the container group is created from.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The image registry credentials by which the container group is created from.",
        SerializedName = @"imageRegistryCredentials",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IImageRegistryCredential) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IImageRegistryCredential[] ImageRegistryCredentials { get; set; }
        /// <summary>The init containers for a container group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The init containers for a container group.",
        SerializedName = @"initContainers",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IInitContainerDefinition) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IInitContainerDefinition[] InitContainer { get; set; }
        /// <summary>The events of this container group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The events of this container group.",
        SerializedName = @"events",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IEvent) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IEvent[] InstanceViewEvent { get;  }
        /// <summary>The state of the container group. Only valid in response.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The state of the container group. Only valid in response.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(string) })]
        string InstanceViewState { get;  }
        /// <summary>The log type to be used.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The log type to be used.",
        SerializedName = @"logType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.LogAnalyticsLogType) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.LogAnalyticsLogType? LogAnalyticLogType { get; set; }
        /// <summary>Metadata for log analytics.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Metadata for log analytics.",
        SerializedName = @"metadata",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.ILogAnalyticsMetadata) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.ILogAnalyticsMetadata LogAnalyticMetadata { get; set; }
        /// <summary>The workspace id for log analytics</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The workspace id for log analytics",
        SerializedName = @"workspaceId",
        PossibleTypes = new [] { typeof(string) })]
        string LogAnalyticWorkspaceId { get; set; }
        /// <summary>The workspace key for log analytics</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The workspace key for log analytics",
        SerializedName = @"workspaceKey",
        PossibleTypes = new [] { typeof(string) })]
        string LogAnalyticWorkspaceKey { get; set; }
        /// <summary>The workspace resource id for log analytics</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The workspace resource id for log analytics",
        SerializedName = @"workspaceResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string LogAnalyticWorkspaceResourceId { get; set; }
        /// <summary>The operating system type required by the containers in the container group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The operating system type required by the containers in the container group.",
        SerializedName = @"osType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.OperatingSystemTypes) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.OperatingSystemTypes OSType { get; set; }
        /// <summary>
        /// The provisioning state of the container group. This only appears in the response.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The provisioning state of the container group. This only appears in the response.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        string ProvisioningState { get;  }
        /// <summary>
        /// Restart policy for all containers within the container group.
        /// - `Always` Always restart
        /// - `OnFailure` Restart on failure
        /// - `Never` Never restart
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Restart policy for all containers within the container group.
        - `Always` Always restart
        - `OnFailure` Restart on failure
        - `Never` Never restart
        ",
        SerializedName = @"restartPolicy",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.ContainerGroupRestartPolicy) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.ContainerGroupRestartPolicy? RestartPolicy { get; set; }
        /// <summary>The SKU for a container group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The SKU for a container group.",
        SerializedName = @"sku",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.ContainerGroupSku) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.ContainerGroupSku? Sku { get; set; }
        /// <summary>The subnet resource IDs for a container group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The subnet resource IDs for a container group.",
        SerializedName = @"subnetIds",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupSubnetId) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupSubnetId[] SubnetId { get; set; }
        /// <summary>The list of volumes that can be mounted by containers in this container group.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of volumes that can be mounted by containers in this container group.",
        SerializedName = @"volumes",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IVolume) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IVolume[] Volume { get; set; }

    }
    /// The container group properties
    internal partial interface IContainerGroupPropertiesInternal

    {
        /// <summary>The containers within the container group.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainer[] Container { get; set; }
        /// <summary>The diagnostic information for a container group.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupDiagnostics Diagnostic { get; set; }
        /// <summary>Container group log analytics information.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.ILogAnalytics DiagnosticLogAnalytic { get; set; }
        /// <summary>The DNS config information for a container group.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IDnsConfiguration DnsConfig { get; set; }
        /// <summary>The DNS servers for the container group.</summary>
        string[] DnsConfigNameServer { get; set; }
        /// <summary>The DNS options for the container group.</summary>
        string DnsConfigOption { get; set; }
        /// <summary>The DNS search domains for hostname lookup in the container group.</summary>
        string DnsConfigSearchDomain { get; set; }
        /// <summary>The encryption properties for a container group.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IEncryptionProperties EncryptionProperty { get; set; }
        /// <summary>The encryption key name.</summary>
        string EncryptionPropertyKeyName { get; set; }
        /// <summary>The encryption key version.</summary>
        string EncryptionPropertyKeyVersion { get; set; }
        /// <summary>The keyvault base url.</summary>
        string EncryptionPropertyVaultBaseUrl { get; set; }
        /// <summary>The IP address type of the container group.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IIPAddress IPAddress { get; set; }
        /// <summary>The value representing the security enum.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.DnsNameLabelReusePolicy? IPAddressAutoGeneratedDomainNameLabelScope { get; set; }
        /// <summary>The Dns name label for the IP.</summary>
        string IPAddressDnsNameLabel { get; set; }
        /// <summary>The FQDN for the IP.</summary>
        string IPAddressFqdn { get; set; }
        /// <summary>The IP exposed to the public internet.</summary>
        string IPAddressIP { get; set; }
        /// <summary>The list of ports exposed on the container group.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IPort[] IPAddressPort { get; set; }
        /// <summary>Specifies if the IP is exposed to the public internet or private VNET.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.ContainerGroupIPAddressType? IPAddressType { get; set; }
        /// <summary>The identity of the container group, if configured.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupIdentity Identity { get; set; }
        /// <summary>
        /// The principal id of the container group identity. This property will only be provided for a system assigned identity.
        /// </summary>
        string IdentityPrincipalId { get; set; }
        /// <summary>
        /// The tenant id associated with the container group. This property will only be provided for a system assigned identity.
        /// </summary>
        string IdentityTenantId { get; set; }
        /// <summary>
        /// The type of identity used for the container group. The type 'SystemAssigned, UserAssigned' includes both an implicitly
        /// created identity and a set of user assigned identities. The type 'None' will remove any identities from the container
        /// group.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.ResourceIdentityType? IdentityType { get; set; }
        /// <summary>The list of user identities associated with the container group.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupIdentityUserAssignedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>The image registry credentials by which the container group is created from.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IImageRegistryCredential[] ImageRegistryCredentials { get; set; }
        /// <summary>The init containers for a container group.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IInitContainerDefinition[] InitContainer { get; set; }
        /// <summary>The instance view of the container group. Only valid in response.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesInstanceView InstanceView { get; set; }
        /// <summary>The events of this container group.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IEvent[] InstanceViewEvent { get; set; }
        /// <summary>The state of the container group. Only valid in response.</summary>
        string InstanceViewState { get; set; }
        /// <summary>The log type to be used.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.LogAnalyticsLogType? LogAnalyticLogType { get; set; }
        /// <summary>Metadata for log analytics.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.ILogAnalyticsMetadata LogAnalyticMetadata { get; set; }
        /// <summary>The workspace id for log analytics</summary>
        string LogAnalyticWorkspaceId { get; set; }
        /// <summary>The workspace key for log analytics</summary>
        string LogAnalyticWorkspaceKey { get; set; }
        /// <summary>The workspace resource id for log analytics</summary>
        string LogAnalyticWorkspaceResourceId { get; set; }
        /// <summary>The operating system type required by the containers in the container group.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.OperatingSystemTypes OSType { get; set; }
        /// <summary>The container group properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupPropertiesAutoGenerated Property { get; set; }
        /// <summary>
        /// The provisioning state of the container group. This only appears in the response.
        /// </summary>
        string ProvisioningState { get; set; }
        /// <summary>
        /// Restart policy for all containers within the container group.
        /// - `Always` Always restart
        /// - `OnFailure` Restart on failure
        /// - `Never` Never restart
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.ContainerGroupRestartPolicy? RestartPolicy { get; set; }
        /// <summary>The SKU for a container group.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.ContainerGroupSku? Sku { get; set; }
        /// <summary>The subnet resource IDs for a container group.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IContainerGroupSubnetId[] SubnetId { get; set; }
        /// <summary>The list of volumes that can be mounted by containers in this container group.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Api20211001.IVolume[] Volume { get; set; }

    }
}