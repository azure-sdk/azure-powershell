// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>The configuration for container-enabled pools.</summary>
    public partial class ContainerConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IContainerConfiguration,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IContainerConfigurationInternal
    {

        /// <summary>Backing field for <see cref="ContainerImageName" /> property.</summary>
        private string[] _containerImageName;

        /// <summary>
        /// This is the full image reference, as would be specified to "docker pull". An image will be sourced from the default Docker
        /// registry unless the image is fully qualified with an alternative registry.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string[] ContainerImageName { get => this._containerImageName; set => this._containerImageName = value; }

        /// <summary>Backing field for <see cref="ContainerRegistry" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IContainerRegistry[] _containerRegistry;

        /// <summary>
        /// If any images must be downloaded from a private registry which requires credentials, then those credentials must be provided
        /// here.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IContainerRegistry[] ContainerRegistry { get => this._containerRegistry; set => this._containerRegistry = value; }

        /// <summary>Backing field for <see cref="Type" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ContainerType _type;

        /// <summary>The container technology to be used.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ContainerType Type { get => this._type; set => this._type = value; }

        /// <summary>Creates an new <see cref="ContainerConfiguration" /> instance.</summary>
        public ContainerConfiguration()
        {

        }
    }
    /// The configuration for container-enabled pools.
    public partial interface IContainerConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>
        /// This is the full image reference, as would be specified to "docker pull". An image will be sourced from the default Docker
        /// registry unless the image is fully qualified with an alternative registry.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This is the full image reference, as would be specified to ""docker pull"". An image will be sourced from the default Docker registry unless the image is fully qualified with an alternative registry.",
        SerializedName = @"containerImageNames",
        PossibleTypes = new [] { typeof(string) })]
        string[] ContainerImageName { get; set; }
        /// <summary>
        /// If any images must be downloaded from a private registry which requires credentials, then those credentials must be provided
        /// here.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If any images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.",
        SerializedName = @"containerRegistries",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IContainerRegistry) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IContainerRegistry[] ContainerRegistry { get; set; }
        /// <summary>The container technology to be used.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The container technology to be used.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ContainerType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ContainerType Type { get; set; }

    }
    /// The configuration for container-enabled pools.
    internal partial interface IContainerConfigurationInternal

    {
        /// <summary>
        /// This is the full image reference, as would be specified to "docker pull". An image will be sourced from the default Docker
        /// registry unless the image is fully qualified with an alternative registry.
        /// </summary>
        string[] ContainerImageName { get; set; }
        /// <summary>
        /// If any images must be downloaded from a private registry which requires credentials, then those credentials must be provided
        /// here.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IContainerRegistry[] ContainerRegistry { get; set; }
        /// <summary>The container technology to be used.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ContainerType Type { get; set; }

    }
}