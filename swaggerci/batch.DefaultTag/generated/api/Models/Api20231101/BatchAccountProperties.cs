// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>Account specific properties.</summary>
    public partial class BatchAccountProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountProperties,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal
    {

        /// <summary>
        /// Default action for endpoint access. It is only applicable when publicNetworkAccess is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.EndpointAccessDefaultAction? AccountAccessDefaultAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.INetworkProfileInternal)NetworkProfile).AccountAccessDefaultAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.INetworkProfileInternal)NetworkProfile).AccountAccessDefaultAction = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.EndpointAccessDefaultAction)""); }

        /// <summary>Array of IP ranges to filter client IP address.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IIPRule[] AccountAccessIPRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.INetworkProfileInternal)NetworkProfile).AccountAccessIPRule; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.INetworkProfileInternal)NetworkProfile).AccountAccessIPRule = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="AccountEndpoint" /> property.</summary>
        private string _accountEndpoint;

        /// <summary>The account endpoint used to interact with the Batch service.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string AccountEndpoint { get => this._accountEndpoint; }

        /// <summary>Backing field for <see cref="ActiveJobAndJobScheduleQuota" /> property.</summary>
        private int? _activeJobAndJobScheduleQuota;

        /// <summary>The active job and job schedule quota for the Batch account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int? ActiveJobAndJobScheduleQuota { get => this._activeJobAndJobScheduleQuota; }

        /// <summary>Backing field for <see cref="AllowedAuthenticationMode" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AuthenticationMode[] _allowedAuthenticationMode;

        /// <summary>
        /// List of allowed authentication modes for the Batch account that can be used to authenticate with the data plane. This
        /// does not affect authentication with the control plane.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AuthenticationMode[] AllowedAuthenticationMode { get => this._allowedAuthenticationMode; }

        /// <summary>Backing field for <see cref="AutoStorage" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IAutoStorageProperties _autoStorage;

        /// <summary>
        /// Contains information about the auto-storage account associated with a Batch account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IAutoStorageProperties AutoStorage { get => (this._autoStorage = this._autoStorage ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.AutoStorageProperties()); }

        /// <summary>The resource ID of the storage account to be used for auto-storage account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoStorageAccountId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IAutoStorageBasePropertiesInternal)AutoStorage).StorageAccountId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IAutoStorageBasePropertiesInternal)AutoStorage).StorageAccountId = value ?? null; }

        /// <summary>
        /// The authentication mode which the Batch service will use to manage the auto-storage account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AutoStorageAuthenticationMode? AutoStorageAuthenticationMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IAutoStorageBasePropertiesInternal)AutoStorage).AuthenticationMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IAutoStorageBasePropertiesInternal)AutoStorage).AuthenticationMode = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AutoStorageAuthenticationMode)""); }

        /// <summary>
        /// The UTC time at which storage keys were last synchronized with the Batch account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? AutoStorageLastKeySync { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IAutoStoragePropertiesInternal)AutoStorage).LastKeySync; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IAutoStoragePropertiesInternal)AutoStorage).LastKeySync = value ?? default(global::System.DateTime); }

        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoStorageNodeIdentityReferenceResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IAutoStorageBasePropertiesInternal)AutoStorage).NodeIdentityReferenceResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IAutoStorageBasePropertiesInternal)AutoStorage).NodeIdentityReferenceResourceId = value ?? null; }

        /// <summary>Backing field for <see cref="DedicatedCoreQuota" /> property.</summary>
        private int? _dedicatedCoreQuota;

        /// <summary>
        /// For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not
        /// returned.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int? DedicatedCoreQuota { get => this._dedicatedCoreQuota; }

        /// <summary>Backing field for <see cref="DedicatedCoreQuotaPerVMFamily" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IVirtualMachineFamilyCoreQuota[] _dedicatedCoreQuotaPerVMFamily;

        /// <summary>
        /// A list of the dedicated core quota per Virtual Machine family for the Batch account. For accounts with PoolAllocationMode
        /// set to UserSubscription, quota is managed on the subscription so this value is not returned.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IVirtualMachineFamilyCoreQuota[] DedicatedCoreQuotaPerVMFamily { get => this._dedicatedCoreQuotaPerVMFamily; }

        /// <summary>
        /// Backing field for <see cref="DedicatedCoreQuotaPerVMFamilyEnforced" /> property.
        /// </summary>
        private bool? _dedicatedCoreQuotaPerVMFamilyEnforced;

        /// <summary>
        /// If this flag is true, dedicated core quota is enforced via both the dedicatedCoreQuotaPerVMFamily and dedicatedCoreQuota
        /// properties on the account. If this flag is false, dedicated core quota is enforced only via the dedicatedCoreQuota property
        /// on the account and does not consider Virtual Machine family.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public bool? DedicatedCoreQuotaPerVMFamilyEnforced { get => this._dedicatedCoreQuotaPerVMFamilyEnforced; }

        /// <summary>Backing field for <see cref="Encryption" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IEncryptionProperties _encryption;

        /// <summary>
        /// Configures how customer data is encrypted inside the Batch account. By default, accounts are encrypted using a Microsoft
        /// managed key. For additional control, a customer-managed key can be used instead.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IEncryptionProperties Encryption { get => (this._encryption = this._encryption ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.EncryptionProperties()); }

        /// <summary>Type of the key source.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.KeySource? EncryptionKeySource { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IEncryptionPropertiesInternal)Encryption).KeySource; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IEncryptionPropertiesInternal)Encryption).KeySource = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.KeySource)""); }

        /// <summary>
        /// Full path to the secret with or without version. Example https://mykeyvault.vault.azure.net/keys/testkey/6e34a81fef704045975661e297a4c053.
        /// or https://mykeyvault.vault.azure.net/keys/testkey. To be usable the following prerequisites must be met:
        /// The Batch Account has a System Assigned identity
        /// The account identity has been granted Key/Get, Key/Unwrap and Key/Wrap permissions
        /// The KeyVault has soft-delete and purge protection enabled
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string KeyVaultPropertyKeyIdentifier { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IEncryptionPropertiesInternal)Encryption).KeyVaultPropertyKeyIdentifier; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IEncryptionPropertiesInternal)Encryption).KeyVaultPropertyKeyIdentifier = value ?? null; }

        /// <summary>Backing field for <see cref="KeyVaultReference" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IKeyVaultReference _keyVaultReference;

        /// <summary>Identifies the Azure key vault associated with a Batch account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IKeyVaultReference KeyVaultReference { get => (this._keyVaultReference = this._keyVaultReference ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.KeyVaultReference()); }

        /// <summary>The resource ID of the Azure key vault associated with the Batch account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string KeyVaultReferenceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IKeyVaultReferenceInternal)KeyVaultReference).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IKeyVaultReferenceInternal)KeyVaultReference).Id = value ?? null; }

        /// <summary>The URL of the Azure key vault associated with the Batch account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string KeyVaultReferenceUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IKeyVaultReferenceInternal)KeyVaultReference).Url; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IKeyVaultReferenceInternal)KeyVaultReference).Url = value ?? null; }

        /// <summary>Backing field for <see cref="LowPriorityCoreQuota" /> property.</summary>
        private int? _lowPriorityCoreQuota;

        /// <summary>
        /// For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not
        /// returned.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int? LowPriorityCoreQuota { get => this._lowPriorityCoreQuota; }

        /// <summary>Internal Acessors for AccountEndpoint</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal.AccountEndpoint { get => this._accountEndpoint; set { {_accountEndpoint = value;} } }

        /// <summary>Internal Acessors for ActiveJobAndJobScheduleQuota</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal.ActiveJobAndJobScheduleQuota { get => this._activeJobAndJobScheduleQuota; set { {_activeJobAndJobScheduleQuota = value;} } }

        /// <summary>Internal Acessors for AllowedAuthenticationMode</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AuthenticationMode[] Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal.AllowedAuthenticationMode { get => this._allowedAuthenticationMode; set { {_allowedAuthenticationMode = value;} } }

        /// <summary>Internal Acessors for AutoStorage</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IAutoStorageProperties Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal.AutoStorage { get => (this._autoStorage = this._autoStorage ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.AutoStorageProperties()); set { {_autoStorage = value;} } }

        /// <summary>Internal Acessors for AutoStorageNodeIdentityReference</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IComputeNodeIdentityReference Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal.AutoStorageNodeIdentityReference { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IAutoStorageBasePropertiesInternal)AutoStorage).NodeIdentityReference; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IAutoStorageBasePropertiesInternal)AutoStorage).NodeIdentityReference = value; }

        /// <summary>Internal Acessors for DedicatedCoreQuota</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal.DedicatedCoreQuota { get => this._dedicatedCoreQuota; set { {_dedicatedCoreQuota = value;} } }

        /// <summary>Internal Acessors for DedicatedCoreQuotaPerVMFamily</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IVirtualMachineFamilyCoreQuota[] Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal.DedicatedCoreQuotaPerVMFamily { get => this._dedicatedCoreQuotaPerVMFamily; set { {_dedicatedCoreQuotaPerVMFamily = value;} } }

        /// <summary>Internal Acessors for DedicatedCoreQuotaPerVMFamilyEnforced</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal.DedicatedCoreQuotaPerVMFamilyEnforced { get => this._dedicatedCoreQuotaPerVMFamilyEnforced; set { {_dedicatedCoreQuotaPerVMFamilyEnforced = value;} } }

        /// <summary>Internal Acessors for Encryption</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IEncryptionProperties Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal.Encryption { get => (this._encryption = this._encryption ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.EncryptionProperties()); set { {_encryption = value;} } }

        /// <summary>Internal Acessors for EncryptionKeyVaultProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IKeyVaultProperties Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal.EncryptionKeyVaultProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IEncryptionPropertiesInternal)Encryption).KeyVaultProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IEncryptionPropertiesInternal)Encryption).KeyVaultProperty = value; }

        /// <summary>Internal Acessors for KeyVaultReference</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IKeyVaultReference Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal.KeyVaultReference { get => (this._keyVaultReference = this._keyVaultReference ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.KeyVaultReference()); set { {_keyVaultReference = value;} } }

        /// <summary>Internal Acessors for LowPriorityCoreQuota</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal.LowPriorityCoreQuota { get => this._lowPriorityCoreQuota; set { {_lowPriorityCoreQuota = value;} } }

        /// <summary>Internal Acessors for NetworkProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.INetworkProfile Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal.NetworkProfile { get => (this._networkProfile = this._networkProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.NetworkProfile()); set { {_networkProfile = value;} } }

        /// <summary>Internal Acessors for NetworkProfileAccountAccess</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IEndpointAccessProfile Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal.NetworkProfileAccountAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.INetworkProfileInternal)NetworkProfile).AccountAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.INetworkProfileInternal)NetworkProfile).AccountAccess = value; }

        /// <summary>Internal Acessors for NetworkProfileNodeManagementAccess</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IEndpointAccessProfile Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal.NetworkProfileNodeManagementAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.INetworkProfileInternal)NetworkProfile).NodeManagementAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.INetworkProfileInternal)NetworkProfile).NodeManagementAccess = value; }

        /// <summary>Internal Acessors for NodeManagementEndpoint</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal.NodeManagementEndpoint { get => this._nodeManagementEndpoint; set { {_nodeManagementEndpoint = value;} } }

        /// <summary>Internal Acessors for PoolAllocationMode</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PoolAllocationMode? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal.PoolAllocationMode { get => this._poolAllocationMode; set { {_poolAllocationMode = value;} } }

        /// <summary>Internal Acessors for PoolQuota</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal.PoolQuota { get => this._poolQuota; set { {_poolQuota = value;} } }

        /// <summary>Internal Acessors for PrivateEndpointConnection</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IPrivateEndpointConnection[] Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal.PrivateEndpointConnection { get => this._privateEndpointConnection; set { {_privateEndpointConnection = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Backing field for <see cref="NetworkProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.INetworkProfile _networkProfile;

        /// <summary>The network profile only takes effect when publicNetworkAccess is enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.INetworkProfile NetworkProfile { get => (this._networkProfile = this._networkProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.NetworkProfile()); set => this._networkProfile = value; }

        /// <summary>
        /// Default action for endpoint access. It is only applicable when publicNetworkAccess is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.EndpointAccessDefaultAction? NodeManagementAccessDefaultAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.INetworkProfileInternal)NetworkProfile).NodeManagementAccessDefaultAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.INetworkProfileInternal)NetworkProfile).NodeManagementAccessDefaultAction = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.EndpointAccessDefaultAction)""); }

        /// <summary>Array of IP ranges to filter client IP address.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IIPRule[] NodeManagementAccessIPRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.INetworkProfileInternal)NetworkProfile).NodeManagementAccessIPRule; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.INetworkProfileInternal)NetworkProfile).NodeManagementAccessIPRule = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="NodeManagementEndpoint" /> property.</summary>
        private string _nodeManagementEndpoint;

        /// <summary>
        /// The endpoint used by compute node to connect to the Batch node management service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public string NodeManagementEndpoint { get => this._nodeManagementEndpoint; }

        /// <summary>Backing field for <see cref="PoolAllocationMode" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PoolAllocationMode? _poolAllocationMode;

        /// <summary>The allocation mode for creating pools in the Batch account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PoolAllocationMode? PoolAllocationMode { get => this._poolAllocationMode; }

        /// <summary>Backing field for <see cref="PoolQuota" /> property.</summary>
        private int? _poolQuota;

        /// <summary>The pool quota for the Batch account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public int? PoolQuota { get => this._poolQuota; }

        /// <summary>Backing field for <see cref="PrivateEndpointConnection" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IPrivateEndpointConnection[] _privateEndpointConnection;

        /// <summary>List of private endpoint connections associated with the Batch account</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IPrivateEndpointConnection[] PrivateEndpointConnection { get => this._privateEndpointConnection; }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ProvisioningState? _provisioningState;

        /// <summary>The provisioned state of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ProvisioningState? ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="PublicNetworkAccess" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PublicNetworkAccessType? _publicNetworkAccess;

        /// <summary>If not specified, the default value is 'enabled'.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PublicNetworkAccessType? PublicNetworkAccess { get => this._publicNetworkAccess; set => this._publicNetworkAccess = value; }

        /// <summary>Creates an new <see cref="BatchAccountProperties" /> instance.</summary>
        public BatchAccountProperties()
        {

        }
    }
    /// Account specific properties.
    public partial interface IBatchAccountProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Default action for endpoint access. It is only applicable when publicNetworkAccess is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Default action for endpoint access. It is only applicable when publicNetworkAccess is enabled.",
        SerializedName = @"defaultAction",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.EndpointAccessDefaultAction) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.EndpointAccessDefaultAction? AccountAccessDefaultAction { get; set; }
        /// <summary>Array of IP ranges to filter client IP address.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Array of IP ranges to filter client IP address.",
        SerializedName = @"ipRules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IIPRule) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IIPRule[] AccountAccessIPRule { get; set; }
        /// <summary>The account endpoint used to interact with the Batch service.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The account endpoint used to interact with the Batch service.",
        SerializedName = @"accountEndpoint",
        PossibleTypes = new [] { typeof(string) })]
        string AccountEndpoint { get;  }
        /// <summary>The active job and job schedule quota for the Batch account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The active job and job schedule quota for the Batch account.",
        SerializedName = @"activeJobAndJobScheduleQuota",
        PossibleTypes = new [] { typeof(int) })]
        int? ActiveJobAndJobScheduleQuota { get;  }
        /// <summary>
        /// List of allowed authentication modes for the Batch account that can be used to authenticate with the data plane. This
        /// does not affect authentication with the control plane.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"List of allowed authentication modes for the Batch account that can be used to authenticate with the data plane. This does not affect authentication with the control plane.",
        SerializedName = @"allowedAuthenticationModes",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AuthenticationMode) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AuthenticationMode[] AllowedAuthenticationMode { get;  }
        /// <summary>The resource ID of the storage account to be used for auto-storage account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource ID of the storage account to be used for auto-storage account.",
        SerializedName = @"storageAccountId",
        PossibleTypes = new [] { typeof(string) })]
        string AutoStorageAccountId { get; set; }
        /// <summary>
        /// The authentication mode which the Batch service will use to manage the auto-storage account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The authentication mode which the Batch service will use to manage the auto-storage account.",
        SerializedName = @"authenticationMode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AutoStorageAuthenticationMode) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AutoStorageAuthenticationMode? AutoStorageAuthenticationMode { get; set; }
        /// <summary>
        /// The UTC time at which storage keys were last synchronized with the Batch account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The UTC time at which storage keys were last synchronized with the Batch account.",
        SerializedName = @"lastKeySync",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? AutoStorageLastKeySync { get; set; }
        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ARM resource id of the user assigned identity.",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        string AutoStorageNodeIdentityReferenceResourceId { get; set; }
        /// <summary>
        /// For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not
        /// returned.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.",
        SerializedName = @"dedicatedCoreQuota",
        PossibleTypes = new [] { typeof(int) })]
        int? DedicatedCoreQuota { get;  }
        /// <summary>
        /// A list of the dedicated core quota per Virtual Machine family for the Batch account. For accounts with PoolAllocationMode
        /// set to UserSubscription, quota is managed on the subscription so this value is not returned.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"A list of the dedicated core quota per Virtual Machine family for the Batch account. For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.",
        SerializedName = @"dedicatedCoreQuotaPerVMFamily",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IVirtualMachineFamilyCoreQuota) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IVirtualMachineFamilyCoreQuota[] DedicatedCoreQuotaPerVMFamily { get;  }
        /// <summary>
        /// If this flag is true, dedicated core quota is enforced via both the dedicatedCoreQuotaPerVMFamily and dedicatedCoreQuota
        /// properties on the account. If this flag is false, dedicated core quota is enforced only via the dedicatedCoreQuota property
        /// on the account and does not consider Virtual Machine family.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"If this flag is true, dedicated core quota is enforced via both the dedicatedCoreQuotaPerVMFamily and dedicatedCoreQuota properties on the account. If this flag is false, dedicated core quota is enforced only via the dedicatedCoreQuota property on the account and does not consider Virtual Machine family.",
        SerializedName = @"dedicatedCoreQuotaPerVMFamilyEnforced",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DedicatedCoreQuotaPerVMFamilyEnforced { get;  }
        /// <summary>Type of the key source.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Type of the key source.",
        SerializedName = @"keySource",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.KeySource) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.KeySource? EncryptionKeySource { get; set; }
        /// <summary>
        /// Full path to the secret with or without version. Example https://mykeyvault.vault.azure.net/keys/testkey/6e34a81fef704045975661e297a4c053.
        /// or https://mykeyvault.vault.azure.net/keys/testkey. To be usable the following prerequisites must be met:
        /// The Batch Account has a System Assigned identity
        /// The account identity has been granted Key/Get, Key/Unwrap and Key/Wrap permissions
        /// The KeyVault has soft-delete and purge protection enabled
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Full path to the secret with or without version. Example https://mykeyvault.vault.azure.net/keys/testkey/6e34a81fef704045975661e297a4c053. or https://mykeyvault.vault.azure.net/keys/testkey. To be usable the following prerequisites must be met:

         The Batch Account has a System Assigned identity
         The account identity has been granted Key/Get, Key/Unwrap and Key/Wrap permissions
         The KeyVault has soft-delete and purge protection enabled",
        SerializedName = @"keyIdentifier",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultPropertyKeyIdentifier { get; set; }
        /// <summary>The resource ID of the Azure key vault associated with the Batch account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource ID of the Azure key vault associated with the Batch account.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultReferenceId { get; set; }
        /// <summary>The URL of the Azure key vault associated with the Batch account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The URL of the Azure key vault associated with the Batch account.",
        SerializedName = @"url",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultReferenceUrl { get; set; }
        /// <summary>
        /// For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not
        /// returned.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.",
        SerializedName = @"lowPriorityCoreQuota",
        PossibleTypes = new [] { typeof(int) })]
        int? LowPriorityCoreQuota { get;  }
        /// <summary>
        /// Default action for endpoint access. It is only applicable when publicNetworkAccess is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Default action for endpoint access. It is only applicable when publicNetworkAccess is enabled.",
        SerializedName = @"defaultAction",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.EndpointAccessDefaultAction) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.EndpointAccessDefaultAction? NodeManagementAccessDefaultAction { get; set; }
        /// <summary>Array of IP ranges to filter client IP address.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Array of IP ranges to filter client IP address.",
        SerializedName = @"ipRules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IIPRule) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IIPRule[] NodeManagementAccessIPRule { get; set; }
        /// <summary>
        /// The endpoint used by compute node to connect to the Batch node management service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The endpoint used by compute node to connect to the Batch node management service.",
        SerializedName = @"nodeManagementEndpoint",
        PossibleTypes = new [] { typeof(string) })]
        string NodeManagementEndpoint { get;  }
        /// <summary>The allocation mode for creating pools in the Batch account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The allocation mode for creating pools in the Batch account.",
        SerializedName = @"poolAllocationMode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PoolAllocationMode) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PoolAllocationMode? PoolAllocationMode { get;  }
        /// <summary>The pool quota for the Batch account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The pool quota for the Batch account.",
        SerializedName = @"poolQuota",
        PossibleTypes = new [] { typeof(int) })]
        int? PoolQuota { get;  }
        /// <summary>List of private endpoint connections associated with the Batch account</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"List of private endpoint connections associated with the Batch account",
        SerializedName = @"privateEndpointConnections",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IPrivateEndpointConnection) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IPrivateEndpointConnection[] PrivateEndpointConnection { get;  }
        /// <summary>The provisioned state of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The provisioned state of the resource",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ProvisioningState? ProvisioningState { get;  }
        /// <summary>If not specified, the default value is 'enabled'.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If not specified, the default value is 'enabled'.",
        SerializedName = @"publicNetworkAccess",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PublicNetworkAccessType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PublicNetworkAccessType? PublicNetworkAccess { get; set; }

    }
    /// Account specific properties.
    internal partial interface IBatchAccountPropertiesInternal

    {
        /// <summary>
        /// Default action for endpoint access. It is only applicable when publicNetworkAccess is enabled.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.EndpointAccessDefaultAction? AccountAccessDefaultAction { get; set; }
        /// <summary>Array of IP ranges to filter client IP address.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IIPRule[] AccountAccessIPRule { get; set; }
        /// <summary>The account endpoint used to interact with the Batch service.</summary>
        string AccountEndpoint { get; set; }
        /// <summary>The active job and job schedule quota for the Batch account.</summary>
        int? ActiveJobAndJobScheduleQuota { get; set; }
        /// <summary>
        /// List of allowed authentication modes for the Batch account that can be used to authenticate with the data plane. This
        /// does not affect authentication with the control plane.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AuthenticationMode[] AllowedAuthenticationMode { get; set; }
        /// <summary>
        /// Contains information about the auto-storage account associated with a Batch account.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IAutoStorageProperties AutoStorage { get; set; }
        /// <summary>The resource ID of the storage account to be used for auto-storage account.</summary>
        string AutoStorageAccountId { get; set; }
        /// <summary>
        /// The authentication mode which the Batch service will use to manage the auto-storage account.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AutoStorageAuthenticationMode? AutoStorageAuthenticationMode { get; set; }
        /// <summary>
        /// The UTC time at which storage keys were last synchronized with the Batch account.
        /// </summary>
        global::System.DateTime? AutoStorageLastKeySync { get; set; }
        /// <summary>
        /// The identity referenced here must be assigned to pools which have compute nodes that need access to auto-storage.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IComputeNodeIdentityReference AutoStorageNodeIdentityReference { get; set; }
        /// <summary>The ARM resource id of the user assigned identity.</summary>
        string AutoStorageNodeIdentityReferenceResourceId { get; set; }
        /// <summary>
        /// For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not
        /// returned.
        /// </summary>
        int? DedicatedCoreQuota { get; set; }
        /// <summary>
        /// A list of the dedicated core quota per Virtual Machine family for the Batch account. For accounts with PoolAllocationMode
        /// set to UserSubscription, quota is managed on the subscription so this value is not returned.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IVirtualMachineFamilyCoreQuota[] DedicatedCoreQuotaPerVMFamily { get; set; }
        /// <summary>
        /// If this flag is true, dedicated core quota is enforced via both the dedicatedCoreQuotaPerVMFamily and dedicatedCoreQuota
        /// properties on the account. If this flag is false, dedicated core quota is enforced only via the dedicatedCoreQuota property
        /// on the account and does not consider Virtual Machine family.
        /// </summary>
        bool? DedicatedCoreQuotaPerVMFamilyEnforced { get; set; }
        /// <summary>
        /// Configures how customer data is encrypted inside the Batch account. By default, accounts are encrypted using a Microsoft
        /// managed key. For additional control, a customer-managed key can be used instead.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IEncryptionProperties Encryption { get; set; }
        /// <summary>Type of the key source.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.KeySource? EncryptionKeySource { get; set; }
        /// <summary>Additional details when using Microsoft.KeyVault</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IKeyVaultProperties EncryptionKeyVaultProperty { get; set; }
        /// <summary>
        /// Full path to the secret with or without version. Example https://mykeyvault.vault.azure.net/keys/testkey/6e34a81fef704045975661e297a4c053.
        /// or https://mykeyvault.vault.azure.net/keys/testkey. To be usable the following prerequisites must be met:
        /// The Batch Account has a System Assigned identity
        /// The account identity has been granted Key/Get, Key/Unwrap and Key/Wrap permissions
        /// The KeyVault has soft-delete and purge protection enabled
        /// </summary>
        string KeyVaultPropertyKeyIdentifier { get; set; }
        /// <summary>Identifies the Azure key vault associated with a Batch account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IKeyVaultReference KeyVaultReference { get; set; }
        /// <summary>The resource ID of the Azure key vault associated with the Batch account.</summary>
        string KeyVaultReferenceId { get; set; }
        /// <summary>The URL of the Azure key vault associated with the Batch account.</summary>
        string KeyVaultReferenceUrl { get; set; }
        /// <summary>
        /// For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not
        /// returned.
        /// </summary>
        int? LowPriorityCoreQuota { get; set; }
        /// <summary>The network profile only takes effect when publicNetworkAccess is enabled.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.INetworkProfile NetworkProfile { get; set; }
        /// <summary>
        /// Network access profile for batchAccount endpoint (Batch account data plane API).
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IEndpointAccessProfile NetworkProfileAccountAccess { get; set; }
        /// <summary>
        /// Network access profile for nodeManagement endpoint (Batch service managing compute nodes for Batch pools).
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IEndpointAccessProfile NetworkProfileNodeManagementAccess { get; set; }
        /// <summary>
        /// Default action for endpoint access. It is only applicable when publicNetworkAccess is enabled.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.EndpointAccessDefaultAction? NodeManagementAccessDefaultAction { get; set; }
        /// <summary>Array of IP ranges to filter client IP address.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IIPRule[] NodeManagementAccessIPRule { get; set; }
        /// <summary>
        /// The endpoint used by compute node to connect to the Batch node management service.
        /// </summary>
        string NodeManagementEndpoint { get; set; }
        /// <summary>The allocation mode for creating pools in the Batch account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PoolAllocationMode? PoolAllocationMode { get; set; }
        /// <summary>The pool quota for the Batch account.</summary>
        int? PoolQuota { get; set; }
        /// <summary>List of private endpoint connections associated with the Batch account</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IPrivateEndpointConnection[] PrivateEndpointConnection { get; set; }
        /// <summary>The provisioned state of the resource</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ProvisioningState? ProvisioningState { get; set; }
        /// <summary>If not specified, the default value is 'enabled'.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PublicNetworkAccessType? PublicNetworkAccess { get; set; }

    }
}