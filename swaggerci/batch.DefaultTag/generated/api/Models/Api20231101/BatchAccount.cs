// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>Contains information about an Azure Batch account.</summary>
    public partial class BatchAccount :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccount,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IResource" />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IResource __resource = new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.Resource();

        /// <summary>
        /// Default action for endpoint access. It is only applicable when publicNetworkAccess is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.EndpointAccessDefaultAction? AccountAccessDefaultAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).AccountAccessDefaultAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).AccountAccessDefaultAction = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.EndpointAccessDefaultAction)""); }

        /// <summary>Array of IP ranges to filter client IP address.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IIPRule[] AccountAccessIPRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).AccountAccessIPRule; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).AccountAccessIPRule = value ?? null /* arrayOf */; }

        /// <summary>The account endpoint used to interact with the Batch service.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AccountEndpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).AccountEndpoint; }

        /// <summary>The active job and job schedule quota for the Batch account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? ActiveJobAndJobScheduleQuota { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).ActiveJobAndJobScheduleQuota; }

        /// <summary>
        /// List of allowed authentication modes for the Batch account that can be used to authenticate with the data plane. This
        /// does not affect authentication with the control plane.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AuthenticationMode[] AllowedAuthenticationMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).AllowedAuthenticationMode; }

        /// <summary>The resource ID of the storage account to be used for auto-storage account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoStorageAccountId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).AutoStorageAccountId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).AutoStorageAccountId = value ?? null; }

        /// <summary>
        /// The authentication mode which the Batch service will use to manage the auto-storage account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AutoStorageAuthenticationMode? AutoStorageAuthenticationMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).AutoStorageAuthenticationMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).AutoStorageAuthenticationMode = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AutoStorageAuthenticationMode)""); }

        /// <summary>
        /// The UTC time at which storage keys were last synchronized with the Batch account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public global::System.DateTime? AutoStorageLastKeySync { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).AutoStorageLastKeySync; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).AutoStorageLastKeySync = value ?? default(global::System.DateTime); }

        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string AutoStorageNodeIdentityReferenceResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).AutoStorageNodeIdentityReferenceResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).AutoStorageNodeIdentityReferenceResourceId = value ?? null; }

        /// <summary>
        /// For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not
        /// returned.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? DedicatedCoreQuota { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).DedicatedCoreQuota; }

        /// <summary>
        /// A list of the dedicated core quota per Virtual Machine family for the Batch account. For accounts with PoolAllocationMode
        /// set to UserSubscription, quota is managed on the subscription so this value is not returned.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IVirtualMachineFamilyCoreQuota[] DedicatedCoreQuotaPerVMFamily { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).DedicatedCoreQuotaPerVMFamily; }

        /// <summary>
        /// If this flag is true, dedicated core quota is enforced via both the dedicatedCoreQuotaPerVMFamily and dedicatedCoreQuota
        /// properties on the account. If this flag is false, dedicated core quota is enforced only via the dedicatedCoreQuota property
        /// on the account and does not consider Virtual Machine family.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? DedicatedCoreQuotaPerVMFamilyEnforced { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).DedicatedCoreQuotaPerVMFamilyEnforced; }

        /// <summary>Type of the key source.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.KeySource? EncryptionKeySource { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).EncryptionKeySource; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).EncryptionKeySource = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.KeySource)""); }

        /// <summary>The ID of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IResourceInternal)__resource).Id; }

        /// <summary>Backing field for <see cref="Identity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountIdentity _identity;

        /// <summary>The identity of the Batch account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountIdentity Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.BatchAccountIdentity()); set => this._identity = value; }

        /// <summary>
        /// The principal id of the Batch account. This property will only be provided for a system assigned identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountIdentityInternal)Identity).PrincipalId; }

        /// <summary>
        /// The tenant id associated with the Batch account. This property will only be provided for a system assigned identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string IdentityTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountIdentityInternal)Identity).TenantId; }

        /// <summary>The type of identity used for the Batch account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ResourceIdentityType? IdentityType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountIdentityInternal)Identity).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountIdentityInternal)Identity).Type = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ResourceIdentityType)""); }

        /// <summary>The list of user identities associated with the Batch account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountIdentityUserAssignedIdentities IdentityUserAssignedIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountIdentityInternal)Identity).UserAssignedIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountIdentityInternal)Identity).UserAssignedIdentity = value ?? null /* model class */; }

        /// <summary>
        /// Full path to the secret with or without version. Example https://mykeyvault.vault.azure.net/keys/testkey/6e34a81fef704045975661e297a4c053.
        /// or https://mykeyvault.vault.azure.net/keys/testkey. To be usable the following prerequisites must be met:
        /// The Batch Account has a System Assigned identity
        /// The account identity has been granted Key/Get, Key/Unwrap and Key/Wrap permissions
        /// The KeyVault has soft-delete and purge protection enabled
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string KeyVaultPropertyKeyIdentifier { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).KeyVaultPropertyKeyIdentifier; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).KeyVaultPropertyKeyIdentifier = value ?? null; }

        /// <summary>The resource ID of the Azure key vault associated with the Batch account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string KeyVaultReferenceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).KeyVaultReferenceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).KeyVaultReferenceId = value ?? null; }

        /// <summary>The URL of the Azure key vault associated with the Batch account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string KeyVaultReferenceUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).KeyVaultReferenceUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).KeyVaultReferenceUrl = value ?? null; }

        /// <summary>The location of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inherited)]
        public string Location { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IResourceInternal)__resource).Location; }

        /// <summary>
        /// For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not
        /// returned.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? LowPriorityCoreQuota { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).LowPriorityCoreQuota; }

        /// <summary>Internal Acessors for AccountEndpoint</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountInternal.AccountEndpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).AccountEndpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).AccountEndpoint = value; }

        /// <summary>Internal Acessors for ActiveJobAndJobScheduleQuota</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountInternal.ActiveJobAndJobScheduleQuota { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).ActiveJobAndJobScheduleQuota; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).ActiveJobAndJobScheduleQuota = value; }

        /// <summary>Internal Acessors for AllowedAuthenticationMode</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AuthenticationMode[] Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountInternal.AllowedAuthenticationMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).AllowedAuthenticationMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).AllowedAuthenticationMode = value; }

        /// <summary>Internal Acessors for AutoStorage</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IAutoStorageProperties Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountInternal.AutoStorage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).AutoStorage; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).AutoStorage = value; }

        /// <summary>Internal Acessors for AutoStorageNodeIdentityReference</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IComputeNodeIdentityReference Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountInternal.AutoStorageNodeIdentityReference { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).AutoStorageNodeIdentityReference; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).AutoStorageNodeIdentityReference = value; }

        /// <summary>Internal Acessors for DedicatedCoreQuota</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountInternal.DedicatedCoreQuota { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).DedicatedCoreQuota; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).DedicatedCoreQuota = value; }

        /// <summary>Internal Acessors for DedicatedCoreQuotaPerVMFamily</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IVirtualMachineFamilyCoreQuota[] Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountInternal.DedicatedCoreQuotaPerVMFamily { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).DedicatedCoreQuotaPerVMFamily; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).DedicatedCoreQuotaPerVMFamily = value; }

        /// <summary>Internal Acessors for DedicatedCoreQuotaPerVMFamilyEnforced</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountInternal.DedicatedCoreQuotaPerVMFamilyEnforced { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).DedicatedCoreQuotaPerVMFamilyEnforced; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).DedicatedCoreQuotaPerVMFamilyEnforced = value; }

        /// <summary>Internal Acessors for Encryption</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IEncryptionProperties Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountInternal.Encryption { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).Encryption; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).Encryption = value; }

        /// <summary>Internal Acessors for EncryptionKeyVaultProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IKeyVaultProperties Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountInternal.EncryptionKeyVaultProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).EncryptionKeyVaultProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).EncryptionKeyVaultProperty = value; }

        /// <summary>Internal Acessors for Identity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountIdentity Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountInternal.Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.BatchAccountIdentity()); set { {_identity = value;} } }

        /// <summary>Internal Acessors for IdentityPrincipalId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountInternal.IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountIdentityInternal)Identity).PrincipalId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountIdentityInternal)Identity).PrincipalId = value; }

        /// <summary>Internal Acessors for IdentityTenantId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountInternal.IdentityTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountIdentityInternal)Identity).TenantId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountIdentityInternal)Identity).TenantId = value; }

        /// <summary>Internal Acessors for KeyVaultReference</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IKeyVaultReference Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountInternal.KeyVaultReference { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).KeyVaultReference; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).KeyVaultReference = value; }

        /// <summary>Internal Acessors for LowPriorityCoreQuota</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountInternal.LowPriorityCoreQuota { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).LowPriorityCoreQuota; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).LowPriorityCoreQuota = value; }

        /// <summary>Internal Acessors for NetworkProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.INetworkProfile Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountInternal.NetworkProfile { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).NetworkProfile; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).NetworkProfile = value; }

        /// <summary>Internal Acessors for NetworkProfileAccountAccess</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IEndpointAccessProfile Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountInternal.NetworkProfileAccountAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).NetworkProfileAccountAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).NetworkProfileAccountAccess = value; }

        /// <summary>Internal Acessors for NetworkProfileNodeManagementAccess</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IEndpointAccessProfile Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountInternal.NetworkProfileNodeManagementAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).NetworkProfileNodeManagementAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).NetworkProfileNodeManagementAccess = value; }

        /// <summary>Internal Acessors for NodeManagementEndpoint</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountInternal.NodeManagementEndpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).NodeManagementEndpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).NodeManagementEndpoint = value; }

        /// <summary>Internal Acessors for PoolAllocationMode</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PoolAllocationMode? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountInternal.PoolAllocationMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).PoolAllocationMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).PoolAllocationMode = value; }

        /// <summary>Internal Acessors for PoolQuota</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountInternal.PoolQuota { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).PoolQuota; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).PoolQuota = value; }

        /// <summary>Internal Acessors for PrivateEndpointConnection</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IPrivateEndpointConnection[] Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountInternal.PrivateEndpointConnection { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).PrivateEndpointConnection; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).PrivateEndpointConnection = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountProperties Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.BatchAccountProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).ProvisioningState = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IResourceInternal)__resource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IResourceInternal)__resource).Id = value; }

        /// <summary>Internal Acessors for Location</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IResourceInternal.Location { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IResourceInternal)__resource).Location; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IResourceInternal)__resource).Location = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IResourceInternal)__resource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IResourceInternal)__resource).Name = value; }

        /// <summary>Internal Acessors for Tag</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IResourceTags Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IResourceInternal.Tag { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IResourceInternal)__resource).Tag; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IResourceInternal)__resource).Tag = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IResourceInternal)__resource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IResourceInternal)__resource).Type = value; }

        /// <summary>The name of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IResourceInternal)__resource).Name; }

        /// <summary>
        /// Default action for endpoint access. It is only applicable when publicNetworkAccess is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.EndpointAccessDefaultAction? NodeManagementAccessDefaultAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).NodeManagementAccessDefaultAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).NodeManagementAccessDefaultAction = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.EndpointAccessDefaultAction)""); }

        /// <summary>Array of IP ranges to filter client IP address.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IIPRule[] NodeManagementAccessIPRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).NodeManagementAccessIPRule; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).NodeManagementAccessIPRule = value ?? null /* arrayOf */; }

        /// <summary>
        /// The endpoint used by compute node to connect to the Batch node management service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string NodeManagementEndpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).NodeManagementEndpoint; }

        /// <summary>The allocation mode for creating pools in the Batch account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PoolAllocationMode? PoolAllocationMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).PoolAllocationMode; }

        /// <summary>The pool quota for the Batch account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? PoolQuota { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).PoolQuota; }

        /// <summary>List of private endpoint connections associated with the Batch account</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IPrivateEndpointConnection[] PrivateEndpointConnection { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).PrivateEndpointConnection; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountProperties _property;

        /// <summary>The properties associated with the account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.BatchAccountProperties()); set => this._property = value; }

        /// <summary>The provisioned state of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ProvisioningState? ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).ProvisioningState; }

        /// <summary>If not specified, the default value is 'enabled'.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PublicNetworkAccessType? PublicNetworkAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).PublicNetworkAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountPropertiesInternal)Property).PublicNetworkAccess = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PublicNetworkAccessType)""); }

        /// <summary>The tags of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IResourceTags Tag { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IResourceInternal)__resource).Tag; }

        /// <summary>The type of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IResourceInternal)__resource).Type; }

        /// <summary>Creates an new <see cref="BatchAccount" /> instance.</summary>
        public BatchAccount()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__resource), __resource);
            await eventListener.AssertObjectIsValid(nameof(__resource), __resource);
        }
    }
    /// Contains information about an Azure Batch account.
    public partial interface IBatchAccount :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IResource
    {
        /// <summary>
        /// Default action for endpoint access. It is only applicable when publicNetworkAccess is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Default action for endpoint access. It is only applicable when publicNetworkAccess is enabled.",
        SerializedName = @"defaultAction",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.EndpointAccessDefaultAction) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.EndpointAccessDefaultAction? AccountAccessDefaultAction { get; set; }
        /// <summary>Array of IP ranges to filter client IP address.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Array of IP ranges to filter client IP address.",
        SerializedName = @"ipRules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IIPRule) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IIPRule[] AccountAccessIPRule { get; set; }
        /// <summary>The account endpoint used to interact with the Batch service.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The account endpoint used to interact with the Batch service.",
        SerializedName = @"accountEndpoint",
        PossibleTypes = new [] { typeof(string) })]
        string AccountEndpoint { get;  }
        /// <summary>The active job and job schedule quota for the Batch account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The active job and job schedule quota for the Batch account.",
        SerializedName = @"activeJobAndJobScheduleQuota",
        PossibleTypes = new [] { typeof(int) })]
        int? ActiveJobAndJobScheduleQuota { get;  }
        /// <summary>
        /// List of allowed authentication modes for the Batch account that can be used to authenticate with the data plane. This
        /// does not affect authentication with the control plane.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"List of allowed authentication modes for the Batch account that can be used to authenticate with the data plane. This does not affect authentication with the control plane.",
        SerializedName = @"allowedAuthenticationModes",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AuthenticationMode) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AuthenticationMode[] AllowedAuthenticationMode { get;  }
        /// <summary>The resource ID of the storage account to be used for auto-storage account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource ID of the storage account to be used for auto-storage account.",
        SerializedName = @"storageAccountId",
        PossibleTypes = new [] { typeof(string) })]
        string AutoStorageAccountId { get; set; }
        /// <summary>
        /// The authentication mode which the Batch service will use to manage the auto-storage account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The authentication mode which the Batch service will use to manage the auto-storage account.",
        SerializedName = @"authenticationMode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AutoStorageAuthenticationMode) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AutoStorageAuthenticationMode? AutoStorageAuthenticationMode { get; set; }
        /// <summary>
        /// The UTC time at which storage keys were last synchronized with the Batch account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The UTC time at which storage keys were last synchronized with the Batch account.",
        SerializedName = @"lastKeySync",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? AutoStorageLastKeySync { get; set; }
        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ARM resource id of the user assigned identity.",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        string AutoStorageNodeIdentityReferenceResourceId { get; set; }
        /// <summary>
        /// For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not
        /// returned.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.",
        SerializedName = @"dedicatedCoreQuota",
        PossibleTypes = new [] { typeof(int) })]
        int? DedicatedCoreQuota { get;  }
        /// <summary>
        /// A list of the dedicated core quota per Virtual Machine family for the Batch account. For accounts with PoolAllocationMode
        /// set to UserSubscription, quota is managed on the subscription so this value is not returned.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"A list of the dedicated core quota per Virtual Machine family for the Batch account. For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.",
        SerializedName = @"dedicatedCoreQuotaPerVMFamily",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IVirtualMachineFamilyCoreQuota) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IVirtualMachineFamilyCoreQuota[] DedicatedCoreQuotaPerVMFamily { get;  }
        /// <summary>
        /// If this flag is true, dedicated core quota is enforced via both the dedicatedCoreQuotaPerVMFamily and dedicatedCoreQuota
        /// properties on the account. If this flag is false, dedicated core quota is enforced only via the dedicatedCoreQuota property
        /// on the account and does not consider Virtual Machine family.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"If this flag is true, dedicated core quota is enforced via both the dedicatedCoreQuotaPerVMFamily and dedicatedCoreQuota properties on the account. If this flag is false, dedicated core quota is enforced only via the dedicatedCoreQuota property on the account and does not consider Virtual Machine family.",
        SerializedName = @"dedicatedCoreQuotaPerVMFamilyEnforced",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DedicatedCoreQuotaPerVMFamilyEnforced { get;  }
        /// <summary>Type of the key source.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Type of the key source.",
        SerializedName = @"keySource",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.KeySource) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.KeySource? EncryptionKeySource { get; set; }
        /// <summary>
        /// The principal id of the Batch account. This property will only be provided for a system assigned identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The principal id of the Batch account. This property will only be provided for a system assigned identity.",
        SerializedName = @"principalId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityPrincipalId { get;  }
        /// <summary>
        /// The tenant id associated with the Batch account. This property will only be provided for a system assigned identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The tenant id associated with the Batch account. This property will only be provided for a system assigned identity.",
        SerializedName = @"tenantId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityTenantId { get;  }
        /// <summary>The type of identity used for the Batch account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of identity used for the Batch account.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ResourceIdentityType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ResourceIdentityType? IdentityType { get; set; }
        /// <summary>The list of user identities associated with the Batch account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of user identities associated with the Batch account.",
        SerializedName = @"userAssignedIdentities",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountIdentityUserAssignedIdentities) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountIdentityUserAssignedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>
        /// Full path to the secret with or without version. Example https://mykeyvault.vault.azure.net/keys/testkey/6e34a81fef704045975661e297a4c053.
        /// or https://mykeyvault.vault.azure.net/keys/testkey. To be usable the following prerequisites must be met:
        /// The Batch Account has a System Assigned identity
        /// The account identity has been granted Key/Get, Key/Unwrap and Key/Wrap permissions
        /// The KeyVault has soft-delete and purge protection enabled
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Full path to the secret with or without version. Example https://mykeyvault.vault.azure.net/keys/testkey/6e34a81fef704045975661e297a4c053. or https://mykeyvault.vault.azure.net/keys/testkey. To be usable the following prerequisites must be met:

         The Batch Account has a System Assigned identity
         The account identity has been granted Key/Get, Key/Unwrap and Key/Wrap permissions
         The KeyVault has soft-delete and purge protection enabled",
        SerializedName = @"keyIdentifier",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultPropertyKeyIdentifier { get; set; }
        /// <summary>The resource ID of the Azure key vault associated with the Batch account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource ID of the Azure key vault associated with the Batch account.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultReferenceId { get; set; }
        /// <summary>The URL of the Azure key vault associated with the Batch account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The URL of the Azure key vault associated with the Batch account.",
        SerializedName = @"url",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultReferenceUrl { get; set; }
        /// <summary>
        /// For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not
        /// returned.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.",
        SerializedName = @"lowPriorityCoreQuota",
        PossibleTypes = new [] { typeof(int) })]
        int? LowPriorityCoreQuota { get;  }
        /// <summary>
        /// Default action for endpoint access. It is only applicable when publicNetworkAccess is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Default action for endpoint access. It is only applicable when publicNetworkAccess is enabled.",
        SerializedName = @"defaultAction",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.EndpointAccessDefaultAction) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.EndpointAccessDefaultAction? NodeManagementAccessDefaultAction { get; set; }
        /// <summary>Array of IP ranges to filter client IP address.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Array of IP ranges to filter client IP address.",
        SerializedName = @"ipRules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IIPRule) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IIPRule[] NodeManagementAccessIPRule { get; set; }
        /// <summary>
        /// The endpoint used by compute node to connect to the Batch node management service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The endpoint used by compute node to connect to the Batch node management service.",
        SerializedName = @"nodeManagementEndpoint",
        PossibleTypes = new [] { typeof(string) })]
        string NodeManagementEndpoint { get;  }
        /// <summary>The allocation mode for creating pools in the Batch account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The allocation mode for creating pools in the Batch account.",
        SerializedName = @"poolAllocationMode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PoolAllocationMode) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PoolAllocationMode? PoolAllocationMode { get;  }
        /// <summary>The pool quota for the Batch account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The pool quota for the Batch account.",
        SerializedName = @"poolQuota",
        PossibleTypes = new [] { typeof(int) })]
        int? PoolQuota { get;  }
        /// <summary>List of private endpoint connections associated with the Batch account</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"List of private endpoint connections associated with the Batch account",
        SerializedName = @"privateEndpointConnections",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IPrivateEndpointConnection) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IPrivateEndpointConnection[] PrivateEndpointConnection { get;  }
        /// <summary>The provisioned state of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The provisioned state of the resource",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ProvisioningState? ProvisioningState { get;  }
        /// <summary>If not specified, the default value is 'enabled'.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If not specified, the default value is 'enabled'.",
        SerializedName = @"publicNetworkAccess",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PublicNetworkAccessType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PublicNetworkAccessType? PublicNetworkAccess { get; set; }

    }
    /// Contains information about an Azure Batch account.
    internal partial interface IBatchAccountInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IResourceInternal
    {
        /// <summary>
        /// Default action for endpoint access. It is only applicable when publicNetworkAccess is enabled.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.EndpointAccessDefaultAction? AccountAccessDefaultAction { get; set; }
        /// <summary>Array of IP ranges to filter client IP address.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IIPRule[] AccountAccessIPRule { get; set; }
        /// <summary>The account endpoint used to interact with the Batch service.</summary>
        string AccountEndpoint { get; set; }
        /// <summary>The active job and job schedule quota for the Batch account.</summary>
        int? ActiveJobAndJobScheduleQuota { get; set; }
        /// <summary>
        /// List of allowed authentication modes for the Batch account that can be used to authenticate with the data plane. This
        /// does not affect authentication with the control plane.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AuthenticationMode[] AllowedAuthenticationMode { get; set; }
        /// <summary>
        /// Contains information about the auto-storage account associated with a Batch account.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IAutoStorageProperties AutoStorage { get; set; }
        /// <summary>The resource ID of the storage account to be used for auto-storage account.</summary>
        string AutoStorageAccountId { get; set; }
        /// <summary>
        /// The authentication mode which the Batch service will use to manage the auto-storage account.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AutoStorageAuthenticationMode? AutoStorageAuthenticationMode { get; set; }
        /// <summary>
        /// The UTC time at which storage keys were last synchronized with the Batch account.
        /// </summary>
        global::System.DateTime? AutoStorageLastKeySync { get; set; }
        /// <summary>
        /// The identity referenced here must be assigned to pools which have compute nodes that need access to auto-storage.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IComputeNodeIdentityReference AutoStorageNodeIdentityReference { get; set; }
        /// <summary>The ARM resource id of the user assigned identity.</summary>
        string AutoStorageNodeIdentityReferenceResourceId { get; set; }
        /// <summary>
        /// For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not
        /// returned.
        /// </summary>
        int? DedicatedCoreQuota { get; set; }
        /// <summary>
        /// A list of the dedicated core quota per Virtual Machine family for the Batch account. For accounts with PoolAllocationMode
        /// set to UserSubscription, quota is managed on the subscription so this value is not returned.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IVirtualMachineFamilyCoreQuota[] DedicatedCoreQuotaPerVMFamily { get; set; }
        /// <summary>
        /// If this flag is true, dedicated core quota is enforced via both the dedicatedCoreQuotaPerVMFamily and dedicatedCoreQuota
        /// properties on the account. If this flag is false, dedicated core quota is enforced only via the dedicatedCoreQuota property
        /// on the account and does not consider Virtual Machine family.
        /// </summary>
        bool? DedicatedCoreQuotaPerVMFamilyEnforced { get; set; }
        /// <summary>
        /// Configures how customer data is encrypted inside the Batch account. By default, accounts are encrypted using a Microsoft
        /// managed key. For additional control, a customer-managed key can be used instead.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IEncryptionProperties Encryption { get; set; }
        /// <summary>Type of the key source.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.KeySource? EncryptionKeySource { get; set; }
        /// <summary>Additional details when using Microsoft.KeyVault</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IKeyVaultProperties EncryptionKeyVaultProperty { get; set; }
        /// <summary>The identity of the Batch account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountIdentity Identity { get; set; }
        /// <summary>
        /// The principal id of the Batch account. This property will only be provided for a system assigned identity.
        /// </summary>
        string IdentityPrincipalId { get; set; }
        /// <summary>
        /// The tenant id associated with the Batch account. This property will only be provided for a system assigned identity.
        /// </summary>
        string IdentityTenantId { get; set; }
        /// <summary>The type of identity used for the Batch account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ResourceIdentityType? IdentityType { get; set; }
        /// <summary>The list of user identities associated with the Batch account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountIdentityUserAssignedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>
        /// Full path to the secret with or without version. Example https://mykeyvault.vault.azure.net/keys/testkey/6e34a81fef704045975661e297a4c053.
        /// or https://mykeyvault.vault.azure.net/keys/testkey. To be usable the following prerequisites must be met:
        /// The Batch Account has a System Assigned identity
        /// The account identity has been granted Key/Get, Key/Unwrap and Key/Wrap permissions
        /// The KeyVault has soft-delete and purge protection enabled
        /// </summary>
        string KeyVaultPropertyKeyIdentifier { get; set; }
        /// <summary>Identifies the Azure key vault associated with a Batch account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IKeyVaultReference KeyVaultReference { get; set; }
        /// <summary>The resource ID of the Azure key vault associated with the Batch account.</summary>
        string KeyVaultReferenceId { get; set; }
        /// <summary>The URL of the Azure key vault associated with the Batch account.</summary>
        string KeyVaultReferenceUrl { get; set; }
        /// <summary>
        /// For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not
        /// returned.
        /// </summary>
        int? LowPriorityCoreQuota { get; set; }
        /// <summary>The network profile only takes effect when publicNetworkAccess is enabled.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.INetworkProfile NetworkProfile { get; set; }
        /// <summary>
        /// Network access profile for batchAccount endpoint (Batch account data plane API).
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IEndpointAccessProfile NetworkProfileAccountAccess { get; set; }
        /// <summary>
        /// Network access profile for nodeManagement endpoint (Batch service managing compute nodes for Batch pools).
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IEndpointAccessProfile NetworkProfileNodeManagementAccess { get; set; }
        /// <summary>
        /// Default action for endpoint access. It is only applicable when publicNetworkAccess is enabled.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.EndpointAccessDefaultAction? NodeManagementAccessDefaultAction { get; set; }
        /// <summary>Array of IP ranges to filter client IP address.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IIPRule[] NodeManagementAccessIPRule { get; set; }
        /// <summary>
        /// The endpoint used by compute node to connect to the Batch node management service.
        /// </summary>
        string NodeManagementEndpoint { get; set; }
        /// <summary>The allocation mode for creating pools in the Batch account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PoolAllocationMode? PoolAllocationMode { get; set; }
        /// <summary>The pool quota for the Batch account.</summary>
        int? PoolQuota { get; set; }
        /// <summary>List of private endpoint connections associated with the Batch account</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IPrivateEndpointConnection[] PrivateEndpointConnection { get; set; }
        /// <summary>The properties associated with the account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20231101.IBatchAccountProperties Property { get; set; }
        /// <summary>The provisioned state of the resource</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ProvisioningState? ProvisioningState { get; set; }
        /// <summary>If not specified, the default value is 'enabled'.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PublicNetworkAccessType? PublicNetworkAccess { get; set; }

    }
}