// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240701
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>The entry of path and mount mode you want to mount into task container.</summary>
    public partial class ContainerHostBatchBindMountEntry :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240701.IContainerHostBatchBindMountEntry,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240701.IContainerHostBatchBindMountEntryInternal
    {

        /// <summary>Backing field for <see cref="IsReadOnly" /> property.</summary>
        private bool? _isReadOnly;

        /// <summary>
        /// For Linux, if you mount this path as a read/write mode, this does not mean that all users in container have the read/write
        /// access for the path, it depends on the access in host VM. If this path is mounted read-only, all users within the container
        /// will not be able to modify the path.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public bool? IsReadOnly { get => this._isReadOnly; set => this._isReadOnly = value; }

        /// <summary>Backing field for <see cref="Source" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ContainerHostDataPath? _source;

        /// <summary>The paths which will be mounted to container task's container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ContainerHostDataPath? Source { get => this._source; set => this._source = value; }

        /// <summary>Creates an new <see cref="ContainerHostBatchBindMountEntry" /> instance.</summary>
        public ContainerHostBatchBindMountEntry()
        {

        }
    }
    /// The entry of path and mount mode you want to mount into task container.
    public partial interface IContainerHostBatchBindMountEntry :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>
        /// For Linux, if you mount this path as a read/write mode, this does not mean that all users in container have the read/write
        /// access for the path, it depends on the access in host VM. If this path is mounted read-only, all users within the container
        /// will not be able to modify the path.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"For Linux, if you mount this path as a read/write mode, this does not mean that all users in container have the read/write access for the path, it depends on the access in host VM. If this path is mounted read-only, all users within the container will not be able to modify the path.",
        SerializedName = @"isReadOnly",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsReadOnly { get; set; }
        /// <summary>The paths which will be mounted to container task's container.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The paths which will be mounted to container task's container.",
        SerializedName = @"source",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ContainerHostDataPath) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ContainerHostDataPath? Source { get; set; }

    }
    /// The entry of path and mount mode you want to mount into task container.
    internal partial interface IContainerHostBatchBindMountEntryInternal

    {
        /// <summary>
        /// For Linux, if you mount this path as a read/write mode, this does not mean that all users in container have the read/write
        /// access for the path, it depends on the access in host VM. If this path is mounted read-only, all users within the container
        /// will not be able to modify the path.
        /// </summary>
        bool? IsReadOnly { get; set; }
        /// <summary>The paths which will be mounted to container task's container.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ContainerHostDataPath? Source { get; set; }

    }
}