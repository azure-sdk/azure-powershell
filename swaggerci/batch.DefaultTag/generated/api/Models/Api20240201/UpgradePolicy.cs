// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;

    /// <summary>Describes an upgrade policy - automatic, manual, or rolling.</summary>
    public partial class UpgradePolicy :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IUpgradePolicy,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IUpgradePolicyInternal
    {

        /// <summary>Backing field for <see cref="AutomaticOSUpgradePolicy" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IAutomaticOSUpgradePolicy _automaticOSUpgradePolicy;

        /// <summary>The configuration parameters used for performing automatic OS upgrade.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IAutomaticOSUpgradePolicy AutomaticOSUpgradePolicy { get => (this._automaticOSUpgradePolicy = this._automaticOSUpgradePolicy ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.AutomaticOSUpgradePolicy()); set => this._automaticOSUpgradePolicy = value; }

        /// <summary>Whether OS image rollback feature should be disabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? AutomaticOSUpgradePolicyDisableAutomaticRollback { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IAutomaticOSUpgradePolicyInternal)AutomaticOSUpgradePolicy).DisableAutomaticRollback; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IAutomaticOSUpgradePolicyInternal)AutomaticOSUpgradePolicy).DisableAutomaticRollback = value ?? default(bool); }

        /// <summary>
        /// Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer
        /// version of the OS image becomes available. <br /><br /> If this is set to true for Windows based pools, [WindowsConfiguration.enableAutomaticUpdates](https://learn.microsoft.com/en-us/rest/api/batchmanagement/pool/create?tabs=HTTP#windowsconfiguration)
        /// cannot be set to true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? AutomaticOSUpgradePolicyEnableAutomaticOsupgrade { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IAutomaticOSUpgradePolicyInternal)AutomaticOSUpgradePolicy).EnableAutomaticOSUpgrade; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IAutomaticOSUpgradePolicyInternal)AutomaticOSUpgradePolicy).EnableAutomaticOSUpgrade = value ?? default(bool); }

        /// <summary>Defer OS upgrades on the TVMs if they are running tasks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? AutomaticOSUpgradePolicyOsrollingUpgradeDeferral { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IAutomaticOSUpgradePolicyInternal)AutomaticOSUpgradePolicy).OSRollingUpgradeDeferral; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IAutomaticOSUpgradePolicyInternal)AutomaticOSUpgradePolicy).OSRollingUpgradeDeferral = value ?? default(bool); }

        /// <summary>
        /// Indicates whether rolling upgrade policy should be used during Auto OS Upgrade. Auto OS Upgrade will fallback to the default
        /// policy if no policy is defined on the VMSS.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? AutomaticOSUpgradePolicyUseRollingUpgradePolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IAutomaticOSUpgradePolicyInternal)AutomaticOSUpgradePolicy).UseRollingUpgradePolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IAutomaticOSUpgradePolicyInternal)AutomaticOSUpgradePolicy).UseRollingUpgradePolicy = value ?? default(bool); }

        /// <summary>Internal Acessors for AutomaticOSUpgradePolicy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IAutomaticOSUpgradePolicy Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IUpgradePolicyInternal.AutomaticOSUpgradePolicy { get => (this._automaticOSUpgradePolicy = this._automaticOSUpgradePolicy ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.AutomaticOSUpgradePolicy()); set { {_automaticOSUpgradePolicy = value;} } }

        /// <summary>Internal Acessors for RollingUpgradePolicy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IRollingUpgradePolicy Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IUpgradePolicyInternal.RollingUpgradePolicy { get => (this._rollingUpgradePolicy = this._rollingUpgradePolicy ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.RollingUpgradePolicy()); set { {_rollingUpgradePolicy = value;} } }

        /// <summary>Backing field for <see cref="Mode" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.UpgradeMode _mode;

        /// <summary>
        /// Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual**
        /// - You control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade
        /// action.<br /><br /> **Automatic** - All virtual machines in the scale set are automatically updated at the same time.<br
        /// /><br /> **Rolling** - Scale set performs updates in batches with an optional pause time in between.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.UpgradeMode Mode { get => this._mode; set => this._mode = value; }

        /// <summary>Backing field for <see cref="RollingUpgradePolicy" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IRollingUpgradePolicy _rollingUpgradePolicy;

        /// <summary>
        /// This property is only supported on Pools with the virtualMachineConfiguration property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IRollingUpgradePolicy RollingUpgradePolicy { get => (this._rollingUpgradePolicy = this._rollingUpgradePolicy ?? new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.RollingUpgradePolicy()); set => this._rollingUpgradePolicy = value; }

        /// <summary>
        /// Allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take into consideration the Update Domain and maxBatchInstancePercent
        /// to determine the batch size. If this field is not set, Azure Azure Batch will not set its default value. The value of
        /// enableCrossZoneUpgrade on the created VirtualMachineScaleSet will be decided by the default configurations on VirtualMachineScaleSet.
        /// This field is able to be set to true or false only when using NodePlacementConfiguration as Zonal.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? RollingUpgradePolicyEnableCrossZoneUpgrade { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IRollingUpgradePolicyInternal)RollingUpgradePolicy).EnableCrossZoneUpgrade; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IRollingUpgradePolicyInternal)RollingUpgradePolicy).EnableCrossZoneUpgrade = value ?? default(bool); }

        /// <summary>
        /// The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in
        /// one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances
        /// in a batch to decrease to ensure higher reliability. The value of this field should be between 5 and 100, inclusive. If
        /// both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value, the value of maxBatchInstancePercent
        /// should not be more than maxUnhealthyInstancePercent.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? RollingUpgradePolicyMaxBatchInstancePercent { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IRollingUpgradePolicyInternal)RollingUpgradePolicy).MaxBatchInstancePercent; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IRollingUpgradePolicyInternal)RollingUpgradePolicy).MaxBatchInstancePercent = value ?? default(int); }

        /// <summary>
        /// The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either
        /// as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the
        /// rolling upgrade aborts. This constraint will be checked prior to starting any batch. The value of this field should be
        /// between 5 and 100, inclusive. If both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value,
        /// the value of maxBatchInstancePercent should not be more than maxUnhealthyInstancePercent.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? RollingUpgradePolicyMaxUnhealthyInstancePercent { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IRollingUpgradePolicyInternal)RollingUpgradePolicy).MaxUnhealthyInstancePercent; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IRollingUpgradePolicyInternal)RollingUpgradePolicy).MaxUnhealthyInstancePercent = value ?? default(int); }

        /// <summary>
        /// The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check
        /// will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The value of
        /// this field should be between 0 and 100, inclusive.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public int? RollingUpgradePolicyMaxUnhealthyUpgradedInstancePercent { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IRollingUpgradePolicyInternal)RollingUpgradePolicy).MaxUnhealthyUpgradedInstancePercent; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IRollingUpgradePolicyInternal)RollingUpgradePolicy).MaxUnhealthyUpgradedInstancePercent = value ?? default(int); }

        /// <summary>
        /// The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time
        /// duration should be specified in ISO 8601 format.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public string RollingUpgradePolicyPauseTimeBetweenBatch { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IRollingUpgradePolicyInternal)RollingUpgradePolicy).PauseTimeBetweenBatch; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IRollingUpgradePolicyInternal)RollingUpgradePolicy).PauseTimeBetweenBatch = value ?? null; }

        /// <summary>Upgrade all unhealthy instances in a scale set before any healthy instances.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? RollingUpgradePolicyPrioritizeUnhealthyInstance { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IRollingUpgradePolicyInternal)RollingUpgradePolicy).PrioritizeUnhealthyInstance; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IRollingUpgradePolicyInternal)RollingUpgradePolicy).PrioritizeUnhealthyInstance = value ?? default(bool); }

        /// <summary>
        /// Rollback failed instances to previous model if the Rolling Upgrade policy is violated.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Origin(Microsoft.Azure.PowerShell.Cmdlets.Batch.PropertyOrigin.Inlined)]
        public bool? RollingUpgradePolicyRollbackFailedInstancesOnPolicyBreach { get => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IRollingUpgradePolicyInternal)RollingUpgradePolicy).RollbackFailedInstancesOnPolicyBreach; set => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IRollingUpgradePolicyInternal)RollingUpgradePolicy).RollbackFailedInstancesOnPolicyBreach = value ?? default(bool); }

        /// <summary>Creates an new <see cref="UpgradePolicy" /> instance.</summary>
        public UpgradePolicy()
        {

        }
    }
    /// Describes an upgrade policy - automatic, manual, or rolling.
    public partial interface IUpgradePolicy :
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IJsonSerializable
    {
        /// <summary>Whether OS image rollback feature should be disabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether OS image rollback feature should be disabled.",
        SerializedName = @"disableAutomaticRollback",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutomaticOSUpgradePolicyDisableAutomaticRollback { get; set; }
        /// <summary>
        /// Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer
        /// version of the OS image becomes available. <br /><br /> If this is set to true for Windows based pools, [WindowsConfiguration.enableAutomaticUpdates](https://learn.microsoft.com/en-us/rest/api/batchmanagement/pool/create?tabs=HTTP#windowsconfiguration)
        /// cannot be set to true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer version of the OS image becomes available. <br /><br /> If this is set to true for Windows based pools, [WindowsConfiguration.enableAutomaticUpdates](https://learn.microsoft.com/en-us/rest/api/batchmanagement/pool/create?tabs=HTTP#windowsconfiguration) cannot be set to true.",
        SerializedName = @"enableAutomaticOSUpgrade",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutomaticOSUpgradePolicyEnableAutomaticOsupgrade { get; set; }
        /// <summary>Defer OS upgrades on the TVMs if they are running tasks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Defer OS upgrades on the TVMs if they are running tasks.",
        SerializedName = @"osRollingUpgradeDeferral",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutomaticOSUpgradePolicyOsrollingUpgradeDeferral { get; set; }
        /// <summary>
        /// Indicates whether rolling upgrade policy should be used during Auto OS Upgrade. Auto OS Upgrade will fallback to the default
        /// policy if no policy is defined on the VMSS.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether rolling upgrade policy should be used during Auto OS Upgrade. Auto OS Upgrade will fallback to the default policy if no policy is defined on the VMSS.",
        SerializedName = @"useRollingUpgradePolicy",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutomaticOSUpgradePolicyUseRollingUpgradePolicy { get; set; }
        /// <summary>
        /// Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual**
        /// - You control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade
        /// action.<br /><br /> **Automatic** - All virtual machines in the scale set are automatically updated at the same time.<br
        /// /><br /> **Rolling** - Scale set performs updates in batches with an optional pause time in between.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade action.<br /><br /> **Automatic** - All virtual machines in the scale set are automatically updated at the same time.<br /><br /> **Rolling** - Scale set performs updates in batches with an optional pause time in between.",
        SerializedName = @"mode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.UpgradeMode) })]
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.UpgradeMode Mode { get; set; }
        /// <summary>
        /// Allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take into consideration the Update Domain and maxBatchInstancePercent
        /// to determine the batch size. If this field is not set, Azure Azure Batch will not set its default value. The value of
        /// enableCrossZoneUpgrade on the created VirtualMachineScaleSet will be decided by the default configurations on VirtualMachineScaleSet.
        /// This field is able to be set to true or false only when using NodePlacementConfiguration as Zonal.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take into consideration the Update Domain and maxBatchInstancePercent to determine the batch size. If this field is not set, Azure Azure Batch will not set its default value. The value of enableCrossZoneUpgrade on the created VirtualMachineScaleSet will be decided by the default configurations on VirtualMachineScaleSet. This field is able to be set to true or false only when using NodePlacementConfiguration as Zonal.",
        SerializedName = @"enableCrossZoneUpgrade",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RollingUpgradePolicyEnableCrossZoneUpgrade { get; set; }
        /// <summary>
        /// The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in
        /// one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances
        /// in a batch to decrease to ensure higher reliability. The value of this field should be between 5 and 100, inclusive. If
        /// both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value, the value of maxBatchInstancePercent
        /// should not be more than maxUnhealthyInstancePercent.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The value of this field should be between 5 and 100, inclusive. If both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value, the value of maxBatchInstancePercent should not be more than maxUnhealthyInstancePercent.",
        SerializedName = @"maxBatchInstancePercent",
        PossibleTypes = new [] { typeof(int) })]
        int? RollingUpgradePolicyMaxBatchInstancePercent { get; set; }
        /// <summary>
        /// The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either
        /// as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the
        /// rolling upgrade aborts. This constraint will be checked prior to starting any batch. The value of this field should be
        /// between 5 and 100, inclusive. If both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value,
        /// the value of maxBatchInstancePercent should not be more than maxUnhealthyInstancePercent.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The value of this field should be between 5 and 100, inclusive. If both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value, the value of maxBatchInstancePercent should not be more than maxUnhealthyInstancePercent.",
        SerializedName = @"maxUnhealthyInstancePercent",
        PossibleTypes = new [] { typeof(int) })]
        int? RollingUpgradePolicyMaxUnhealthyInstancePercent { get; set; }
        /// <summary>
        /// The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check
        /// will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The value of
        /// this field should be between 0 and 100, inclusive.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The value of this field should be between 0 and 100, inclusive.",
        SerializedName = @"maxUnhealthyUpgradedInstancePercent",
        PossibleTypes = new [] { typeof(int) })]
        int? RollingUpgradePolicyMaxUnhealthyUpgradedInstancePercent { get; set; }
        /// <summary>
        /// The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time
        /// duration should be specified in ISO 8601 format.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format.",
        SerializedName = @"pauseTimeBetweenBatches",
        PossibleTypes = new [] { typeof(string) })]
        string RollingUpgradePolicyPauseTimeBetweenBatch { get; set; }
        /// <summary>Upgrade all unhealthy instances in a scale set before any healthy instances.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Upgrade all unhealthy instances in a scale set before any healthy instances.",
        SerializedName = @"prioritizeUnhealthyInstances",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RollingUpgradePolicyPrioritizeUnhealthyInstance { get; set; }
        /// <summary>
        /// Rollback failed instances to previous model if the Rolling Upgrade policy is violated.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Rollback failed instances to previous model if the Rolling Upgrade policy is violated.",
        SerializedName = @"rollbackFailedInstancesOnPolicyBreach",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RollingUpgradePolicyRollbackFailedInstancesOnPolicyBreach { get; set; }

    }
    /// Describes an upgrade policy - automatic, manual, or rolling.
    internal partial interface IUpgradePolicyInternal

    {
        /// <summary>The configuration parameters used for performing automatic OS upgrade.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IAutomaticOSUpgradePolicy AutomaticOSUpgradePolicy { get; set; }
        /// <summary>Whether OS image rollback feature should be disabled.</summary>
        bool? AutomaticOSUpgradePolicyDisableAutomaticRollback { get; set; }
        /// <summary>
        /// Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer
        /// version of the OS image becomes available. <br /><br /> If this is set to true for Windows based pools, [WindowsConfiguration.enableAutomaticUpdates](https://learn.microsoft.com/en-us/rest/api/batchmanagement/pool/create?tabs=HTTP#windowsconfiguration)
        /// cannot be set to true.
        /// </summary>
        bool? AutomaticOSUpgradePolicyEnableAutomaticOsupgrade { get; set; }
        /// <summary>Defer OS upgrades on the TVMs if they are running tasks.</summary>
        bool? AutomaticOSUpgradePolicyOsrollingUpgradeDeferral { get; set; }
        /// <summary>
        /// Indicates whether rolling upgrade policy should be used during Auto OS Upgrade. Auto OS Upgrade will fallback to the default
        /// policy if no policy is defined on the VMSS.
        /// </summary>
        bool? AutomaticOSUpgradePolicyUseRollingUpgradePolicy { get; set; }
        /// <summary>
        /// Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual**
        /// - You control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade
        /// action.<br /><br /> **Automatic** - All virtual machines in the scale set are automatically updated at the same time.<br
        /// /><br /> **Rolling** - Scale set performs updates in batches with an optional pause time in between.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.UpgradeMode Mode { get; set; }
        /// <summary>
        /// This property is only supported on Pools with the virtualMachineConfiguration property.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IRollingUpgradePolicy RollingUpgradePolicy { get; set; }
        /// <summary>
        /// Allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take into consideration the Update Domain and maxBatchInstancePercent
        /// to determine the batch size. If this field is not set, Azure Azure Batch will not set its default value. The value of
        /// enableCrossZoneUpgrade on the created VirtualMachineScaleSet will be decided by the default configurations on VirtualMachineScaleSet.
        /// This field is able to be set to true or false only when using NodePlacementConfiguration as Zonal.
        /// </summary>
        bool? RollingUpgradePolicyEnableCrossZoneUpgrade { get; set; }
        /// <summary>
        /// The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in
        /// one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances
        /// in a batch to decrease to ensure higher reliability. The value of this field should be between 5 and 100, inclusive. If
        /// both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value, the value of maxBatchInstancePercent
        /// should not be more than maxUnhealthyInstancePercent.
        /// </summary>
        int? RollingUpgradePolicyMaxBatchInstancePercent { get; set; }
        /// <summary>
        /// The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either
        /// as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the
        /// rolling upgrade aborts. This constraint will be checked prior to starting any batch. The value of this field should be
        /// between 5 and 100, inclusive. If both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value,
        /// the value of maxBatchInstancePercent should not be more than maxUnhealthyInstancePercent.
        /// </summary>
        int? RollingUpgradePolicyMaxUnhealthyInstancePercent { get; set; }
        /// <summary>
        /// The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check
        /// will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The value of
        /// this field should be between 0 and 100, inclusive.
        /// </summary>
        int? RollingUpgradePolicyMaxUnhealthyUpgradedInstancePercent { get; set; }
        /// <summary>
        /// The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time
        /// duration should be specified in ISO 8601 format.
        /// </summary>
        string RollingUpgradePolicyPauseTimeBetweenBatch { get; set; }
        /// <summary>Upgrade all unhealthy instances in a scale set before any healthy instances.</summary>
        bool? RollingUpgradePolicyPrioritizeUnhealthyInstance { get; set; }
        /// <summary>
        /// Rollback failed instances to previous model if the Rolling Upgrade policy is violated.
        /// </summary>
        bool? RollingUpgradePolicyRollbackFailedInstancesOnPolicyBreach { get; set; }

    }
}