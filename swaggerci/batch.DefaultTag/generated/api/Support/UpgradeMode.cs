// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Support
{

    /// <summary>
    /// Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual**
    /// - You control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade
    /// action.<br /><br /> **Automatic** - All virtual machines in the scale set are automatically updated at the same time.<br
    /// /><br /> **Rolling** - Scale set performs updates in batches with an optional pause time in between.
    /// </summary>
    public partial struct UpgradeMode :
        System.IEquatable<UpgradeMode>
    {
        /// <summary>
        /// All virtual machines in the scale set are automatically updated at the same time.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.UpgradeMode Automatic = @"automatic";

        /// <summary>
        /// You control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade action.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.UpgradeMode Manual = @"manual";

        /// <summary>
        /// The existing instances in a scale set are brought down in batches to be upgraded. Once the upgraded batch is complete,
        /// the instances will begin taking traffic again and the next batch will begin. This continues until all instances brought
        /// up-to-date.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.UpgradeMode Rolling = @"rolling";

        /// <summary>the value for an instance of the <see cref="UpgradeMode" /> Enum.</summary>
        private string _value { get; set; }

        /// <summary>Conversion from arbitrary object to UpgradeMode</summary>
        /// <param name="value">the value to convert to an instance of <see cref="UpgradeMode" />.</param>
        internal static object CreateFrom(object value)
        {
            return new UpgradeMode(global::System.Convert.ToString(value));
        }

        /// <summary>Compares values of enum type UpgradeMode</summary>
        /// <param name="e">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public bool Equals(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.UpgradeMode e)
        {
            return _value.Equals(e._value);
        }

        /// <summary>Compares values of enum type UpgradeMode (override for Object)</summary>
        /// <param name="obj">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public override bool Equals(object obj)
        {
            return obj is UpgradeMode && Equals((UpgradeMode)obj);
        }

        /// <summary>Returns hashCode for enum UpgradeMode</summary>
        /// <returns>The hashCode of the value</returns>
        public override int GetHashCode()
        {
            return this._value.GetHashCode();
        }

        /// <summary>Returns string representation for UpgradeMode</summary>
        /// <returns>A string for this value.</returns>
        public override string ToString()
        {
            return this._value;
        }

        /// <summary>Creates an instance of the <see cref="UpgradeMode"/> Enum class.</summary>
        /// <param name="underlyingValue">the value to create an instance for.</param>
        private UpgradeMode(string underlyingValue)
        {
            this._value = underlyingValue;
        }

        /// <summary>Implicit operator to convert string to UpgradeMode</summary>
        /// <param name="value">the value to convert to an instance of <see cref="UpgradeMode" />.</param>

        public static implicit operator UpgradeMode(string value)
        {
            return new UpgradeMode(value);
        }

        /// <summary>Implicit operator to convert UpgradeMode to string</summary>
        /// <param name="e">the value to convert to an instance of <see cref="UpgradeMode" />.</param>

        public static implicit operator string(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.UpgradeMode e)
        {
            return e._value;
        }

        /// <summary>Overriding != operator for enum UpgradeMode</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are not equal to the same value</returns>
        public static bool operator !=(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.UpgradeMode e1, Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.UpgradeMode e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>Overriding == operator for enum UpgradeMode</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public static bool operator ==(Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.UpgradeMode e1, Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.UpgradeMode e2)
        {
            return e2.Equals(e1);
        }
    }
}