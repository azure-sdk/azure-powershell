
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Creates a new Batch account with the specified parameters.
Existing accounts cannot be updated with this API and should instead be updated with the Update Batch Account API.
.Description
Creates a new Batch account with the specified parameters.
Existing accounts cannot be updated with this API and should instead be updated with the Update Batch Account API.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IBatchAccount
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

ACCOUNTACCESSIPRULE <IIPRule[]>: Array of IP ranges to filter client IP address.
  Value <String>: IPv4 address, or IPv4 address range in CIDR format.

NODEMANAGEMENTACCESSIPRULE <IIPRule[]>: Array of IP ranges to filter client IP address.
  Value <String>: IPv4 address, or IPv4 address range in CIDR format.
.Link
https://learn.microsoft.com/powershell/module/az.batch/new-azbatchaccount
#>
function New-AzBatchAccount {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IBatchAccount])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Path')]
    [System.String]
    # A name for the Batch account which must be unique within the region.
    # Batch account names must be between 3 and 24 characters in length and must use only numbers and lowercase letters.
    # This name is used as part of the DNS name that is used to access the Batch service in the region in which the account is created.
    # For example: http://accountname.region.batch.azure.com/.
    ${AccountName},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Path')]
    [System.String]
    # The name of the resource group that contains the Batch account.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The Azure subscription ID.
    # This is a GUID-formatted string (e.g.
    # 00000000-0000-0000-0000-000000000000)
    ${SubscriptionId},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Body')]
    [System.String]
    # The region in which to create the account.
    ${Location},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.EndpointAccessDefaultAction])]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.EndpointAccessDefaultAction]
    # Default action for endpoint access.
    # It is only applicable when publicNetworkAccess is enabled.
    ${AccountAccessDefaultAction},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IIPRule[]]
    # Array of IP ranges to filter client IP address.
    # To construct, see NOTES section for ACCOUNTACCESSIPRULE properties and create a hash table.
    ${AccountAccessIPRule},

    [Parameter()]
    [AllowEmptyCollection()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AuthenticationMode])]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AuthenticationMode[]]
    # List of allowed authentication modes for the Batch account that can be used to authenticate with the data plane.
    # This does not affect authentication with the control plane.
    ${AllowedAuthenticationMode},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Body')]
    [System.String]
    # The resource ID of the storage account to be used for auto-storage account.
    ${AutoStorageAccountId},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AutoStorageAuthenticationMode])]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.AutoStorageAuthenticationMode]
    # The authentication mode which the Batch service will use to manage the auto-storage account.
    ${AutoStorageAuthenticationMode},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.KeySource])]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.KeySource]
    # Type of the key source.
    ${EncryptionKeySource},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ResourceIdentityType])]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.ResourceIdentityType]
    # The type of identity used for the Batch account.
    ${IdentityType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IBatchAccountIdentityUserAssignedIdentities]))]
    [System.Collections.Hashtable]
    # The list of user identities associated with the Batch account.
    ${IdentityUserAssignedIdentity},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Body')]
    [System.String]
    # Full path to the secret with or without version.
    # Example https://mykeyvault.vault.azure.net/keys/testkey/6e34a81fef704045975661e297a4c053.
    # or https://mykeyvault.vault.azure.net/keys/testkey.
    # To be usable the following prerequisites must be met: The Batch Account has a System Assigned identity The account identity has been granted Key/Get, Key/Unwrap and Key/Wrap permissions The KeyVault has soft-delete and purge protection enabled
    ${KeyVaultPropertyKeyIdentifier},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Body')]
    [System.String]
    # The resource ID of the Azure key vault associated with the Batch account.
    ${KeyVaultReferenceId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Body')]
    [System.String]
    # The URL of the Azure key vault associated with the Batch account.
    ${KeyVaultReferenceUrl},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Body')]
    [System.String]
    # The ARM resource id of the user assigned identity.
    ${NodeIdentityReferenceResourceId},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.EndpointAccessDefaultAction])]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.EndpointAccessDefaultAction]
    # Default action for endpoint access.
    # It is only applicable when publicNetworkAccess is enabled.
    ${NodeManagementAccessDefaultAction},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IIPRule[]]
    # Array of IP ranges to filter client IP address.
    # To construct, see NOTES section for NODEMANAGEMENTACCESSIPRULE properties and create a hash table.
    ${NodeManagementAccessIPRule},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PoolAllocationMode])]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PoolAllocationMode]
    # The pool allocation mode also affects how clients may authenticate to the Batch Service API.
    # If the mode is BatchService, clients may authenticate using access keys or Microsoft Entra ID.
    # If the mode is UserSubscription, clients must use Microsoft Entra ID.
    # The default is BatchService.
    ${PoolAllocationMode},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PublicNetworkAccessType])]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Support.PublicNetworkAccessType]
    # If not specified, the default value is 'enabled'.
    ${PublicNetworkAccess},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.Api20240201.IBatchAccountCreateParametersTags]))]
    [System.Collections.Hashtable]
    # The user-specified tags associated with the account.
    ${Tag},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Batch.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Batch.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.Batch.private\New-AzBatchAccount_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Batch.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
