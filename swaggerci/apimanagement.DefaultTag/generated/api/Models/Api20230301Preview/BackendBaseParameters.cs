// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Extensions;

    /// <summary>Backend entity base Parameter set.</summary>
    public partial class BackendBaseParameters :
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendBaseParameters,
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendBaseParametersInternal
    {

        /// <summary>Authentication Parameter value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public string AuthorizationParameter { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendCredentialsContractInternal)Credentials).AuthorizationParameter; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendCredentialsContractInternal)Credentials).AuthorizationParameter = value ?? null; }

        /// <summary>Authentication Scheme name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public string AuthorizationScheme { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendCredentialsContractInternal)Credentials).AuthorizationScheme; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendCredentialsContractInternal)Credentials).AuthorizationScheme = value ?? null; }

        /// <summary>Backing field for <see cref="CircuitBreaker" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendCircuitBreaker _circuitBreaker;

        /// <summary>Backend Circuit Breaker Configuration</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendCircuitBreaker CircuitBreaker { get => (this._circuitBreaker = this._circuitBreaker ?? new Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.BackendCircuitBreaker()); set => this._circuitBreaker = value; }

        /// <summary>The rules for tripping the backend.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.ICircuitBreakerRule[] CircuitBreakerRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendCircuitBreakerInternal)CircuitBreaker).Rule; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendCircuitBreakerInternal)CircuitBreaker).Rule = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="Credentials" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendCredentialsContract _credentials;

        /// <summary>Backend Credentials Contract Properties</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendCredentialsContract Credentials { get => (this._credentials = this._credentials ?? new Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.BackendCredentialsContract()); set => this._credentials = value; }

        /// <summary>
        /// List of Client Certificate Thumbprints. Will be ignored if certificatesIds are provided.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public string[] CredentialsCertificate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendCredentialsContractInternal)Credentials).Certificate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendCredentialsContractInternal)Credentials).Certificate = value ?? null /* arrayOf */; }

        /// <summary>List of Client Certificate Ids.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public string[] CredentialsCertificateId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendCredentialsContractInternal)Credentials).CertificateId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendCredentialsContractInternal)Credentials).CertificateId = value ?? null /* arrayOf */; }

        /// <summary>Header Parameter description.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendCredentialsContractHeader CredentialsHeader { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendCredentialsContractInternal)Credentials).Header; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendCredentialsContractInternal)Credentials).Header = value ?? null /* model class */; }

        /// <summary>Query Parameter description.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendCredentialsContractQuery CredentialsQuery { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendCredentialsContractInternal)Credentials).Query; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendCredentialsContractInternal)Credentials).Query = value ?? null /* model class */; }

        /// <summary>Backing field for <see cref="Description" /> property.</summary>
        private string _description;

        /// <summary>Backend Description.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        public string Description { get => this._description; set => this._description = value; }

        /// <summary>Internal Acessors for CircuitBreaker</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendCircuitBreaker Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendBaseParametersInternal.CircuitBreaker { get => (this._circuitBreaker = this._circuitBreaker ?? new Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.BackendCircuitBreaker()); set { {_circuitBreaker = value;} } }

        /// <summary>Internal Acessors for Credentials</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendCredentialsContract Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendBaseParametersInternal.Credentials { get => (this._credentials = this._credentials ?? new Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.BackendCredentialsContract()); set { {_credentials = value;} } }

        /// <summary>Internal Acessors for CredentialsAuthorization</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendAuthorizationHeaderCredentials Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendBaseParametersInternal.CredentialsAuthorization { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendCredentialsContractInternal)Credentials).Authorization; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendCredentialsContractInternal)Credentials).Authorization = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendProperties Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendBaseParametersInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.BackendProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for Proxy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendProxyContract Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendBaseParametersInternal.Proxy { get => (this._proxy = this._proxy ?? new Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.BackendProxyContract()); set { {_proxy = value;} } }

        /// <summary>Internal Acessors for ServiceFabricCluster</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendServiceFabricClusterProperties Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendBaseParametersInternal.ServiceFabricCluster { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendPropertiesInternal)Property).ServiceFabricCluster; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendPropertiesInternal)Property).ServiceFabricCluster = value; }

        /// <summary>Internal Acessors for Tl</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendTlsProperties Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendBaseParametersInternal.Tl { get => (this._tl = this._tl ?? new Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.BackendTlsProperties()); set { {_tl = value;} } }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendProperties _property;

        /// <summary>Backend Properties contract</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.BackendProperties()); set => this._property = value; }

        /// <summary>Backing field for <see cref="Proxy" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendProxyContract _proxy;

        /// <summary>Backend gateway Contract Properties</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendProxyContract Proxy { get => (this._proxy = this._proxy ?? new Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.BackendProxyContract()); set => this._proxy = value; }

        /// <summary>Password to connect to the WebProxy Server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public string ProxyPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendProxyContractInternal)Proxy).Password; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendProxyContractInternal)Proxy).Password = value ?? null; }

        /// <summary>
        /// WebProxy Server AbsoluteUri property which includes the entire URI stored in the Uri instance, including all fragments
        /// and query strings.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public string ProxyUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendProxyContractInternal)Proxy).Url; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendProxyContractInternal)Proxy).Url = value ?? null; }

        /// <summary>Username to connect to the WebProxy server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public string ProxyUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendProxyContractInternal)Proxy).Username; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendProxyContractInternal)Proxy).Username = value ?? null; }

        /// <summary>Backing field for <see cref="ResourceId" /> property.</summary>
        private string _resourceId;

        /// <summary>
        /// Management Uri of the Resource in External System. This URL can be the Arm Resource Id of Logic Apps, Function Apps or
        /// API Apps.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        public string ResourceId { get => this._resourceId; set => this._resourceId = value; }

        /// <summary>The client certificate id for the management endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public string ServiceFabricClusterClientCertificateId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendPropertiesInternal)Property).ServiceFabricClusterClientCertificateId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendPropertiesInternal)Property).ServiceFabricClusterClientCertificateId = value ?? null; }

        /// <summary>
        /// The client certificate thumbprint for the management endpoint. Will be ignored if certificatesIds are provided
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public string ServiceFabricClusterClientCertificatethumbprint { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendPropertiesInternal)Property).ServiceFabricClusterClientCertificatethumbprint; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendPropertiesInternal)Property).ServiceFabricClusterClientCertificatethumbprint = value ?? null; }

        /// <summary>The cluster management endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public string[] ServiceFabricClusterManagementEndpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendPropertiesInternal)Property).ServiceFabricClusterManagementEndpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendPropertiesInternal)Property).ServiceFabricClusterManagementEndpoint = value ?? null /* arrayOf */; }

        /// <summary>Maximum number of retries while attempting resolve the partition.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public int? ServiceFabricClusterMaxPartitionResolutionRetry { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendPropertiesInternal)Property).ServiceFabricClusterMaxPartitionResolutionRetry; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendPropertiesInternal)Property).ServiceFabricClusterMaxPartitionResolutionRetry = value ?? default(int); }

        /// <summary>
        /// Thumbprints of certificates cluster management service uses for tls communication
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public string[] ServiceFabricClusterServerCertificateThumbprint { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendPropertiesInternal)Property).ServiceFabricClusterServerCertificateThumbprint; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendPropertiesInternal)Property).ServiceFabricClusterServerCertificateThumbprint = value ?? null /* arrayOf */; }

        /// <summary>Server X509 Certificate Names Collection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IX509CertificateName[] ServiceFabricClusterServerX509Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendPropertiesInternal)Property).ServiceFabricClusterServerX509Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendPropertiesInternal)Property).ServiceFabricClusterServerX509Name = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="Title" /> property.</summary>
        private string _title;

        /// <summary>Backend Title.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        public string Title { get => this._title; set => this._title = value; }

        /// <summary>Backing field for <see cref="Tl" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendTlsProperties _tl;

        /// <summary>Backend TLS Properties</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendTlsProperties Tl { get => (this._tl = this._tl ?? new Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.BackendTlsProperties()); set => this._tl = value; }

        /// <summary>
        /// Flag indicating whether SSL certificate chain validation should be done when using self-signed certificates for this backend
        /// host.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public bool? TlValidateCertificateChain { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendTlsPropertiesInternal)Tl).ValidateCertificateChain; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendTlsPropertiesInternal)Tl).ValidateCertificateChain = value ?? default(bool); }

        /// <summary>
        /// Flag indicating whether SSL certificate name validation should be done when using self-signed certificates for this backend
        /// host.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Origin(Microsoft.Azure.PowerShell.Cmdlets.Api.PropertyOrigin.Inlined)]
        public bool? TlValidateCertificateName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendTlsPropertiesInternal)Tl).ValidateCertificateName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendTlsPropertiesInternal)Tl).ValidateCertificateName = value ?? default(bool); }

        /// <summary>Creates an new <see cref="BackendBaseParameters" /> instance.</summary>
        public BackendBaseParameters()
        {

        }
    }
    /// Backend entity base Parameter set.
    public partial interface IBackendBaseParameters :
        Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.IJsonSerializable
    {
        /// <summary>Authentication Parameter value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Authentication Parameter value.",
        SerializedName = @"parameter",
        PossibleTypes = new [] { typeof(string) })]
        string AuthorizationParameter { get; set; }
        /// <summary>Authentication Scheme name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Authentication Scheme name.",
        SerializedName = @"scheme",
        PossibleTypes = new [] { typeof(string) })]
        string AuthorizationScheme { get; set; }
        /// <summary>The rules for tripping the backend.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The rules for tripping the backend.",
        SerializedName = @"rules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.ICircuitBreakerRule) })]
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.ICircuitBreakerRule[] CircuitBreakerRule { get; set; }
        /// <summary>
        /// List of Client Certificate Thumbprints. Will be ignored if certificatesIds are provided.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of Client Certificate Thumbprints. Will be ignored if certificatesIds are provided.",
        SerializedName = @"certificate",
        PossibleTypes = new [] { typeof(string) })]
        string[] CredentialsCertificate { get; set; }
        /// <summary>List of Client Certificate Ids.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of Client Certificate Ids.",
        SerializedName = @"certificateIds",
        PossibleTypes = new [] { typeof(string) })]
        string[] CredentialsCertificateId { get; set; }
        /// <summary>Header Parameter description.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Header Parameter description.",
        SerializedName = @"header",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendCredentialsContractHeader) })]
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendCredentialsContractHeader CredentialsHeader { get; set; }
        /// <summary>Query Parameter description.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Query Parameter description.",
        SerializedName = @"query",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendCredentialsContractQuery) })]
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendCredentialsContractQuery CredentialsQuery { get; set; }
        /// <summary>Backend Description.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Backend Description.",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        string Description { get; set; }
        /// <summary>Password to connect to the WebProxy Server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Password to connect to the WebProxy Server",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(string) })]
        string ProxyPassword { get; set; }
        /// <summary>
        /// WebProxy Server AbsoluteUri property which includes the entire URI stored in the Uri instance, including all fragments
        /// and query strings.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"WebProxy Server AbsoluteUri property which includes the entire URI stored in the Uri instance, including all fragments and query strings.",
        SerializedName = @"url",
        PossibleTypes = new [] { typeof(string) })]
        string ProxyUrl { get; set; }
        /// <summary>Username to connect to the WebProxy server</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Username to connect to the WebProxy server",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string ProxyUsername { get; set; }
        /// <summary>
        /// Management Uri of the Resource in External System. This URL can be the Arm Resource Id of Logic Apps, Function Apps or
        /// API Apps.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Management Uri of the Resource in External System. This URL can be the Arm Resource Id of Logic Apps, Function Apps or API Apps.",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        string ResourceId { get; set; }
        /// <summary>The client certificate id for the management endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The client certificate id for the management endpoint.",
        SerializedName = @"clientCertificateId",
        PossibleTypes = new [] { typeof(string) })]
        string ServiceFabricClusterClientCertificateId { get; set; }
        /// <summary>
        /// The client certificate thumbprint for the management endpoint. Will be ignored if certificatesIds are provided
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The client certificate thumbprint for the management endpoint. Will be ignored if certificatesIds are provided",
        SerializedName = @"clientCertificatethumbprint",
        PossibleTypes = new [] { typeof(string) })]
        string ServiceFabricClusterClientCertificatethumbprint { get; set; }
        /// <summary>The cluster management endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The cluster management endpoint.",
        SerializedName = @"managementEndpoints",
        PossibleTypes = new [] { typeof(string) })]
        string[] ServiceFabricClusterManagementEndpoint { get; set; }
        /// <summary>Maximum number of retries while attempting resolve the partition.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Maximum number of retries while attempting resolve the partition.",
        SerializedName = @"maxPartitionResolutionRetries",
        PossibleTypes = new [] { typeof(int) })]
        int? ServiceFabricClusterMaxPartitionResolutionRetry { get; set; }
        /// <summary>
        /// Thumbprints of certificates cluster management service uses for tls communication
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Thumbprints of certificates cluster management service uses for tls communication",
        SerializedName = @"serverCertificateThumbprints",
        PossibleTypes = new [] { typeof(string) })]
        string[] ServiceFabricClusterServerCertificateThumbprint { get; set; }
        /// <summary>Server X509 Certificate Names Collection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Server X509 Certificate Names Collection",
        SerializedName = @"serverX509Names",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IX509CertificateName) })]
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IX509CertificateName[] ServiceFabricClusterServerX509Name { get; set; }
        /// <summary>Backend Title.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Backend Title.",
        SerializedName = @"title",
        PossibleTypes = new [] { typeof(string) })]
        string Title { get; set; }
        /// <summary>
        /// Flag indicating whether SSL certificate chain validation should be done when using self-signed certificates for this backend
        /// host.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag indicating whether SSL certificate chain validation should be done when using self-signed certificates for this backend host.",
        SerializedName = @"validateCertificateChain",
        PossibleTypes = new [] { typeof(bool) })]
        bool? TlValidateCertificateChain { get; set; }
        /// <summary>
        /// Flag indicating whether SSL certificate name validation should be done when using self-signed certificates for this backend
        /// host.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Api.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag indicating whether SSL certificate name validation should be done when using self-signed certificates for this backend host.",
        SerializedName = @"validateCertificateName",
        PossibleTypes = new [] { typeof(bool) })]
        bool? TlValidateCertificateName { get; set; }

    }
    /// Backend entity base Parameter set.
    internal partial interface IBackendBaseParametersInternal

    {
        /// <summary>Authentication Parameter value.</summary>
        string AuthorizationParameter { get; set; }
        /// <summary>Authentication Scheme name.</summary>
        string AuthorizationScheme { get; set; }
        /// <summary>Backend Circuit Breaker Configuration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendCircuitBreaker CircuitBreaker { get; set; }
        /// <summary>The rules for tripping the backend.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.ICircuitBreakerRule[] CircuitBreakerRule { get; set; }
        /// <summary>Backend Credentials Contract Properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendCredentialsContract Credentials { get; set; }
        /// <summary>Authorization header authentication</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendAuthorizationHeaderCredentials CredentialsAuthorization { get; set; }
        /// <summary>
        /// List of Client Certificate Thumbprints. Will be ignored if certificatesIds are provided.
        /// </summary>
        string[] CredentialsCertificate { get; set; }
        /// <summary>List of Client Certificate Ids.</summary>
        string[] CredentialsCertificateId { get; set; }
        /// <summary>Header Parameter description.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendCredentialsContractHeader CredentialsHeader { get; set; }
        /// <summary>Query Parameter description.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendCredentialsContractQuery CredentialsQuery { get; set; }
        /// <summary>Backend Description.</summary>
        string Description { get; set; }
        /// <summary>Backend Properties contract</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendProperties Property { get; set; }
        /// <summary>Backend gateway Contract Properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendProxyContract Proxy { get; set; }
        /// <summary>Password to connect to the WebProxy Server</summary>
        string ProxyPassword { get; set; }
        /// <summary>
        /// WebProxy Server AbsoluteUri property which includes the entire URI stored in the Uri instance, including all fragments
        /// and query strings.
        /// </summary>
        string ProxyUrl { get; set; }
        /// <summary>Username to connect to the WebProxy server</summary>
        string ProxyUsername { get; set; }
        /// <summary>
        /// Management Uri of the Resource in External System. This URL can be the Arm Resource Id of Logic Apps, Function Apps or
        /// API Apps.
        /// </summary>
        string ResourceId { get; set; }
        /// <summary>Backend Service Fabric Cluster Properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendServiceFabricClusterProperties ServiceFabricCluster { get; set; }
        /// <summary>The client certificate id for the management endpoint.</summary>
        string ServiceFabricClusterClientCertificateId { get; set; }
        /// <summary>
        /// The client certificate thumbprint for the management endpoint. Will be ignored if certificatesIds are provided
        /// </summary>
        string ServiceFabricClusterClientCertificatethumbprint { get; set; }
        /// <summary>The cluster management endpoint.</summary>
        string[] ServiceFabricClusterManagementEndpoint { get; set; }
        /// <summary>Maximum number of retries while attempting resolve the partition.</summary>
        int? ServiceFabricClusterMaxPartitionResolutionRetry { get; set; }
        /// <summary>
        /// Thumbprints of certificates cluster management service uses for tls communication
        /// </summary>
        string[] ServiceFabricClusterServerCertificateThumbprint { get; set; }
        /// <summary>Server X509 Certificate Names Collection</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IX509CertificateName[] ServiceFabricClusterServerX509Name { get; set; }
        /// <summary>Backend Title.</summary>
        string Title { get; set; }
        /// <summary>Backend TLS Properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Api.Models.Api20230301Preview.IBackendTlsProperties Tl { get; set; }
        /// <summary>
        /// Flag indicating whether SSL certificate chain validation should be done when using self-signed certificates for this backend
        /// host.
        /// </summary>
        bool? TlValidateCertificateChain { get; set; }
        /// <summary>
        /// Flag indicating whether SSL certificate name validation should be done when using self-signed certificates for this backend
        /// host.
        /// </summary>
        bool? TlValidateCertificateName { get; set; }

    }
}