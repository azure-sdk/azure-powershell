// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ContainerServiceFleet.Support
{

    /// <summary>The node image upgrade type.</summary>
    public partial struct AutoUpgradeNodeImageSelectionType :
        System.IEquatable<AutoUpgradeNodeImageSelectionType>
    {
        /// <summary>
        /// The image versions to upgrade nodes to are selected as described below: for each node pool in managed clusters affected
        /// by the update run, the system selects the latest image version such that it is available across all other node pools (in
        /// all other clusters) of the same image type. As a result, all node pools of the same image type will be upgraded to the
        /// same image version. For example, if the latest image version for image type 'AKSUbuntu-1804gen2containerd' is 'AKSUbuntu-1804gen2containerd-2021.10.12'
        /// for a node pool in cluster A in region X, and is 'AKSUbuntu-1804gen2containerd-2021.10.17' for a node pool in cluster
        /// B in region Y, the system will upgrade both node pools to image version 'AKSUbuntu-1804gen2containerd-2021.10.12'.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.ContainerServiceFleet.Support.AutoUpgradeNodeImageSelectionType Consistent = @"Consistent";

        /// <summary>
        /// Use the latest image version when upgrading nodes. Clusters may use different image versions (e.g., 'AKSUbuntu-1804gen2containerd-2021.10.12'
        /// and 'AKSUbuntu-1804gen2containerd-2021.10.19') because, for example, the latest available version is different in different
        /// regions.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.ContainerServiceFleet.Support.AutoUpgradeNodeImageSelectionType Latest = @"Latest";

        /// <summary>
        /// the value for an instance of the <see cref="AutoUpgradeNodeImageSelectionType" /> Enum.
        /// </summary>
        private string _value { get; set; }

        /// <summary>
        /// Creates an instance of the <see cref="AutoUpgradeNodeImageSelectionType"/> Enum class.
        /// </summary>
        /// <param name="underlyingValue">the value to create an instance for.</param>
        private AutoUpgradeNodeImageSelectionType(string underlyingValue)
        {
            this._value = underlyingValue;
        }

        /// <summary>Conversion from arbitrary object to AutoUpgradeNodeImageSelectionType</summary>
        /// <param name="value">the value to convert to an instance of <see cref="AutoUpgradeNodeImageSelectionType" />.</param>
        internal static object CreateFrom(object value)
        {
            return new AutoUpgradeNodeImageSelectionType(global::System.Convert.ToString(value));
        }

        /// <summary>Compares values of enum type AutoUpgradeNodeImageSelectionType</summary>
        /// <param name="e">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public bool Equals(Microsoft.Azure.PowerShell.Cmdlets.ContainerServiceFleet.Support.AutoUpgradeNodeImageSelectionType e)
        {
            return _value.Equals(e._value);
        }

        /// <summary>
        /// Compares values of enum type AutoUpgradeNodeImageSelectionType (override for Object)
        /// </summary>
        /// <param name="obj">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public override bool Equals(object obj)
        {
            return obj is AutoUpgradeNodeImageSelectionType && Equals((AutoUpgradeNodeImageSelectionType)obj);
        }

        /// <summary>Returns hashCode for enum AutoUpgradeNodeImageSelectionType</summary>
        /// <returns>The hashCode of the value</returns>
        public override int GetHashCode()
        {
            return this._value.GetHashCode();
        }

        /// <summary>Returns string representation for AutoUpgradeNodeImageSelectionType</summary>
        /// <returns>A string for this value.</returns>
        public override string ToString()
        {
            return this._value;
        }

        /// <summary>Implicit operator to convert string to AutoUpgradeNodeImageSelectionType</summary>
        /// <param name="value">the value to convert to an instance of <see cref="AutoUpgradeNodeImageSelectionType" />.</param>

        public static implicit operator AutoUpgradeNodeImageSelectionType(string value)
        {
            return new AutoUpgradeNodeImageSelectionType(value);
        }

        /// <summary>Implicit operator to convert AutoUpgradeNodeImageSelectionType to string</summary>
        /// <param name="e">the value to convert to an instance of <see cref="AutoUpgradeNodeImageSelectionType" />.</param>

        public static implicit operator string(Microsoft.Azure.PowerShell.Cmdlets.ContainerServiceFleet.Support.AutoUpgradeNodeImageSelectionType e)
        {
            return e._value;
        }

        /// <summary>Overriding != operator for enum AutoUpgradeNodeImageSelectionType</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are not equal to the same value</returns>
        public static bool operator !=(Microsoft.Azure.PowerShell.Cmdlets.ContainerServiceFleet.Support.AutoUpgradeNodeImageSelectionType e1, Microsoft.Azure.PowerShell.Cmdlets.ContainerServiceFleet.Support.AutoUpgradeNodeImageSelectionType e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>Overriding == operator for enum AutoUpgradeNodeImageSelectionType</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public static bool operator ==(Microsoft.Azure.PowerShell.Cmdlets.ContainerServiceFleet.Support.AutoUpgradeNodeImageSelectionType e1, Microsoft.Azure.PowerShell.Cmdlets.ContainerServiceFleet.Support.AutoUpgradeNodeImageSelectionType e2)
        {
            return e2.Equals(e1);
        }
    }
}