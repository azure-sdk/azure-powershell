// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support
{

    /// <summary>
    /// The default is Unmanaged, but may change to either NodeImage or SecurityPatch at GA.
    /// </summary>
    public partial struct NodeOSUpgradeChannel :
        System.IEquatable<NodeOSUpgradeChannel>
    {
        /// <summary>
        /// AKS will update the nodes with a newly patched VHD containing security fixes and bugfixes on a weekly cadence. With the
        /// VHD update machines will be rolling reimaged to that VHD following maintenance windows and surge settings. No extra VHD
        /// cost is incurred when choosing this option as AKS hosts the images.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.NodeOSUpgradeChannel NodeImage = @"NodeImage";

        /// <summary>
        /// No attempt to update your machines OS will be made either by OS or by rolling VHDs. This means you are responsible for
        /// your security updates
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.NodeOSUpgradeChannel None = @"None";

        /// <summary>
        /// AKS downloads and updates the nodes with tested security updates. These updates honor the maintenance window settings
        /// and produce a new VHD that is used on new nodes. On some occasions it's not possible to apply the updates in place, in
        /// such cases the existing nodes will also be re-imaged to the newly produced VHD in order to apply the changes. This option
        /// incurs an extra cost of hosting the new Security Patch VHDs in your resource group for just in time consumption.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.NodeOSUpgradeChannel SecurityPatch = @"SecurityPatch";

        /// <summary>
        /// OS updates will be applied automatically through the OS built-in patching infrastructure. Newly scaled in machines will
        /// be unpatched initially, and will be patched at some later time by the OS's infrastructure. Behavior of this option depends
        /// on the OS in question. Ubuntu and Mariner apply security patches through unattended upgrade roughly once a day around
        /// 06:00 UTC. Windows does not apply security patches automatically and so for them this option is equivalent to None till
        /// further notice
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.NodeOSUpgradeChannel Unmanaged = @"Unmanaged";

        /// <summary>the value for an instance of the <see cref="NodeOSUpgradeChannel" /> Enum.</summary>
        private string _value { get; set; }

        /// <summary>Conversion from arbitrary object to NodeOSUpgradeChannel</summary>
        /// <param name="value">the value to convert to an instance of <see cref="NodeOSUpgradeChannel" />.</param>
        internal static object CreateFrom(object value)
        {
            return new NodeOSUpgradeChannel(global::System.Convert.ToString(value));
        }

        /// <summary>Compares values of enum type NodeOSUpgradeChannel</summary>
        /// <param name="e">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public bool Equals(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.NodeOSUpgradeChannel e)
        {
            return _value.Equals(e._value);
        }

        /// <summary>Compares values of enum type NodeOSUpgradeChannel (override for Object)</summary>
        /// <param name="obj">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public override bool Equals(object obj)
        {
            return obj is NodeOSUpgradeChannel && Equals((NodeOSUpgradeChannel)obj);
        }

        /// <summary>Returns hashCode for enum NodeOSUpgradeChannel</summary>
        /// <returns>The hashCode of the value</returns>
        public override int GetHashCode()
        {
            return this._value.GetHashCode();
        }

        /// <summary>Creates an instance of the <see cref="NodeOSUpgradeChannel"/> Enum class.</summary>
        /// <param name="underlyingValue">the value to create an instance for.</param>
        private NodeOSUpgradeChannel(string underlyingValue)
        {
            this._value = underlyingValue;
        }

        /// <summary>Returns string representation for NodeOSUpgradeChannel</summary>
        /// <returns>A string for this value.</returns>
        public override string ToString()
        {
            return this._value;
        }

        /// <summary>Implicit operator to convert string to NodeOSUpgradeChannel</summary>
        /// <param name="value">the value to convert to an instance of <see cref="NodeOSUpgradeChannel" />.</param>

        public static implicit operator NodeOSUpgradeChannel(string value)
        {
            return new NodeOSUpgradeChannel(value);
        }

        /// <summary>Implicit operator to convert NodeOSUpgradeChannel to string</summary>
        /// <param name="e">the value to convert to an instance of <see cref="NodeOSUpgradeChannel" />.</param>

        public static implicit operator string(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.NodeOSUpgradeChannel e)
        {
            return e._value;
        }

        /// <summary>Overriding != operator for enum NodeOSUpgradeChannel</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are not equal to the same value</returns>
        public static bool operator !=(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.NodeOSUpgradeChannel e1, Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.NodeOSUpgradeChannel e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>Overriding == operator for enum NodeOSUpgradeChannel</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public static bool operator ==(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.NodeOSUpgradeChannel e1, Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.NodeOSUpgradeChannel e2)
        {
            return e2.Equals(e1);
        }
    }
}