// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.Extensions;

    /// <summary>Properties used to configure planned maintenance for a Managed Cluster.</summary>
    public partial class MaintenanceConfigurationProperties :
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceConfigurationProperties,
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceConfigurationPropertiesInternal
    {

        /// <summary>The date of the month.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.PropertyOrigin.Inlined)]
        public int? AbsoluteMonthlyDayOfMonth { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).AbsoluteMonthlyDayOfMonth; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).AbsoluteMonthlyDayOfMonth = value ?? default(int); }

        /// <summary>Specifies the number of months between each set of occurrences.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.PropertyOrigin.Inlined)]
        public int? AbsoluteMonthlyIntervalMonth { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).AbsoluteMonthlyIntervalMonth; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).AbsoluteMonthlyIntervalMonth = value ?? default(int); }

        /// <summary>Specifies the number of days between each set of occurrences.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.PropertyOrigin.Inlined)]
        public int? DailyIntervalDay { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).DailyIntervalDay; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).DailyIntervalDay = value ?? default(int); }

        /// <summary>Backing field for <see cref="MaintenanceWindow" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindow _maintenanceWindow;

        /// <summary>Maintenance window for the maintenance configuration.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindow MaintenanceWindow { get => (this._maintenanceWindow = this._maintenanceWindow ?? new Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.MaintenanceWindow()); set => this._maintenanceWindow = value; }

        /// <summary>Length of maintenance window range from 4 to 24 hours.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.PropertyOrigin.Inlined)]
        public int? MaintenanceWindowDurationHour { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).DurationHour; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).DurationHour = value ?? default(int); }

        /// <summary>
        /// Date ranges on which upgrade is not allowed. 'utcOffset' applies to this field. For example, with 'utcOffset: +02:00'
        /// and 'dateSpan' being '2022-12-23' to '2023-01-03', maintenance will be blocked from '2022-12-22 22:00' to '2023-01-03
        /// 22:00' in UTC time.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IDateSpan[] MaintenanceWindowNotAllowedDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).NotAllowedDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).NotAllowedDate = value ?? null /* arrayOf */; }

        /// <summary>
        /// The date the maintenance window activates. If the current date is before this date, the maintenance window is inactive
        /// and will not be used for upgrades. If not specified, the maintenance window will be active right away.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.PropertyOrigin.Inlined)]
        public global::System.DateTime? MaintenanceWindowStartDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).StartDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).StartDate = value ?? default(global::System.DateTime); }

        /// <summary>
        /// The start time of the maintenance window. Accepted values are from '00:00' to '23:59'. 'utcOffset' applies to this field.
        /// For example: '02:00' with 'utcOffset: +02:00' means UTC time '00:00'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.PropertyOrigin.Inlined)]
        public string MaintenanceWindowStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).StartTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).StartTime = value ?? null; }

        /// <summary>
        /// The UTC offset in format +/-HH:mm. For example, '+05:30' for IST and '-07:00' for PST. If not specified, the default is
        /// '+00:00'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.PropertyOrigin.Inlined)]
        public string MaintenanceWindowUtcOffset { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).UtcOffset; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).UtcOffset = value ?? null; }

        /// <summary>Internal Acessors for MaintenanceWindow</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindow Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceConfigurationPropertiesInternal.MaintenanceWindow { get => (this._maintenanceWindow = this._maintenanceWindow ?? new Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.MaintenanceWindow()); set { {_maintenanceWindow = value;} } }

        /// <summary>Internal Acessors for MaintenanceWindowSchedule</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.ISchedule Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceConfigurationPropertiesInternal.MaintenanceWindowSchedule { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).Schedule; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).Schedule = value; }

        /// <summary>Internal Acessors for ScheduleAbsoluteMonthly</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IAbsoluteMonthlySchedule Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceConfigurationPropertiesInternal.ScheduleAbsoluteMonthly { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).ScheduleAbsoluteMonthly; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).ScheduleAbsoluteMonthly = value; }

        /// <summary>Internal Acessors for ScheduleDaily</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IDailySchedule Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceConfigurationPropertiesInternal.ScheduleDaily { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).ScheduleDaily; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).ScheduleDaily = value; }

        /// <summary>Internal Acessors for ScheduleRelativeMonthly</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IRelativeMonthlySchedule Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceConfigurationPropertiesInternal.ScheduleRelativeMonthly { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).ScheduleRelativeMonthly; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).ScheduleRelativeMonthly = value; }

        /// <summary>Internal Acessors for ScheduleWeekly</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IWeeklySchedule Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceConfigurationPropertiesInternal.ScheduleWeekly { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).ScheduleWeekly; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).ScheduleWeekly = value; }

        /// <summary>Backing field for <see cref="NotAllowedTime" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.ITimeSpan[] _notAllowedTime;

        /// <summary>Time slots on which upgrade is not allowed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.ITimeSpan[] NotAllowedTime { get => this._notAllowedTime; set => this._notAllowedTime = value; }

        /// <summary>Specifies on which day of the week the maintenance occurs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.WeekDay? RelativeMonthlyDayOfWeek { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).RelativeMonthlyDayOfWeek; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).RelativeMonthlyDayOfWeek = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.WeekDay)""); }

        /// <summary>Specifies the number of months between each set of occurrences.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.PropertyOrigin.Inlined)]
        public int? RelativeMonthlyIntervalMonth { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).RelativeMonthlyIntervalMonth; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).RelativeMonthlyIntervalMonth = value ?? default(int); }

        /// <summary>Specifies on which week of the month the dayOfWeek applies.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.Type? RelativeMonthlyWeekIndex { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).RelativeMonthlyWeekIndex; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).RelativeMonthlyWeekIndex = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.Type)""); }

        /// <summary>Backing field for <see cref="TimeInWeek" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.ITimeInWeek[] _timeInWeek;

        /// <summary>
        /// If two array entries specify the same day of the week, the applied configuration is the union of times in both entries.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.ITimeInWeek[] TimeInWeek { get => this._timeInWeek; set => this._timeInWeek = value; }

        /// <summary>Specifies on which day of the week the maintenance occurs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.WeekDay? WeeklyDayOfWeek { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).WeeklyDayOfWeek; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).WeeklyDayOfWeek = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.WeekDay)""); }

        /// <summary>Specifies the number of weeks between each set of occurrences.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.PropertyOrigin.Inlined)]
        public int? WeeklyIntervalWeek { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).WeeklyIntervalWeek; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindowInternal)MaintenanceWindow).WeeklyIntervalWeek = value ?? default(int); }

        /// <summary>Creates an new <see cref="MaintenanceConfigurationProperties" /> instance.</summary>
        public MaintenanceConfigurationProperties()
        {

        }
    }
    /// Properties used to configure planned maintenance for a Managed Cluster.
    public partial interface IMaintenanceConfigurationProperties :
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.IJsonSerializable
    {
        /// <summary>The date of the month.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The date of the month.",
        SerializedName = @"dayOfMonth",
        PossibleTypes = new [] { typeof(int) })]
        int? AbsoluteMonthlyDayOfMonth { get; set; }
        /// <summary>Specifies the number of months between each set of occurrences.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the number of months between each set of occurrences.",
        SerializedName = @"intervalMonths",
        PossibleTypes = new [] { typeof(int) })]
        int? AbsoluteMonthlyIntervalMonth { get; set; }
        /// <summary>Specifies the number of days between each set of occurrences.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the number of days between each set of occurrences.",
        SerializedName = @"intervalDays",
        PossibleTypes = new [] { typeof(int) })]
        int? DailyIntervalDay { get; set; }
        /// <summary>Length of maintenance window range from 4 to 24 hours.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Length of maintenance window range from 4 to 24 hours.",
        SerializedName = @"durationHours",
        PossibleTypes = new [] { typeof(int) })]
        int? MaintenanceWindowDurationHour { get; set; }
        /// <summary>
        /// Date ranges on which upgrade is not allowed. 'utcOffset' applies to this field. For example, with 'utcOffset: +02:00'
        /// and 'dateSpan' being '2022-12-23' to '2023-01-03', maintenance will be blocked from '2022-12-22 22:00' to '2023-01-03
        /// 22:00' in UTC time.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Date ranges on which upgrade is not allowed. 'utcOffset' applies to this field. For example, with 'utcOffset: +02:00' and 'dateSpan' being '2022-12-23' to '2023-01-03', maintenance will be blocked from '2022-12-22 22:00' to '2023-01-03 22:00' in UTC time.",
        SerializedName = @"notAllowedDates",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IDateSpan) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IDateSpan[] MaintenanceWindowNotAllowedDate { get; set; }
        /// <summary>
        /// The date the maintenance window activates. If the current date is before this date, the maintenance window is inactive
        /// and will not be used for upgrades. If not specified, the maintenance window will be active right away.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The date the maintenance window activates. If the current date is before this date, the maintenance window is inactive and will not be used for upgrades. If not specified, the maintenance window will be active right away.",
        SerializedName = @"startDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? MaintenanceWindowStartDate { get; set; }
        /// <summary>
        /// The start time of the maintenance window. Accepted values are from '00:00' to '23:59'. 'utcOffset' applies to this field.
        /// For example: '02:00' with 'utcOffset: +02:00' means UTC time '00:00'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The start time of the maintenance window. Accepted values are from '00:00' to '23:59'. 'utcOffset' applies to this field. For example: '02:00' with 'utcOffset: +02:00' means UTC time '00:00'.",
        SerializedName = @"startTime",
        PossibleTypes = new [] { typeof(string) })]
        string MaintenanceWindowStartTime { get; set; }
        /// <summary>
        /// The UTC offset in format +/-HH:mm. For example, '+05:30' for IST and '-07:00' for PST. If not specified, the default is
        /// '+00:00'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The UTC offset in format +/-HH:mm. For example, '+05:30' for IST and '-07:00' for PST. If not specified, the default is '+00:00'.",
        SerializedName = @"utcOffset",
        PossibleTypes = new [] { typeof(string) })]
        string MaintenanceWindowUtcOffset { get; set; }
        /// <summary>Time slots on which upgrade is not allowed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Time slots on which upgrade is not allowed.",
        SerializedName = @"notAllowedTime",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.ITimeSpan) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.ITimeSpan[] NotAllowedTime { get; set; }
        /// <summary>Specifies on which day of the week the maintenance occurs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies on which day of the week the maintenance occurs.",
        SerializedName = @"dayOfWeek",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.WeekDay) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.WeekDay? RelativeMonthlyDayOfWeek { get; set; }
        /// <summary>Specifies the number of months between each set of occurrences.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the number of months between each set of occurrences.",
        SerializedName = @"intervalMonths",
        PossibleTypes = new [] { typeof(int) })]
        int? RelativeMonthlyIntervalMonth { get; set; }
        /// <summary>Specifies on which week of the month the dayOfWeek applies.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies on which week of the month the dayOfWeek applies.",
        SerializedName = @"weekIndex",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.Type) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.Type? RelativeMonthlyWeekIndex { get; set; }
        /// <summary>
        /// If two array entries specify the same day of the week, the applied configuration is the union of times in both entries.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If two array entries specify the same day of the week, the applied configuration is the union of times in both entries.",
        SerializedName = @"timeInWeek",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.ITimeInWeek) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.ITimeInWeek[] TimeInWeek { get; set; }
        /// <summary>Specifies on which day of the week the maintenance occurs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies on which day of the week the maintenance occurs.",
        SerializedName = @"dayOfWeek",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.WeekDay) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.WeekDay? WeeklyDayOfWeek { get; set; }
        /// <summary>Specifies the number of weeks between each set of occurrences.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the number of weeks between each set of occurrences.",
        SerializedName = @"intervalWeeks",
        PossibleTypes = new [] { typeof(int) })]
        int? WeeklyIntervalWeek { get; set; }

    }
    /// Properties used to configure planned maintenance for a Managed Cluster.
    internal partial interface IMaintenanceConfigurationPropertiesInternal

    {
        /// <summary>The date of the month.</summary>
        int? AbsoluteMonthlyDayOfMonth { get; set; }
        /// <summary>Specifies the number of months between each set of occurrences.</summary>
        int? AbsoluteMonthlyIntervalMonth { get; set; }
        /// <summary>Specifies the number of days between each set of occurrences.</summary>
        int? DailyIntervalDay { get; set; }
        /// <summary>Maintenance window for the maintenance configuration.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IMaintenanceWindow MaintenanceWindow { get; set; }
        /// <summary>Length of maintenance window range from 4 to 24 hours.</summary>
        int? MaintenanceWindowDurationHour { get; set; }
        /// <summary>
        /// Date ranges on which upgrade is not allowed. 'utcOffset' applies to this field. For example, with 'utcOffset: +02:00'
        /// and 'dateSpan' being '2022-12-23' to '2023-01-03', maintenance will be blocked from '2022-12-22 22:00' to '2023-01-03
        /// 22:00' in UTC time.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IDateSpan[] MaintenanceWindowNotAllowedDate { get; set; }
        /// <summary>Recurrence schedule for the maintenance window.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.ISchedule MaintenanceWindowSchedule { get; set; }
        /// <summary>
        /// The date the maintenance window activates. If the current date is before this date, the maintenance window is inactive
        /// and will not be used for upgrades. If not specified, the maintenance window will be active right away.
        /// </summary>
        global::System.DateTime? MaintenanceWindowStartDate { get; set; }
        /// <summary>
        /// The start time of the maintenance window. Accepted values are from '00:00' to '23:59'. 'utcOffset' applies to this field.
        /// For example: '02:00' with 'utcOffset: +02:00' means UTC time '00:00'.
        /// </summary>
        string MaintenanceWindowStartTime { get; set; }
        /// <summary>
        /// The UTC offset in format +/-HH:mm. For example, '+05:30' for IST and '-07:00' for PST. If not specified, the default is
        /// '+00:00'.
        /// </summary>
        string MaintenanceWindowUtcOffset { get; set; }
        /// <summary>Time slots on which upgrade is not allowed.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.ITimeSpan[] NotAllowedTime { get; set; }
        /// <summary>Specifies on which day of the week the maintenance occurs.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.WeekDay? RelativeMonthlyDayOfWeek { get; set; }
        /// <summary>Specifies the number of months between each set of occurrences.</summary>
        int? RelativeMonthlyIntervalMonth { get; set; }
        /// <summary>Specifies on which week of the month the dayOfWeek applies.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.Type? RelativeMonthlyWeekIndex { get; set; }
        /// <summary>
        /// For schedules like: 'recur every month on the 15th' or 'recur every 3 months on the 20th'.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IAbsoluteMonthlySchedule ScheduleAbsoluteMonthly { get; set; }
        /// <summary>For schedules like: 'recur every day' or 'recur every 3 days'.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IDailySchedule ScheduleDaily { get; set; }
        /// <summary>
        /// For schedules like: 'recur every month on the first Monday' or 'recur every 3 months on last Friday'.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IRelativeMonthlySchedule ScheduleRelativeMonthly { get; set; }
        /// <summary>For schedules like: 'recur every Monday' or 'recur every 3 weeks on Wednesday'.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.IWeeklySchedule ScheduleWeekly { get; set; }
        /// <summary>
        /// If two array entries specify the same day of the week, the applied configuration is the union of times in both entries.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20250201.ITimeInWeek[] TimeInWeek { get; set; }
        /// <summary>Specifies on which day of the week the maintenance occurs.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.WeekDay? WeeklyDayOfWeek { get; set; }
        /// <summary>Specifies the number of weeks between each set of occurrences.</summary>
        int? WeeklyIntervalWeek { get; set; }

    }
}