// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20231001
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.Extensions;

    /// <summary>Settings for overrides when upgrading a cluster.</summary>
    public partial class UpgradeOverrideSettings :
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20231001.IUpgradeOverrideSettings,
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api20231001.IUpgradeOverrideSettingsInternal
    {

        /// <summary>Backing field for <see cref="ForceUpgrade" /> property.</summary>
        private bool? _forceUpgrade;

        /// <summary>
        /// Whether to force upgrade the cluster. Note that this option instructs upgrade operation to bypass upgrade protections
        /// such as checking for deprecated API usage. Enable this option only with caution.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.PropertyOrigin.Owned)]
        public bool? ForceUpgrade { get => this._forceUpgrade; set => this._forceUpgrade = value; }

        /// <summary>Backing field for <see cref="Until" /> property.</summary>
        private global::System.DateTime? _until;

        /// <summary>
        /// Until when the overrides are effective. Note that this only matches the start time of an upgrade, and the effectiveness
        /// won't change once an upgrade starts even if the `until` expires as upgrade proceeds. This field is not set by default.
        /// It must be set for the overrides to take effect.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.PropertyOrigin.Owned)]
        public global::System.DateTime? Until { get => this._until; set => this._until = value; }

        /// <summary>Creates an new <see cref="UpgradeOverrideSettings" /> instance.</summary>
        public UpgradeOverrideSettings()
        {

        }
    }
    /// Settings for overrides when upgrading a cluster.
    public partial interface IUpgradeOverrideSettings :
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Whether to force upgrade the cluster. Note that this option instructs upgrade operation to bypass upgrade protections
        /// such as checking for deprecated API usage. Enable this option only with caution.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether to force upgrade the cluster. Note that this option instructs upgrade operation to bypass upgrade protections such as checking for deprecated API usage. Enable this option only with caution.",
        SerializedName = @"forceUpgrade",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ForceUpgrade { get; set; }
        /// <summary>
        /// Until when the overrides are effective. Note that this only matches the start time of an upgrade, and the effectiveness
        /// won't change once an upgrade starts even if the `until` expires as upgrade proceeds. This field is not set by default.
        /// It must be set for the overrides to take effect.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Until when the overrides are effective. Note that this only matches the start time of an upgrade, and the effectiveness won't change once an upgrade starts even if the `until` expires as upgrade proceeds. This field is not set by default. It must be set for the overrides to take effect.",
        SerializedName = @"until",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? Until { get; set; }

    }
    /// Settings for overrides when upgrading a cluster.
    internal partial interface IUpgradeOverrideSettingsInternal

    {
        /// <summary>
        /// Whether to force upgrade the cluster. Note that this option instructs upgrade operation to bypass upgrade protections
        /// such as checking for deprecated API usage. Enable this option only with caution.
        /// </summary>
        bool? ForceUpgrade { get; set; }
        /// <summary>
        /// Until when the overrides are effective. Note that this only matches the start time of an upgrade, and the effectiveness
        /// won't change once an upgrade starts even if the `until` expires as upgrade proceeds. This field is not set by default.
        /// It must be set for the overrides to take effect.
        /// </summary>
        global::System.DateTime? Until { get; set; }

    }
}