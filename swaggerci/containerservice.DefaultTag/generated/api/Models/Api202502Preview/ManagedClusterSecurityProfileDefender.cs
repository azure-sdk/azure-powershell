// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202502Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.Extensions;

    /// <summary>Microsoft Defender settings for the security profile.</summary>
    public partial class ManagedClusterSecurityProfileDefender :
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202502Preview.IManagedClusterSecurityProfileDefender,
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202502Preview.IManagedClusterSecurityProfileDefenderInternal
    {

        /// <summary>Backing field for <see cref="LogAnalyticsWorkspaceResourceId" /> property.</summary>
        private string _logAnalyticsWorkspaceResourceId;

        /// <summary>
        /// Resource ID of the Log Analytics workspace to be associated with Microsoft Defender. When Microsoft Defender is enabled,
        /// this field is required and must be a valid workspace resource ID. When Microsoft Defender is disabled, leave the field
        /// empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.PropertyOrigin.Owned)]
        public string LogAnalyticsWorkspaceResourceId { get => this._logAnalyticsWorkspaceResourceId; set => this._logAnalyticsWorkspaceResourceId = value; }

        /// <summary>Internal Acessors for SecurityGating</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202502Preview.IManagedClusterSecurityProfileDefenderSecurityGating Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202502Preview.IManagedClusterSecurityProfileDefenderInternal.SecurityGating { get => (this._securityGating = this._securityGating ?? new Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202502Preview.ManagedClusterSecurityProfileDefenderSecurityGating()); set { {_securityGating = value;} } }

        /// <summary>Internal Acessors for SecurityMonitoring</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202502Preview.IManagedClusterSecurityProfileDefenderSecurityMonitoring Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202502Preview.IManagedClusterSecurityProfileDefenderInternal.SecurityMonitoring { get => (this._securityMonitoring = this._securityMonitoring ?? new Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202502Preview.ManagedClusterSecurityProfileDefenderSecurityMonitoring()); set { {_securityMonitoring = value;} } }

        /// <summary>Backing field for <see cref="SecurityGating" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202502Preview.IManagedClusterSecurityProfileDefenderSecurityGating _securityGating;

        /// <summary>
        /// Microsoft Defender settings for security gating, validates container images eligibility for deployment based on Defender
        /// for Containers security findings. Using Admission Controller, it either audits or prevents the deployment of images that
        /// do not meet security standards.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202502Preview.IManagedClusterSecurityProfileDefenderSecurityGating SecurityGating { get => (this._securityGating = this._securityGating ?? new Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202502Preview.ManagedClusterSecurityProfileDefenderSecurityGating()); set => this._securityGating = value; }

        /// <summary>
        /// In use only while registry access granted by secret rather than managed identity. Set whether to grant the Defender gating
        /// agent access to the cluster's secrets for pulling images from registries. If secret access is denied and the registry
        /// requires pull secrets, the add-on will not perform any image validation. Default value is false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.PropertyOrigin.Inlined)]
        public bool? SecurityGatingAllowSecretAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202502Preview.IManagedClusterSecurityProfileDefenderSecurityGatingInternal)SecurityGating).AllowSecretAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202502Preview.IManagedClusterSecurityProfileDefenderSecurityGatingInternal)SecurityGating).AllowSecretAccess = value ?? default(bool); }

        /// <summary>
        /// Whether to enable Defender security gating. When enabled, the gating feature will scan container images and audit or block
        /// the deployment of images that do not meet security standards according to the configured security rules.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.PropertyOrigin.Inlined)]
        public bool? SecurityGatingEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202502Preview.IManagedClusterSecurityProfileDefenderSecurityGatingInternal)SecurityGating).Enabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202502Preview.IManagedClusterSecurityProfileDefenderSecurityGatingInternal)SecurityGating).Enabled = value ?? default(bool); }

        /// <summary>
        /// List of identities that the admission controller will make use of in order to pull security artifacts from the registry.
        /// These are the same identities used by the cluster to pull container images. Each identity provided should have federated
        /// identity credential attached to it.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202502Preview.IManagedClusterSecurityProfileDefenderSecurityGatingIdentitiesItem[] SecurityGatingIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202502Preview.IManagedClusterSecurityProfileDefenderSecurityGatingInternal)SecurityGating).Identity; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202502Preview.IManagedClusterSecurityProfileDefenderSecurityGatingInternal)SecurityGating).Identity = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="SecurityMonitoring" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202502Preview.IManagedClusterSecurityProfileDefenderSecurityMonitoring _securityMonitoring;

        /// <summary>
        /// Microsoft Defender threat detection for Cloud settings for the security profile.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202502Preview.IManagedClusterSecurityProfileDefenderSecurityMonitoring SecurityMonitoring { get => (this._securityMonitoring = this._securityMonitoring ?? new Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202502Preview.ManagedClusterSecurityProfileDefenderSecurityMonitoring()); set => this._securityMonitoring = value; }

        /// <summary>Whether to enable Defender threat detection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.PropertyOrigin.Inlined)]
        public bool? SecurityMonitoringEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202502Preview.IManagedClusterSecurityProfileDefenderSecurityMonitoringInternal)SecurityMonitoring).Enabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202502Preview.IManagedClusterSecurityProfileDefenderSecurityMonitoringInternal)SecurityMonitoring).Enabled = value ?? default(bool); }

        /// <summary>Creates an new <see cref="ManagedClusterSecurityProfileDefender" /> instance.</summary>
        public ManagedClusterSecurityProfileDefender()
        {

        }
    }
    /// Microsoft Defender settings for the security profile.
    public partial interface IManagedClusterSecurityProfileDefender :
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Resource ID of the Log Analytics workspace to be associated with Microsoft Defender. When Microsoft Defender is enabled,
        /// this field is required and must be a valid workspace resource ID. When Microsoft Defender is disabled, leave the field
        /// empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource ID of the Log Analytics workspace to be associated with Microsoft Defender. When Microsoft Defender is enabled, this field is required and must be a valid workspace resource ID. When Microsoft Defender is disabled, leave the field empty.",
        SerializedName = @"logAnalyticsWorkspaceResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string LogAnalyticsWorkspaceResourceId { get; set; }
        /// <summary>
        /// In use only while registry access granted by secret rather than managed identity. Set whether to grant the Defender gating
        /// agent access to the cluster's secrets for pulling images from registries. If secret access is denied and the registry
        /// requires pull secrets, the add-on will not perform any image validation. Default value is false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"In use only while registry access granted by secret rather than managed identity. Set whether to grant the Defender gating agent access to the cluster's secrets for pulling images from registries. If secret access is denied and the registry requires pull secrets, the add-on will not perform any image validation. Default value is false.",
        SerializedName = @"allowSecretAccess",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SecurityGatingAllowSecretAccess { get; set; }
        /// <summary>
        /// Whether to enable Defender security gating. When enabled, the gating feature will scan container images and audit or block
        /// the deployment of images that do not meet security standards according to the configured security rules.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether to enable Defender security gating. When enabled, the gating feature will scan container images and audit or block the deployment of images that do not meet security standards according to the configured security rules.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SecurityGatingEnabled { get; set; }
        /// <summary>
        /// List of identities that the admission controller will make use of in order to pull security artifacts from the registry.
        /// These are the same identities used by the cluster to pull container images. Each identity provided should have federated
        /// identity credential attached to it.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of identities that the admission controller will make use of in order to pull security artifacts from the registry. These are the same identities used by the cluster to pull container images. Each identity provided should have federated identity credential attached to it.",
        SerializedName = @"identities",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202502Preview.IManagedClusterSecurityProfileDefenderSecurityGatingIdentitiesItem) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202502Preview.IManagedClusterSecurityProfileDefenderSecurityGatingIdentitiesItem[] SecurityGatingIdentity { get; set; }
        /// <summary>Whether to enable Defender threat detection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether to enable Defender threat detection",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SecurityMonitoringEnabled { get; set; }

    }
    /// Microsoft Defender settings for the security profile.
    internal partial interface IManagedClusterSecurityProfileDefenderInternal

    {
        /// <summary>
        /// Resource ID of the Log Analytics workspace to be associated with Microsoft Defender. When Microsoft Defender is enabled,
        /// this field is required and must be a valid workspace resource ID. When Microsoft Defender is disabled, leave the field
        /// empty.
        /// </summary>
        string LogAnalyticsWorkspaceResourceId { get; set; }
        /// <summary>
        /// Microsoft Defender settings for security gating, validates container images eligibility for deployment based on Defender
        /// for Containers security findings. Using Admission Controller, it either audits or prevents the deployment of images that
        /// do not meet security standards.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202502Preview.IManagedClusterSecurityProfileDefenderSecurityGating SecurityGating { get; set; }
        /// <summary>
        /// In use only while registry access granted by secret rather than managed identity. Set whether to grant the Defender gating
        /// agent access to the cluster's secrets for pulling images from registries. If secret access is denied and the registry
        /// requires pull secrets, the add-on will not perform any image validation. Default value is false.
        /// </summary>
        bool? SecurityGatingAllowSecretAccess { get; set; }
        /// <summary>
        /// Whether to enable Defender security gating. When enabled, the gating feature will scan container images and audit or block
        /// the deployment of images that do not meet security standards according to the configured security rules.
        /// </summary>
        bool? SecurityGatingEnabled { get; set; }
        /// <summary>
        /// List of identities that the admission controller will make use of in order to pull security artifacts from the registry.
        /// These are the same identities used by the cluster to pull container images. Each identity provided should have federated
        /// identity credential attached to it.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202502Preview.IManagedClusterSecurityProfileDefenderSecurityGatingIdentitiesItem[] SecurityGatingIdentity { get; set; }
        /// <summary>
        /// Microsoft Defender threat detection for Cloud settings for the security profile.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202502Preview.IManagedClusterSecurityProfileDefenderSecurityMonitoring SecurityMonitoring { get; set; }
        /// <summary>Whether to enable Defender threat detection</summary>
        bool? SecurityMonitoringEnabled { get; set; }

    }
}