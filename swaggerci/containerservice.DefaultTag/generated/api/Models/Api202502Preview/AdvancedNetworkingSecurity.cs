// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202502Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.Extensions;

    /// <summary>Security profile to enable security features on cilium-based cluster.</summary>
    public partial class AdvancedNetworkingSecurity :
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202502Preview.IAdvancedNetworkingSecurity,
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202502Preview.IAdvancedNetworkingSecurityInternal
    {

        /// <summary>Backing field for <see cref="AdvancedNetworkPolicy" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.AdvancedNetworkPolicies? _advancedNetworkPolicy;

        /// <summary>
        /// This allows users to configure Layer 7 network policies (FQDN, HTTP, Kafka). Policies themselves must be configured via
        /// the Cilium Network Policy resources, see https://docs.cilium.io/en/latest/security/policy/index.html. This can be enabled
        /// only on cilium-based clusters. If not specified, the default value is L7 if enabled is set to true otherwise it defaults
        /// to None
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.AdvancedNetworkPolicies? AdvancedNetworkPolicy { get => this._advancedNetworkPolicy; set => this._advancedNetworkPolicy = value; }

        /// <summary>Backing field for <see cref="Enabled" /> property.</summary>
        private bool? _enabled;

        /// <summary>
        /// Configure Advanced Networking Security features on Cilium clusters. When the flag is set to true, FQDN policies will be
        /// enabled by default unless advancedNetworkPolicies is explicitly set to a different value. If not specified, the default
        /// is false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.PropertyOrigin.Owned)]
        public bool? Enabled { get => this._enabled; set => this._enabled = value; }

        /// <summary>Creates an new <see cref="AdvancedNetworkingSecurity" /> instance.</summary>
        public AdvancedNetworkingSecurity()
        {

        }
    }
    /// Security profile to enable security features on cilium-based cluster.
    public partial interface IAdvancedNetworkingSecurity :
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.IJsonSerializable
    {
        /// <summary>
        /// This allows users to configure Layer 7 network policies (FQDN, HTTP, Kafka). Policies themselves must be configured via
        /// the Cilium Network Policy resources, see https://docs.cilium.io/en/latest/security/policy/index.html. This can be enabled
        /// only on cilium-based clusters. If not specified, the default value is L7 if enabled is set to true otherwise it defaults
        /// to None
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This allows users to configure Layer 7 network policies (FQDN, HTTP, Kafka). Policies themselves must be configured via the Cilium Network Policy resources, see https://docs.cilium.io/en/latest/security/policy/index.html. This can be enabled only on cilium-based clusters. If not specified, the default value is L7 if enabled is set to true otherwise it defaults to None",
        SerializedName = @"advancedNetworkPolicies",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.AdvancedNetworkPolicies) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.AdvancedNetworkPolicies? AdvancedNetworkPolicy { get; set; }
        /// <summary>
        /// Configure Advanced Networking Security features on Cilium clusters. When the flag is set to true, FQDN policies will be
        /// enabled by default unless advancedNetworkPolicies is explicitly set to a different value. If not specified, the default
        /// is false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Configure Advanced Networking Security features on Cilium clusters. When the flag is set to true, FQDN policies will be enabled by default unless advancedNetworkPolicies is explicitly set to a different value. If not specified, the default is false.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Enabled { get; set; }

    }
    /// Security profile to enable security features on cilium-based cluster.
    internal partial interface IAdvancedNetworkingSecurityInternal

    {
        /// <summary>
        /// This allows users to configure Layer 7 network policies (FQDN, HTTP, Kafka). Policies themselves must be configured via
        /// the Cilium Network Policy resources, see https://docs.cilium.io/en/latest/security/policy/index.html. This can be enabled
        /// only on cilium-based clusters. If not specified, the default value is L7 if enabled is set to true otherwise it defaults
        /// to None
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.AdvancedNetworkPolicies? AdvancedNetworkPolicy { get; set; }
        /// <summary>
        /// Configure Advanced Networking Security features on Cilium clusters. When the flag is set to true, FQDN policies will be
        /// enabled by default unless advancedNetworkPolicies is explicitly set to a different value. If not specified, the default
        /// is false.
        /// </summary>
        bool? Enabled { get; set; }

    }
}