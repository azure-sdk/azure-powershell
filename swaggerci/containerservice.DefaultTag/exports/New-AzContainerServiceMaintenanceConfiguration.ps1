
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Creates or updates a maintenance configuration in the specified managed cluster.
.Description
Creates or updates a maintenance configuration in the specified managed cluster.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202401.IMaintenanceConfiguration
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

MAINTENANCEWINDOWNOTALLOWEDDATE <IDateSpan[]>: Date ranges on which upgrade is not allowed. 'utcOffset' applies to this field. For example, with 'utcOffset: +02:00' and 'dateSpan' being '2022-12-23' to '2023-01-03', maintenance will be blocked from '2022-12-22 22:00' to '2023-01-03 22:00' in UTC time.
  End <DateTime>: The end date of the date span.
  Start <DateTime>: The start date of the date span.

NOTALLOWEDTIME <ITimeSpan[]>: Time slots on which upgrade is not allowed.
  [End <DateTime?>]: The end of a time span
  [Start <DateTime?>]: The start of a time span

TIMEINWEEK <ITimeInWeek[]>: If two array entries specify the same day of the week, the applied configuration is the union of times in both entries.
  [Day <WeekDay?>]: The day of the week.
  [HourSlot <Int32[]>]: Each integer hour represents a time range beginning at 0m after the hour ending at the next hour (non-inclusive). 0 corresponds to 00:00 UTC, 23 corresponds to 23:00 UTC. Specifying [0, 1] means the 00:00 - 02:00 UTC time range.
.Link
https://learn.microsoft.com/powershell/module/az.containerservice/new-azcontainerservicemaintenanceconfiguration
#>
function New-AzContainerServiceMaintenanceConfiguration {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202401.IMaintenanceConfiguration])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Path')]
    [System.String]
    # The name of the maintenance configuration.
    ${ConfigName},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Path')]
    [System.String]
    # The name of the managed cluster resource.
    ${ResourceName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    # The value must be an UUID.
    ${SubscriptionId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.Int32]
    # The date of the month.
    ${AbsoluteMonthlyDayOfMonth},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.Int32]
    # Specifies the number of months between each set of occurrences.
    ${AbsoluteMonthlyIntervalMonth},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.Int32]
    # Specifies the number of days between each set of occurrences.
    ${DailyIntervalDay},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.Int32]
    # Length of maintenance window range from 4 to 24 hours.
    ${MaintenanceWindowDurationHour},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202401.IDateSpan[]]
    # Date ranges on which upgrade is not allowed.
    # 'utcOffset' applies to this field.
    # For example, with 'utcOffset: +02:00' and 'dateSpan' being '2022-12-23' to '2023-01-03', maintenance will be blocked from '2022-12-22 22:00' to '2023-01-03 22:00' in UTC time.
    # To construct, see NOTES section for MAINTENANCEWINDOWNOTALLOWEDDATE properties and create a hash table.
    ${MaintenanceWindowNotAllowedDate},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.DateTime]
    # The date the maintenance window activates.
    # If the current date is before this date, the maintenance window is inactive and will not be used for upgrades.
    # If not specified, the maintenance window will be active right away.
    ${MaintenanceWindowStartDate},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.String]
    # The start time of the maintenance window.
    # Accepted values are from '00:00' to '23:59'.
    # 'utcOffset' applies to this field.
    # For example: '02:00' with 'utcOffset: +02:00' means UTC time '00:00'.
    ${MaintenanceWindowStartTime},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.String]
    # The UTC offset in format +/-HH:mm.
    # For example, '+05:30' for IST and '-07:00' for PST.
    # If not specified, the default is '+00:00'.
    ${MaintenanceWindowUtcOffset},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202401.ITimeSpan[]]
    # Time slots on which upgrade is not allowed.
    # To construct, see NOTES section for NOTALLOWEDTIME properties and create a hash table.
    ${NotAllowedTime},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.WeekDay])]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.WeekDay]
    # Specifies on which day of the week the maintenance occurs.
    ${RelativeMonthlyDayOfWeek},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.Int32]
    # Specifies the number of months between each set of occurrences.
    ${RelativeMonthlyIntervalMonth},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.Type])]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.Type]
    # Specifies on which week of the month the dayOfWeek applies.
    ${RelativeMonthlyWeekIndex},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Models.Api202401.ITimeInWeek[]]
    # If two array entries specify the same day of the week, the applied configuration is the union of times in both entries.
    # To construct, see NOTES section for TIMEINWEEK properties and create a hash table.
    ${TimeInWeek},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.WeekDay])]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Support.WeekDay]
    # Specifies on which day of the week the maintenance occurs.
    ${WeeklyDayOfWeek},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Body')]
    [System.Int32]
    # Specifies the number of weeks between each set of occurrences.
    ${WeeklyIntervalWeek},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.ContainerService.private\New-AzContainerServiceMaintenanceConfiguration_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.ContainerService.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
