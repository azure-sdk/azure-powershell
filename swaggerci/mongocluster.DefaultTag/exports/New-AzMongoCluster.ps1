
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create or update a mongo cluster.
Update overwrites all properties for the resource.
To only modify some of the properties, use PATCH.
.Description
Create or update a mongo cluster.
Update overwrites all properties for the resource.
To only modify some of the properties, use PATCH.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Models.Api20250401Preview.IMongoCluster
.Link
https://learn.microsoft.com/powershell/module/az.mongocluster/new-azmongocluster
#>
function New-AzMongoCluster {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Models.Api20250401Preview.IMongoCluster])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Alias('MongoClusterName')]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Path')]
    [System.String]
    # The name of the mongo cluster.
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    # The value must be an UUID.
    ${SubscriptionId},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Body')]
    [System.String]
    # The geo-location where the resource lives
    ${Location},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Body')]
    [System.Security.SecureString]
    # The administrator password.
    ${AdministratorPassword},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Body')]
    [System.String]
    # The administrator user name.
    ${AdministratorUserName},

    [Parameter()]
    [AllowEmptyCollection()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Support.AuthenticationMode])]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Support.AuthenticationMode[]]
    # Allowed authentication modes for data access on the cluster.
    ${AuthConfigAllowedMode},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Body')]
    [System.String]
    # The compute tier to assign to the cluster, where each tier maps to a virtual-core and memory size.
    # Example values: 'M30', 'M40'.
    ${ComputeTier},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Support.CreateMode])]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Support.CreateMode]
    # The mode to create a mongo cluster.
    ${CreateMode},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Support.DataApiMode])]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Support.DataApiMode]
    # The mode to indicate whether the Mongo Data API is enabled for a cluster.
    ${DataApiMode},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Support.HighAvailabilityMode])]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Support.HighAvailabilityMode]
    # The target high availability mode requested for the cluster.
    ${HighAvailabilityTargetMode},

    [Parameter()]
    [AllowEmptyCollection()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Support.PreviewFeature])]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Support.PreviewFeature[]]
    # List of private endpoint connections.
    ${PreviewFeature},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Support.PublicNetworkAccess])]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Support.PublicNetworkAccess]
    # Whether or not public endpoint access is allowed for this mongo cluster.
    ${PublicNetworkAccess},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Body')]
    [System.String]
    # The location of the source cluster
    ${ReplicaParameterSourceLocation},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Body')]
    [System.String]
    # The id of the replication source cluster.
    ${ReplicaParameterSourceResourceId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Body')]
    [System.DateTime]
    # UTC point in time to restore a mongo cluster
    ${RestoreParameterPointInTimeUtc},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Body')]
    [System.String]
    # Resource ID to locate the source cluster to restore
    ${RestoreParameterSourceResourceId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Body')]
    [System.String]
    # The Mongo DB server version.
    # Defaults to the latest available version if not specified.
    ${ServerVersion},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Body')]
    [System.Int32]
    # Number of shards to provision on the cluster.
    ${ShardingShardCount},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Body')]
    [System.Int64]
    # The IOPs of the storage assigned to each server.
    # Only applicable if the type is 'PremiumSSDv2'.
    ${StorageIop},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Body')]
    [System.Int64]
    # The size of the data disk assigned to each server.
    ${StorageSizeGb},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Body')]
    [System.Int64]
    # The throughput of the storage assigned to each server.
    # Only applicable if the type is 'PremiumSSDv2'.
    ${StorageThroughput},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Support.StorageType])]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Support.StorageType]
    # The type of storage to provision the cluster servers with.
    ${StorageType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Models.Api50.ITrackedResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.MongoCluster.private\New-AzMongoCluster_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $testPlayback = $false
            $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.MongoCluster.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
